// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CTlkTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CTlkTable;

            [FieldOffset(8)]
            internal fixed long m_pTlkFile[2];

            [FieldOffset(24)]
            internal fixed long m_pTlkFileAlternate[2];

            [FieldOffset(40)]
            internal byte m_currentGender;

            [FieldOffset(48)]
            internal __IntPtr m_pTokens;

            [FieldOffset(56)]
            internal uint m_nTokens;

            [FieldOffset(64)]
            internal __IntPtr m_pTokensCustom;

            [FieldOffset(72)]
            internal uint m_nTokensCustom;

            [FieldOffset(76)]
            internal int m_bRemove;

            [FieldOffset(80)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTlkFilePath;

            [FieldOffset(96)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTlkFileAlternatePath;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTableC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTableC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable8OpenFileE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OpenFile(__IntPtr __instance, __IntPtr sFilename);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable17OpenFileAlternateERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OpenFileAlternate(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable18CloseFileAlternateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFileAlternate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable14SetCustomTokenEiRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCustomToken(__IntPtr __instance, int nCustomTokenNumber, __IntPtr sValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable17ClearCustomTokensEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearCustomTokens(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable13RemapFontNameEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* RemapFontName(__IntPtr __instance, sbyte* pFontName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable8ParseStrER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ParseStr(__IntPtr __instance, __IntPtr sText);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable15GetSimpleStringEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSimpleString(__IntPtr @return, __IntPtr __instance, uint strId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable21SetUseLargeDialogFontEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetUseLargeDialogFont(__IntPtr __instance, int bUseIt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable13FetchInternalEjR7STR_RESi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FetchInternal(__IntPtr __instance, uint strId, __IntPtr strRes, int bParse);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable9CloseFileEP8CTlkFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseFile(__IntPtr __instance, __IntPtr pTlkFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable8OpenFileERK10CExoStringP8CTlkFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OpenFile(__IntPtr __instance, __IntPtr sFileName, __IntPtr pTlkFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable18GetLanguageVersionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetLanguageVersion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CTlkTable6ReloadEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Reload(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CTlkTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CTlkTable>();

        protected bool __ownsNativeInstance;

        internal static CTlkTable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CTlkTable(native.ToPointer(), skipVTables);
        }

        internal static CTlkTable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CTlkTable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CTlkTable __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CTlkTable)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CTlkTable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CTlkTable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CTlkTable.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CTlkTable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CTlkTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CTlkTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CTlkTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CTlkTable");
        }

        public CTlkTable(global::NWN.LowLevel.CTlkTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CTlkTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CTlkTable");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CTlkTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CTlkTable.__Internal*) __Instance)->vptr_CTlkTable = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int OpenFile(global::NWN.LowLevel.CExoString sFilename)
        {
            if (ReferenceEquals(sFilename, null))
                throw new global::System.ArgumentNullException("sFilename", "Cannot be null because it is passed by value.");
            var __arg0 = sFilename.__Instance;
            var __ret = __Internal.OpenFile(__Instance, __arg0);
            return __ret;
        }

        public int OpenFileAlternate(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.OpenFileAlternate(__Instance, __arg0);
            return __ret;
        }

        public void CloseFileAlternate()
        {
            __Internal.CloseFileAlternate(__Instance);
        }

        public void SetCustomToken(int nCustomTokenNumber, global::NWN.LowLevel.CExoString sValue)
        {
            if (ReferenceEquals(sValue, null))
                throw new global::System.ArgumentNullException("sValue", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sValue.__Instance;
            __Internal.SetCustomToken(__Instance, nCustomTokenNumber, __arg1);
        }

        public void ClearCustomTokens()
        {
            __Internal.ClearCustomTokens(__Instance);
        }

        public sbyte* RemapFontName(sbyte* pFontName)
        {
            var __ret = __Internal.RemapFontName(__Instance, pFontName);
            return __ret;
        }

        public void ParseStr(global::NWN.LowLevel.CExoString sText)
        {
            if (ReferenceEquals(sText, null))
                throw new global::System.ArgumentNullException("sText", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sText.__Instance;
            __Internal.ParseStr(__Instance, __arg0);
        }

        public global::NWN.LowLevel.CExoString GetSimpleString(uint strId)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetSimpleString(new IntPtr(&__ret), __Instance, strId);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int SetUseLargeDialogFont(int bUseIt)
        {
            var __ret = __Internal.SetUseLargeDialogFont(__Instance, bUseIt);
            return __ret;
        }

        public virtual void GetTokenValue(global::NWN.LowLevel.CTlkTableToken cTlkTableToken, global::NWN.LowLevel.CExoString sToken)
        {
            var ___GetTokenValueDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr___IntPtr>(0, 2);
            if (ReferenceEquals(cTlkTableToken, null))
                throw new global::System.ArgumentNullException("cTlkTableToken", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cTlkTableToken.__Instance;
            if (ReferenceEquals(sToken, null))
                throw new global::System.ArgumentNullException("sToken", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sToken.__Instance;
            ___GetTokenValueDelegate(__Instance, __arg0, __arg1);
        }

        public int FetchInternal(uint strId, global::NWN.LowLevel.STR_RES strRes, int bParse)
        {
            if (ReferenceEquals(strRes, null))
                throw new global::System.ArgumentNullException("strRes", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = strRes.__Instance;
            var __ret = __Internal.FetchInternal(__Instance, strId, __arg1, bParse);
            return __ret;
        }

        public void CloseFile(global::NWN.LowLevel.CTlkFile pTlkFile)
        {
            var __arg0 = pTlkFile is null ? __IntPtr.Zero : pTlkFile.__Instance;
            __Internal.CloseFile(__Instance, __arg0);
        }

        public int OpenFile(global::NWN.LowLevel.CExoString sFileName, global::NWN.LowLevel.CTlkFile pTlkFile)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __arg1 = pTlkFile is null ? __IntPtr.Zero : pTlkFile.__Instance;
            var __ret = __Internal.OpenFile(__Instance, __arg0, __arg1);
            return __ret;
        }

        public global::NWN.LowLevel.CTlkFile[] MPTlkFile
        {
            get
            {
                global::NWN.LowLevel.CTlkFile[] __value = null;
                if (((__Internal*)__Instance)->m_pTlkFile != null)
                {
                    __value = new global::NWN.LowLevel.CTlkFile[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::NWN.LowLevel.CTlkFile.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pTlkFile[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pTlkFile[i] = (long) value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CTlkFile[] MPTlkFileAlternate
        {
            get
            {
                global::NWN.LowLevel.CTlkFile[] __value = null;
                if (((__Internal*)__Instance)->m_pTlkFileAlternate != null)
                {
                    __value = new global::NWN.LowLevel.CTlkFile[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::NWN.LowLevel.CTlkFile.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_pTlkFileAlternate[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_pTlkFileAlternate[i] = (long) value[i].__Instance;
                }
            }
        }

        public byte MCurrentGender
        {
            get
            {
                return ((__Internal*)__Instance)->m_currentGender;
            }

            set
            {
                ((__Internal*)__Instance)->m_currentGender = value;
            }
        }

        public global::NWN.LowLevel.CTlkTableToken MPTokens
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CTlkTableToken.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTokens, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTokens = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNTokens
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTokens;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTokens = value;
            }
        }

        public global::NWN.LowLevel.CTlkTableTokenCustom MPTokensCustom
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CTlkTableTokenCustom.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTokensCustom, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTokensCustom = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNTokensCustom
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTokensCustom;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTokensCustom = value;
            }
        }

        public int MBRemove
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRemove;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRemove = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSTlkFilePath
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sTlkFilePath));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sTlkFilePath = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSTlkFileAlternatePath
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sTlkFileAlternatePath));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sTlkFileAlternatePath = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint LanguageVersion
        {
            get
            {
                var __ret = __Internal.GetLanguageVersion(__Instance);
                return __ret;
            }
        }

        public int Reload
        {
            get
            {
                var __ret = __Internal.Reload(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CTlkTable()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CTlkTable.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void GetTokenValue(const CTlkTableToken & cTlkTableToken, CExoString & sToken)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr___IntPtr _GetTokenValueDelegateInstance;

        private static void _GetTokenValueDelegateHook(__IntPtr __instance, __IntPtr cTlkTableToken, __IntPtr sToken)
        {
            var __target = global::NWN.LowLevel.CTlkTable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CTlkTableToken.__GetOrCreateInstance(cTlkTableToken, false);
            var __result1 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sToken, false);
            __target.GetTokenValue(__result0, __result1);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _GetTokenValueDelegateInstance += _GetTokenValueDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetTokenValueDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            VTables.Methods[0] = new Delegate[5];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
