// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CVirtualMachineStack : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nStackPointer;

            [FieldOffset(4)]
            internal int m_nBasePointer;

            [FieldOffset(8)]
            internal int m_nTotalSize;

            [FieldOffset(16)]
            internal __IntPtr m_pchStackTypes;

            [FieldOffset(24)]
            internal __IntPtr m_pStackNodes;

            [FieldOffset(32)]
            internal __IntPtr m_pVMachine;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStackC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStackC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStackD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack15InitializeStackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeStack(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack23ModifyIntegerAtLocationEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ModifyIntegerAtLocation(__IntPtr __instance, int nSourceLocation, int nDelta);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack24AssignLocationToLocationEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AssignLocationToLocation(__IntPtr __instance, int nSourceLocation, int nDestLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack15AddToTopOfStackEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToTopOfStack(__IntPtr __instance, int nAuxCode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack13CopyFromStackEPS_ii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyFromStack(__IntPtr __instance, __IntPtr pStack, int nStackSizeToSave, int nBaseStackSizeToSave);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack9SaveStackEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveStack(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack9LoadStackEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadStack(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack10ClearStackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearStack(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack14GetBasePointerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBasePointer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack14SetBasePointerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBasePointer(__IntPtr __instance, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack15GetStackPointerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStackPointer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CVirtualMachineStack15SetStackPointerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetStackPointer(__IntPtr __instance, int nSize);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineStack> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineStack>();

        protected bool __ownsNativeInstance;

        internal static CVirtualMachineStack __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CVirtualMachineStack(native.ToPointer(), skipVTables);
        }

        internal static CVirtualMachineStack __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CVirtualMachineStack)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CVirtualMachineStack __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CVirtualMachineStack(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CVirtualMachineStack(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVirtualMachineStack(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CVirtualMachineStack()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineStack.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CVirtualMachineStack(global::NWN.LowLevel.CVirtualMachineStack _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineStack.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CVirtualMachineStack.__Internal*) __Instance) = *((global::NWN.LowLevel.CVirtualMachineStack.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CVirtualMachineStack __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void InitializeStack()
        {
            __Internal.InitializeStack(__Instance);
        }

        public void ModifyIntegerAtLocation(int nSourceLocation, int nDelta)
        {
            __Internal.ModifyIntegerAtLocation(__Instance, nSourceLocation, nDelta);
        }

        public void AssignLocationToLocation(int nSourceLocation, int nDestLocation)
        {
            __Internal.AssignLocationToLocation(__Instance, nSourceLocation, nDestLocation);
        }

        public void AddToTopOfStack(int nAuxCode)
        {
            __Internal.AddToTopOfStack(__Instance, nAuxCode);
        }

        public void CopyFromStack(global::NWN.LowLevel.CVirtualMachineStack pStack, int nStackSizeToSave, int nBaseStackSizeToSave)
        {
            var __arg0 = pStack is null ? __IntPtr.Zero : pStack.__Instance;
            __Internal.CopyFromStack(__Instance, __arg0, nStackSizeToSave, nBaseStackSizeToSave);
        }

        public int SaveStack(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveStack(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadStack(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadStack(__Instance, __arg0, __arg1);
            return __ret;
        }

        public void ClearStack()
        {
            __Internal.ClearStack(__Instance);
        }

        public int MNStackPointer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStackPointer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStackPointer = value;
            }
        }

        public int MNBasePointer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBasePointer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBasePointer = value;
            }
        }

        public int MNTotalSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalSize = value;
            }
        }

        public sbyte* MPchStackTypes
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pchStackTypes;
            }

            set
            {
                ((__Internal*)__Instance)->m_pchStackTypes = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.StackElement MPStackNodes
        {
            get
            {
                var __result0 = global::NWN.LowLevel.StackElement.__GetOrCreateInstance(((__Internal*)__Instance)->m_pStackNodes, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pStackNodes = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CVirtualMachine MPVMachine
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CVirtualMachine.__GetOrCreateInstance(((__Internal*)__Instance)->m_pVMachine, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pVMachine = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int BasePointer
        {
            get
            {
                var __ret = __Internal.GetBasePointer(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetBasePointer(__Instance, value);
            }
        }

        public int StackPointer
        {
            get
            {
                var __ret = __Internal.GetStackPointer(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetStackPointer(__Instance, value);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
