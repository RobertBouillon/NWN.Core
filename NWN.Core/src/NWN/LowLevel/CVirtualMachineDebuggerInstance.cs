// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CVirtualMachineDebuggerInstance : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 456)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pVMachine;

            [FieldOffset(8)]
            internal __IntPtr m_pnInstructionPointer;

            [FieldOffset(16)]
            internal __IntPtr m_pDebugInputMessageBuffer;

            [FieldOffset(24)]
            internal int m_nDebugInputMessageSize;

            [FieldOffset(32)]
            internal __IntPtr m_pDebugOutputMessageBuffer;

            [FieldOffset(40)]
            internal int m_nDebugOutputMessageSize;

            [FieldOffset(44)]
            internal int m_nDebugSourceFileNames;

            [FieldOffset(48)]
            internal __IntPtr m_pDebugSourceFileNames;

            [FieldOffset(56)]
            internal int m_nDebugStructureDefines;

            [FieldOffset(64)]
            internal __IntPtr m_pDebugStructureNames;

            [FieldOffset(72)]
            internal __IntPtr m_pDebugStructureFields;

            [FieldOffset(80)]
            internal __IntPtr m_ppDebugStructureFieldNames;

            [FieldOffset(88)]
            internal __IntPtr m_ppDebugStructureTypeNames;

            [FieldOffset(96)]
            internal int m_nDebugFunctionNames;

            [FieldOffset(104)]
            internal __IntPtr m_pDebugFunctionNames;

            [FieldOffset(112)]
            internal __IntPtr m_pDebugFunctionBinaryStart;

            [FieldOffset(120)]
            internal __IntPtr m_pDebugFunctionBinaryEnd;

            [FieldOffset(128)]
            internal __IntPtr m_pDebugFunctionParameters;

            [FieldOffset(136)]
            internal __IntPtr m_pDebugFunctionReturnTypeNames;

            [FieldOffset(144)]
            internal __IntPtr m_ppDebugFunctionParamTypeNames;

            [FieldOffset(152)]
            internal int m_nDebugVariables;

            [FieldOffset(160)]
            internal __IntPtr m_pDebugVariableBinaryStart;

            [FieldOffset(168)]
            internal __IntPtr m_pDebugVariableBinaryEnd;

            [FieldOffset(176)]
            internal __IntPtr m_pDebugVariableStackLocation;

            [FieldOffset(184)]
            internal __IntPtr m_pDebugVariableTypeNames;

            [FieldOffset(192)]
            internal __IntPtr m_pDebugVariableNames;

            [FieldOffset(200)]
            internal int m_nDebugLineNumbers;

            [FieldOffset(208)]
            internal __IntPtr m_pDebugLineNumberFileName;

            [FieldOffset(216)]
            internal __IntPtr m_pDebugLineNumberCodeLine;

            [FieldOffset(224)]
            internal __IntPtr m_pDebugLineNumberBinaryStart;

            [FieldOffset(232)]
            internal __IntPtr m_pDebugLineNumberBinaryEnd;

            [FieldOffset(240)]
            internal int m_nDebugWatchViewArraySize;

            [FieldOffset(248)]
            internal __IntPtr m_pDebugWatchViewEmpty;

            [FieldOffset(256)]
            internal __IntPtr m_pDebugWatchViewTouched;

            [FieldOffset(264)]
            internal __IntPtr m_pDebugWatchViewExpanded;

            [FieldOffset(272)]
            internal __IntPtr m_pDebugWatchViewStackLocations;

            [FieldOffset(280)]
            internal __IntPtr m_pDebugWatchViewVariableNames;

            [FieldOffset(288)]
            internal __IntPtr m_pDebugWatchViewTypeNames;

            [FieldOffset(296)]
            internal __IntPtr m_pDebugWatchViewLineNumbers;

            [FieldOffset(304)]
            internal __IntPtr m_pDebugWatchViewVariableValues;

            [FieldOffset(312)]
            internal global::NWN.LowLevel.CVirtualMachineDebugLoader.__Internal m_pDebugLoader;

            [FieldOffset(376)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCurrentSourceFileName;

            [FieldOffset(392)]
            internal global::NWN.LowLevel.CScriptSourceFile.__Internal m_pCurrentSourceScriptFile;

            [FieldOffset(448)]
            internal int m_nActiveCallStackEntry;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstanceC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstanceC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstanceD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance16ShutDownDebuggerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutDownDebugger(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance40GenerateLineNumberFromInstructionPointerEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateLineNumberFromInstructionPointer(__IntPtr __instance, int nIP, int bExactCheck);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance20ReadIntegerFromInputEPiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadIntegerFromInput(__IntPtr __instance, int* pnSize, int* pnInteger);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance19ReadStringFromInputEPiP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadStringFromInput(__IntPtr __instance, int* pnSize, __IntPtr psString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance22ParseAndExecuteMessageEPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseAndExecuteMessage(__IntPtr __instance, int* nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance17LoadDebugInfoLineEPhjjPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* LoadDebugInfoLine(__IntPtr __instance, byte* pResourceData, uint nResourceSize, uint nOffsetStart, uint* pnOffsetEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance13LoadDebugInfoEP26CVirtualMachineDebugLoader", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadDebugInfo(__IntPtr __instance, __IntPtr pDebugLoader);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance14LoadScriptLineEPhjjPji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* LoadScriptLine(__IntPtr __instance, byte* pResourceData, uint nResourceSize, uint nOffsetStart, uint* pnOffsetEnd, int bIncludeReturns);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance40GenerateFunctionIDFromInstructionPointerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateFunctionIDFromInstructionPointer(__IntPtr __instance, int nIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance16GenerateTypeSizeEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateTypeSize(__IntPtr __instance, __IntPtr pNDBString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance37GenerateStackSizeAtInstructionPointerEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateStackSizeAtInstructionPointer(__IntPtr __instance, int nFunctionID, int nIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance41GenerateDebugVariableLocationForParameterEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateDebugVariableLocationForParameter(__IntPtr __instance, int nFunctionID, int nParameter);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance20GetNextDebugVariableEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNextDebugVariable(__IntPtr __instance, int nFunctionID, int nIP, int nStackLocationToExceed);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance16GenerateTypeNameEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateTypeName(__IntPtr @return, __IntPtr __instance, __IntPtr pNDBString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance34GenerateTypeValueFromStackLocationEiP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateTypeValueFromStackLocation(__IntPtr @return, __IntPtr __instance, int nStackLocation, __IntPtr pTypeString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance30GenerateCallStackParameterViewEiP10CExoStringS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateCallStackParameterView(__IntPtr @return, __IntPtr __instance, int nStackLocation, __IntPtr sVariableName, __IntPtr sTypeName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance21GenerateCallStackViewEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateCallStackView(__IntPtr @return, __IntPtr __instance, int nFunctionID, int nInstructionPointer, int nStackPointer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance23GenerateWatchWindowViewEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateWatchWindowView(__IntPtr __instance, int nFunctionID, int nInstructionPointer, int nStackPointer, int nStackSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance26ToggleWatchWindowExpansionE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ToggleWatchWindowExpansion(__IntPtr __instance, __IntPtr sLineNumber);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance18DebuggerSingleStepEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DebuggerSingleStep(__IntPtr __instance, int bStepOver);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance18FindWatchViewEntryEP10CExoStringS1_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindWatchViewEntry(__IntPtr __instance, __IntPtr psVariableName, __IntPtr psTypeName, int nStackLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance20SendWatchWindowEntryEP10CExoStringS1_S1_S1_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendWatchWindowEntry(__IntPtr __instance, __IntPtr psLineNumber, __IntPtr psVariableName, __IntPtr psVariableValue, __IntPtr psTypeName, int nStackLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance29SendWatchWindowUpdateCommandsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendWatchWindowUpdateCommands(__IntPtr __instance, int nActiveCallStackEntry);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance33SendCallStackWindowUpdateCommandsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendCallStackWindowUpdateCommands(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance28SendCodeWindowUpdateCommandsE10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendCodeWindowUpdateCommands(__IntPtr __instance, __IntPtr sDebugFileName, int nCodeLine);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance21SendLabelsAndKeywordsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendLabelsAndKeywords(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance30DebuggerDisplayCurrentLocationEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DebuggerDisplayCurrentLocation(__IntPtr __instance, int nActiveCallStackEntry, int bInternalDebug);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance13SpawnDebuggerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SpawnDebugger(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance16DebuggerMainLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DebuggerMainLoop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN31CVirtualMachineDebuggerInstance23FindEmptyWatchViewEntryEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindEmptyWatchViewEntry(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineDebuggerInstance> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineDebuggerInstance>();

        protected bool __ownsNativeInstance;

        internal static CVirtualMachineDebuggerInstance __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CVirtualMachineDebuggerInstance(native.ToPointer(), skipVTables);
        }

        internal static CVirtualMachineDebuggerInstance __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CVirtualMachineDebuggerInstance)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CVirtualMachineDebuggerInstance __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CVirtualMachineDebuggerInstance(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CVirtualMachineDebuggerInstance.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CVirtualMachineDebuggerInstance(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVirtualMachineDebuggerInstance(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CVirtualMachineDebuggerInstance()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineDebuggerInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CVirtualMachineDebuggerInstance(global::NWN.LowLevel.CVirtualMachineDebuggerInstance _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineDebuggerInstance.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CVirtualMachineDebuggerInstance __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ShutDownDebugger()
        {
            __Internal.ShutDownDebugger(__Instance);
        }

        public int GenerateLineNumberFromInstructionPointer(int nIP, int bExactCheck)
        {
            var __ret = __Internal.GenerateLineNumberFromInstructionPointer(__Instance, nIP, bExactCheck);
            return __ret;
        }

        public int ReadIntegerFromInput(ref int pnSize, ref int pnInteger)
        {
            fixed (int* __pnSize0 = &pnSize)
            {
                var __arg0 = __pnSize0;
                fixed (int* __pnInteger1 = &pnInteger)
                {
                    var __arg1 = __pnInteger1;
                    var __ret = __Internal.ReadIntegerFromInput(__Instance, __arg0, __arg1);
                    return __ret;
                }
            }
        }

        public int ReadStringFromInput(ref int pnSize, global::NWN.LowLevel.CExoString psString)
        {
            fixed (int* __pnSize0 = &pnSize)
            {
                var __arg0 = __pnSize0;
                var __arg1 = psString is null ? __IntPtr.Zero : psString.__Instance;
                var __ret = __Internal.ReadStringFromInput(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public int ParseAndExecuteMessage(ref int nSize)
        {
            fixed (int* __nSize0 = &nSize)
            {
                var __arg0 = __nSize0;
                var __ret = __Internal.ParseAndExecuteMessage(__Instance, __arg0);
                return __ret;
            }
        }

        public sbyte* LoadDebugInfoLine(byte* pResourceData, uint nResourceSize, uint nOffsetStart, ref uint pnOffsetEnd)
        {
            fixed (uint* __pnOffsetEnd3 = &pnOffsetEnd)
            {
                var __arg3 = __pnOffsetEnd3;
                var __ret = __Internal.LoadDebugInfoLine(__Instance, pResourceData, nResourceSize, nOffsetStart, __arg3);
                return __ret;
            }
        }

        public int LoadDebugInfo(global::NWN.LowLevel.CVirtualMachineDebugLoader pDebugLoader)
        {
            var __arg0 = pDebugLoader is null ? __IntPtr.Zero : pDebugLoader.__Instance;
            var __ret = __Internal.LoadDebugInfo(__Instance, __arg0);
            return __ret;
        }

        public sbyte* LoadScriptLine(byte* pResourceData, uint nResourceSize, uint nOffsetStart, ref uint pnOffsetEnd, int bIncludeReturns)
        {
            fixed (uint* __pnOffsetEnd3 = &pnOffsetEnd)
            {
                var __arg3 = __pnOffsetEnd3;
                var __ret = __Internal.LoadScriptLine(__Instance, pResourceData, nResourceSize, nOffsetStart, __arg3, bIncludeReturns);
                return __ret;
            }
        }

        public int GenerateFunctionIDFromInstructionPointer(int nIP)
        {
            var __ret = __Internal.GenerateFunctionIDFromInstructionPointer(__Instance, nIP);
            return __ret;
        }

        public int GenerateTypeSize(global::NWN.LowLevel.CExoString pNDBString)
        {
            var __arg0 = pNDBString is null ? __IntPtr.Zero : pNDBString.__Instance;
            var __ret = __Internal.GenerateTypeSize(__Instance, __arg0);
            return __ret;
        }

        public int GenerateStackSizeAtInstructionPointer(int nFunctionID, int nIP)
        {
            var __ret = __Internal.GenerateStackSizeAtInstructionPointer(__Instance, nFunctionID, nIP);
            return __ret;
        }

        public int GenerateDebugVariableLocationForParameter(int nFunctionID, int nParameter)
        {
            var __ret = __Internal.GenerateDebugVariableLocationForParameter(__Instance, nFunctionID, nParameter);
            return __ret;
        }

        public int GetNextDebugVariable(int nFunctionID, int nIP, int nStackLocationToExceed)
        {
            var __ret = __Internal.GetNextDebugVariable(__Instance, nFunctionID, nIP, nStackLocationToExceed);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString GenerateTypeName(global::NWN.LowLevel.CExoString pNDBString)
        {
            var __arg0 = pNDBString is null ? __IntPtr.Zero : pNDBString.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GenerateTypeName(new IntPtr(&__ret), __Instance, __arg0);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString GenerateTypeValueFromStackLocation(int nStackLocation, global::NWN.LowLevel.CExoString pTypeString)
        {
            var __arg1 = pTypeString is null ? __IntPtr.Zero : pTypeString.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GenerateTypeValueFromStackLocation(new IntPtr(&__ret), __Instance, nStackLocation, __arg1);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString GenerateCallStackParameterView(int nStackLocation, global::NWN.LowLevel.CExoString sVariableName, global::NWN.LowLevel.CExoString sTypeName)
        {
            var __arg1 = sVariableName is null ? __IntPtr.Zero : sVariableName.__Instance;
            var __arg2 = sTypeName is null ? __IntPtr.Zero : sTypeName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GenerateCallStackParameterView(new IntPtr(&__ret), __Instance, nStackLocation, __arg1, __arg2);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString GenerateCallStackView(int nFunctionID, int nInstructionPointer, int nStackPointer)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GenerateCallStackView(new IntPtr(&__ret), __Instance, nFunctionID, nInstructionPointer, nStackPointer);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void GenerateWatchWindowView(int nFunctionID, int nInstructionPointer, int nStackPointer, int nStackSize)
        {
            __Internal.GenerateWatchWindowView(__Instance, nFunctionID, nInstructionPointer, nStackPointer, nStackSize);
        }

        public void ToggleWatchWindowExpansion(global::NWN.LowLevel.CExoString sLineNumber)
        {
            if (ReferenceEquals(sLineNumber, null))
                throw new global::System.ArgumentNullException("sLineNumber", "Cannot be null because it is passed by value.");
            var __arg0 = sLineNumber.__Instance;
            __Internal.ToggleWatchWindowExpansion(__Instance, __arg0);
        }

        public int DebuggerSingleStep(int bStepOver)
        {
            var __ret = __Internal.DebuggerSingleStep(__Instance, bStepOver);
            return __ret;
        }

        public int FindWatchViewEntry(global::NWN.LowLevel.CExoString psVariableName, global::NWN.LowLevel.CExoString psTypeName, int nStackLocation)
        {
            var __arg0 = psVariableName is null ? __IntPtr.Zero : psVariableName.__Instance;
            var __arg1 = psTypeName is null ? __IntPtr.Zero : psTypeName.__Instance;
            var __ret = __Internal.FindWatchViewEntry(__Instance, __arg0, __arg1, nStackLocation);
            return __ret;
        }

        public void SendWatchWindowEntry(global::NWN.LowLevel.CExoString psLineNumber, global::NWN.LowLevel.CExoString psVariableName, global::NWN.LowLevel.CExoString psVariableValue, global::NWN.LowLevel.CExoString psTypeName, int nStackLocation)
        {
            var __arg0 = psLineNumber is null ? __IntPtr.Zero : psLineNumber.__Instance;
            var __arg1 = psVariableName is null ? __IntPtr.Zero : psVariableName.__Instance;
            var __arg2 = psVariableValue is null ? __IntPtr.Zero : psVariableValue.__Instance;
            var __arg3 = psTypeName is null ? __IntPtr.Zero : psTypeName.__Instance;
            __Internal.SendWatchWindowEntry(__Instance, __arg0, __arg1, __arg2, __arg3, nStackLocation);
        }

        public void SendWatchWindowUpdateCommands(int nActiveCallStackEntry)
        {
            __Internal.SendWatchWindowUpdateCommands(__Instance, nActiveCallStackEntry);
        }

        public void SendCallStackWindowUpdateCommands()
        {
            __Internal.SendCallStackWindowUpdateCommands(__Instance);
        }

        public void SendCodeWindowUpdateCommands(global::NWN.LowLevel.CExoString sDebugFileName, int nCodeLine)
        {
            if (ReferenceEquals(sDebugFileName, null))
                throw new global::System.ArgumentNullException("sDebugFileName", "Cannot be null because it is passed by value.");
            var __arg0 = sDebugFileName.__Instance;
            __Internal.SendCodeWindowUpdateCommands(__Instance, __arg0, nCodeLine);
        }

        public void SendLabelsAndKeywords()
        {
            __Internal.SendLabelsAndKeywords(__Instance);
        }

        public int DebuggerDisplayCurrentLocation(int nActiveCallStackEntry, int bInternalDebug)
        {
            var __ret = __Internal.DebuggerDisplayCurrentLocation(__Instance, nActiveCallStackEntry, bInternalDebug);
            return __ret;
        }

        public global::NWN.LowLevel.CVirtualMachine MPVMachine
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CVirtualMachine.__GetOrCreateInstance(((__Internal*)__Instance)->m_pVMachine, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pVMachine = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPnInstructionPointer
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnInstructionPointer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInstructionPointer = (__IntPtr) value;
            }
        }

        public sbyte* MPDebugInputMessageBuffer
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pDebugInputMessageBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugInputMessageBuffer = (__IntPtr) value;
            }
        }

        public int MNDebugInputMessageSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugInputMessageSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugInputMessageSize = value;
            }
        }

        public sbyte* MPDebugOutputMessageBuffer
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pDebugOutputMessageBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugOutputMessageBuffer = (__IntPtr) value;
            }
        }

        public int MNDebugOutputMessageSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugOutputMessageSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugOutputMessageSize = value;
            }
        }

        public int MNDebugSourceFileNames
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugSourceFileNames;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugSourceFileNames = value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugSourceFileNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugSourceFileNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugSourceFileNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNDebugStructureDefines
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugStructureDefines;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugStructureDefines = value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugStructureNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugStructureNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugStructureNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPDebugStructureFields
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugStructureFields;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugStructureFields = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPpDebugStructureFieldNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_ppDebugStructureFieldNames, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_ppDebugStructureFieldNames = new __IntPtr(&__value);
            }
        }

        public global::NWN.LowLevel.CExoString MPpDebugStructureTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_ppDebugStructureTypeNames, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_ppDebugStructureTypeNames = new __IntPtr(&__value);
            }
        }

        public int MNDebugFunctionNames
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugFunctionNames;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugFunctionNames = value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugFunctionNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugFunctionNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugFunctionNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPDebugFunctionBinaryStart
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugFunctionBinaryStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugFunctionBinaryStart = (__IntPtr) value;
            }
        }

        public int* MPDebugFunctionBinaryEnd
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugFunctionBinaryEnd;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugFunctionBinaryEnd = (__IntPtr) value;
            }
        }

        public int* MPDebugFunctionParameters
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugFunctionParameters;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugFunctionParameters = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugFunctionReturnTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugFunctionReturnTypeNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugFunctionReturnTypeNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPpDebugFunctionParamTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_ppDebugFunctionParamTypeNames, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_ppDebugFunctionParamTypeNames = new __IntPtr(&__value);
            }
        }

        public int MNDebugVariables
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugVariables;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugVariables = value;
            }
        }

        public int* MPDebugVariableBinaryStart
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugVariableBinaryStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugVariableBinaryStart = (__IntPtr) value;
            }
        }

        public int* MPDebugVariableBinaryEnd
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugVariableBinaryEnd;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugVariableBinaryEnd = (__IntPtr) value;
            }
        }

        public int* MPDebugVariableStackLocation
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugVariableStackLocation;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugVariableStackLocation = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugVariableTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugVariableTypeNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugVariableTypeNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugVariableNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugVariableNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugVariableNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNDebugLineNumbers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugLineNumbers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugLineNumbers = value;
            }
        }

        public int* MPDebugLineNumberFileName
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugLineNumberFileName;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugLineNumberFileName = (__IntPtr) value;
            }
        }

        public int* MPDebugLineNumberCodeLine
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugLineNumberCodeLine;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugLineNumberCodeLine = (__IntPtr) value;
            }
        }

        public int* MPDebugLineNumberBinaryStart
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugLineNumberBinaryStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugLineNumberBinaryStart = (__IntPtr) value;
            }
        }

        public int* MPDebugLineNumberBinaryEnd
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugLineNumberBinaryEnd;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugLineNumberBinaryEnd = (__IntPtr) value;
            }
        }

        public int MNDebugWatchViewArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugWatchViewArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugWatchViewArraySize = value;
            }
        }

        public int* MPDebugWatchViewEmpty
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugWatchViewEmpty;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewEmpty = (__IntPtr) value;
            }
        }

        public int* MPDebugWatchViewTouched
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugWatchViewTouched;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewTouched = (__IntPtr) value;
            }
        }

        public int* MPDebugWatchViewExpanded
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugWatchViewExpanded;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewExpanded = (__IntPtr) value;
            }
        }

        public int* MPDebugWatchViewStackLocations
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pDebugWatchViewStackLocations;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewStackLocations = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugWatchViewVariableNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugWatchViewVariableNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewVariableNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugWatchViewTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugWatchViewTypeNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewTypeNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugWatchViewLineNumbers
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugWatchViewLineNumbers, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewLineNumbers = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPDebugWatchViewVariableValues
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pDebugWatchViewVariableValues, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDebugWatchViewVariableValues = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CVirtualMachineDebugLoader MPDebugLoader
        {
            get
            {
                return global::NWN.LowLevel.CVirtualMachineDebugLoader.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pDebugLoader));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pDebugLoader = *(global::NWN.LowLevel.CVirtualMachineDebugLoader.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCurrentSourceFileName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCurrentSourceFileName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCurrentSourceFileName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptSourceFile MPCurrentSourceScriptFile
        {
            get
            {
                return global::NWN.LowLevel.CScriptSourceFile.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pCurrentSourceScriptFile));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pCurrentSourceScriptFile = *(global::NWN.LowLevel.CScriptSourceFile.__Internal*) value.__Instance;
            }
        }

        public int MNActiveCallStackEntry
        {
            get
            {
                return ((__Internal*)__Instance)->m_nActiveCallStackEntry;
            }

            set
            {
                ((__Internal*)__Instance)->m_nActiveCallStackEntry = value;
            }
        }

        public int SpawnDebugger
        {
            get
            {
                var __ret = __Internal.SpawnDebugger(__Instance);
                return __ret;
            }
        }

        public int DebuggerMainLoop
        {
            get
            {
                var __ret = __Internal.DebuggerMainLoop(__Instance);
                return __ret;
            }
        }

        public int FindEmptyWatchViewEntry
        {
            get
            {
                var __ret = __Internal.FindEmptyWatchViewEntry(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
