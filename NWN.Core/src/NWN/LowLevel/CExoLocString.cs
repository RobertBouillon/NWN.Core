// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoLocString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pExoLocStringInternal;

            [FieldOffset(8)]
            internal uint m_dwStringRef;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocStringC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocStringC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr cLocString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocStringD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocString9AddStringEi10CExoStringh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddString(__IntPtr __instance, int nID, __IntPtr sString, byte bGender);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocString14ClearLocStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearLocString(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString9GetStringEjPiP10CExoStringPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetString(__IntPtr __instance, uint nPos, int* pID, __IntPtr pString, byte* pGender);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString9GetStringEiP10CExoStringhb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetString(__IntPtr __instance, int nID, __IntPtr pString, byte bGender, bool boSearch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString12GetStringLocEiP10CExoStringh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStringLoc(__IntPtr __instance, int nID, __IntPtr pString, byte bGender);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString15GetStringLengthEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStringLength(__IntPtr __instance, uint nPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString17GetStringInternalEiP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStringInternal(__IntPtr __instance, int nID, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocString12RemoveStringEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveString(__IntPtr __instance, int nID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoLocString12RemoveStringEih", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveString(__IntPtr __instance, int nID, byte bGender);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoLocString14GetStringCountEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetStringCount(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoLocString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoLocString>();

        protected bool __ownsNativeInstance;

        internal static CExoLocString __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoLocString(native.ToPointer(), skipVTables);
        }

        internal static CExoLocString __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoLocString)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoLocString __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoLocString(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoLocString.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoLocString(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoLocString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoLocString()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoLocString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoLocString(global::NWN.LowLevel.CExoLocString cLocString)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoLocString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cLocString, null))
                throw new global::System.ArgumentNullException("cLocString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cLocString.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoLocString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AddString(int nID, global::NWN.LowLevel.CExoString sString, byte bGender)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg1 = sString.__Instance;
            var __ret = __Internal.AddString(__Instance, nID, __arg1, bGender);
            return __ret;
        }

        public void ClearLocString()
        {
            __Internal.ClearLocString(__Instance);
        }

        public int GetString(uint nPos, ref int pID, global::NWN.LowLevel.CExoString pString, byte* pGender)
        {
            fixed (int* __pID1 = &pID)
            {
                var __arg1 = __pID1;
                var __arg2 = pString is null ? __IntPtr.Zero : pString.__Instance;
                var __ret = __Internal.GetString(__Instance, nPos, __arg1, __arg2, pGender);
                return __ret;
            }
        }

        public int GetString(int nID, global::NWN.LowLevel.CExoString pString, byte bGender, bool boSearch)
        {
            var __arg1 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetString(__Instance, nID, __arg1, bGender, boSearch);
            return __ret;
        }

        public int GetStringLoc(int nID, global::NWN.LowLevel.CExoString pString, byte bGender)
        {
            var __arg1 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetStringLoc(__Instance, nID, __arg1, bGender);
            return __ret;
        }

        public int GetStringLength(uint nPos)
        {
            var __ret = __Internal.GetStringLength(__Instance, nPos);
            return __ret;
        }

        public int GetStringInternal(int nID, global::NWN.LowLevel.CExoString pString)
        {
            var __arg1 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetStringInternal(__Instance, nID, __arg1);
            return __ret;
        }

        public void RemoveString(int nID)
        {
            __Internal.RemoveString(__Instance, nID);
        }

        public void RemoveString(int nID, byte bGender)
        {
            __Internal.RemoveString(__Instance, nID, bGender);
        }

        public global::NWN.LowLevel.CExoLocStringInternal MPExoLocStringInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoLocStringInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pExoLocStringInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pExoLocStringInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MDwStringRef
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwStringRef;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwStringRef = value;
            }
        }

        public uint StringCount
        {
            get
            {
                var __ret = __Internal.GetStringCount(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
