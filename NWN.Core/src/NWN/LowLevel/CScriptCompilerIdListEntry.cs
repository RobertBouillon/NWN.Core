// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CScriptCompilerIdListEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 192)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal m_psIdentifier;

            [FieldOffset(16)]
            internal uint m_nIdentifierLength;

            [FieldOffset(20)]
            internal uint m_nIdentifierHash;

            [FieldOffset(24)]
            internal int m_nIdentifierType;

            [FieldOffset(28)]
            internal int m_nReturnType;

            [FieldOffset(32)]
            internal int m_bImplementationInPlace;

            [FieldOffset(40)]
            internal global::NWN.LowLevel.CExoString.__Internal m_psStructureReturnName;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CExoString.__Internal m_psStringData;

            [FieldOffset(72)]
            internal int m_nIntegerData;

            [FieldOffset(76)]
            internal float m_fFloatData;

            [FieldOffset(80)]
            internal fixed float m_fVectorData[3];

            [FieldOffset(92)]
            internal int m_nIdIdentifier;

            [FieldOffset(96)]
            internal int m_nParameters;

            [FieldOffset(100)]
            internal int m_nNonOptionalParameters;

            [FieldOffset(104)]
            internal int m_nParameterSpace;

            [FieldOffset(112)]
            internal __IntPtr m_pchParameters;

            [FieldOffset(120)]
            internal __IntPtr m_psStructureParameterNames;

            [FieldOffset(128)]
            internal __IntPtr m_pbOptionalParameters;

            [FieldOffset(136)]
            internal __IntPtr m_pnOptionalParameterIntegerData;

            [FieldOffset(144)]
            internal __IntPtr m_pfOptionalParameterFloatData;

            [FieldOffset(152)]
            internal __IntPtr m_psOptionalParameterStringData;

            [FieldOffset(160)]
            internal __IntPtr m_poidOptionalParameterObjectData;

            [FieldOffset(168)]
            internal __IntPtr m_pfOptionalParameterVectorData;

            [FieldOffset(176)]
            internal int m_nBinarySourceStart;

            [FieldOffset(180)]
            internal int m_nBinarySourceFinish;

            [FieldOffset(184)]
            internal int m_nBinaryDestinationStart;

            [FieldOffset(188)]
            internal int m_nBinaryDestinationFinish;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN26CScriptCompilerIdListEntryC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN26CScriptCompilerIdListEntryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN26CScriptCompilerIdListEntryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN26CScriptCompilerIdListEntry20ExpandParameterSpaceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExpandParameterSpace(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CScriptCompilerIdListEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CScriptCompilerIdListEntry>();

        protected bool __ownsNativeInstance;

        internal static CScriptCompilerIdListEntry __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CScriptCompilerIdListEntry(native.ToPointer(), skipVTables);
        }

        internal static CScriptCompilerIdListEntry __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CScriptCompilerIdListEntry)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CScriptCompilerIdListEntry __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CScriptCompilerIdListEntry(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CScriptCompilerIdListEntry.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CScriptCompilerIdListEntry(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CScriptCompilerIdListEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CScriptCompilerIdListEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CScriptCompilerIdListEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CScriptCompilerIdListEntry(global::NWN.LowLevel.CScriptCompilerIdListEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CScriptCompilerIdListEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CScriptCompilerIdListEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ExpandParameterSpace()
        {
            var __ret = __Internal.ExpandParameterSpace(__Instance);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString MPsIdentifier
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_psIdentifier));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_psIdentifier = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNIdentifierLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierLength = value;
            }
        }

        public uint MNIdentifierHash
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierHash;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierHash = value;
            }
        }

        public int MNIdentifierType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierType = value;
            }
        }

        public int MNReturnType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReturnType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReturnType = value;
            }
        }

        public int MBImplementationInPlace
        {
            get
            {
                return ((__Internal*)__Instance)->m_bImplementationInPlace;
            }

            set
            {
                ((__Internal*)__Instance)->m_bImplementationInPlace = value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsStructureReturnName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_psStructureReturnName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_psStructureReturnName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPsStringData
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_psStringData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_psStringData = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNIntegerData
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIntegerData;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIntegerData = value;
            }
        }

        public float MFFloatData
        {
            get
            {
                return ((__Internal*)__Instance)->m_fFloatData;
            }

            set
            {
                ((__Internal*)__Instance)->m_fFloatData = value;
            }
        }

        public float[] MFVectorData
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<float>(((__Internal*)__Instance)->m_fVectorData, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_fVectorData[i] = value[i];
                }
            }
        }

        public int MNIdIdentifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdIdentifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdIdentifier = value;
            }
        }

        public int MNParameters
        {
            get
            {
                return ((__Internal*)__Instance)->m_nParameters;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParameters = value;
            }
        }

        public int MNNonOptionalParameters
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNonOptionalParameters;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNonOptionalParameters = value;
            }
        }

        public int MNParameterSpace
        {
            get
            {
                return ((__Internal*)__Instance)->m_nParameterSpace;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParameterSpace = value;
            }
        }

        public sbyte* MPchParameters
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pchParameters;
            }

            set
            {
                ((__Internal*)__Instance)->m_pchParameters = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsStructureParameterNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_psStructureParameterNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_psStructureParameterNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPbOptionalParameters
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pbOptionalParameters;
            }

            set
            {
                ((__Internal*)__Instance)->m_pbOptionalParameters = (__IntPtr) value;
            }
        }

        public int* MPnOptionalParameterIntegerData
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnOptionalParameterIntegerData;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnOptionalParameterIntegerData = (__IntPtr) value;
            }
        }

        public float* MPfOptionalParameterFloatData
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfOptionalParameterFloatData;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfOptionalParameterFloatData = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsOptionalParameterStringData
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_psOptionalParameterStringData, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_psOptionalParameterStringData = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint* MPoidOptionalParameterObjectData
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidOptionalParameterObjectData;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidOptionalParameterObjectData = (__IntPtr) value;
            }
        }

        public float* MPfOptionalParameterVectorData
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfOptionalParameterVectorData;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfOptionalParameterVectorData = (__IntPtr) value;
            }
        }

        public int MNBinarySourceStart
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBinarySourceStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBinarySourceStart = value;
            }
        }

        public int MNBinarySourceFinish
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBinarySourceFinish;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBinarySourceFinish = value;
            }
        }

        public int MNBinaryDestinationStart
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBinaryDestinationStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBinaryDestinationStart = value;
            }
        }

        public int MNBinaryDestinationFinish
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBinaryDestinationFinish;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBinaryDestinationFinish = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
