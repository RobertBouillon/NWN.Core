// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWMessage : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 104)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWMessage;

            [FieldOffset(8)]
            internal __IntPtr m_pnWriteBuffer;

            [FieldOffset(16)]
            internal uint m_nWriteBufferSize;

            [FieldOffset(20)]
            internal uint m_nWriteBufferPtr;

            [FieldOffset(24)]
            internal __IntPtr m_pnWriteFragmentsBuffer;

            [FieldOffset(32)]
            internal uint m_nWriteFragmentsBufferSize;

            [FieldOffset(36)]
            internal uint m_nWriteFragmentsBufferPtr;

            [FieldOffset(40)]
            internal uint m_nWriteFragmentsOffset;

            [FieldOffset(44)]
            internal byte m_nCurWriteBit;

            [FieldOffset(48)]
            internal int m_bInWriteMessage;

            [FieldOffset(56)]
            internal __IntPtr m_pnReadBuffer;

            [FieldOffset(64)]
            internal uint m_nReadBufferSize;

            [FieldOffset(68)]
            internal uint m_nReadBufferPtr;

            [FieldOffset(72)]
            internal __IntPtr m_pnReadFragmentsBuffer;

            [FieldOffset(80)]
            internal uint m_nReadFragmentsBufferSize;

            [FieldOffset(84)]
            internal uint m_nReadFragmentsBufferPtr;

            [FieldOffset(88)]
            internal uint m_nReadFragmentsOffset;

            [FieldOffset(92)]
            internal byte m_nCurReadBit;

            [FieldOffset(93)]
            internal byte m_nLastByteBits;

            [FieldOffset(96)]
            internal int m_bHighPriority;

            [FieldOffset(100)]
            internal uint m_dwPlayerID;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessageC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessageC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage14SetReadMessageEPhjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetReadMessage(__IntPtr __instance, byte* pMessage, uint dwSize, uint dwPlayerID, int bHighPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage16ClearReadMessageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearReadMessage(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8ReadBOOLEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadBOOL(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8ReadBYTEEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte ReadBYTE(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8ReadCHAREi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte ReadCHAR(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8ReadWORDEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort ReadWORD(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9ReadSHORTEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short ReadSHORT(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9ReadDWORDEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ReadDWORD(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage7ReadINTEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadINT(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11ReadDWORD64Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong ReadDWORD64(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9ReadINT64Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long ReadINT64(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9ReadFLOATEfi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ReadFLOAT(__IntPtr __instance, float fMultiplier, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9ReadFLOATEffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ReadFLOAT(__IntPtr __instance, float fMin, float fMax, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10ReadDOUBLEEdi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double ReadDOUBLE(__IntPtr __instance, double fMultiplier, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10ReadDOUBLEEddi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double ReadDOUBLE(__IntPtr __instance, double lfMin, double lfMax, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11ReadCResRefEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReadCResRef(__IntPtr @return, __IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage14ReadCExoStringEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReadCExoString(__IntPtr @return, __IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11ReadVOIDPtrEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ReadVOIDPtr(__IntPtr __instance, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage19MessageReadOverflowEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MessageReadOverflow(__IntPtr __instance, int bWarn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage20MessageReadUnderflowEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MessageReadUnderflow(__IntPtr __instance, int bWarn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage18CreateWriteMessageEjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateWriteMessage(__IntPtr __instance, uint nSize, uint dwPlayerID, int bHighPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9WriteBOOLEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteBOOL(__IntPtr __instance, int nBool);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9WriteBYTEEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteBYTE(__IntPtr __instance, byte nByte, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9WriteCHAREci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteCHAR(__IntPtr __instance, sbyte nChar, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9WriteWORDEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteWORD(__IntPtr __instance, ushort nWord, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10WriteSHORTEsi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteSHORT(__IntPtr __instance, short nShort, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10WriteDWORDEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteDWORD(__IntPtr __instance, uint nDword, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8WriteINTEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteINT(__IntPtr __instance, int nInteger, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage12WriteDWORD64Emi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteDWORD64(__IntPtr __instance, ulong nDword64, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10WriteINT64Eli", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteINT64(__IntPtr __instance, long nInt64, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10WriteFLOATEffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteFLOAT(__IntPtr __instance, float fFloat, float fMultiplier, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10WriteFLOATEfffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteFLOAT(__IntPtr __instance, float fFloat, float fMin, float fMax, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11WriteDOUBLEEddi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteDOUBLE(__IntPtr __instance, double fDouble, double fMultiplier, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11WriteDOUBLEEdddi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteDOUBLE(__IntPtr __instance, double lfDouble, double lfMin, double lfMax, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage12WriteCResRefE7CResRefi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteCResRef(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage15WriteCExoStringE10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteCExoString(__IntPtr __instance, __IntPtr sString, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage12WriteVOIDPtrEPvi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteVOIDPtr(__IntPtr __instance, __IntPtr pVoidPtr, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage15GetWriteMessageEPPhPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetWriteMessage(__IntPtr __instance, byte** pMessage, uint* dwSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage17ExtendWriteBufferEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExtendWriteBuffer(__IntPtr __instance, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage26ExtendWriteFragmentsBufferEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExtendWriteFragmentsBuffer(__IntPtr __instance, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8ReadBitsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long ReadBits(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage7ReadBitEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte ReadBit(__IntPtr __instance, byte nBit);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage9WriteBitsEmi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteBits(__IntPtr __instance, ulong nInVal, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage8WriteBitEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteBit(__IntPtr __instance, byte nBit);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage12ReadUnsignedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong ReadUnsigned(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage10ReadSignedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long ReadSigned(__IntPtr __instance, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage13WriteUnsignedEmi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteUnsigned(__IntPtr __instance, ulong dw64InVal, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage11WriteSignedEli", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteSigned(__IntPtr __instance, long n64InVal, int nCount);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage21MessageMoreDataToReadEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MessageMoreDataToRead(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWMessage22PeekAtWriteMessageSizeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint PeekAtWriteMessageSize(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWMessage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWMessage>();

        protected bool __ownsNativeInstance;

        internal static CNWMessage __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWMessage(native.ToPointer(), skipVTables);
        }

        internal static CNWMessage __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWMessage)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWMessage __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWMessage)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWMessage __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWMessage(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWMessage.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWMessage(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWMessage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWMessage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWMessage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWMessage");
        }

        public CNWMessage(global::NWN.LowLevel.CNWMessage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWMessage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWMessage");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWMessage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWMessage.__Internal*) __Instance)->vptr_CNWMessage = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int SetReadMessage(byte* pMessage, uint dwSize, uint dwPlayerID, int bHighPriority)
        {
            var __ret = __Internal.SetReadMessage(__Instance, pMessage, dwSize, dwPlayerID, bHighPriority);
            return __ret;
        }

        public void ClearReadMessage()
        {
            __Internal.ClearReadMessage(__Instance);
        }

        public int ReadBOOL()
        {
            var __ret = __Internal.ReadBOOL(__Instance);
            return __ret;
        }

        public byte ReadBYTE(int nCount)
        {
            var __ret = __Internal.ReadBYTE(__Instance, nCount);
            return __ret;
        }

        public sbyte ReadCHAR(int nCount)
        {
            var __ret = __Internal.ReadCHAR(__Instance, nCount);
            return __ret;
        }

        public ushort ReadWORD(int nCount)
        {
            var __ret = __Internal.ReadWORD(__Instance, nCount);
            return __ret;
        }

        public short ReadSHORT(int nCount)
        {
            var __ret = __Internal.ReadSHORT(__Instance, nCount);
            return __ret;
        }

        public uint ReadDWORD(int nCount)
        {
            var __ret = __Internal.ReadDWORD(__Instance, nCount);
            return __ret;
        }

        public int ReadINT(int nCount)
        {
            var __ret = __Internal.ReadINT(__Instance, nCount);
            return __ret;
        }

        public ulong ReadDWORD64(int nCount)
        {
            var __ret = __Internal.ReadDWORD64(__Instance, nCount);
            return __ret;
        }

        public long ReadINT64(int nCount)
        {
            var __ret = __Internal.ReadINT64(__Instance, nCount);
            return __ret;
        }

        public float ReadFLOAT(float fMultiplier, int nCount)
        {
            var __ret = __Internal.ReadFLOAT(__Instance, fMultiplier, nCount);
            return __ret;
        }

        public float ReadFLOAT(float fMin, float fMax, int nCount)
        {
            var __ret = __Internal.ReadFLOAT(__Instance, fMin, fMax, nCount);
            return __ret;
        }

        public double ReadDOUBLE(double fMultiplier, int nCount)
        {
            var __ret = __Internal.ReadDOUBLE(__Instance, fMultiplier, nCount);
            return __ret;
        }

        public double ReadDOUBLE(double lfMin, double lfMax, int nCount)
        {
            var __ret = __Internal.ReadDOUBLE(__Instance, lfMin, lfMax, nCount);
            return __ret;
        }

        public global::NWN.LowLevel.CResRef ReadCResRef(int nCount)
        {
            var __ret = new global::NWN.LowLevel.CResRef.__Internal();
            __Internal.ReadCResRef(new IntPtr(&__ret), __Instance, nCount);
            return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString ReadCExoString(int nCount)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.ReadCExoString(new IntPtr(&__ret), __Instance, nCount);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public __IntPtr ReadVOIDPtr(int nSize)
        {
            var __ret = __Internal.ReadVOIDPtr(__Instance, nSize);
            return __ret;
        }

        public int MessageReadOverflow(int bWarn)
        {
            var __ret = __Internal.MessageReadOverflow(__Instance, bWarn);
            return __ret;
        }

        public int MessageReadUnderflow(int bWarn)
        {
            var __ret = __Internal.MessageReadUnderflow(__Instance, bWarn);
            return __ret;
        }

        public void CreateWriteMessage(uint nSize, uint dwPlayerID, int bHighPriority)
        {
            __Internal.CreateWriteMessage(__Instance, nSize, dwPlayerID, bHighPriority);
        }

        public void WriteBOOL(int nBool)
        {
            __Internal.WriteBOOL(__Instance, nBool);
        }

        public void WriteBYTE(byte nByte, int nCount)
        {
            __Internal.WriteBYTE(__Instance, nByte, nCount);
        }

        public void WriteCHAR(sbyte nChar, int nCount)
        {
            __Internal.WriteCHAR(__Instance, nChar, nCount);
        }

        public void WriteWORD(ushort nWord, int nCount)
        {
            __Internal.WriteWORD(__Instance, nWord, nCount);
        }

        public void WriteSHORT(short nShort, int nCount)
        {
            __Internal.WriteSHORT(__Instance, nShort, nCount);
        }

        public void WriteDWORD(uint nDword, int nCount)
        {
            __Internal.WriteDWORD(__Instance, nDword, nCount);
        }

        public void WriteINT(int nInteger, int nCount)
        {
            __Internal.WriteINT(__Instance, nInteger, nCount);
        }

        public void WriteDWORD64(ulong nDword64, int nCount)
        {
            __Internal.WriteDWORD64(__Instance, nDword64, nCount);
        }

        public void WriteINT64(long nInt64, int nCount)
        {
            __Internal.WriteINT64(__Instance, nInt64, nCount);
        }

        public void WriteFLOAT(float fFloat, float fMultiplier, int nCount)
        {
            __Internal.WriteFLOAT(__Instance, fFloat, fMultiplier, nCount);
        }

        public void WriteFLOAT(float fFloat, float fMin, float fMax, int nCount)
        {
            __Internal.WriteFLOAT(__Instance, fFloat, fMin, fMax, nCount);
        }

        public void WriteDOUBLE(double fDouble, double fMultiplier, int nCount)
        {
            __Internal.WriteDOUBLE(__Instance, fDouble, fMultiplier, nCount);
        }

        public void WriteDOUBLE(double lfDouble, double lfMin, double lfMax, int nCount)
        {
            __Internal.WriteDOUBLE(__Instance, lfDouble, lfMin, lfMax, nCount);
        }

        public void WriteCResRef(global::NWN.LowLevel.CResRef cResRef, int nCount)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            __Internal.WriteCResRef(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, nCount);
        }

        public void WriteCExoString(global::NWN.LowLevel.CExoString sString, int nCount)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg0 = sString.__Instance;
            __Internal.WriteCExoString(__Instance, __arg0, nCount);
        }

        public void WriteVOIDPtr(__IntPtr pVoidPtr, int nSize)
        {
            __Internal.WriteVOIDPtr(__Instance, pVoidPtr, nSize);
        }

        public int GetWriteMessage(byte** pMessage, ref uint dwSize)
        {
            fixed (uint* __dwSize1 = &dwSize)
            {
                var __arg1 = __dwSize1;
                var __ret = __Internal.GetWriteMessage(__Instance, pMessage, __arg1);
                return __ret;
            }
        }

        public void ExtendWriteBuffer(uint nSize)
        {
            __Internal.ExtendWriteBuffer(__Instance, nSize);
        }

        public void ExtendWriteFragmentsBuffer(uint nSize)
        {
            __Internal.ExtendWriteFragmentsBuffer(__Instance, nSize);
        }

        public long ReadBits(int nCount)
        {
            var __ret = __Internal.ReadBits(__Instance, nCount);
            return __ret;
        }

        public byte ReadBit(byte nBit)
        {
            var __ret = __Internal.ReadBit(__Instance, nBit);
            return __ret;
        }

        public void WriteBits(ulong nInVal, int nCount)
        {
            __Internal.WriteBits(__Instance, nInVal, nCount);
        }

        public void WriteBit(byte nBit)
        {
            __Internal.WriteBit(__Instance, nBit);
        }

        public ulong ReadUnsigned(int nCount)
        {
            var __ret = __Internal.ReadUnsigned(__Instance, nCount);
            return __ret;
        }

        public long ReadSigned(int nCount)
        {
            var __ret = __Internal.ReadSigned(__Instance, nCount);
            return __ret;
        }

        public void WriteUnsigned(ulong dw64InVal, int nCount)
        {
            __Internal.WriteUnsigned(__Instance, dw64InVal, nCount);
        }

        public void WriteSigned(long n64InVal, int nCount)
        {
            __Internal.WriteSigned(__Instance, n64InVal, nCount);
        }

        public byte* MPnWriteBuffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pnWriteBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnWriteBuffer = (__IntPtr) value;
            }
        }

        public uint MNWriteBufferSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWriteBufferSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWriteBufferSize = value;
            }
        }

        public uint MNWriteBufferPtr
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWriteBufferPtr;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWriteBufferPtr = value;
            }
        }

        public byte* MPnWriteFragmentsBuffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pnWriteFragmentsBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnWriteFragmentsBuffer = (__IntPtr) value;
            }
        }

        public uint MNWriteFragmentsBufferSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWriteFragmentsBufferSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWriteFragmentsBufferSize = value;
            }
        }

        public uint MNWriteFragmentsBufferPtr
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWriteFragmentsBufferPtr;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWriteFragmentsBufferPtr = value;
            }
        }

        public uint MNWriteFragmentsOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWriteFragmentsOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWriteFragmentsOffset = value;
            }
        }

        public byte MNCurWriteBit
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurWriteBit;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurWriteBit = value;
            }
        }

        public int MBInWriteMessage
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInWriteMessage;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInWriteMessage = value;
            }
        }

        public byte* MPnReadBuffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pnReadBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnReadBuffer = (__IntPtr) value;
            }
        }

        public uint MNReadBufferSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReadBufferSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReadBufferSize = value;
            }
        }

        public uint MNReadBufferPtr
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReadBufferPtr;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReadBufferPtr = value;
            }
        }

        public byte* MPnReadFragmentsBuffer
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pnReadFragmentsBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnReadFragmentsBuffer = (__IntPtr) value;
            }
        }

        public uint MNReadFragmentsBufferSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReadFragmentsBufferSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReadFragmentsBufferSize = value;
            }
        }

        public uint MNReadFragmentsBufferPtr
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReadFragmentsBufferPtr;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReadFragmentsBufferPtr = value;
            }
        }

        public uint MNReadFragmentsOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReadFragmentsOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReadFragmentsOffset = value;
            }
        }

        public byte MNCurReadBit
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurReadBit;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurReadBit = value;
            }
        }

        public byte MNLastByteBits
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastByteBits;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastByteBits = value;
            }
        }

        public int MBHighPriority
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHighPriority;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHighPriority = value;
            }
        }

        public uint MDwPlayerID
        {
            get
            {
                return ((__Internal*)__Instance)->m_dwPlayerID;
            }

            set
            {
                ((__Internal*)__Instance)->m_dwPlayerID = value;
            }
        }

        public int MessageMoreDataToRead
        {
            get
            {
                var __ret = __Internal.MessageMoreDataToRead(__Instance);
                return __ret;
            }
        }

        public uint PeekAtWriteMessageSize
        {
            get
            {
                var __ret = __Internal.PeekAtWriteMessageSize(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CNWMessage()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWMessage.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
