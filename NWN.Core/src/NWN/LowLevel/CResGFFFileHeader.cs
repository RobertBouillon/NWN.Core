// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CResGFFFileHeader : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_nFileType;

            [FieldOffset(4)]
            internal uint m_nFileVersion;

            [FieldOffset(8)]
            internal uint m_nStructOffset;

            [FieldOffset(12)]
            internal uint m_nStructCount;

            [FieldOffset(16)]
            internal uint m_nFieldOffset;

            [FieldOffset(20)]
            internal uint m_nFieldCount;

            [FieldOffset(24)]
            internal uint m_nLabelOffset;

            [FieldOffset(28)]
            internal uint m_nLabelCount;

            [FieldOffset(32)]
            internal uint m_nDataFieldOffset;

            [FieldOffset(36)]
            internal uint m_nDataFieldCount;

            [FieldOffset(40)]
            internal uint m_nDataLayoutFieldOffset;

            [FieldOffset(44)]
            internal uint m_nDataLayoutFieldCount;

            [FieldOffset(48)]
            internal uint m_nDataLayoutListOffset;

            [FieldOffset(52)]
            internal uint m_nDataLayoutListCount;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CResGFFFileHeaderC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CResGFFFileHeader> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CResGFFFileHeader>();

        protected bool __ownsNativeInstance;

        internal static CResGFFFileHeader __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CResGFFFileHeader(native.ToPointer(), skipVTables);
        }

        internal static CResGFFFileHeader __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CResGFFFileHeader)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CResGFFFileHeader __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CResGFFFileHeader(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CResGFFFileHeader(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CResGFFFileHeader(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CResGFFFileHeader()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResGFFFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public CResGFFFileHeader(global::NWN.LowLevel.CResGFFFileHeader _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResGFFFileHeader.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CResGFFFileHeader.__Internal*) __Instance) = *((global::NWN.LowLevel.CResGFFFileHeader.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CResGFFFileHeader __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MNFileType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFileType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFileType = value;
            }
        }

        public uint MNFileVersion
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFileVersion;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFileVersion = value;
            }
        }

        public uint MNStructOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStructOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStructOffset = value;
            }
        }

        public uint MNStructCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStructCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStructCount = value;
            }
        }

        public uint MNFieldOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFieldOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFieldOffset = value;
            }
        }

        public uint MNFieldCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFieldCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFieldCount = value;
            }
        }

        public uint MNLabelOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLabelOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLabelOffset = value;
            }
        }

        public uint MNLabelCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLabelCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLabelCount = value;
            }
        }

        public uint MNDataFieldOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataFieldOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataFieldOffset = value;
            }
        }

        public uint MNDataFieldCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataFieldCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataFieldCount = value;
            }
        }

        public uint MNDataLayoutFieldOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutFieldOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutFieldOffset = value;
            }
        }

        public uint MNDataLayoutFieldCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutFieldCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutFieldCount = value;
            }
        }

        public uint MNDataLayoutListOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutListOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutListOffset = value;
            }
        }

        public uint MNDataLayoutListCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutListCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutListCount = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
