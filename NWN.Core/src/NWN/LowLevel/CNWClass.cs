// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWClass : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1312)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_nName;

            [FieldOffset(4)]
            internal uint m_nNameLower;

            [FieldOffset(8)]
            internal uint m_nNamePlural;

            [FieldOffset(12)]
            internal uint m_nDescription;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sIcon;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sPreReqTable;

            [FieldOffset(48)]
            internal fixed byte m_lstBaseAttackBonus[60];

            [FieldOffset(108)]
            internal byte m_nHitDie;

            [FieldOffset(109)]
            internal byte m_nSkillPointBase;

            [FieldOffset(110)]
            internal fixed byte m_lstFortificationSaveThrowBonus[60];

            [FieldOffset(170)]
            internal fixed byte m_lstWillSaveThrowBonus[60];

            [FieldOffset(230)]
            internal fixed byte m_lstReflexSaveThrowBonus[60];

            [FieldOffset(296)]
            internal __IntPtr m_lstSpellKnownTable;

            [FieldOffset(304)]
            internal fixed byte m_lstSpellLevelsPerLevel[40];

            [FieldOffset(344)]
            internal __IntPtr m_lstSpellGainTable;

            [FieldOffset(664)]
            internal __IntPtr m_lstSkillTable;

            [FieldOffset(672)]
            internal ushort m_nNumSkills;

            [FieldOffset(680)]
            internal __IntPtr m_lstFeatTable;

            [FieldOffset(688)]
            internal ushort m_nNumFeats;

            [FieldOffset(690)]
            internal fixed byte m_lstBonusFeatsTable[60];

            [FieldOffset(750)]
            internal fixed sbyte m_lstAbilityGainTable[360];

            [FieldOffset(1110)]
            internal fixed sbyte m_lstNaturalACGainTable[60];

            [FieldOffset(1170)]
            internal byte m_nPrimaryAbility;

            [FieldOffset(1171)]
            internal fixed byte m_pnRecommendedAbilities[6];

            [FieldOffset(1177)]
            internal byte m_nClassRestrictions;

            [FieldOffset(1178)]
            internal byte m_nClassRestrictionType;

            [FieldOffset(1180)]
            internal int m_nClassRestrictionsInversed;

            [FieldOffset(1184)]
            internal fixed byte m_pnEffectiveCRForLevel[41];

            [FieldOffset(1228)]
            internal int m_bIsPlayerClass;

            [FieldOffset(1232)]
            internal int m_bIsSpellCasterClass;

            [FieldOffset(1236)]
            internal byte m_nMaxLevel;

            [FieldOffset(1240)]
            internal int m_bXPPenalty;

            [FieldOffset(1244)]
            internal uint m_nDefaultPackage;

            [FieldOffset(1248)]
            internal byte m_nSpellcastingAbility;

            [FieldOffset(1252)]
            internal int m_bNeedsToMemorizeSpells;

            [FieldOffset(1256)]
            internal int m_bSpellbookRestricted;

            [FieldOffset(1260)]
            internal int m_bHasDomains;

            [FieldOffset(1264)]
            internal int m_bHasSpecialization;

            [FieldOffset(1268)]
            internal int m_bCanLearnFromScrolls;

            [FieldOffset(1272)]
            internal int m_bIsArcane;

            [FieldOffset(1276)]
            internal int m_bSuffersArcaneSpellFailure;

            [FieldOffset(1280)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sSpellsTableColumn;

            [FieldOffset(1296)]
            internal float m_fCasterLevelMultiplier;

            [FieldOffset(1300)]
            internal int m_nMinCastingLevel;

            [FieldOffset(1304)]
            internal int m_bCanCastSpontaneously;

            [FieldOffset(1308)]
            internal byte m_nMinAssociateLevel;

            [FieldOffset(1309)]
            internal byte m_nArcSpellUsePerDayLevel;

            [FieldOffset(1310)]
            internal byte m_nDivSpellUsePerDayLevel;

            [FieldOffset(1311)]
            internal byte m_nEpicLevel;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClassC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClassC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClassD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass14GetAttackBonusEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetAttackBonus(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass18GetAttacksPerRoundEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetAttacksPerRound(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass13GetBonusFeatsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetBonusFeats(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass16GetFortSaveBonusEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetFortSaveBonus(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass15GetRefSaveBonusEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetRefSaveBonus(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass16GetWillSaveBonusEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetWillSaveBonus(__IntPtr __instance, byte nLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass12GetSpellGainEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetSpellGain(__IntPtr __instance, byte nLevel, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass22GetSpellsKnownPerLevelEhhhth", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetSpellsKnownPerLevel(__IntPtr __instance, byte nLevel, byte nSpellLevel, byte nClass, ushort nRace, byte nCastingAbilityBase);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass20LoadAttackBonusTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAttackBonusTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass14LoadFeatsTableE10CExoStringP8CNWRules", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadFeatsTable(__IntPtr __instance, global::NWN.LowLevel.CExoString.__Internal sTable, __IntPtr pRules);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass20LoadSavingThrowTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadSavingThrowTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass15LoadSkillsTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadSkillsTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass19LoadBonusFeatsTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadBonusFeatsTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass18LoadSpellGainTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadSpellGainTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass19LoadSpellKnownTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadSpellKnownTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass17LoadStatGainTableE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadStatGainTable(__IntPtr __instance, __IntPtr sTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass14IsSkillUseableEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsSkillUseable(__IntPtr __instance, ushort nSkill);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass17IsSkillClassSkillEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsSkillClassSkill(__IntPtr __instance, ushort nSkill);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass21GetIsAlignmentAllowedEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsAlignmentAllowed(__IntPtr __instance, byte nGoodEvilConst, byte nLawChaosConst);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass19GetLevelFeatGrantedEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetLevelFeatGranted(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass12GetClassFeatEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClassFeat(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass11IsBonusFeatEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsBonusFeat(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass12IsNormalFeatEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsNormalFeat(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass13IsGrantedFeatEtRh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsGrantedFeat(__IntPtr __instance, ushort nFeat, byte* nLevelGranted);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass13IsFeatUseableEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsFeatUseable(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass15GetLevelGrantedEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetLevelGranted(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass28GetAbilityGainForSingleLevelEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte GetAbilityGainForSingleLevel(__IntPtr __instance, int ability, int level);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass22GetAbilityGainForLevelEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte GetAbilityGainForLevel(__IntPtr __instance, int ability, int level);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass24GetNaturalACGainForLevelEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte GetNaturalACGainForLevel(__IntPtr __instance, int level);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass11GetNameTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetNameText(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass16GetNameLowerTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetNameLowerText(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass17GetNamePluralTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetNamePluralText(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWClass18GetDescriptionTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetDescriptionText(__IntPtr @return, __IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWClass> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWClass>();

        protected bool __ownsNativeInstance;

        internal static CNWClass __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWClass(native.ToPointer(), skipVTables);
        }

        internal static CNWClass __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWClass)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWClass __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWClass(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWClass.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWClass(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWClass(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWClass()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWClass(global::NWN.LowLevel.CNWClass _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWClass.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWClass __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte GetAttackBonus(byte nLevel)
        {
            var __ret = __Internal.GetAttackBonus(__Instance, nLevel);
            return __ret;
        }

        public byte GetAttacksPerRound(byte nLevel)
        {
            var __ret = __Internal.GetAttacksPerRound(__Instance, nLevel);
            return __ret;
        }

        public byte GetBonusFeats(byte nLevel)
        {
            var __ret = __Internal.GetBonusFeats(__Instance, nLevel);
            return __ret;
        }

        public byte GetFortSaveBonus(byte nLevel)
        {
            var __ret = __Internal.GetFortSaveBonus(__Instance, nLevel);
            return __ret;
        }

        public byte GetRefSaveBonus(byte nLevel)
        {
            var __ret = __Internal.GetRefSaveBonus(__Instance, nLevel);
            return __ret;
        }

        public byte GetWillSaveBonus(byte nLevel)
        {
            var __ret = __Internal.GetWillSaveBonus(__Instance, nLevel);
            return __ret;
        }

        public byte GetSpellGain(byte nLevel, byte nSpellLevel)
        {
            var __ret = __Internal.GetSpellGain(__Instance, nLevel, nSpellLevel);
            return __ret;
        }

        public byte GetSpellsKnownPerLevel(byte nLevel, byte nSpellLevel, byte nClass, ushort nRace, byte nCastingAbilityBase)
        {
            var __ret = __Internal.GetSpellsKnownPerLevel(__Instance, nLevel, nSpellLevel, nClass, nRace, nCastingAbilityBase);
            return __ret;
        }

        public void LoadAttackBonusTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadAttackBonusTable(__Instance, __arg0);
        }

        public void LoadFeatsTable(global::NWN.LowLevel.CExoString sTable, global::NWN.LowLevel.CNWRules pRules)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            var __arg1 = pRules is null ? __IntPtr.Zero : pRules.__Instance;
            __Internal.LoadFeatsTable(__Instance, *(global::NWN.LowLevel.CExoString.__Internal*) __arg0, __arg1);
        }

        public void LoadSavingThrowTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadSavingThrowTable(__Instance, __arg0);
        }

        public void LoadSkillsTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadSkillsTable(__Instance, __arg0);
        }

        public void LoadBonusFeatsTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadBonusFeatsTable(__Instance, __arg0);
        }

        public void LoadSpellGainTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadSpellGainTable(__Instance, __arg0);
        }

        public void LoadSpellKnownTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadSpellKnownTable(__Instance, __arg0);
        }

        public void LoadStatGainTable(global::NWN.LowLevel.CExoString sTable)
        {
            if (ReferenceEquals(sTable, null))
                throw new global::System.ArgumentNullException("sTable", "Cannot be null because it is passed by value.");
            var __arg0 = sTable.__Instance;
            __Internal.LoadStatGainTable(__Instance, __arg0);
        }

        public int IsSkillUseable(ushort nSkill)
        {
            var __ret = __Internal.IsSkillUseable(__Instance, nSkill);
            return __ret;
        }

        public int IsSkillClassSkill(ushort nSkill)
        {
            var __ret = __Internal.IsSkillClassSkill(__Instance, nSkill);
            return __ret;
        }

        public int GetIsAlignmentAllowed(byte nGoodEvilConst, byte nLawChaosConst)
        {
            var __ret = __Internal.GetIsAlignmentAllowed(__Instance, nGoodEvilConst, nLawChaosConst);
            return __ret;
        }

        public byte GetLevelFeatGranted(ushort nFeat)
        {
            var __ret = __Internal.GetLevelFeatGranted(__Instance, nFeat);
            return __ret;
        }

        public global::NWN.LowLevel.CNWClassFeat GetClassFeat(ushort nFeat)
        {
            var __ret = __Internal.GetClassFeat(__Instance, nFeat);
            var __result0 = global::NWN.LowLevel.CNWClassFeat.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int IsBonusFeat(ushort nFeat)
        {
            var __ret = __Internal.IsBonusFeat(__Instance, nFeat);
            return __ret;
        }

        public int IsNormalFeat(ushort nFeat)
        {
            var __ret = __Internal.IsNormalFeat(__Instance, nFeat);
            return __ret;
        }

        public int IsGrantedFeat(ushort nFeat, byte* nLevelGranted)
        {
            var __ret = __Internal.IsGrantedFeat(__Instance, nFeat, nLevelGranted);
            return __ret;
        }

        public int IsFeatUseable(ushort nFeat)
        {
            var __ret = __Internal.IsFeatUseable(__Instance, nFeat);
            return __ret;
        }

        public byte GetLevelGranted(ushort nFeat)
        {
            var __ret = __Internal.GetLevelGranted(__Instance, nFeat);
            return __ret;
        }

        public sbyte GetAbilityGainForSingleLevel(int ability, int level)
        {
            var __ret = __Internal.GetAbilityGainForSingleLevel(__Instance, ability, level);
            return __ret;
        }

        public sbyte GetAbilityGainForLevel(int ability, int level)
        {
            var __ret = __Internal.GetAbilityGainForLevel(__Instance, ability, level);
            return __ret;
        }

        public sbyte GetNaturalACGainForLevel(int level)
        {
            var __ret = __Internal.GetNaturalACGainForLevel(__Instance, level);
            return __ret;
        }

        public uint MNName
        {
            get
            {
                return ((__Internal*)__Instance)->m_nName;
            }

            set
            {
                ((__Internal*)__Instance)->m_nName = value;
            }
        }

        public uint MNNameLower
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNameLower;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNameLower = value;
            }
        }

        public uint MNNamePlural
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNamePlural;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNamePlural = value;
            }
        }

        public uint MNDescription
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDescription;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDescription = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSIcon
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sIcon));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sIcon = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSPreReqTable
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sPreReqTable));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sPreReqTable = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public byte[] MLstBaseAttackBonus
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstBaseAttackBonus, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstBaseAttackBonus[i] = value[i];
                }
            }
        }

        public byte MNHitDie
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHitDie;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHitDie = value;
            }
        }

        public byte MNSkillPointBase
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSkillPointBase;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSkillPointBase = value;
            }
        }

        public byte[] MLstFortificationSaveThrowBonus
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstFortificationSaveThrowBonus, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstFortificationSaveThrowBonus[i] = value[i];
                }
            }
        }

        public byte[] MLstWillSaveThrowBonus
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstWillSaveThrowBonus, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstWillSaveThrowBonus[i] = value[i];
                }
            }
        }

        public byte[] MLstReflexSaveThrowBonus
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstReflexSaveThrowBonus, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstReflexSaveThrowBonus[i] = value[i];
                }
            }
        }

        public byte** MLstSpellKnownTable
        {
            get
            {
                return (byte**) ((__Internal*)__Instance)->m_lstSpellKnownTable;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstSpellKnownTable = (__IntPtr) value;
            }
        }

        public byte[] MLstSpellLevelsPerLevel
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstSpellLevelsPerLevel, 40);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 40; i++)
                        ((__Internal*)__Instance)->m_lstSpellLevelsPerLevel[i] = value[i];
                }
            }
        }

        private byte*[] __m_lstSpellGainTable;

        private bool __m_lstSpellGainTableInitialised;
        public byte*[] MLstSpellGainTable
        {
            get
            {
                if (!__m_lstSpellGainTableInitialised)
                {
                    __m_lstSpellGainTable = null;
                    __m_lstSpellGainTableInitialised = true;
                }
                return __m_lstSpellGainTable;
            }

            set
            {
                __m_lstSpellGainTable = value;
                if (!__m_lstSpellGainTableInitialised)
                {
                    __m_lstSpellGainTableInitialised = true;
                }
            }
        }

        public global::NWN.LowLevel.CNWClassSkill MLstSkillTable
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWClassSkill.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstSkillTable, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstSkillTable = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNNumSkills
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumSkills;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumSkills = value;
            }
        }

        public global::NWN.LowLevel.CNWClassFeat MLstFeatTable
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWClassFeat.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstFeatTable, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstFeatTable = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNNumFeats
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumFeats;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumFeats = value;
            }
        }

        public byte[] MLstBonusFeatsTable
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_lstBonusFeatsTable, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstBonusFeatsTable[i] = value[i];
                }
            }
        }

        public sbyte[] MLstNaturalACGainTable
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_lstNaturalACGainTable, 60);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 60; i++)
                        ((__Internal*)__Instance)->m_lstNaturalACGainTable[i] = value[i];
                }
            }
        }

        public byte MNPrimaryAbility
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrimaryAbility;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrimaryAbility = value;
            }
        }

        public byte[] MPnRecommendedAbilities
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_pnRecommendedAbilities, 6);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 6; i++)
                        ((__Internal*)__Instance)->m_pnRecommendedAbilities[i] = value[i];
                }
            }
        }

        public byte MNClassRestrictions
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClassRestrictions;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClassRestrictions = value;
            }
        }

        public byte MNClassRestrictionType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClassRestrictionType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClassRestrictionType = value;
            }
        }

        public int MNClassRestrictionsInversed
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClassRestrictionsInversed;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClassRestrictionsInversed = value;
            }
        }

        public byte[] MPnEffectiveCRForLevel
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_pnEffectiveCRForLevel, 41);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 41; i++)
                        ((__Internal*)__Instance)->m_pnEffectiveCRForLevel[i] = value[i];
                }
            }
        }

        public int MBIsPlayerClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsPlayerClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsPlayerClass = value;
            }
        }

        public int MBIsSpellCasterClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsSpellCasterClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsSpellCasterClass = value;
            }
        }

        public byte MNMaxLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxLevel = value;
            }
        }

        public int MBXPPenalty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bXPPenalty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bXPPenalty = value;
            }
        }

        public uint MNDefaultPackage
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDefaultPackage;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDefaultPackage = value;
            }
        }

        public byte MNSpellcastingAbility
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpellcastingAbility;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpellcastingAbility = value;
            }
        }

        public int MBNeedsToMemorizeSpells
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNeedsToMemorizeSpells;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNeedsToMemorizeSpells = value;
            }
        }

        public int MBSpellbookRestricted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpellbookRestricted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpellbookRestricted = value;
            }
        }

        public int MBHasDomains
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasDomains;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasDomains = value;
            }
        }

        public int MBHasSpecialization
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasSpecialization;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasSpecialization = value;
            }
        }

        public int MBCanLearnFromScrolls
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCanLearnFromScrolls;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCanLearnFromScrolls = value;
            }
        }

        public int MBIsArcane
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsArcane;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsArcane = value;
            }
        }

        public int MBSuffersArcaneSpellFailure
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSuffersArcaneSpellFailure;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSuffersArcaneSpellFailure = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSSpellsTableColumn
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSpellsTableColumn));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSpellsTableColumn = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public float MFCasterLevelMultiplier
        {
            get
            {
                return ((__Internal*)__Instance)->m_fCasterLevelMultiplier;
            }

            set
            {
                ((__Internal*)__Instance)->m_fCasterLevelMultiplier = value;
            }
        }

        public int MNMinCastingLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinCastingLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinCastingLevel = value;
            }
        }

        public int MBCanCastSpontaneously
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCanCastSpontaneously;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCanCastSpontaneously = value;
            }
        }

        public byte MNMinAssociateLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinAssociateLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinAssociateLevel = value;
            }
        }

        public byte MNArcSpellUsePerDayLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nArcSpellUsePerDayLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nArcSpellUsePerDayLevel = value;
            }
        }

        public byte MNDivSpellUsePerDayLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDivSpellUsePerDayLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDivSpellUsePerDayLevel = value;
            }
        }

        public byte MNEpicLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEpicLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEpicLevel = value;
            }
        }

        public global::NWN.LowLevel.CExoString NameText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetNameText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString NameLowerText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetNameLowerText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString NamePluralText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetNamePluralText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString DescriptionText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetDescriptionText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
