// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSCreature : global::NWN.LowLevel.CNWSObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 2760)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CGameObject;

            [FieldOffset(8)]
            internal uint m_idSelf;

            [FieldOffset(12)]
            internal byte m_nObjectType;

            [FieldOffset(16)]
            internal __IntPtr m_pNwnxData;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sForGCC;

            [FieldOffset(40)]
            internal ushort m_nGroupID;

            [FieldOffset(42)]
            internal ushort m_nLastGroupID;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTag;

            [FieldOffset(64)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTemplate;

            [FieldOffset(80)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cPortrait;

            [FieldOffset(112)]
            internal ushort m_nPortraitId;

            [FieldOffset(120)]
            internal __IntPtr m_pDialog;

            [FieldOffset(128)]
            internal uint m_nDialogDelayCalendar;

            [FieldOffset(132)]
            internal uint m_nDialogDelayTimeOfDay;

            [FieldOffset(136)]
            internal int m_bDialogStored;

            [FieldOffset(140)]
            internal uint m_nDialogStoredEntry;

            [FieldOffset(144)]
            internal int m_bDialogPaused;

            [FieldOffset(148)]
            internal uint m_oidDialogOwner;

            [FieldOffset(152)]
            internal int m_nDialogAnimation;

            [FieldOffset(156)]
            internal int m_nAILevel;

            [FieldOffset(160)]
            internal int m_bLock;

            [FieldOffset(168)]
            internal __IntPtr m_pAIPosList;

            [FieldOffset(176)]
            internal ushort m_nCurrentAction;

            [FieldOffset(180)]
            internal uint m_oidCurrentActionTarget;

            [FieldOffset(184)]
            internal __IntPtr m_pAnimation;

            [FieldOffset(192)]
            internal uint m_oidArea;

            [FieldOffset(196)]
            internal global::NWN.LowLevel.Vector.__Internal m_vPosition;

            [FieldOffset(208)]
            internal global::NWN.LowLevel.Vector.__Internal m_vOrientation;

            [FieldOffset(220)]
            internal uint m_nLastUpdateCalendarDay;

            [FieldOffset(224)]
            internal uint m_nLastUpdateTimeOfDay;

            [FieldOffset(228)]
            internal uint m_nStartActionCalendarDay;

            [FieldOffset(232)]
            internal uint m_nStartActionTimeOfDay;

            [FieldOffset(236)]
            internal uint m_nLastAnimationCalendarDay;

            [FieldOffset(240)]
            internal uint m_nLastAnimationTimeOfDay;

            [FieldOffset(244)]
            internal uint m_nAIUpdateDifference;

            [FieldOffset(248)]
            internal int m_nAnimation;

            [FieldOffset(252)]
            internal float m_fAnimSpeed;

            [FieldOffset(256)]
            internal int m_nCurrentHitPoints;

            [FieldOffset(260)]
            internal int m_nBaseHitPoints;

            [FieldOffset(264)]
            internal int m_nTemporaryHitPoints;

            [FieldOffset(268)]
            internal int m_bAbleToModifyActionQueue;

            [FieldOffset(272)]
            internal int m_bDestroyable;

            [FieldOffset(276)]
            internal int m_bRaiseable;

            [FieldOffset(280)]
            internal int m_bSelectableWhenDead;

            [FieldOffset(284)]
            internal int m_bPlotObject;

            [FieldOffset(288)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lQueuedActions;

            [FieldOffset(296)]
            internal global::NWN.LowLevel.CNWSScriptVarTable.__Internal m_ScriptVars;

            [FieldOffset(360)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_appliedEffects;

            [FieldOffset(376)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstLoopingVisualEffects;

            [FieldOffset(392)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstEffectTargets;

            [FieldOffset(408)]
            internal int m_bPendingEffectRemoval;

            [FieldOffset(412)]
            internal uint m_nSavingThrowSpellId;

            [FieldOffset(416)]
            internal int m_nCustomScriptEventId;

            [FieldOffset(420)]
            internal uint m_oidKiller;

            [FieldOffset(424)]
            internal uint m_oidLastHostileActor;

            [FieldOffset(428)]
            internal uint m_oidLastAttacker;

            [FieldOffset(432)]
            internal uint m_oidLastDamager;

            [FieldOffset(436)]
            internal uint m_oidLastDisturbed;

            [FieldOffset(440)]
            internal __IntPtr m_pLastDamageList;

            [FieldOffset(448)]
            internal ushort m_nLastAttackType;

            [FieldOffset(450)]
            internal byte m_nLastAttackMode;

            [FieldOffset(452)]
            internal uint m_oidLastWeaponAttackedWith;

            [FieldOffset(456)]
            internal uint m_oidInventoryDisturbItem;

            [FieldOffset(460)]
            internal int m_nInventoryDisturbType;

            [FieldOffset(464)]
            internal uint m_oidLastSpeaker;

            [FieldOffset(468)]
            internal int m_bPrivateConversation;

            [FieldOffset(472)]
            internal int m_nConversationPlayHello;

            [FieldOffset(480)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sLastConversationResref;

            [FieldOffset(496)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aListenExpressions;

            [FieldOffset(512)]
            internal int m_nMatchedPos;

            [FieldOffset(516)]
            internal int m_bListening;

            [FieldOffset(520)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aExpressionStrings;

            [FieldOffset(536)]
            internal __IntPtr m_nDamageImmunity;

            [FieldOffset(544)]
            internal global::NWN.LowLevel.Vector.__Internal m_vLastSpellTarget;

            [FieldOffset(556)]
            internal uint m_oidLastSpellTarget;

            [FieldOffset(560)]
            internal uint m_nLastSpellId;

            [FieldOffset(564)]
            internal byte m_nLastDomainLevel;

            [FieldOffset(568)]
            internal uint m_nLastSpellProjectileTime;

            [FieldOffset(572)]
            internal int m_bLastSpellCast;

            [FieldOffset(576)]
            internal int m_bLastSpellCastSpontaneous;

            [FieldOffset(580)]
            internal byte m_nLastSpellCastMulticlass;

            [FieldOffset(581)]
            internal byte m_nLastSpellCastMetaType;

            [FieldOffset(584)]
            internal uint m_oidLastSpellCastAtMeCaster;

            [FieldOffset(588)]
            internal uint m_nLastSpellCastAtMe;

            [FieldOffset(592)]
            internal int m_bLastSpellCastAtMeHarmful;

            [FieldOffset(596)]
            internal ushort m_nLastSpellCastFeat;

            [FieldOffset(600)]
            internal __IntPtr m_pExecutingAIAction;

            [FieldOffset(608)]
            internal ushort m_nEffectArrayIndex;

            [FieldOffset(612)]
            internal int m_bApplyingPostProcessEffects;

            [FieldOffset(616)]
            internal int m_bOpenDoorAnimationPlayed;

            [FieldOffset(620)]
            internal global::NWN.LowLevel.Vector.__Internal m_vHiliteColor;

            [FieldOffset(632)]
            internal int m_nMouseCursor;

            [FieldOffset(640)]
            internal global::NWN.LowLevel.CNWSTransition.__Internal m_pTransition;

            [FieldOffset(664)]
            internal global::Std.SharedPtr.__Internal m_sqlite_db;

            [FieldOffset(680)]
            internal global::NWN.LowLevel.ObjectVisualTransformData.__Internal m_pVisualTransformData;

            [FieldOffset(720)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lMaterialShaderParameters;

            [FieldOffset(736)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lTextureReplaceInfo;

            [FieldOffset(752)]
            internal global::NWN.LowLevel.CNWSUUID.__Internal m_pUUID;

            [FieldOffset(784)]
            internal int m_bPonyRide;

            [FieldOffset(788)]
            internal ushort m_nEquipArrayIndex;

            [FieldOffset(792)]
            internal fixed uint m_poidCntrSpellObjects[10];

            [FieldOffset(832)]
            internal int m_nNumCntrSpellObjects;

            [FieldOffset(840)]
            internal fixed byte m_sScripts[208];

            [FieldOffset(1048)]
            internal fixed byte m_sOriginalScripts[208];

            [FieldOffset(1256)]
            internal __IntPtr m_pQuickbarButton;

            [FieldOffset(1264)]
            internal int m_bLootable;

            [FieldOffset(1268)]
            internal uint m_nDecayTime;

            [FieldOffset(1272)]
            internal uint m_oidBodyBag;

            [FieldOffset(1276)]
            internal uint m_oidDesiredArea;

            [FieldOffset(1280)]
            internal global::NWN.LowLevel.Vector.__Internal m_vDesiredAreaLocation;

            [FieldOffset(1292)]
            internal int m_bDesiredAreaUpdateComplete;

            [FieldOffset(1296)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aLinkedAreaOfEffectObjects;

            [FieldOffset(1312)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aInSubAreas;

            [FieldOffset(1328)]
            internal uint m_oidBlockingDoor;

            [FieldOffset(1336)]
            internal __IntPtr m_pcPathfindInformation;

            [FieldOffset(1344)]
            internal float m_fMovementScaleFactor;

            [FieldOffset(1348)]
            internal int m_bUpdateCombatInformation;

            [FieldOffset(1352)]
            internal int m_nNumCharSheetViewers;

            [FieldOffset(1356)]
            internal int m_bUpdateSpellSlots;

            [FieldOffset(1360)]
            internal int m_bOnCreationScriptExecuted;

            [FieldOffset(1364)]
            internal uint m_nLastHeartbeatScriptCalendarDay;

            [FieldOffset(1368)]
            internal uint m_nLastHeartbeatScriptTimeOfDay;

            [FieldOffset(1372)]
            internal uint m_nHeartbeatInterval;

            [FieldOffset(1376)]
            internal uint m_nLastRestRadiusCheckDay;

            [FieldOffset(1380)]
            internal uint m_nLastRestRadiusCheckTimeOfDay;

            [FieldOffset(1384)]
            internal uint m_oidLastTrapDetected;

            [FieldOffset(1388)]
            internal uint m_nLastTrapCheckCalendarDay;

            [FieldOffset(1392)]
            internal uint m_nLastTrapCheckTimeOfDay;

            [FieldOffset(1396)]
            internal uint m_nLastStealthCheckCalendarDay;

            [FieldOffset(1400)]
            internal uint m_nLastStealthCheckTimeOfDay;

            [FieldOffset(1404)]
            internal uint m_nExcitedStateTimer;

            [FieldOffset(1408)]
            internal uint m_nLastVisibleCreaturesCheckCalendarDay;

            [FieldOffset(1412)]
            internal uint m_nLastVisibleCreaturesCheckTimeOfDay;

            [FieldOffset(1416)]
            internal int m_nChecksVisibleList;

            [FieldOffset(1420)]
            internal uint m_nChecksHeartbeat;

            [FieldOffset(1424)]
            internal uint m_nMoveSpeedTimer;

            [FieldOffset(1428)]
            internal int m_bPendingRealization;

            [FieldOffset(1432)]
            internal byte m_nPersonalReputationHeartbeatCount;

            [FieldOffset(1436)]
            internal int m_nLastActionQueueUpdateDay;

            [FieldOffset(1440)]
            internal int m_nLastActionQueueUpdateTimeOfDay;

            [FieldOffset(1444)]
            internal fixed byte m_pActionQueue[280];

            [FieldOffset(1724)]
            internal byte m_nAmbientAnimationState;

            [FieldOffset(1728)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sModelType;

            [FieldOffset(1744)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_oidAutoMapAreaList;

            [FieldOffset(1760)]
            internal __IntPtr m_nAutoMapTileData;

            [FieldOffset(1768)]
            internal int m_bAutoMapAutoExplores;

            [FieldOffset(1772)]
            internal byte m_nLastExploredTileX;

            [FieldOffset(1773)]
            internal byte m_nLastExploredTileY;

            [FieldOffset(1776)]
            internal uint oidLastExploredArea;

            [FieldOffset(1780)]
            internal byte m_nDetectMode;

            [FieldOffset(1781)]
            internal byte m_nStealthMode;

            [FieldOffset(1782)]
            internal byte m_nDefensiveCastingMode;

            [FieldOffset(1783)]
            internal byte m_nCombatMode;

            [FieldOffset(1784)]
            internal byte m_nDesiredCombatMode;

            [FieldOffset(1788)]
            internal uint m_oidCounterSpellTarget;

            [FieldOffset(1792)]
            internal byte m_nInitiativeRoll;

            [FieldOffset(1796)]
            internal int m_bInitiativeExpired;

            [FieldOffset(1800)]
            internal int m_bCombatState;

            [FieldOffset(1804)]
            internal int m_nCombatStateTimer;

            [FieldOffset(1808)]
            internal int m_bPassiveAttackBehaviour;

            [FieldOffset(1812)]
            internal int m_bHasArms;

            [FieldOffset(1816)]
            internal int m_bHasLegs;

            [FieldOffset(1820)]
            internal int m_bDisarmable;

            [FieldOffset(1824)]
            internal int m_nCreatureSize;

            [FieldOffset(1828)]
            internal float m_fPreferredAttackDistance;

            [FieldOffset(1832)]
            internal float m_fWeaponScale;

            [FieldOffset(1836)]
            internal uint m_oidAttackTarget;

            [FieldOffset(1840)]
            internal uint m_oidAttemptedAttackTarget;

            [FieldOffset(1844)]
            internal global::NWN.LowLevel.Vector.__Internal m_vLastAttackPosition;

            [FieldOffset(1856)]
            internal uint m_oidGoingToBeAttackedBy;

            [FieldOffset(1860)]
            internal uint m_oidAttemptedSpellTarget;

            [FieldOffset(1864)]
            internal uint m_oidSpellTarget;

            [FieldOffset(1868)]
            internal int m_nLastAmmoWarning;

            [FieldOffset(1872)]
            internal int m_nLastCombatRoundUpdate;

            [FieldOffset(1876)]
            internal int m_nLastRunningAOOUpdate;

            [FieldOffset(1880)]
            internal int m_bBroadcastedAOOTo;

            [FieldOffset(1884)]
            internal int m_nLastRunningAOOTimeOut;

            [FieldOffset(1888)]
            internal int m_bExternalCombatModeEnabled;

            [FieldOffset(1892)]
            internal int m_bSilent;

            [FieldOffset(1896)]
            internal int m_bHasted;

            [FieldOffset(1900)]
            internal int m_bSlowed;

            [FieldOffset(1904)]
            internal int m_bTaunt;

            [FieldOffset(1908)]
            internal int m_bForcedWalk;

            [FieldOffset(1912)]
            internal byte m_nVisionType;

            [FieldOffset(1913)]
            internal byte m_nState;

            [FieldOffset(1916)]
            internal uint m_nEffectSpellId;

            [FieldOffset(1920)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aEffectIcons;

            [FieldOffset(1936)]
            internal int m_bCutsceneCameraMode;

            [FieldOffset(1940)]
            internal float m_fCutsceneCameraMoveFactor;

            [FieldOffset(1944)]
            internal int m_bWasPlotCreature;

            [FieldOffset(1948)]
            internal int m_bCutsceneGhost;

            [FieldOffset(1952)]
            internal uint m_oidLastPerception;

            [FieldOffset(1956)]
            internal int m_bLastPerceptionHeard;

            [FieldOffset(1960)]
            internal int m_bLastPerceptionSeen;

            [FieldOffset(1964)]
            internal int m_bLastPerceptionInaudible;

            [FieldOffset(1968)]
            internal int m_bLastPerceptionVanished;

            [FieldOffset(1972)]
            internal float m_fSpotCheckDistance;

            [FieldOffset(1976)]
            internal float m_fMaxSpotCheckDistance;

            [FieldOffset(1980)]
            internal float m_fListenCheckDistance;

            [FieldOffset(1984)]
            internal float m_fMaxListenCheckDistance;

            [FieldOffset(1988)]
            internal float m_fBlindsightDistance;

            [FieldOffset(1992)]
            internal byte m_nLastHideRoll;

            [FieldOffset(1993)]
            internal byte m_nLastMoveSilentlyRoll;

            [FieldOffset(1994)]
            internal byte m_nLastSpotRoll;

            [FieldOffset(1995)]
            internal byte m_nLastListenRoll;

            [FieldOffset(2000)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pVisibleCreaturesList;

            [FieldOffset(2016)]
            internal uint m_oidInvitedToPartyBy;

            [FieldOffset(2020)]
            internal int m_bInvitedToParty;

            [FieldOffset(2024)]
            internal uint m_nInvitedToPartyDay;

            [FieldOffset(2028)]
            internal uint m_nInvitedToPartyTimeOfDay;

            [FieldOffset(2032)]
            internal __IntPtr m_pInvitationsOffered;

            [FieldOffset(2040)]
            internal __IntPtr m_pInvitationsIgnored;

            [FieldOffset(2048)]
            internal uint m_oidLockOnTargetObj;

            [FieldOffset(2052)]
            internal int m_nLastCounterSpellID;

            [FieldOffset(2056)]
            internal byte m_nLastCounterSpellClass;

            [FieldOffset(2057)]
            internal byte m_nLastCounterMetaType;

            [FieldOffset(2058)]
            internal byte m_nLastCounterDomainLevel;

            [FieldOffset(2064)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_poidSpellIdentified;

            [FieldOffset(2080)]
            internal uint m_oidLastSpellCastItem;

            [FieldOffset(2084)]
            internal int m_bLastSpellUnReadied;

            [FieldOffset(2088)]
            internal int m_bLastItemCastSpell;

            [FieldOffset(2092)]
            internal int m_nLastItemCastSpellLevel;

            [FieldOffset(2096)]
            internal int m_bItemCastSpellBroadcastAOO;

            [FieldOffset(2100)]
            internal uint m_oidSittingObject;

            [FieldOffset(2104)]
            internal int m_bStealAnimationPlayed;

            [FieldOffset(2108)]
            internal int m_bStealAttemptDetected;

            [FieldOffset(2112)]
            internal int m_bHealAnimationPlayed;

            [FieldOffset(2116)]
            internal int m_bTrapAnimationPlayed;

            [FieldOffset(2120)]
            internal int m_bUnlockAnimationPlayed;

            [FieldOffset(2124)]
            internal int m_bLockAnimationPlayed;

            [FieldOffset(2128)]
            internal int m_bDropItemAnimationPlayed;

            [FieldOffset(2132)]
            internal int m_bPickUpItemAnimationPlayed;

            [FieldOffset(2136)]
            internal int m_bTauntAnimationPlayed;

            [FieldOffset(2140)]
            internal uint m_nRestDurationPerHPGain;

            [FieldOffset(2144)]
            internal uint m_nRestHPToRecover;

            [FieldOffset(2148)]
            internal uint m_nRestDurationPerSpellLevelGain;

            [FieldOffset(2152)]
            internal uint m_nRestSpellLevelToRecover;

            [FieldOffset(2156)]
            internal int m_bFacingAndAnimationDone;

            [FieldOffset(2160)]
            internal int m_bMagicalArrowsEquipped;

            [FieldOffset(2164)]
            internal int m_bMagicalBoltsEquipped;

            [FieldOffset(2168)]
            internal int m_bMagicalBulletsEquipped;

            [FieldOffset(2176)]
            internal __IntPtr m_pSkillTimer;

            [FieldOffset(2184)]
            internal __IntPtr m_pcCombatRound;

            [FieldOffset(2192)]
            internal __IntPtr m_pJournal;

            [FieldOffset(2200)]
            internal __IntPtr m_pBarterInfo;

            [FieldOffset(2208)]
            internal uint m_nGold;

            [FieldOffset(2212)]
            internal int m_bPlayerCharacter;

            [FieldOffset(2216)]
            internal ushort m_nSoundSet;

            [FieldOffset(2220)]
            internal int m_nFootstepType;

            [FieldOffset(2224)]
            internal byte m_nBodyBag;

            [FieldOffset(2228)]
            internal int m_nInTransit;

            [FieldOffset(2232)]
            internal int m_bPoisoned;

            [FieldOffset(2236)]
            internal int m_bDiseased;

            [FieldOffset(2240)]
            internal int m_bIsImmortal;

            [FieldOffset(2244)]
            internal int m_bNoPermDeath;

            [FieldOffset(2248)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDisplayName;

            [FieldOffset(2264)]
            internal int m_nUpdateDisplayNameSeq;

            [FieldOffset(2268)]
            internal ushort m_nAIState;

            [FieldOffset(2270)]
            internal byte m_nAIStateAction;

            [FieldOffset(2272)]
            internal uint m_oidAIStateActee;

            [FieldOffset(2276)]
            internal byte m_nAIStateOutput;

            [FieldOffset(2280)]
            internal uint m_nActivities;

            [FieldOffset(2284)]
            internal uint m_nActivitiesLocked;

            [FieldOffset(2288)]
            internal float m_fMovementRateFactor;

            [FieldOffset(2292)]
            internal float m_fDriveModeMoveFactor;

            [FieldOffset(2296)]
            internal byte m_nWalkAnimation;

            [FieldOffset(2300)]
            internal int m_bDriveMode;

            [FieldOffset(2304)]
            internal int m_bJumpedRecently;

            [FieldOffset(2308)]
            internal uint m_oidMaster;

            [FieldOffset(2312)]
            internal __IntPtr m_pAssociateList;

            [FieldOffset(2320)]
            internal ushort m_nAssociateType;

            [FieldOffset(2324)]
            internal int m_nLastAssociateCommand;

            [FieldOffset(2328)]
            internal int m_bSummonedAnimalCompanion;

            [FieldOffset(2332)]
            internal int m_bSummonedFamiliar;

            [FieldOffset(2336)]
            internal int m_bMasterDroppedFromServer;

            [FieldOffset(2340)]
            internal uint m_nMasterDroppedCalendarDay;

            [FieldOffset(2344)]
            internal uint m_nMasterDroppedTimeOfDay;

            [FieldOffset(2348)]
            internal int m_nOriginalFactionId;

            [FieldOffset(2352)]
            internal __IntPtr m_pPersonalReputationList;

            [FieldOffset(2360)]
            internal __IntPtr m_pReputation;

            [FieldOffset(2368)]
            internal __IntPtr m_pPVPList;

            [FieldOffset(2376)]
            internal uint m_oidEncounter;

            [FieldOffset(2380)]
            internal int m_bAlreadyRemovedFromEncounter;

            [FieldOffset(2384)]
            internal __IntPtr m_pInventory;

            [FieldOffset(2392)]
            internal __IntPtr m_pcItemRepository;

            [FieldOffset(2400)]
            internal ushort m_nRepositoryArrayIndex;

            [FieldOffset(2402)]
            internal ushort m_nItemContainerArrayIndex;

            [FieldOffset(2404)]
            internal uint m_oidCurrentItemContainer;

            [FieldOffset(2408)]
            internal int m_nEquippedWeight;

            [FieldOffset(2412)]
            internal int m_bComputeWeightCarried;

            [FieldOffset(2416)]
            internal int m_nEncumbranceState;

            [FieldOffset(2420)]
            internal int m_bLastPickupFailed;

            [FieldOffset(2424)]
            internal int m_nTotalWeightCarried;

            [FieldOffset(2428)]
            internal fixed uint m_pPrePolymorphedItems[18];

            [FieldOffset(2500)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refPrePolymorphPortrait;

            [FieldOffset(2532)]
            internal ushort m_nPrePolymorphPortraitId;

            [FieldOffset(2536)]
            internal int m_bIsPolymorphed;

            [FieldOffset(2540)]
            internal ushort m_nPrePolymorphAppearanceType;

            [FieldOffset(2542)]
            internal byte m_nPrePolymorphSTR;

            [FieldOffset(2543)]
            internal byte m_nPrePolymorphCON;

            [FieldOffset(2544)]
            internal byte m_nPrePolymorphDEX;

            [FieldOffset(2546)]
            internal ushort m_nPrePolymorphRacialType;

            [FieldOffset(2548)]
            internal short m_nPrePolymorphHP;

            [FieldOffset(2552)]
            internal int m_nPolymorphSpellId1;

            [FieldOffset(2556)]
            internal int m_nPolymorphSpellId2;

            [FieldOffset(2560)]
            internal int m_nPolymorphSpellId3;

            [FieldOffset(2568)]
            internal ulong m_nPolymorphACBonusEffect;

            [FieldOffset(2576)]
            internal ulong m_nPolymorphHPBonusEffect;

            [FieldOffset(2584)]
            internal int m_bHasPrePolymorphCreatureWeaponProficiency;

            [FieldOffset(2588)]
            internal int m_bPolymorphing;

            [FieldOffset(2592)]
            internal int m_bPolymorphLocked;

            [FieldOffset(2596)]
            internal global::NWN.LowLevel.CNWSCreatureAppearanceInfo.__Internal m_cAppearance;

            [FieldOffset(2744)]
            internal __IntPtr m_pStats;

            [FieldOffset(2752)]
            internal uint m_nLastRestCalendarDay;

            [FieldOffset(2756)]
            internal uint m_nLastRestTimeOfDay;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreatureC2Ejii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, uint oidId, int bCharacterObject, int bAddObjectToArray);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreatureC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ComputeSpellRangeE10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ComputeSpellRange(__IntPtr __instance, __IntPtr sTargetType, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31AddPathfindingWaitActionToFrontEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPathfindingWaitActionToFront(__IntPtr __instance, ushort nGroupId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27AddMoveToPointActionToFrontEt6Vectorjjiffiiiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddMoveToPointActionToFront(__IntPtr __instance, ushort nGroupId, global::NWN.LowLevel.Vector.__Internal vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AddMoveToPointActionEt6Vectorjjiffiiiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddMoveToPointAction(__IntPtr __instance, ushort nGroupId, global::NWN.LowLevel.Vector.__Internal vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AddDriveActionEtRK6Vectoriiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddDriveAction(__IntPtr __instance, ushort nGroupId, __IntPtr vPathStart, int nBearing, int nClientPathNumber, int nDriveFlags, int nNumWayPointsToGenerate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22AddAnimalEmpathyActionEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddAnimalEmpathyAction(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AddAttackActionsEjiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddAttackActions(__IntPtr __instance, uint oidTarget, int bPassive, int bClearAllActions, int bAddToFront);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AddCastSpellActionsEjiiii6Vectorjiiihiiih", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddCastSpellActions(__IntPtr __instance, uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, global::NWN.LowLevel.Vector.__Internal vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant, int bAllowPolymorphedCast, int nFeat, byte nCasterLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AddHealActionsEjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddHealActions(__IntPtr __instance, uint oidTarget, uint oidItemUsed, int nActivePropertyIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13AddSitActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddSitActions(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23AddItemCastSpellActionsEjii6Vectorjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddItemCastSpellActions(__IntPtr __instance, uint oidItemUsed, int nActivePropertyIndex, int nSubPropertyIndex, global::NWN.LowLevel.Vector.__Internal vTargetLocation, uint oidTarget, int bAreaTarget, int bDecrementCharges);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AddTrapActionsEjhj6Vectorj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddTrapActions(__IntPtr __instance, uint oidTrap, byte nAction, uint oidTargetObject, global::NWN.LowLevel.Vector.__Internal vPosition, uint oidTargetArea);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15AddTauntActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddTauntActions(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AddDoorActionsEjhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddDoorActions(__IntPtr __instance, uint oidDoor, byte nAction, int bAddToFront);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22AddCounterSpellActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddCounterSpellActions(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AddAppearActionsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddAppearActions(__IntPtr __instance, int nAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AddDisappearActionsEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddDisappearActions(__IntPtr __instance, int bReturning, int nAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AddDropItemActionsEj6Vectori", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddDropItemActions(__IntPtr __instance, uint oidItem, global::NWN.LowLevel.Vector.__Internal vDropLocation, int bDropGold);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AddPickUpItemActionsEjjhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPickUpItemActions(__IntPtr __instance, uint oidItem, uint oidTargetRepository, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AddEquipItemActionsEP8CNWSItemjiij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEquipItemActions(__IntPtr __instance, __IntPtr pItem, uint nInventorySlot, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature8RunEquipEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunEquip(__IntPtr __instance, uint oidItemToEquip, uint nInventorySlot, uint oidFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17AddUnequipActionsEP8CNWSItemjhhiij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddUnequipActions(__IntPtr __instance, __IntPtr pItem, uint oidTargetRepository, byte x, byte y, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10RunUnequipEjjhhij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunUnequip(__IntPtr __instance, uint oidItemToUnequip, uint oidTargetRepository, byte x, byte y, int bMergeIntoRepository, uint oidFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27AddUseTalentOnObjectActionsEiijhjihh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddUseTalentOnObjectActions(__IntPtr __instance, int nType, int nId, uint oTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature29AddUseTalentAtLocationActionsEii6Vectorhjihh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddUseTalentAtLocationActions(__IntPtr __instance, int nType, int nId, global::NWN.LowLevel.Vector.__Internal vTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12CanEquipItemEP8CNWSItemPjiiiP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CanEquipItem(__IntPtr __instance, __IntPtr pItem, uint* pEquipToSlot, int bEquipping, int bLoading, int bDisplayFeedback, __IntPtr pFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10CanUseItemEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CanUseItem(__IntPtr __instance, __IntPtr pItem, int bIgnoreIdentifiedFlag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16CanUnEquipWeaponEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CanUnEquipWeapon(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ResetItemPossessorEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetItemPossessor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24AddRepositoryMoveActionsEP8CNWSItemjhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddRepositoryMoveActions(__IntPtr __instance, __IntPtr pItem, uint oidTargetRepository, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17StartGuiTimingBarEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartGuiTimingBar(__IntPtr __instance, uint nTimeToRun, byte nGuiTimingEventID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16StopGuiTimingBarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StopGuiTimingBar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AddPickPocketActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPickPocketActions(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9AddToAreaEP8CNWSAreafffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToArea(__IntPtr __instance, __IntPtr pArea, float fX, float fY, float fZ, int bForceAdd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26SpawnInHeartbeatPerceptionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SpawnInHeartbeatPerception(__IntPtr __instance, int bAIUpdateLoop);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12GetItemCountEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetItemCount(__IntPtr __instance, int bDroppableOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11AcquireItemEPP8CNWSItemjjhhii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AcquireItem(__IntPtr __instance, __IntPtr pItem, uint oidPossessor, uint oidTargetRepository, byte x, byte y, int bOriginatingFromScript, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10RemoveItemEP8CNWSItemiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveItem(__IntPtr __instance, __IntPtr pItem, int bMergeIntoRepository, int bDisplayFeedback, int bForceRemove, int bSetPossessor);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24RemoveItemFromRepositoryEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveItemFromRepository(__IntPtr __instance, __IntPtr pItem, int bRemoveFromContainers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14RemoveFromAreaEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromArea(__IntPtr __instance, int bReturning);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12LoadCreatureEP7CResGFFP10CResStructiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCreature(__IntPtr __instance, __IntPtr pRes, __IntPtr cCreatureStruct, int bIsSaveGame, int bIsAssociate, int bPreserveItemIds, int bCopyObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12SaveCreatureEP7CResGFFP10CResStructiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveCreature(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bStoreAssociateList, int bUseDesiredAreaInfo, int bExportingChar, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16LoadFromTemplateE7CResRefP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadFromTemplate(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, __IntPtr pTag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ReadScriptsFromGffEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReadScriptsFromGff(__IntPtr __instance, __IntPtr pRes, __IntPtr pGffStructWithCreatureStats);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ReadItemsFromGffEP7CResGFFP10CResStructii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReadItemsFromGff(__IntPtr __instance, __IntPtr pRes, __IntPtr pGffStructWithCreatureStats, int bPreserveItemIDs, int bRunScripts);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20CalculateSpellSaveDCEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CalculateSpellSaveDC(__IntPtr __instance, int nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17TestAIStateAsModeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestAIStateAsMode(__IntPtr __instance, int nAIStateAction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ComputeAIStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeAIState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature8UseSkillEhhj6Vectorjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UseSkill(__IntPtr __instance, byte nSkill, byte nSubSkill, uint oidTarget, global::NWN.LowLevel.Vector.__Internal vTargetPosition, uint oidArea, uint oidUsedItem, int nActivePropertyIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7UseFeatEttjjP6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UseFeat(__IntPtr __instance, ushort nFeat, ushort nSubFeat, uint oidTarget, uint oidArea, __IntPtr pvTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7UseItemEjhhj6Vectorji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UseItem(__IntPtr __instance, uint oidItem, byte nActivePropertyIndex, byte nSubPropertyIndex, uint oidTarget, global::NWN.LowLevel.Vector.__Internal vTargetPosition, uint oidArea, int bUseCharges);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10ToggleModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ToggleMode(__IntPtr __instance, byte nMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7GetModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMode(__IntPtr __instance, byte nMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7SetModeEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMode(__IntPtr __instance, byte nMode, int bSet);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21RestoreItemPropertiesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestoreItemProperties(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26RemoveSpellActionFromRoundEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveSpellActionFromRound(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27ProcessPendingCombatActionsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ProcessPendingCombatActions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10GetFlankedEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFlanked(__IntPtr __instance, __IntPtr pTestCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18GetAttackResultHitEP20CNWSCombatAttackData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAttackResultHit(__IntPtr __instance, __IntPtr pAttackData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12DoCombatStepEhij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DoCombatStep(__IntPtr __instance, byte nStepType, int nAnimationTime, uint oidTargetObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20CalculateDamagePowerEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CalculateDamagePower(__IntPtr __instance, __IntPtr pTarget, int bOffHand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14MaxAttackRangeEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float MaxAttackRange(__IntPtr __instance, uint oidTarget, int bBaseValue, int bPassiveRange);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18DesiredAttackRangeEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float DesiredAttackRange(__IntPtr __instance, uint oidTarget, int bBaseValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14SetStealthModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetStealthMode(__IntPtr __instance, byte nHideMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23SetDefensiveCastingModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDefensiveCastingMode(__IntPtr __instance, byte nDefensiveCastingMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13SetCombatModeEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCombatMode(__IntPtr __instance, byte nMode, int bForceMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27ComputeModifiedMovementRateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeModifiedMovementRate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetTotalEffectBonusEhP10CNWSObjectiihhhhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTotalEffectBonus(__IntPtr __instance, byte nEffectBonusType, __IntPtr pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType, byte nSkill, byte nAbilityScore, int bOffHand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetFilteredEffectListEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetFilteredEffectList(__IntPtr @return, __IntPtr __instance, byte nEffectListType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14GetWeaponPowerEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetWeaponPower(__IntPtr __instance, __IntPtr pObject, int bOffHand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19SendFeedbackMessageEtP16CNWCCMessageDataP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendFeedbackMessage(__IntPtr __instance, ushort nFeedbackID, __IntPtr pMessageData, __IntPtr pFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18SendFeedbackStringE10CExoStringP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SendFeedbackString(__IntPtr __instance, global::NWN.LowLevel.CExoString.__Internal sFeedbackMessage, __IntPtr pFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9EquipItemEjP8CNWSItemii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EquipItem(__IntPtr __instance, uint nInventorySlot, __IntPtr pItem, int bApplyPropertyEffects, int bLoadingItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11UnequipItemEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnequipItem(__IntPtr __instance, __IntPtr pItem, int bUnequipWhilePolymorphed);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20DestroyEquippedItemsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyEquippedItems(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11LearnScrollEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LearnScroll(__IntPtr __instance, uint oidScrollToLearn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13ActionManagerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ActionManager(__IntPtr __instance, uint nActionTypeToAdd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15ActivityManagerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ActivityManager(__IntPtr __instance, uint nActionTypePerforming);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11GetActivityEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetActivity(__IntPtr __instance, int nActivity);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11SetActivityEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetActivity(__IntPtr __instance, int nActivity, int bValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15ClearActivitiesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearActivities(__IntPtr __instance, int nActivityTypesToRemove);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15SavingThrowRollEhthjiti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte SavingThrowRoll(__IntPtr __instance, byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus, int bPrint, ushort nFeat, int bQueueFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15GetIsInUseRangeEjfi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsInUseRange(__IntPtr __instance, uint oidUse, float fAdditionalRange, int bIgnoreTransparentDoors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11GetUseRangeEjR6VectorRf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetUseRange(__IntPtr __instance, uint oidUse, __IntPtr vUsePoint, float* fMoveRange);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12GetInvisibleEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetInvisible(__IntPtr __instance, __IntPtr pVersus, int bSendFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17StoreCutsceneVarsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StoreCutsceneVars(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19RestoreCutsceneVarsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestoreCutsceneVars(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31RemoveCombatInvisibilityEffectsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveCombatInvisibilityEffects(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17SetInvitedToPartyEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetInvitedToParty(__IntPtr __instance, int bInvitedToParty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14SetCombatStateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCombatState(__IntPtr __instance, int bState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27BroadcastCombatStateToPartyEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastCombatStateToParty(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26BroadcastAttackDataToPartyEP16CNWCCMessageDataP20CNWSCombatAttackDataPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastAttackDataToParty(__IntPtr __instance, __IntPtr pMessageData, __IntPtr pAttackData, __IntPtr pOpponent);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26BroadcastDamageDataToPartyEP16CNWCCMessageDataPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastDamageDataToParty(__IntPtr __instance, __IntPtr pMessageData, __IntPtr pOpponent);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25BroadcastDeathDataToPartyEP16CNWCCMessageDataPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastDeathDataToParty(__IntPtr __instance, __IntPtr pMessageData, __IntPtr pOpponent);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18BroadcastSkillDataEP16CNWCCMessageData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastSkillData(__IntPtr __instance, __IntPtr pMessageData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24BroadcastSavingThrowDataEP16CNWCCMessageData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastSavingThrowData(__IntPtr __instance, __IntPtr pMessageData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25BroadcastAssociateCommandEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastAssociateCommand(__IntPtr __instance, int nAssociateCommand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19SetBroadcastedAOOToEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBroadcastedAOOTo(__IntPtr __instance, int bValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23DisplayFloatyDataToSelfEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisplayFloatyDataToSelf(__IntPtr __instance, uint nStrRef);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18BroadcastSpellCastEjht", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastSpellCast(__IntPtr __instance, uint nSpellID, byte nMultiClass, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30GetNumCounterSpellingCreaturesEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumCounterSpellingCreatures(__IntPtr __instance, uint nSpellID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24ValidateCounterSpellDataEjhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ValidateCounterSpellData(__IntPtr __instance, uint nSpellID, byte nMultiClass, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20RemoveCounterspellerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveCounterspeller(__IntPtr __instance, uint oCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18BroadcastBattleCryEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastBattleCry(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18BroadcastVoiceChatEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastVoiceChat(__IntPtr __instance, byte nVoiceChatID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28BroadcastAttackOfOpportunityEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastAttackOfOpportunity(__IntPtr __instance, uint oidSingleTarget, int bMovement);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30RecomputeAmbientAnimationStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RecomputeAmbientAnimationState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12AddAssociateEjt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddAssociate(__IntPtr __instance, uint oidAssociate, ushort nAssociateType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ReceiveAssociateCommandEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReceiveAssociateCommand(__IntPtr __instance, int nCommandId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33RelayQuickChatCommandToAssociatesEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RelayQuickChatCommandToAssociates(__IntPtr __instance, ushort nSoundSetSoundID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15RemoveAssociateEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveAssociate(__IntPtr __instance, uint oidAssociate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19RemoveAllAssociatesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveAllAssociates(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14UnsummonMyselfEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnsummonMyself(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21SetPCDominatedScriptsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPCDominatedScripts(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ResetPCDominatedScriptsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetPCDominatedScripts(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16RemoveDominationEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveDomination(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31ProcessMasterDeathForAssociatesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ProcessMasterDeathForAssociates(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27BringAssociatesToNewFactionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BringAssociatesToNewFaction(__IntPtr __instance, int nFactionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26SetAssociateListenPatternsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAssociateListenPatterns(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16SetAssociateTypeEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAssociateType(__IntPtr __instance, ushort nAssociateType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14GetAssociateIdEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetAssociateId(__IntPtr __instance, ushort nAssociateType, int nNth);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetNumAssociatesOfTypeEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumAssociatesOfType(__IntPtr __instance, ushort nAssociateType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27NotifyAssociateActionToggleEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void NotifyAssociateActionToggle(__IntPtr __instance, int nMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16GetHenchmanIndexEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetHenchmanIndex(__IntPtr __instance, uint oidAssociate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21SummonAnimalCompanionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SummonAnimalCompanion(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14SummonFamiliarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SummonFamiliar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15PossessFamiliarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PossessFamiliar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17UnpossessFamiliarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnpossessFamiliar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15PossessCreatureEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PossessCreature(__IntPtr __instance, uint target);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17UnpossessCreatureEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnpossessCreature(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17PossessCreatureDMEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PossessCreatureDM(__IntPtr __instance, uint target, byte possessType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19UnpossessCreatureDMEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnpossessCreatureDM(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14DMClearScriptsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DMClearScripts(__IntPtr __instance, int @override);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21DMResetClearedScriptsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DMResetClearedScripts(__IntPtr __instance, int @override);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15GetNearestEnemyEfjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetNearestEnemy(__IntPtr __instance, float fRange, uint oidToExclude, int bVisible, int bNoCreaturesOnLine);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetCreatureReputationEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCreatureReputation(__IntPtr __instance, uint oidSource, int nSourceFactionId, int bUseOriginalFaction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28GetStandardFactionReputationEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStandardFactionReputation(__IntPtr __instance, int nStandardFactionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28SetStandardFactionReputationEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetStandardFactionReputation(__IntPtr __instance, int nStandardFactionId, int nNewReputation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AdjustReputationEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AdjustReputation(__IntPtr __instance, int nFactionId, int nAdjustment);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27AddToPersonalReputationListEjiif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToPersonalReputationList(__IntPtr __instance, uint oidObject, int nAdjustment, int bValueDecays, float fDurationInSeconds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ClearPersonalReputationEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearPersonalReputation(__IntPtr __instance, uint oidSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature37CalculatePersonalReputationAdjustmentEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CalculatePersonalReputationAdjustment(__IntPtr __instance, uint oidSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30CleanOutPersonalReputationListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanOutPersonalReputationList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26LoadPersonalReputationListEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadPersonalReputationList(__IntPtr __instance, __IntPtr pRes, __IntPtr pResStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26SavePersonalReputationListEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SavePersonalReputationList(__IntPtr __instance, __IntPtr pRes, __IntPtr pResStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17LoadAssociateListEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAssociateList(__IntPtr __instance, __IntPtr pRes, __IntPtr pResStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17SaveAssociateListEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveAssociateList(__IntPtr __instance, __IntPtr pRes, __IntPtr pResStruct, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20RealizeAssociateListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RealizeAssociateList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ReplyToInvitationEij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReplyToInvitation(__IntPtr __instance, int nInvitationReply, uint oidInvitedBy);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20CleanInvitationListsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanInvitationLists(__IntPtr __instance, int bForcePurgeEntireList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23AddToInvitationsOfferedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToInvitationsOffered(__IntPtr __instance, uint oidToAdd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25GetIsInInvitationsOfferedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsInInvitationsOffered(__IntPtr __instance, uint oidInvitedPerson);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28RemoveFromInvitationsOfferedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromInvitationsOffered(__IntPtr __instance, uint oidToRemove);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23AddToInvitationsIgnoredEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToInvitationsIgnored(__IntPtr __instance, uint oidToAdd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25GetIsInInvitationsIgnoredEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsInInvitationsIgnored(__IntPtr __instance, uint oidIgnoredPerson);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17UpdateVisibleListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateVisibleList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetVisibleListElementEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetVisibleListElement(__IntPtr __instance, uint oidCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AddToVisibleListEjiihi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToVisibleList(__IntPtr __instance, uint oidCreature, int bSeen, int bHeard, byte nSanctuary, int bInvisible);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21RemoveFromVisibleListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromVisibleList(__IntPtr __instance, uint oidCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ClearVisibleListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearVisibleList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13UpdateAutoMapEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateAutoMap(__IntPtr __instance, uint oidCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9MergeItemEP8CNWSItemS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MergeItem(__IntPtr __instance, __IntPtr pItemToMergeInto, __IntPtr pItemToMerge);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9SplitItemEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SplitItem(__IntPtr __instance, __IntPtr pItemToSplit, int nNumberToSplitOff);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22UpdateEncumbranceStateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateEncumbranceState(__IntPtr __instance, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28UpdateSubareasOnJumpPositionE6Vectorj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateSubareasOnJumpPosition(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vNewPosition, uint oidNewArea);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22UpdateSubareasOnMoveToE6VectorS0_iP13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateSubareasOnMoveTo(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vOldPosition, global::NWN.LowLevel.Vector.__Internal vNewPosition, int bIntersectingSubAreas, __IntPtr aIntersectingSubAreas, int bDriveMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25HandleSubAreaStateChangesEP13CExoArrayListIjES2_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleSubAreaStateChanges(__IntPtr __instance, __IntPtr aNewSubAreas, __IntPtr aIntersectingSubAreas, int bDriveMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11PostProcessEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PostProcess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ComputeArmourClassEP8CNWSItemii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeArmourClass(__IntPtr __instance, __IntPtr pItemToEquip, int bEquipping, int bLoadingItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15SetExcitedStateEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetExcitedState(__IntPtr __instance, byte nAction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23UpdateExcitedStateTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateExcitedStateTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature4RestEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Rest(__IntPtr __instance, int bRestingWithMaster, int bEnemyToCreatureLineOfSightCheck);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10CancelRestEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CancelRest(__IntPtr __instance, ushort nCancelFeedbackMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ApplyDiseasePayloadEP11CGameEffectjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ApplyDiseasePayload(__IntPtr __instance, __IntPtr pEffect, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ApplyPoisonPayloadEP11CGameEffectjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ApplyPoisonPayload(__IntPtr __instance, __IntPtr pEffect, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13ApplyWoundingEP11CGameEffect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ApplyWounding(__IntPtr __instance, __IntPtr pEffect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28RemoveCharmEffectsByOBJECTIDEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveCharmEffectsByOBJECTID(__IntPtr __instance, uint oidCharmer, int nRepAdjToCharmer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature29RemoveCharmEffectsByFactionIDEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveCharmEffectsByFactionID(__IntPtr __instance, int nCharmerFactionID, int nRepAdjToCharmer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18RemoveSleepEffectsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveSleepEffects(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16RemoveBadEffectsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveBadEffects(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21RemoveWoundingEffectsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveWoundingEffects(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetRelativeWeaponSizeEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRelativeWeaponSize(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12EvaluateLockEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EvaluateLock(__IntPtr __instance, __IntPtr pObject, int bLockObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17UpdateActionQueueEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateActionQueue(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23TerminateClientSidePathEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TerminateClientSidePath(__IntPtr __instance, int nClientPathNumber);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AIActionMoveToPointEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionMoveToPoint(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AIActionJumpToPointEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionJumpToPoint(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AIActionJumpToObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionJumpToObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AIActionRandomWalkEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionRandomWalk(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25AIActionChangeFacingPointEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionChangeFacingPoint(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26AIActionChangeFacingObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionChangeFacingObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33AIActionCheckInterAreaPathfindingEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckInterAreaPathfinding(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31AIActionCheckMoveAwayFromObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveAwayFromObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33AIActionCheckMoveAwayFromLocationEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveAwayFromLocation(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25AIActionCheckMoveToObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveToObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31AIActionCheckMoveToObjectRadiusEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveToObjectRadius(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24AIActionCheckMoveToPointEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveToPoint(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30AIActionCheckMoveToPointRadiusEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckMoveToPointRadius(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25AIActionForceFollowObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionForceFollowObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30AIActionCheckForceFollowObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCheckForceFollowObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13AIActionDriveEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionDrive(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19DriveUpdateLocationEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint DriveUpdateLocation(__IntPtr __instance, int bRun);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ComputeDriveDestinationEhRK6VectorS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeDriveDestination(__IntPtr __instance, byte nDriveFlags, __IntPtr vStartPoint, __IntPtr vStartOrient);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17AIActionCastSpellEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCastSpell(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21AIActionItemCastSpellEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionItemCastSpell(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22AIActionRepositoryMoveEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionRepositoryMove(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17AIActionEquipItemEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionEquipItem(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AIActionUnequipItemEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionUnequipItem(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AIActionAttackObjectEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionAttackObject(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21AIActionAnimalEmpathyEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionAnimalEmpathy(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12AIActionRestEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionRest(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13AIActionTauntEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionTaunt(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AIActionCounterSpellEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCounterSpell(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AIActionAppearEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionAppear(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17AIActionDisappearEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionDisappear(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AIActionPickPocketEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionPickPocket(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12AIActionHealEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionHeal(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11AIActionSitEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionSit(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25AIActionWaitForEndOfRoundEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionWaitForEndOfRound(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20AIActionOrientCameraEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionOrientCamera(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AIActionPickUpItemEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionPickUpItem(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AIActionDropItemEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionDropItem(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AIActionFlagTrapEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionFlagTrap(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AIActionDisarmTrapEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionDisarmTrap(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AIActionRecoverTrapEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionRecoverTrap(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19AIActionExamineTrapEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionExamineTrap(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15AIActionSetTrapEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionSetTrap(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14AIActionBarterEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionBarter(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15AIActionExamineEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionExamine(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16AIActionAreaWaitEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionAreaWait(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature32UpdateAppearanceForEquippedItemsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateAppearanceForEquippedItems(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19UpdatePersonalSpaceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdatePersonalSpace(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature29UpdateAppearanceDependantInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateAppearanceDependantInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13GetBarterInfoEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetBarterInfo(__IntPtr __instance, int bCreateIfNonExistant);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11StartBarterEjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartBarter(__IntPtr __instance, uint oidTarget, uint oidItem, int bFromActionQueue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25ClearHostileActionsVersusEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearHostileActionsVersus(__IntPtr __instance, __IntPtr pCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14PacifyCreatureEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PacifyCreature(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14PacifyCreatureEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PacifyCreature(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ClearAutoMapDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAutoMapData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14SetAutoMapDataEiPjPPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoMapData(__IntPtr __instance, int nNumAreas, uint* pAreaList, byte** pMapTileData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20ReconcileAutoMapDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReconcileAutoMapData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19SetAllTilesExploredEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAllTilesExplored(__IntPtr __instance, uint oidArea, int bExplored);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15SetTileExploredEjiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetTileExplored(__IntPtr __instance, uint oidArea, int nXPos, int nYPos, int newState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15GetTileExploredEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTileExplored(__IntPtr __instance, uint oidArea, int nXPos, int nYPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16TranslateAddressEjiiPiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TranslateAddress(__IntPtr __instance, uint oidArea, int nByteIndex, int nBitIndex, int* xPos, int* yPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12CancelActionEtt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CancelAction(__IntPtr __instance, ushort nActionID, ushort nGroupID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ForceMoveToPointEP16CNWSForcedAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ForceMoveToPoint(__IntPtr __instance, __IntPtr pForcedAction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10RequestBuyEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RequestBuy(__IntPtr __instance, uint oidItemToBuy, uint oidStore, uint oidDesiredRepository);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11RequestSellEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RequestSell(__IntPtr __instance, uint oidItemToSell, uint oidStore);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12TransferGoldEj6Vectorjihh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TransferGold(__IntPtr __instance, uint oidDestination, global::NWN.LowLevel.Vector.__Internal vDestination, uint nGoldAmount, int bBarter, byte nXpos, byte nYpos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18CancelGoldTransferEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CancelGoldTransfer(__IntPtr __instance, uint oidMaybeGold);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7SetGoldEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGold(__IntPtr __instance, int nGold);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature7AddGoldEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddGold(__IntPtr __instance, int nGoldToAdd, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10RemoveGoldEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveGold(__IntPtr __instance, int nGoldToRemove, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18InitializeQuickbarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeQuickbar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17GetQuickbarButtonEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetQuickbarButton(__IntPtr __instance, byte nButton);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22SetQuickbarButton_ItemEhjij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonItem(__IntPtr __instance, byte nButton, uint oidItem, int nPropertyID, uint oidSecondaryItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23SetQuickbarButton_SpellEhhjhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonSpell(__IntPtr __instance, byte nButton, byte nMultiClass, uint nSpellID, byte nMetaType, byte nDomainLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature34SetQuickbarButton_SpellLikeAbilityEhjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonSpellLikeAbility(__IntPtr __instance, byte nButton, uint nSpellID, byte nCasterLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature34SetQuickbarButton_AssociateCommandEhitj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonAssociateCommand(__IntPtr __instance, byte nButton, int nCommand, ushort nAssociateType, uint oidAssociate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature46SetQuickbarButton_DungeonMaster_CreateCreatureEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreateCreature(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature42SetQuickbarButton_DungeonMaster_CreateItemEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreateItem(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature47SetQuickbarButton_DungeonMaster_CreateEncounterEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreateEncounter(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature46SetQuickbarButton_DungeonMaster_CreateWaypointEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreateWaypoint(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature45SetQuickbarButton_DungeonMaster_CreateTriggerEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreateTrigger(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature44SetQuickbarButton_DungeonMaster_CreatePortalEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreatePortal(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature47SetQuickbarButton_DungeonMaster_CreatePlaceableEhRK7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDungeonMasterCreatePlaceable(__IntPtr __instance, byte nButton, __IntPtr @ref, __IntPtr sToolTip);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature29SetQuickbarButton_CommandLineEhRK10CExoStringS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonCommandLine(__IntPtr __instance, byte nButton, __IntPtr label, __IntPtr cmd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature40SetQuickbarButton_DM_General_ResRefParamEhhRK7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonDM_GeneralResRefParam(__IntPtr __instance, byte nButton, byte nObjectType, __IntPtr @ref);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature32SetQuickbarButton_GeneralNoParamEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonGeneralNoParam(__IntPtr __instance, byte nButton, byte nObjectType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33SetQuickbarButton_GeneralINTParamEhhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetQuickbarButtonGeneralINTParam(__IntPtr __instance, byte nButton, byte nObjectType, int nParam);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25QuickbarButton_RemoveItemEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void QuickbarButtonRemoveItem(__IntPtr __instance, uint oidItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26QuickbarButton_RemoveSpellEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void QuickbarButtonRemoveSpell(__IntPtr __instance, uint nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17LoadPolymorphDataEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPolymorphData(__IntPtr __instance, __IntPtr pRes, __IntPtr pResStruct, int bRunItemScripts);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16LoadQuickButtonsEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadQuickButtons(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25CreateDefaultQuickButtonsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateDefaultQuickButtons(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature35CreateDefaultQuickButtons_CheckItemEP8CNWSItemRjS2_S2_S2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateDefaultQuickButtonsCheckItem(__IntPtr __instance, __IntPtr pItem, uint* nMaxCostRanged, uint* nMaxCostMelee, uint* oidRangedWeapon, uint* oidMeleeWeapon);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33CreateDefaultQuickButtons_AddFeatERhti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateDefaultQuickButtonsAddFeat(__IntPtr __instance, byte* nButton, ushort nFeat, int bDomainFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27CreateDefaultQuickButtonsDMEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateDefaultQuickButtonsDM(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22CopyQuickButtonsFromDMEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyQuickButtonsFromDM(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16LoadQuickBarHackE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadQuickBarHack(__IntPtr __instance, __IntPtr sFilename);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16SaveQuickBarHackE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveQuickBarHack(__IntPtr __instance, __IntPtr sFilename);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28ConvertModeToggleQuickButtonEP18CNWSQuickbarButton", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ConvertModeToggleQuickButton(__IntPtr __instance, __IntPtr pButton);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15LoadAutoMapDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAutoMapData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15SaveAutoMapDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveAutoMapData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20ApplyDeathExperienceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyDeathExperience(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24CalculateDeathExperienceEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float CalculateDeathExperience(__IntPtr __instance, int nPartyPotentialLevel, int nPartyEffectiveLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20ResolveDamageShieldsEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveDamageShields(__IntPtr __instance, __IntPtr pAttacker);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ResolveDefensiveEffectsEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ResolveDefensiveEffects(__IntPtr __instance, __IntPtr pTarget, int bAttackHit);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ResolveInitiativeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveInitiative(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28EquipMostDamagingMeleeWeaponEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EquipMostDamagingMeleeWeapon(__IntPtr __instance, uint oidVersus, int bOffHand, int bEquipGeneralWeapon);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature29EquipMostDamagingRangedWeaponEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EquipMostDamagingRangedWeapon(__IntPtr __instance, uint oidVersus);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27EquipMostDamagingAmmunitionEjP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EquipMostDamagingAmmunition(__IntPtr __instance, uint oidVersus, __IntPtr pWeapon);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20GetIsWeaponEffectiveEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsWeaponEffective(__IntPtr __instance, uint oidVersus, int bOffHand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23EquipMostEffectiveArmorEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EquipMostEffectiveArmor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28DoPerceptionUpdateOnCreatureEPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DoPerceptionUpdateOnCreature(__IntPtr __instance, __IntPtr pTarget, int bHideInPlainSight);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13UseLoreOnItemEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UseLoreOnItem(__IntPtr __instance, uint oidItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17PayToIdentifyItemEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PayToIdentifyItem(__IntPtr __instance, uint oidItem, uint oidStore);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24DecrementSpellReadyCountEjhhhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DecrementSpellReadyCount(__IntPtr __instance, uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType, byte nCasterLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AutoCloseGUIPanelsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AutoCloseGUIPanels(__IntPtr __instance, int bCheckStoreDistance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15CutWaypointPathEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CutWaypointPath(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26FailedOpenInformAssociatesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FailedOpenInformAssociates(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23SawTrapInformAssociatesEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SawTrapInformAssociates(__IntPtr __instance, uint oidTrap);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12AddToPVPListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToPVPList(__IntPtr __instance, uint oidPC);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17RemoveFromPVPListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromPVPList(__IntPtr __instance, uint oidPC);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19SetPVPPlayerLikesMeEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPVPPlayerLikesMe(__IntPtr __instance, uint oidPC, int bNewAttitude, int bSetReciprocal);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetPVPPlayerLikesMeEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPVPPlayerLikesMe(__IntPtr __instance, uint oidPC);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12SetInTransitEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetInTransit(__IntPtr __instance, int nInTransit);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9PolymorphEiP11CGameEffecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Polymorph(__IntPtr __instance, int nPolymorphType, __IntPtr pParentEffect, int bLoadingGame);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11UnPolymorphEP11CGameEffect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnPolymorph(__IntPtr __instance, __IntPtr pParentEffect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature32RestorePolymorphToOutputCreatureEP27CNWSCreRestorePolymorphData", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestorePolymorphToOutputCreature(__IntPtr __instance, __IntPtr polyData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26CheckInventoryForPlotItemsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckInventoryForPlotItems(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature9DumpToLogEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DumpToLog(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetIsCreatureBumpableEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsCreatureBumpable(__IntPtr __instance, __IntPtr pBlockingCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21ExternalResolveAttackEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ExternalResolveAttack(__IntPtr __instance, uint oidTarget, int nAttackTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24BroadcastWhirlwindAttackEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BroadcastWhirlwindAttack(__IntPtr __instance, int bAttackMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33RestoreItemPropertiesInRepositoryEP15CItemRepository", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestoreItemPropertiesInRepository(__IntPtr __instance, __IntPtr pItemRepository);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11BumpFriendsEPS_RK6VectorS3_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int BumpFriends(__IntPtr __instance, __IntPtr pBlockingCreature, __IntPtr vStart, __IntPtr vEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16GetPVPReputationEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPVPReputation(__IntPtr __instance, uint oidSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetPVPPlayerLikesMeEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPVPPlayerLikesMe(__IntPtr __instance, uint oidPC, byte nPVPSetting);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17InitialisePVPListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitialisePVPList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31SetAssociatesToForgetAggressionEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAssociatesToForgetAggression(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22RemoveDominationEffectEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveDominationEffect(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14CanEquipWeaponEP8CNWSItemPjiiP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CanEquipWeapon(__IntPtr __instance, __IntPtr pItem, uint* nEquipToSlot, int bEquipping, int bDisplayFeedback, __IntPtr pFeedbackPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14CanEquipShieldEP8CNWSItemii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CanEquipShield(__IntPtr __instance, __IntPtr pItem, int bEquipping, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21CanEquipMiscellaneousEP8CNWSItemPjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CanEquipMiscellaneous(__IntPtr __instance, __IntPtr pItem, uint* pEquipSlot, int bEquipping, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18CheckProficienciesEP8CNWSItemj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckProficiencies(__IntPtr __instance, __IntPtr pItem, uint nEquipToSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26CheckItemClassRestrictionsEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckItemClassRestrictions(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30CheckItemAlignmentRestrictionsEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckItemAlignmentRestrictions(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25CheckItemRaceRestrictionsEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckItemRaceRestrictions(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24CheckUseMagicDeviceSkillEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckUseMagicDeviceSkill(__IntPtr __instance, __IntPtr pItem, int nCheckType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16SaveQuickButtonsEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveQuickButtons(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15UpdateTrapCheckEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateTrapCheck(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17UpdateTrapCheckDMEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateTrapCheckDM(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18DoStealthDetectionEPS_iPiS1_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DoStealthDetection(__IntPtr __instance, __IntPtr pHidingCreature, int bClearLOS, int* bSeen, int* bHeard, int bTargetHiding);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17DoListenDetectionEPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DoListenDetection(__IntPtr __instance, __IntPtr pHidingCreature, int bTargetInvisible);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15DoSpotDetectionEPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DoSpotDetection(__IntPtr __instance, __IntPtr pHidingCreature, int bTargetInvisible);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ComputeAIStateOnActionEij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeAIStateOnAction(__IntPtr __instance, int nActionId, uint oidActionTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22UpdateCombatRoundTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateCombatRoundTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18AddToAssociateListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToAssociateList(__IntPtr __instance, uint oidAssociate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23RemoveFromAssociateListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromAssociateList(__IntPtr __instance, uint oidAssociate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ReprocessAssociateListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReprocessAssociateList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18CheckMasterIsValidEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckMasterIsValid(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15SummonAssociateE7CResRef10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SummonAssociate(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, __IntPtr sAssociateName, ushort nAssociateType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16CheckVisibleListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckVisibleList(__IntPtr __instance, uint oidCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13ResolveAttackEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveAttack(__IntPtr __instance, uint oidTarget, int nAttacks, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ResolveAttackRollEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveAttackRoll(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ResolveSneakAttackEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveSneakAttack(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ResolveDeathAttackEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveDeathAttack(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27ResolveCachedSpecialAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveCachedSpecialAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27ResolveSituationalModifiersEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveSituationalModifiers(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13ResolveDamageEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveDamage(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20ResolveItemCastSpellEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveItemCastSpell(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ResolveElementalDamageEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveElementalDamage(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ResolveOnHitEffectEP10CNWSObjectii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveOnHitEffect(__IntPtr __instance, __IntPtr pTarget, int bOffHandAttack, int bCritical);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ResolveOnHitVisualsEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveOnHitVisuals(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ResolveRangedAttackEP10CNWSObjectii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveRangedAttack(__IntPtr __instance, __IntPtr pTarget, int nAttacks, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26ResolveRangedSpecialAttackEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveRangedSpecialAttack(__IntPtr __instance, __IntPtr pTarget, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ResolvePostRangedDamageEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolvePostRangedDamage(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ResolveRangedAnimationsEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveRangedAnimations(__IntPtr __instance, __IntPtr pTarget, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ResolveRangedMissEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveRangedMiss(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18SignalRangedDamageEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SignalRangedDamage(__IntPtr __instance, __IntPtr pTarget, int nAttacks);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ResolveAmmunitionEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveAmmunition(__IntPtr __instance, uint nTimeIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21ResolveSafeProjectileEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveSafeProjectile(__IntPtr __instance, uint nTimeIndex, int nAttackIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetAmmunitionAvailableEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAmmunitionAvailable(__IntPtr __instance, int nNumAttacks);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ResolveMeleeAttackEP10CNWSObjectii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveMeleeAttack(__IntPtr __instance, __IntPtr pTarget, int nAttacks, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25ResolveMeleeSpecialAttackEiiP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveMeleeSpecialAttack(__IntPtr __instance, int nAttackIndex, int nAttacks, __IntPtr pTarget, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ResolveMeleeAnimationsEiiP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveMeleeAnimations(__IntPtr __instance, int nAttackIndex, int nAttacks, __IntPtr pTarget, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ResolvePostMeleeDamageEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolvePostMeleeDamage(__IntPtr __instance, __IntPtr pTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17SignalMeleeDamageEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SignalMeleeDamage(__IntPtr __instance, __IntPtr pTarget, int nAttacks);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ApplyOnHitBlindnessEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitBlindness(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ApplyOnHitConfusionEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitConfusion(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitDazeEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDaze(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ApplyOnHitDeafnessEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDeafness(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21ApplyOnHitDeathAttackEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDeathAttack(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ApplyOnHitDominateEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDominate(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitDoomEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDoom(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitFearEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitFear(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitHoldEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitHold(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ApplyOnHitSilenceEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSilence(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15ApplyOnHitSleepEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSleep(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitSlowEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSlow(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14ApplyOnHitStunEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitStun(__IntPtr __instance, __IntPtr pTarget, int nDurationRounds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18ApplyOnHitWoundingEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitWounding(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ApplyOnHitVorpalEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitVorpal(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19ApplyOnHitCastSpellEP10CNWSObjectP15CNWItemPropertyP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitCastSpell(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21ApplyOnHitDispelMagicEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDispelMagic(__IntPtr __instance, __IntPtr pTarget, uint oidAttackItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ApplyOnHitGreaterDispelEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitGreaterDispel(__IntPtr __instance, __IntPtr pTarget, uint oidAttackItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature15ApplyOnHitKnockEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitKnock(__IntPtr __instance, __IntPtr pTarget, uint oidAttackItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22ApplyOnHitLesserDispelEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitLesserDispel(__IntPtr __instance, __IntPtr pTarget, uint oidAttackItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27ApplyOnHitMordysDisjunctionEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitMordysDisjunction(__IntPtr __instance, __IntPtr pTarget, uint oidAttackItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30ApplyOnHitVampiricRegenerationEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitVampiricRegeneration(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21ApplyOnHitDispelMagicEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDispelMagic(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ApplyOnHitAbilityDamageEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitAbilityDamage(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature17ApplyOnHitDiseaseEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitDisease(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature16ApplyOnHitPoisonEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitPoison(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature23ApplyOnHitSlayAlignmentEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSlayAlignment(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature28ApplyOnHitSlayAlignmentGroupEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSlayAlignmentGroup(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25ApplyOnHitSlayRacialGroupEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitSlayRacialGroup(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20ApplyOnHitLevelDrainEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyOnHitLevelDrain(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetCanSlayAlignmentEP10CNWSObjectP15CNWItemProperty", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCanSlayAlignment(__IntPtr __instance, __IntPtr pTarget, __IntPtr pProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature27CalculateMaxElementalDamageEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CalculateMaxElementalDamage(__IntPtr __instance, __IntPtr pTarget, int bOffHand);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature31CalculateProjectileTimeToTargetE6Vectori", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint CalculateProjectileTimeToTarget(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, int bThrownWeapon);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26WalkUpdateLocationDistanceEfP6VectorS1_P13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WalkUpdateLocationDistance(__IntPtr __instance, float fDistance, __IntPtr vNewPosition, __IntPtr vNewOrientation, __IntPtr aIntersectingSubAreas);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30WalkUpdateLocationTestDistanceE6VectorS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WalkUpdateLocationTestDistance(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vStart, global::NWN.LowLevel.Vector.__Internal vEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21GetMovementRateFactorEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetMovementRateFactor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature21SetMovementRateFactorEf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMovementRateFactor(__IntPtr __instance, float fValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature11GetWalkRateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetWalkRate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10GetRunRateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetRunRate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetUseMonkAbilitiesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetUseMonkAbilities(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13GetFlatFootedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFlatFooted(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature12GetIsInMeleeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsInMelee(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13GetArmorClassEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short GetArmorClass(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature14GetDamageFlagsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetDamageFlags(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13GetDetectModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetDetectMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13SetDetectModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDetectMode(__IntPtr __instance, byte nDetectMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26GetSpellOrHealActionQueuedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpellOrHealActionQueued(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature30GetHasInvisbilityEffectAppliedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetHasInvisbilityEffectApplied(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature8GetBlindEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetBlind(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26GetIsAbleToPossessFamiliarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsAbleToPossessFamiliar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetIsPossessedFamiliarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsPossessedFamiliar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetDominatedCreatureIdEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetDominatedCreatureId(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10GetFactionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetFaction(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature13GetNumInvitedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumInvited(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetRangeWeaponEquippedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRangeWeaponEquipped(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10GetUnarmedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetUnarmed(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20UpdateSpecialAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateSpecialAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature36AIActionEncounterCreatureDestroySelfEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionEncounterCreatureDestroySelf(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature10GetJournalEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetJournal(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20GetSpotCheckDistanceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetSpotCheckDistance(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature22GetListenCheckDistanceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetListenCheckDistance(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature25ComputeTotalWeightCarriedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeTotalWeightCarried(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature26ComputeTotalEquippedWeightEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeTotalEquippedWeight(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature33RemovePolymorphFromOutputCreatureEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr RemovePolymorphFromOutputCreature(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature19GetTurnResistanceHDEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTurnResistanceHD(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature20GetBodyBagAppearanceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetBodyBagAppearance(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature24ComputeTotalWalkDistanceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ComputeTotalWalkDistance(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CNWSCreature18WalkUpdateLocationEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint WalkUpdateLocation(__IntPtr __instance);
        }

        internal static new CNWSCreature __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSCreature(native.ToPointer(), skipVTables);
        }

        internal static new CNWSCreature __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSCreature)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CNWSCreature __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWSCreature)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWSCreature __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSCreature(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSCreature.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSCreature(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSCreature(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWSCreature(uint oidId, int bCharacterObject, int bAddObjectToArray)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCreature.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, oidId, bCharacterObject, bAddObjectToArray);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSCreature");
        }

        public CNWSCreature(global::NWN.LowLevel.CNWSCreature _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCreature.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSCreature");
        }

        public override void SetId(uint oidNew)
        {
            base.SetId(oidNew);
        }

        public float ComputeSpellRange(global::NWN.LowLevel.CExoString sTargetType, uint oidTarget)
        {
            if (ReferenceEquals(sTargetType, null))
                throw new global::System.ArgumentNullException("sTargetType", "Cannot be null because it is passed by value.");
            var __arg0 = sTargetType.__Instance;
            var __ret = __Internal.ComputeSpellRange(__Instance, __arg0, oidTarget);
            return __ret;
        }

        public int AddPathfindingWaitActionToFront(ushort nGroupId)
        {
            var __ret = __Internal.AddPathfindingWaitActionToFront(__Instance, nGroupId);
            return __ret;
        }

        public int AddMoveToPointActionToFront(ushort nGroupId, global::NWN.LowLevel.Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint)
        {
            if (ReferenceEquals(vNewWalkPosition, null))
                throw new global::System.ArgumentNullException("vNewWalkPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vNewWalkPosition.__Instance;
            var __ret = __Internal.AddMoveToPointActionToFront(__Instance, nGroupId, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine, bCheckedActionPoint);
            return __ret;
        }

        public int AddMoveToPointAction(ushort nGroupId, global::NWN.LowLevel.Vector vNewWalkPosition, uint oidNewWalkArea, uint oidObjectMovingTo, int bRunToPoint, float fRange, float fTimeout, int bClientMoving, int nClientPathNumber, int nMoveToPosition, int nMoveMode, int bStraightLine, int bCheckedActionPoint)
        {
            if (ReferenceEquals(vNewWalkPosition, null))
                throw new global::System.ArgumentNullException("vNewWalkPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vNewWalkPosition.__Instance;
            var __ret = __Internal.AddMoveToPointAction(__Instance, nGroupId, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, oidNewWalkArea, oidObjectMovingTo, bRunToPoint, fRange, fTimeout, bClientMoving, nClientPathNumber, nMoveToPosition, nMoveMode, bStraightLine, bCheckedActionPoint);
            return __ret;
        }

        public int AddDriveAction(ushort nGroupId, global::NWN.LowLevel.Vector vPathStart, int nBearing, int nClientPathNumber, int nDriveFlags, int nNumWayPointsToGenerate)
        {
            if (ReferenceEquals(vPathStart, null))
                throw new global::System.ArgumentNullException("vPathStart", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vPathStart.__Instance;
            var __ret = __Internal.AddDriveAction(__Instance, nGroupId, __arg1, nBearing, nClientPathNumber, nDriveFlags, nNumWayPointsToGenerate);
            return __ret;
        }

        public int AddAnimalEmpathyAction(uint oidTarget)
        {
            var __ret = __Internal.AddAnimalEmpathyAction(__Instance, oidTarget);
            return __ret;
        }

        public int AddAttackActions(uint oidTarget, int bPassive, int bClearAllActions, int bAddToFront)
        {
            var __ret = __Internal.AddAttackActions(__Instance, oidTarget, bPassive, bClearAllActions, bAddToFront);
            return __ret;
        }

        public int AddCastSpellActions(uint nSpellId, int nMultiClass, int nDomainLevel, int nMetaType, int bSpontaneousCast, global::NWN.LowLevel.Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bAddToFront, int bFake, byte nProjectilePathType, int bInstant, int bAllowPolymorphedCast, int nFeat, byte nCasterLevel)
        {
            if (ReferenceEquals(vTargetLocation, null))
                throw new global::System.ArgumentNullException("vTargetLocation", "Cannot be null because it is passed by value.");
            var __arg5 = vTargetLocation.__Instance;
            var __ret = __Internal.AddCastSpellActions(__Instance, nSpellId, nMultiClass, nDomainLevel, nMetaType, bSpontaneousCast, *(global::NWN.LowLevel.Vector.__Internal*) __arg5, oidTarget, bAreaTarget, bAddToFront, bFake, nProjectilePathType, bInstant, bAllowPolymorphedCast, nFeat, nCasterLevel);
            return __ret;
        }

        public int AddHealActions(uint oidTarget, uint oidItemUsed, int nActivePropertyIndex)
        {
            var __ret = __Internal.AddHealActions(__Instance, oidTarget, oidItemUsed, nActivePropertyIndex);
            return __ret;
        }

        public int AddSitActions(uint oidTarget)
        {
            var __ret = __Internal.AddSitActions(__Instance, oidTarget);
            return __ret;
        }

        public int AddItemCastSpellActions(uint oidItemUsed, int nActivePropertyIndex, int nSubPropertyIndex, global::NWN.LowLevel.Vector vTargetLocation, uint oidTarget, int bAreaTarget, int bDecrementCharges)
        {
            if (ReferenceEquals(vTargetLocation, null))
                throw new global::System.ArgumentNullException("vTargetLocation", "Cannot be null because it is passed by value.");
            var __arg3 = vTargetLocation.__Instance;
            var __ret = __Internal.AddItemCastSpellActions(__Instance, oidItemUsed, nActivePropertyIndex, nSubPropertyIndex, *(global::NWN.LowLevel.Vector.__Internal*) __arg3, oidTarget, bAreaTarget, bDecrementCharges);
            return __ret;
        }

        public int AddTrapActions(uint oidTrap, byte nAction, uint oidTargetObject, global::NWN.LowLevel.Vector vPosition, uint oidTargetArea)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg3 = vPosition.__Instance;
            var __ret = __Internal.AddTrapActions(__Instance, oidTrap, nAction, oidTargetObject, *(global::NWN.LowLevel.Vector.__Internal*) __arg3, oidTargetArea);
            return __ret;
        }

        public int AddTauntActions(uint oidTarget)
        {
            var __ret = __Internal.AddTauntActions(__Instance, oidTarget);
            return __ret;
        }

        public int AddDoorActions(uint oidDoor, byte nAction, int bAddToFront)
        {
            var __ret = __Internal.AddDoorActions(__Instance, oidDoor, nAction, bAddToFront);
            return __ret;
        }

        public int AddCounterSpellActions(uint oidTarget)
        {
            var __ret = __Internal.AddCounterSpellActions(__Instance, oidTarget);
            return __ret;
        }

        public int AddAppearActions(int nAnimation)
        {
            var __ret = __Internal.AddAppearActions(__Instance, nAnimation);
            return __ret;
        }

        public int AddDisappearActions(int bReturning, int nAnimation)
        {
            var __ret = __Internal.AddDisappearActions(__Instance, bReturning, nAnimation);
            return __ret;
        }

        public int AddDropItemActions(uint oidItem, global::NWN.LowLevel.Vector vDropLocation, int bDropGold)
        {
            if (ReferenceEquals(vDropLocation, null))
                throw new global::System.ArgumentNullException("vDropLocation", "Cannot be null because it is passed by value.");
            var __arg1 = vDropLocation.__Instance;
            var __ret = __Internal.AddDropItemActions(__Instance, oidItem, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, bDropGold);
            return __ret;
        }

        public int AddPickUpItemActions(uint oidItem, uint oidTargetRepository, byte x, byte y)
        {
            var __ret = __Internal.AddPickUpItemActions(__Instance, oidItem, oidTargetRepository, x, y);
            return __ret;
        }

        public int AddEquipItemActions(global::NWN.LowLevel.CNWSItem pItem, uint nInventorySlot, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.AddEquipItemActions(__Instance, __arg0, nInventorySlot, bAddToFront, bForceAddAction, oidFeedbackPlayer);
            return __ret;
        }

        public int RunEquip(uint oidItemToEquip, uint nInventorySlot, uint oidFeedbackPlayer)
        {
            var __ret = __Internal.RunEquip(__Instance, oidItemToEquip, nInventorySlot, oidFeedbackPlayer);
            return __ret;
        }

        public int AddUnequipActions(global::NWN.LowLevel.CNWSItem pItem, uint oidTargetRepository, byte x, byte y, int bAddToFront, int bForceAddAction, uint oidFeedbackPlayer)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.AddUnequipActions(__Instance, __arg0, oidTargetRepository, x, y, bAddToFront, bForceAddAction, oidFeedbackPlayer);
            return __ret;
        }

        public int RunUnequip(uint oidItemToUnequip, uint oidTargetRepository, byte x, byte y, int bMergeIntoRepository, uint oidFeedbackPlayer)
        {
            var __ret = __Internal.RunUnequip(__Instance, oidItemToUnequip, oidTargetRepository, x, y, bMergeIntoRepository, oidFeedbackPlayer);
            return __ret;
        }

        public int AddUseTalentOnObjectActions(int nType, int nId, uint oTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType)
        {
            var __ret = __Internal.AddUseTalentOnObjectActions(__Instance, nType, nId, oTarget, nMultiClass, oidItem, nItemPropertyIndex, nCasterLevel, nMetaType);
            return __ret;
        }

        public int AddUseTalentAtLocationActions(int nType, int nId, global::NWN.LowLevel.Vector vTarget, byte nMultiClass, uint oidItem, int nItemPropertyIndex, byte nCasterLevel, byte nMetaType)
        {
            if (ReferenceEquals(vTarget, null))
                throw new global::System.ArgumentNullException("vTarget", "Cannot be null because it is passed by value.");
            var __arg2 = vTarget.__Instance;
            var __ret = __Internal.AddUseTalentAtLocationActions(__Instance, nType, nId, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, nMultiClass, oidItem, nItemPropertyIndex, nCasterLevel, nMetaType);
            return __ret;
        }

        public byte CanEquipItem(global::NWN.LowLevel.CNWSItem pItem, ref uint pEquipToSlot, int bEquipping, int bLoading, int bDisplayFeedback, global::NWN.LowLevel.CNWSPlayer pFeedbackPlayer)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            fixed (uint* __pEquipToSlot1 = &pEquipToSlot)
            {
                var __arg1 = __pEquipToSlot1;
                var __arg5 = pFeedbackPlayer is null ? __IntPtr.Zero : pFeedbackPlayer.__Instance;
                var __ret = __Internal.CanEquipItem(__Instance, __arg0, __arg1, bEquipping, bLoading, bDisplayFeedback, __arg5);
                return __ret;
            }
        }

        public int CanUseItem(global::NWN.LowLevel.CNWSItem pItem, int bIgnoreIdentifiedFlag)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CanUseItem(__Instance, __arg0, bIgnoreIdentifiedFlag);
            return __ret;
        }

        public byte CanUnEquipWeapon(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CanUnEquipWeapon(__Instance, __arg0);
            return __ret;
        }

        public void ResetItemPossessor()
        {
            __Internal.ResetItemPossessor(__Instance);
        }

        public int AddRepositoryMoveActions(global::NWN.LowLevel.CNWSItem pItem, uint oidTargetRepository, byte x, byte y)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.AddRepositoryMoveActions(__Instance, __arg0, oidTargetRepository, x, y);
            return __ret;
        }

        public void StartGuiTimingBar(uint nTimeToRun, byte nGuiTimingEventID)
        {
            __Internal.StartGuiTimingBar(__Instance, nTimeToRun, nGuiTimingEventID);
        }

        public void StopGuiTimingBar()
        {
            __Internal.StopGuiTimingBar(__Instance);
        }

        public int AddPickPocketActions(uint oidTarget)
        {
            var __ret = __Internal.AddPickPocketActions(__Instance, oidTarget);
            return __ret;
        }

        public void AddToArea(global::NWN.LowLevel.CNWSArea pArea, float fX, float fY, float fZ, int bForceAdd)
        {
            var __arg0 = pArea is null ? __IntPtr.Zero : pArea.__Instance;
            __Internal.AddToArea(__Instance, __arg0, fX, fY, fZ, bForceAdd);
        }

        public override void AIUpdate()
        {
            base.AIUpdate();
        }

        public void SpawnInHeartbeatPerception(int bAIUpdateLoop)
        {
            __Internal.SpawnInHeartbeatPerception(__Instance, bAIUpdateLoop);
        }

        public override void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay)
        {
            base.ResetUpdateTimes(nCalendarDay, nTimeOfDay);
        }

        public override void EventHandler(uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay)
        {
            base.EventHandler(nEventId, nCallerObjectId, pScript, nCalendarDay, nTimeOfDay);
        }

        public uint GetItemCount(int bDroppableOnly)
        {
            var __ret = __Internal.GetItemCount(__Instance, bDroppableOnly);
            return __ret;
        }

        public int AcquireItem(global::NWN.LowLevel.CNWSItem pItem, uint oidPossessor, uint oidTargetRepository, byte x, byte y, int bOriginatingFromScript, int bDisplayFeedback)
        {
            var ____arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __ret = __Internal.AcquireItem(__Instance, __arg0, oidPossessor, oidTargetRepository, x, y, bOriginatingFromScript, bDisplayFeedback);
            return __ret;
        }

        public int RemoveItem(global::NWN.LowLevel.CNWSItem pItem, int bMergeIntoRepository, int bDisplayFeedback, int bForceRemove, int bSetPossessor)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.RemoveItem(__Instance, __arg0, bMergeIntoRepository, bDisplayFeedback, bForceRemove, bSetPossessor);
            return __ret;
        }

        public int RemoveItemFromRepository(global::NWN.LowLevel.CNWSItem pItem, int bRemoveFromContainers)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.RemoveItemFromRepository(__Instance, __arg0, bRemoveFromContainers);
            return __ret;
        }

        public void RemoveFromArea(int bReturning)
        {
            __Internal.RemoveFromArea(__Instance, bReturning);
        }

        public int LoadCreature(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct cCreatureStruct, int bIsSaveGame, int bIsAssociate, int bPreserveItemIds, int bCopyObject)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = cCreatureStruct is null ? __IntPtr.Zero : cCreatureStruct.__Instance;
            var __ret = __Internal.LoadCreature(__Instance, __arg0, __arg1, bIsSaveGame, bIsAssociate, bPreserveItemIds, bCopyObject);
            return __ret;
        }

        public int SaveCreature(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bStoreAssociateList, int bUseDesiredAreaInfo, int bExportingChar, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveCreature(__Instance, __arg0, __arg1, bStoreAssociateList, bUseDesiredAreaInfo, bExportingChar, bSaveOIDs);
            return __ret;
        }

        public int LoadFromTemplate(global::NWN.LowLevel.CResRef cResRef, global::NWN.LowLevel.CExoString pTag)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            var __arg1 = pTag is null ? __IntPtr.Zero : pTag.__Instance;
            var __ret = __Internal.LoadFromTemplate(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, __arg1);
            return __ret;
        }

        public void ReadScriptsFromGff(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pGffStructWithCreatureStats)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pGffStructWithCreatureStats is null ? __IntPtr.Zero : pGffStructWithCreatureStats.__Instance;
            __Internal.ReadScriptsFromGff(__Instance, __arg0, __arg1);
        }

        public void ReadItemsFromGff(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pGffStructWithCreatureStats, int bPreserveItemIDs, int bRunScripts)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pGffStructWithCreatureStats is null ? __IntPtr.Zero : pGffStructWithCreatureStats.__Instance;
            __Internal.ReadItemsFromGff(__Instance, __arg0, __arg1, bPreserveItemIDs, bRunScripts);
        }

        public int CalculateSpellSaveDC(int nSpellId)
        {
            var __ret = __Internal.CalculateSpellSaveDC(__Instance, nSpellId);
            return __ret;
        }

        public int TestAIStateAsMode(int nAIStateAction)
        {
            var __ret = __Internal.TestAIStateAsMode(__Instance, nAIStateAction);
            return __ret;
        }

        public void ComputeAIState()
        {
            __Internal.ComputeAIState(__Instance);
        }

        public int UseSkill(byte nSkill, byte nSubSkill, uint oidTarget, global::NWN.LowLevel.Vector vTargetPosition, uint oidArea, uint oidUsedItem, int nActivePropertyIndex)
        {
            if (ReferenceEquals(vTargetPosition, null))
                throw new global::System.ArgumentNullException("vTargetPosition", "Cannot be null because it is passed by value.");
            var __arg3 = vTargetPosition.__Instance;
            var __ret = __Internal.UseSkill(__Instance, nSkill, nSubSkill, oidTarget, *(global::NWN.LowLevel.Vector.__Internal*) __arg3, oidArea, oidUsedItem, nActivePropertyIndex);
            return __ret;
        }

        public int UseFeat(ushort nFeat, ushort nSubFeat, uint oidTarget, uint oidArea, global::NWN.LowLevel.Vector pvTarget)
        {
            var __arg4 = pvTarget is null ? __IntPtr.Zero : pvTarget.__Instance;
            var __ret = __Internal.UseFeat(__Instance, nFeat, nSubFeat, oidTarget, oidArea, __arg4);
            return __ret;
        }

        public int UseItem(uint oidItem, byte nActivePropertyIndex, byte nSubPropertyIndex, uint oidTarget, global::NWN.LowLevel.Vector vTargetPosition, uint oidArea, int bUseCharges)
        {
            if (ReferenceEquals(vTargetPosition, null))
                throw new global::System.ArgumentNullException("vTargetPosition", "Cannot be null because it is passed by value.");
            var __arg4 = vTargetPosition.__Instance;
            var __ret = __Internal.UseItem(__Instance, oidItem, nActivePropertyIndex, nSubPropertyIndex, oidTarget, *(global::NWN.LowLevel.Vector.__Internal*) __arg4, oidArea, bUseCharges);
            return __ret;
        }

        public int ToggleMode(byte nMode)
        {
            var __ret = __Internal.ToggleMode(__Instance, nMode);
            return __ret;
        }

        public int GetMode(byte nMode)
        {
            var __ret = __Internal.GetMode(__Instance, nMode);
            return __ret;
        }

        public void SetMode(byte nMode, int bSet)
        {
            __Internal.SetMode(__Instance, nMode, bSet);
        }

        public void RestoreItemProperties()
        {
            __Internal.RestoreItemProperties(__Instance);
        }

        public void RemoveSpellActionFromRound()
        {
            __Internal.RemoveSpellActionFromRound(__Instance);
        }

        public void ProcessPendingCombatActions()
        {
            __Internal.ProcessPendingCombatActions(__Instance);
        }

        public int GetFlanked(global::NWN.LowLevel.CNWSCreature pTestCreature)
        {
            var __arg0 = pTestCreature is null ? __IntPtr.Zero : pTestCreature.__Instance;
            var __ret = __Internal.GetFlanked(__Instance, __arg0);
            return __ret;
        }

        public int GetAttackResultHit(global::NWN.LowLevel.CNWSCombatAttackData pAttackData)
        {
            var __arg0 = pAttackData is null ? __IntPtr.Zero : pAttackData.__Instance;
            var __ret = __Internal.GetAttackResultHit(__Instance, __arg0);
            return __ret;
        }

        public void DoCombatStep(byte nStepType, int nAnimationTime, uint oidTargetObject)
        {
            __Internal.DoCombatStep(__Instance, nStepType, nAnimationTime, oidTargetObject);
        }

        public override short GetMaxHitPoints(int bIncludeToughness)
        {
            return base.GetMaxHitPoints(bIncludeToughness);
        }

        public override void DoDamage(int nDamage)
        {
            base.DoDamage(nDamage);
        }

        public byte CalculateDamagePower(global::NWN.LowLevel.ICNWSObject pTarget, int bOffHand)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __ret = __Internal.CalculateDamagePower(__Instance, __arg0, bOffHand);
            return __ret;
        }

        public float MaxAttackRange(uint oidTarget, int bBaseValue, int bPassiveRange)
        {
            var __ret = __Internal.MaxAttackRange(__Instance, oidTarget, bBaseValue, bPassiveRange);
            return __ret;
        }

        public float DesiredAttackRange(uint oidTarget, int bBaseValue)
        {
            var __ret = __Internal.DesiredAttackRange(__Instance, oidTarget, bBaseValue);
            return __ret;
        }

        public void SetStealthMode(byte nHideMode)
        {
            __Internal.SetStealthMode(__Instance, nHideMode);
        }

        public void SetDefensiveCastingMode(byte nDefensiveCastingMode)
        {
            __Internal.SetDefensiveCastingMode(__Instance, nDefensiveCastingMode);
        }

        public void SetCombatMode(byte nMode, int bForceMode)
        {
            __Internal.SetCombatMode(__Instance, nMode, bForceMode);
        }

        public void ComputeModifiedMovementRate()
        {
            __Internal.ComputeModifiedMovementRate(__Instance);
        }

        public int GetTotalEffectBonus(byte nEffectBonusType, global::NWN.LowLevel.ICNWSObject pObject, int bElementalDamage, int bForceMax, byte nSaveType, byte nSpecificType, byte nSkill, byte nAbilityScore, int bOffHand)
        {
            var __arg1 = pObject is null ? __IntPtr.Zero : pObject.__PointerToCNWSObject;
            var __ret = __Internal.GetTotalEffectBonus(__Instance, nEffectBonusType, __arg1, bElementalDamage, bForceMax, nSaveType, nSpecificType, nSkill, nAbilityScore, bOffHand);
            return __ret;
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameEffect> GetFilteredEffectList(byte nEffectListType)
        {
            var __ret = new global::NWN.LowLevel.CExoArrayList.__Internal();
            __Internal.GetFilteredEffectList(new IntPtr(&__ret), __Instance, nEffectListType);
            return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameEffect>.__CreateInstance(__ret);
        }

        public int GetWeaponPower(global::NWN.LowLevel.ICNWSObject pObject, int bOffHand)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__PointerToCNWSObject;
            var __ret = __Internal.GetWeaponPower(__Instance, __arg0, bOffHand);
            return __ret;
        }

        public void SendFeedbackMessage(ushort nFeedbackID, global::NWN.LowLevel.CNWCCMessageData pMessageData, global::NWN.LowLevel.CNWSPlayer pFeedbackPlayer)
        {
            var __arg1 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            var __arg2 = pFeedbackPlayer is null ? __IntPtr.Zero : pFeedbackPlayer.__Instance;
            __Internal.SendFeedbackMessage(__Instance, nFeedbackID, __arg1, __arg2);
        }

        public void SendFeedbackString(global::NWN.LowLevel.CExoString sFeedbackMessage, global::NWN.LowLevel.CNWSPlayer pFeedbackPlayer)
        {
            if (ReferenceEquals(sFeedbackMessage, null))
                throw new global::System.ArgumentNullException("sFeedbackMessage", "Cannot be null because it is passed by value.");
            var __arg0 = sFeedbackMessage.__Instance;
            var __arg1 = pFeedbackPlayer is null ? __IntPtr.Zero : pFeedbackPlayer.__Instance;
            __Internal.SendFeedbackString(__Instance, *(global::NWN.LowLevel.CExoString.__Internal*) __arg0, __arg1);
        }

        public int EquipItem(uint nInventorySlot, global::NWN.LowLevel.CNWSItem pItem, int bApplyPropertyEffects, int bLoadingItem)
        {
            var __arg1 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.EquipItem(__Instance, nInventorySlot, __arg1, bApplyPropertyEffects, bLoadingItem);
            return __ret;
        }

        public int UnequipItem(global::NWN.LowLevel.CNWSItem pItem, int bUnequipWhilePolymorphed)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.UnequipItem(__Instance, __arg0, bUnequipWhilePolymorphed);
            return __ret;
        }

        public void DestroyEquippedItems()
        {
            __Internal.DestroyEquippedItems(__Instance);
        }

        public int LearnScroll(uint oidScrollToLearn)
        {
            var __ret = __Internal.LearnScroll(__Instance, oidScrollToLearn);
            return __ret;
        }

        public void ActionManager(uint nActionTypeToAdd)
        {
            __Internal.ActionManager(__Instance, nActionTypeToAdd);
        }

        public void ActivityManager(uint nActionTypePerforming)
        {
            __Internal.ActivityManager(__Instance, nActionTypePerforming);
        }

        public int GetActivity(int nActivity)
        {
            var __ret = __Internal.GetActivity(__Instance, nActivity);
            return __ret;
        }

        public void SetActivity(int nActivity, int bValue)
        {
            __Internal.SetActivity(__Instance, nActivity, bValue);
        }

        public void ClearActivities(int nActivityTypesToRemove)
        {
            __Internal.ClearActivities(__Instance, nActivityTypesToRemove);
        }

        public byte SavingThrowRoll(byte nType, ushort nDifficultyClass, byte nSaveType, uint oidSaveVersus, int bPrint, ushort nFeat, int bQueueFeedback)
        {
            var __ret = __Internal.SavingThrowRoll(__Instance, nType, nDifficultyClass, nSaveType, oidSaveVersus, bPrint, nFeat, bQueueFeedback);
            return __ret;
        }

        public int GetIsInUseRange(uint oidUse, float fAdditionalRange, int bIgnoreTransparentDoors)
        {
            var __ret = __Internal.GetIsInUseRange(__Instance, oidUse, fAdditionalRange, bIgnoreTransparentDoors);
            return __ret;
        }

        public int GetUseRange(uint oidUse, global::NWN.LowLevel.Vector vUsePoint, ref float fMoveRange)
        {
            if (ReferenceEquals(vUsePoint, null))
                throw new global::System.ArgumentNullException("vUsePoint", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vUsePoint.__Instance;
            fixed (float* __fMoveRange2 = &fMoveRange)
            {
                var __arg2 = __fMoveRange2;
                var __ret = __Internal.GetUseRange(__Instance, oidUse, __arg1, __arg2);
                return __ret;
            }
        }

        public override void SetAnimation(int nAnimation)
        {
            base.SetAnimation(nAnimation);
        }

        public int GetInvisible(global::NWN.LowLevel.ICNWSObject pVersus, int bSendFeedback)
        {
            var __arg0 = pVersus is null ? __IntPtr.Zero : pVersus.__PointerToCNWSObject;
            var __ret = __Internal.GetInvisible(__Instance, __arg0, bSendFeedback);
            return __ret;
        }

        public void StoreCutsceneVars()
        {
            __Internal.StoreCutsceneVars(__Instance);
        }

        public void RestoreCutsceneVars()
        {
            __Internal.RestoreCutsceneVars(__Instance);
        }

        public void RemoveCombatInvisibilityEffects()
        {
            __Internal.RemoveCombatInvisibilityEffects(__Instance);
        }

        public void SetInvitedToParty(int bInvitedToParty)
        {
            __Internal.SetInvitedToParty(__Instance, bInvitedToParty);
        }

        public void SetCombatState(int bState)
        {
            __Internal.SetCombatState(__Instance, bState);
        }

        public void BroadcastCombatStateToParty()
        {
            __Internal.BroadcastCombatStateToParty(__Instance);
        }

        public void BroadcastAttackDataToParty(global::NWN.LowLevel.CNWCCMessageData pMessageData, global::NWN.LowLevel.CNWSCombatAttackData pAttackData, global::NWN.LowLevel.CNWSCreature pOpponent)
        {
            var __arg0 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            var __arg1 = pAttackData is null ? __IntPtr.Zero : pAttackData.__Instance;
            var __arg2 = pOpponent is null ? __IntPtr.Zero : pOpponent.__Instance;
            __Internal.BroadcastAttackDataToParty(__Instance, __arg0, __arg1, __arg2);
        }

        public void BroadcastDamageDataToParty(global::NWN.LowLevel.CNWCCMessageData pMessageData, global::NWN.LowLevel.CNWSCreature pOpponent)
        {
            var __arg0 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            var __arg1 = pOpponent is null ? __IntPtr.Zero : pOpponent.__Instance;
            __Internal.BroadcastDamageDataToParty(__Instance, __arg0, __arg1);
        }

        public void BroadcastDeathDataToParty(global::NWN.LowLevel.CNWCCMessageData pMessageData, global::NWN.LowLevel.CNWSCreature pOpponent)
        {
            var __arg0 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            var __arg1 = pOpponent is null ? __IntPtr.Zero : pOpponent.__Instance;
            __Internal.BroadcastDeathDataToParty(__Instance, __arg0, __arg1);
        }

        public void BroadcastSkillData(global::NWN.LowLevel.CNWCCMessageData pMessageData)
        {
            var __arg0 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            __Internal.BroadcastSkillData(__Instance, __arg0);
        }

        public void BroadcastSavingThrowData(global::NWN.LowLevel.CNWCCMessageData pMessageData)
        {
            var __arg0 = pMessageData is null ? __IntPtr.Zero : pMessageData.__Instance;
            __Internal.BroadcastSavingThrowData(__Instance, __arg0);
        }

        public void BroadcastAssociateCommand(int nAssociateCommand)
        {
            __Internal.BroadcastAssociateCommand(__Instance, nAssociateCommand);
        }

        public void SetBroadcastedAOOTo(int bValue)
        {
            __Internal.SetBroadcastedAOOTo(__Instance, bValue);
        }

        public override void BroadcastFloatyData(global::NWN.LowLevel.CNWCCMessageData pMessageData)
        {
            base.BroadcastFloatyData(pMessageData);
        }

        public void DisplayFloatyDataToSelf(uint nStrRef)
        {
            __Internal.DisplayFloatyDataToSelf(__Instance, nStrRef);
        }

        public void BroadcastSpellCast(uint nSpellID, byte nMultiClass, ushort nFeat)
        {
            __Internal.BroadcastSpellCast(__Instance, nSpellID, nMultiClass, nFeat);
        }

        public int GetNumCounterSpellingCreatures(uint nSpellID)
        {
            var __ret = __Internal.GetNumCounterSpellingCreatures(__Instance, nSpellID);
            return __ret;
        }

        public void ValidateCounterSpellData(uint nSpellID, byte nMultiClass, byte nSpellLevel)
        {
            __Internal.ValidateCounterSpellData(__Instance, nSpellID, nMultiClass, nSpellLevel);
        }

        public void RemoveCounterspeller(uint oCreature)
        {
            __Internal.RemoveCounterspeller(__Instance, oCreature);
        }

        public void BroadcastBattleCry()
        {
            __Internal.BroadcastBattleCry(__Instance);
        }

        public void BroadcastVoiceChat(byte nVoiceChatID)
        {
            __Internal.BroadcastVoiceChat(__Instance, nVoiceChatID);
        }

        public void BroadcastAttackOfOpportunity(uint oidSingleTarget, int bMovement)
        {
            __Internal.BroadcastAttackOfOpportunity(__Instance, oidSingleTarget, bMovement);
        }

        public void RecomputeAmbientAnimationState()
        {
            __Internal.RecomputeAmbientAnimationState(__Instance);
        }

        public void AddAssociate(uint oidAssociate, ushort nAssociateType)
        {
            __Internal.AddAssociate(__Instance, oidAssociate, nAssociateType);
        }

        public void ReceiveAssociateCommand(int nCommandId)
        {
            __Internal.ReceiveAssociateCommand(__Instance, nCommandId);
        }

        public void RelayQuickChatCommandToAssociates(ushort nSoundSetSoundID)
        {
            __Internal.RelayQuickChatCommandToAssociates(__Instance, nSoundSetSoundID);
        }

        public void RemoveAssociate(uint oidAssociate)
        {
            __Internal.RemoveAssociate(__Instance, oidAssociate);
        }

        public void RemoveAllAssociates()
        {
            __Internal.RemoveAllAssociates(__Instance);
        }

        public void UnsummonMyself()
        {
            __Internal.UnsummonMyself(__Instance);
        }

        public void SetPCDominatedScripts()
        {
            __Internal.SetPCDominatedScripts(__Instance);
        }

        public void ResetPCDominatedScripts()
        {
            __Internal.ResetPCDominatedScripts(__Instance);
        }

        public void RemoveDomination()
        {
            __Internal.RemoveDomination(__Instance);
        }

        public void ProcessMasterDeathForAssociates()
        {
            __Internal.ProcessMasterDeathForAssociates(__Instance);
        }

        public void BringAssociatesToNewFaction(int nFactionId)
        {
            __Internal.BringAssociatesToNewFaction(__Instance, nFactionId);
        }

        public void SetAssociateListenPatterns()
        {
            __Internal.SetAssociateListenPatterns(__Instance);
        }

        public void SetAssociateType(ushort nAssociateType)
        {
            __Internal.SetAssociateType(__Instance, nAssociateType);
        }

        public uint GetAssociateId(ushort nAssociateType, int nNth)
        {
            var __ret = __Internal.GetAssociateId(__Instance, nAssociateType, nNth);
            return __ret;
        }

        public int GetNumAssociatesOfType(ushort nAssociateType)
        {
            var __ret = __Internal.GetNumAssociatesOfType(__Instance, nAssociateType);
            return __ret;
        }

        public void NotifyAssociateActionToggle(int nMode)
        {
            __Internal.NotifyAssociateActionToggle(__Instance, nMode);
        }

        public int GetHenchmanIndex(uint oidAssociate)
        {
            var __ret = __Internal.GetHenchmanIndex(__Instance, oidAssociate);
            return __ret;
        }

        public void SummonAnimalCompanion()
        {
            __Internal.SummonAnimalCompanion(__Instance);
        }

        public void SummonFamiliar()
        {
            __Internal.SummonFamiliar(__Instance);
        }

        public void PossessFamiliar()
        {
            __Internal.PossessFamiliar(__Instance);
        }

        public void UnpossessFamiliar()
        {
            __Internal.UnpossessFamiliar(__Instance);
        }

        public void PossessCreature(uint target)
        {
            __Internal.PossessCreature(__Instance, target);
        }

        public void UnpossessCreature()
        {
            __Internal.UnpossessCreature(__Instance);
        }

        public void PossessCreatureDM(uint target, byte possessType)
        {
            __Internal.PossessCreatureDM(__Instance, target, possessType);
        }

        public void UnpossessCreatureDM()
        {
            __Internal.UnpossessCreatureDM(__Instance);
        }

        public void DMClearScripts(int @override)
        {
            __Internal.DMClearScripts(__Instance, @override);
        }

        public void DMResetClearedScripts(int @override)
        {
            __Internal.DMResetClearedScripts(__Instance, @override);
        }

        public uint GetNearestEnemy(float fRange, uint oidToExclude, int bVisible, int bNoCreaturesOnLine)
        {
            var __ret = __Internal.GetNearestEnemy(__Instance, fRange, oidToExclude, bVisible, bNoCreaturesOnLine);
            return __ret;
        }

        public int GetCreatureReputation(uint oidSource, int nSourceFactionId, int bUseOriginalFaction)
        {
            var __ret = __Internal.GetCreatureReputation(__Instance, oidSource, nSourceFactionId, bUseOriginalFaction);
            return __ret;
        }

        public int GetStandardFactionReputation(int nStandardFactionId)
        {
            var __ret = __Internal.GetStandardFactionReputation(__Instance, nStandardFactionId);
            return __ret;
        }

        public void SetStandardFactionReputation(int nStandardFactionId, int nNewReputation)
        {
            __Internal.SetStandardFactionReputation(__Instance, nStandardFactionId, nNewReputation);
        }

        public void AdjustReputation(int nFactionId, int nAdjustment)
        {
            __Internal.AdjustReputation(__Instance, nFactionId, nAdjustment);
        }

        public void AddToPersonalReputationList(uint oidObject, int nAdjustment, int bValueDecays, float fDurationInSeconds)
        {
            __Internal.AddToPersonalReputationList(__Instance, oidObject, nAdjustment, bValueDecays, fDurationInSeconds);
        }

        public void ClearPersonalReputation(uint oidSource)
        {
            __Internal.ClearPersonalReputation(__Instance, oidSource);
        }

        public int CalculatePersonalReputationAdjustment(uint oidSource)
        {
            var __ret = __Internal.CalculatePersonalReputationAdjustment(__Instance, oidSource);
            return __ret;
        }

        public void CleanOutPersonalReputationList()
        {
            __Internal.CleanOutPersonalReputationList(__Instance);
        }

        public void LoadPersonalReputationList(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pResStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pResStruct is null ? __IntPtr.Zero : pResStruct.__Instance;
            __Internal.LoadPersonalReputationList(__Instance, __arg0, __arg1);
        }

        public void SavePersonalReputationList(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pResStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pResStruct is null ? __IntPtr.Zero : pResStruct.__Instance;
            __Internal.SavePersonalReputationList(__Instance, __arg0, __arg1);
        }

        public void LoadAssociateList(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pResStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pResStruct is null ? __IntPtr.Zero : pResStruct.__Instance;
            __Internal.LoadAssociateList(__Instance, __arg0, __arg1);
        }

        public void SaveAssociateList(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pResStruct, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pResStruct is null ? __IntPtr.Zero : pResStruct.__Instance;
            __Internal.SaveAssociateList(__Instance, __arg0, __arg1, bSaveOIDs);
        }

        public void RealizeAssociateList()
        {
            __Internal.RealizeAssociateList(__Instance);
        }

        public int ReplyToInvitation(int nInvitationReply, uint oidInvitedBy)
        {
            var __ret = __Internal.ReplyToInvitation(__Instance, nInvitationReply, oidInvitedBy);
            return __ret;
        }

        public void CleanInvitationLists(int bForcePurgeEntireList)
        {
            __Internal.CleanInvitationLists(__Instance, bForcePurgeEntireList);
        }

        public void AddToInvitationsOffered(uint oidToAdd)
        {
            __Internal.AddToInvitationsOffered(__Instance, oidToAdd);
        }

        public int GetIsInInvitationsOffered(uint oidInvitedPerson)
        {
            var __ret = __Internal.GetIsInInvitationsOffered(__Instance, oidInvitedPerson);
            return __ret;
        }

        public void RemoveFromInvitationsOffered(uint oidToRemove)
        {
            __Internal.RemoveFromInvitationsOffered(__Instance, oidToRemove);
        }

        public void AddToInvitationsIgnored(uint oidToAdd)
        {
            __Internal.AddToInvitationsIgnored(__Instance, oidToAdd);
        }

        public int GetIsInInvitationsIgnored(uint oidIgnoredPerson)
        {
            var __ret = __Internal.GetIsInInvitationsIgnored(__Instance, oidIgnoredPerson);
            return __ret;
        }

        public void UpdateVisibleList()
        {
            __Internal.UpdateVisibleList(__Instance);
        }

        public global::NWN.LowLevel.CNWVisibilityNode GetVisibleListElement(uint oidCreature)
        {
            var __ret = __Internal.GetVisibleListElement(__Instance, oidCreature);
            var __result0 = global::NWN.LowLevel.CNWVisibilityNode.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void AddToVisibleList(uint oidCreature, int bSeen, int bHeard, byte nSanctuary, int bInvisible)
        {
            __Internal.AddToVisibleList(__Instance, oidCreature, bSeen, bHeard, nSanctuary, bInvisible);
        }

        public void RemoveFromVisibleList(uint oidCreature)
        {
            __Internal.RemoveFromVisibleList(__Instance, oidCreature);
        }

        public void ClearVisibleList()
        {
            __Internal.ClearVisibleList(__Instance);
        }

        public void UpdateAutoMap(uint oidCreature)
        {
            __Internal.UpdateAutoMap(__Instance, oidCreature);
        }

        public void MergeItem(global::NWN.LowLevel.CNWSItem pItemToMergeInto, global::NWN.LowLevel.CNWSItem pItemToMerge)
        {
            var __arg0 = pItemToMergeInto is null ? __IntPtr.Zero : pItemToMergeInto.__Instance;
            var __arg1 = pItemToMerge is null ? __IntPtr.Zero : pItemToMerge.__Instance;
            __Internal.MergeItem(__Instance, __arg0, __arg1);
        }

        public void SplitItem(global::NWN.LowLevel.CNWSItem pItemToSplit, int nNumberToSplitOff)
        {
            var __arg0 = pItemToSplit is null ? __IntPtr.Zero : pItemToSplit.__Instance;
            __Internal.SplitItem(__Instance, __arg0, nNumberToSplitOff);
        }

        public void UpdateEncumbranceState(int bDisplayFeedback)
        {
            __Internal.UpdateEncumbranceState(__Instance, bDisplayFeedback);
        }

        public int UpdateSubareasOnJumpPosition(global::NWN.LowLevel.Vector vNewPosition, uint oidNewArea)
        {
            if (ReferenceEquals(vNewPosition, null))
                throw new global::System.ArgumentNullException("vNewPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vNewPosition.__Instance;
            var __ret = __Internal.UpdateSubareasOnJumpPosition(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, oidNewArea);
            return __ret;
        }

        public int UpdateSubareasOnMoveTo(global::NWN.LowLevel.Vector vOldPosition, global::NWN.LowLevel.Vector vNewPosition, int bIntersectingSubAreas, global::NWN.LowLevel.CExoArrayList<uint> aIntersectingSubAreas, int bDriveMode)
        {
            if (ReferenceEquals(vOldPosition, null))
                throw new global::System.ArgumentNullException("vOldPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vOldPosition.__Instance;
            if (ReferenceEquals(vNewPosition, null))
                throw new global::System.ArgumentNullException("vNewPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vNewPosition.__Instance;
            var __arg3 = aIntersectingSubAreas is null ? __IntPtr.Zero : aIntersectingSubAreas.__Instance;
            var __ret = __Internal.UpdateSubareasOnMoveTo(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, bIntersectingSubAreas, __arg3, bDriveMode);
            return __ret;
        }

        public int HandleSubAreaStateChanges(global::NWN.LowLevel.CExoArrayList<uint> aNewSubAreas, global::NWN.LowLevel.CExoArrayList<uint> aIntersectingSubAreas, int bDriveMode)
        {
            var __arg0 = aNewSubAreas is null ? __IntPtr.Zero : aNewSubAreas.__Instance;
            var __arg1 = aIntersectingSubAreas is null ? __IntPtr.Zero : aIntersectingSubAreas.__Instance;
            var __ret = __Internal.HandleSubAreaStateChanges(__Instance, __arg0, __arg1, bDriveMode);
            return __ret;
        }

        public void PostProcess()
        {
            __Internal.PostProcess(__Instance);
        }

        public void ComputeArmourClass(global::NWN.LowLevel.CNWSItem pItemToEquip, int bEquipping, int bLoadingItem)
        {
            var __arg0 = pItemToEquip is null ? __IntPtr.Zero : pItemToEquip.__Instance;
            __Internal.ComputeArmourClass(__Instance, __arg0, bEquipping, bLoadingItem);
        }

        public void SetExcitedState(byte nAction)
        {
            __Internal.SetExcitedState(__Instance, nAction);
        }

        public void UpdateExcitedStateTimer()
        {
            __Internal.UpdateExcitedStateTimer(__Instance);
        }

        public void Rest(int bRestingWithMaster, int bEnemyToCreatureLineOfSightCheck)
        {
            __Internal.Rest(__Instance, bRestingWithMaster, bEnemyToCreatureLineOfSightCheck);
        }

        public void CancelRest(ushort nCancelFeedbackMessage)
        {
            __Internal.CancelRest(__Instance, nCancelFeedbackMessage);
        }

        public int ApplyDiseasePayload(global::NWN.LowLevel.CGameEffect pEffect, uint nCalendarDay, uint nTimeOfDay)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            var __ret = __Internal.ApplyDiseasePayload(__Instance, __arg0, nCalendarDay, nTimeOfDay);
            return __ret;
        }

        public int ApplyPoisonPayload(global::NWN.LowLevel.CGameEffect pEffect, uint nCalendarDay, uint nTimeOfDay)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            var __ret = __Internal.ApplyPoisonPayload(__Instance, __arg0, nCalendarDay, nTimeOfDay);
            return __ret;
        }

        public int ApplyWounding(global::NWN.LowLevel.CGameEffect pEffect)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            var __ret = __Internal.ApplyWounding(__Instance, __arg0);
            return __ret;
        }

        public int RemoveCharmEffectsByOBJECTID(uint oidCharmer, int nRepAdjToCharmer)
        {
            var __ret = __Internal.RemoveCharmEffectsByOBJECTID(__Instance, oidCharmer, nRepAdjToCharmer);
            return __ret;
        }

        public int RemoveCharmEffectsByFactionID(int nCharmerFactionID, int nRepAdjToCharmer)
        {
            var __ret = __Internal.RemoveCharmEffectsByFactionID(__Instance, nCharmerFactionID, nRepAdjToCharmer);
            return __ret;
        }

        public void RemoveSleepEffects()
        {
            __Internal.RemoveSleepEffects(__Instance);
        }

        public void RemoveBadEffects()
        {
            __Internal.RemoveBadEffects(__Instance);
        }

        public void RemoveWoundingEffects()
        {
            __Internal.RemoveWoundingEffects(__Instance);
        }

        public int GetRelativeWeaponSize(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.GetRelativeWeaponSize(__Instance, __arg0);
            return __ret;
        }

        public int EvaluateLock(global::NWN.LowLevel.ICNWSObject pObject, int bLockObject)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__PointerToCNWSObject;
            var __ret = __Internal.EvaluateLock(__Instance, __arg0, bLockObject);
            return __ret;
        }

        public void UpdateActionQueue()
        {
            __Internal.UpdateActionQueue(__Instance);
        }

        public void TerminateClientSidePath(int nClientPathNumber)
        {
            __Internal.TerminateClientSidePath(__Instance, nClientPathNumber);
        }

        public uint AIActionMoveToPoint(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionMoveToPoint(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionJumpToPoint(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionJumpToPoint(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionJumpToObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionJumpToObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionRandomWalk(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionRandomWalk(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionChangeFacingPoint(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionChangeFacingPoint(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionChangeFacingObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionChangeFacingObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckInterAreaPathfinding(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckInterAreaPathfinding(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveAwayFromObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveAwayFromObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveAwayFromLocation(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveAwayFromLocation(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveToObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveToObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveToObjectRadius(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveToObjectRadius(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveToPoint(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveToPoint(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckMoveToPointRadius(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckMoveToPointRadius(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionForceFollowObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionForceFollowObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCheckForceFollowObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCheckForceFollowObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionDrive(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionDrive(__Instance, __arg0);
            return __ret;
        }

        public uint DriveUpdateLocation(int bRun)
        {
            var __ret = __Internal.DriveUpdateLocation(__Instance, bRun);
            return __ret;
        }

        public int ComputeDriveDestination(byte nDriveFlags, global::NWN.LowLevel.Vector vStartPoint, global::NWN.LowLevel.Vector vStartOrient)
        {
            if (ReferenceEquals(vStartPoint, null))
                throw new global::System.ArgumentNullException("vStartPoint", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vStartPoint.__Instance;
            if (ReferenceEquals(vStartOrient, null))
                throw new global::System.ArgumentNullException("vStartOrient", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vStartOrient.__Instance;
            var __ret = __Internal.ComputeDriveDestination(__Instance, nDriveFlags, __arg1, __arg2);
            return __ret;
        }

        public uint AIActionCastSpell(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCastSpell(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionItemCastSpell(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionItemCastSpell(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionRepositoryMove(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionRepositoryMove(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionEquipItem(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionEquipItem(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionUnequipItem(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionUnequipItem(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionAttackObject(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionAttackObject(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionAnimalEmpathy(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionAnimalEmpathy(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionRest(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionRest(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionTaunt(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionTaunt(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionCounterSpell(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCounterSpell(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionAppear(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionAppear(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionDisappear(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionDisappear(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionPickPocket(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionPickPocket(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionHeal(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionHeal(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionSit(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionSit(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionWaitForEndOfRound(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionWaitForEndOfRound(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionOrientCamera(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionOrientCamera(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionPickUpItem(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionPickUpItem(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionDropItem(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionDropItem(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionFlagTrap(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionFlagTrap(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionDisarmTrap(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionDisarmTrap(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionRecoverTrap(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionRecoverTrap(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionExamineTrap(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionExamineTrap(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionSetTrap(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionSetTrap(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionBarter(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionBarter(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionExamine(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionExamine(__Instance, __arg0);
            return __ret;
        }

        public uint AIActionAreaWait(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionAreaWait(__Instance, __arg0);
            return __ret;
        }

        public void UpdateAppearanceForEquippedItems()
        {
            __Internal.UpdateAppearanceForEquippedItems(__Instance);
        }

        public void UpdatePersonalSpace()
        {
            __Internal.UpdatePersonalSpace(__Instance);
        }

        public void UpdateAppearanceDependantInfo()
        {
            __Internal.UpdateAppearanceDependantInfo(__Instance);
        }

        public global::NWN.LowLevel.CNWSBarter GetBarterInfo(int bCreateIfNonExistant)
        {
            var __ret = __Internal.GetBarterInfo(__Instance, bCreateIfNonExistant);
            var __result0 = global::NWN.LowLevel.CNWSBarter.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int StartBarter(uint oidTarget, uint oidItem, int bFromActionQueue)
        {
            var __ret = __Internal.StartBarter(__Instance, oidTarget, oidItem, bFromActionQueue);
            return __ret;
        }

        public void ClearHostileActionsVersus(global::NWN.LowLevel.CNWSCreature pCreature)
        {
            var __arg0 = pCreature is null ? __IntPtr.Zero : pCreature.__Instance;
            __Internal.ClearHostileActionsVersus(__Instance, __arg0);
        }

        public void PacifyCreature(uint oidTarget)
        {
            __Internal.PacifyCreature(__Instance, oidTarget);
        }

        public void PacifyCreature()
        {
            __Internal.PacifyCreature(__Instance);
        }

        public void ClearAutoMapData()
        {
            __Internal.ClearAutoMapData(__Instance);
        }

        public void SetAutoMapData(int nNumAreas, ref uint pAreaList, byte** pMapTileData)
        {
            fixed (uint* __pAreaList1 = &pAreaList)
            {
                var __arg1 = __pAreaList1;
                __Internal.SetAutoMapData(__Instance, nNumAreas, __arg1, pMapTileData);
            }
        }

        public void ReconcileAutoMapData()
        {
            __Internal.ReconcileAutoMapData(__Instance);
        }

        public void SetAllTilesExplored(uint oidArea, int bExplored)
        {
            __Internal.SetAllTilesExplored(__Instance, oidArea, bExplored);
        }

        public void SetTileExplored(uint oidArea, int nXPos, int nYPos, int newState)
        {
            __Internal.SetTileExplored(__Instance, oidArea, nXPos, nYPos, newState);
        }

        public int GetTileExplored(uint oidArea, int nXPos, int nYPos)
        {
            var __ret = __Internal.GetTileExplored(__Instance, oidArea, nXPos, nYPos);
            return __ret;
        }

        public int TranslateAddress(uint oidArea, int nByteIndex, int nBitIndex, ref int xPos, ref int yPos)
        {
            fixed (int* __xPos3 = &xPos)
            {
                var __arg3 = __xPos3;
                fixed (int* __yPos4 = &yPos)
                {
                    var __arg4 = __yPos4;
                    var __ret = __Internal.TranslateAddress(__Instance, oidArea, nByteIndex, nBitIndex, __arg3, __arg4);
                    return __ret;
                }
            }
        }

        public int CancelAction(ushort nActionID, ushort nGroupID)
        {
            var __ret = __Internal.CancelAction(__Instance, nActionID, nGroupID);
            return __ret;
        }

        public int ForceMoveToPoint(global::NWN.LowLevel.CNWSForcedAction pForcedAction)
        {
            var __arg0 = pForcedAction is null ? __IntPtr.Zero : pForcedAction.__Instance;
            var __ret = __Internal.ForceMoveToPoint(__Instance, __arg0);
            return __ret;
        }

        public int RequestBuy(uint oidItemToBuy, uint oidStore, uint oidDesiredRepository)
        {
            var __ret = __Internal.RequestBuy(__Instance, oidItemToBuy, oidStore, oidDesiredRepository);
            return __ret;
        }

        public int RequestSell(uint oidItemToSell, uint oidStore)
        {
            var __ret = __Internal.RequestSell(__Instance, oidItemToSell, oidStore);
            return __ret;
        }

        public int TransferGold(uint oidDestination, global::NWN.LowLevel.Vector vDestination, uint nGoldAmount, int bBarter, byte nXpos, byte nYpos)
        {
            if (ReferenceEquals(vDestination, null))
                throw new global::System.ArgumentNullException("vDestination", "Cannot be null because it is passed by value.");
            var __arg1 = vDestination.__Instance;
            var __ret = __Internal.TransferGold(__Instance, oidDestination, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, nGoldAmount, bBarter, nXpos, nYpos);
            return __ret;
        }

        public void CancelGoldTransfer(uint oidMaybeGold)
        {
            __Internal.CancelGoldTransfer(__Instance, oidMaybeGold);
        }

        public void SetGold(int nGold)
        {
            __Internal.SetGold(__Instance, nGold);
        }

        public void AddGold(int nGoldToAdd, int bDisplayFeedback)
        {
            __Internal.AddGold(__Instance, nGoldToAdd, bDisplayFeedback);
        }

        public void RemoveGold(int nGoldToRemove, int bDisplayFeedback)
        {
            __Internal.RemoveGold(__Instance, nGoldToRemove, bDisplayFeedback);
        }

        public void InitializeQuickbar()
        {
            __Internal.InitializeQuickbar(__Instance);
        }

        public global::NWN.LowLevel.CNWSQuickbarButton GetQuickbarButton(byte nButton)
        {
            var __ret = __Internal.GetQuickbarButton(__Instance, nButton);
            var __result0 = global::NWN.LowLevel.CNWSQuickbarButton.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void SetQuickbarButtonItem(byte nButton, uint oidItem, int nPropertyID, uint oidSecondaryItem)
        {
            __Internal.SetQuickbarButtonItem(__Instance, nButton, oidItem, nPropertyID, oidSecondaryItem);
        }

        public void SetQuickbarButtonSpell(byte nButton, byte nMultiClass, uint nSpellID, byte nMetaType, byte nDomainLevel)
        {
            __Internal.SetQuickbarButtonSpell(__Instance, nButton, nMultiClass, nSpellID, nMetaType, nDomainLevel);
        }

        public void SetQuickbarButtonSpellLikeAbility(byte nButton, uint nSpellID, byte nCasterLevel)
        {
            __Internal.SetQuickbarButtonSpellLikeAbility(__Instance, nButton, nSpellID, nCasterLevel);
        }

        public void SetQuickbarButtonAssociateCommand(byte nButton, int nCommand, ushort nAssociateType, uint oidAssociate)
        {
            __Internal.SetQuickbarButtonAssociateCommand(__Instance, nButton, nCommand, nAssociateType, oidAssociate);
        }

        public void SetQuickbarButtonDungeonMasterCreateCreature(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreateCreature(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreateItem(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreateItem(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreateEncounter(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreateEncounter(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreateWaypoint(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreateWaypoint(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreateTrigger(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreateTrigger(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreatePortal(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreatePortal(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDungeonMasterCreatePlaceable(byte nButton, global::NWN.LowLevel.CResRef @ref, global::NWN.LowLevel.CExoString sToolTip)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @ref.__Instance;
            if (ReferenceEquals(sToolTip, null))
                throw new global::System.ArgumentNullException("sToolTip", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sToolTip.__Instance;
            __Internal.SetQuickbarButtonDungeonMasterCreatePlaceable(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonCommandLine(byte nButton, global::NWN.LowLevel.CExoString label, global::NWN.LowLevel.CExoString cmd)
        {
            if (ReferenceEquals(label, null))
                throw new global::System.ArgumentNullException("label", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = label.__Instance;
            if (ReferenceEquals(cmd, null))
                throw new global::System.ArgumentNullException("cmd", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = cmd.__Instance;
            __Internal.SetQuickbarButtonCommandLine(__Instance, nButton, __arg1, __arg2);
        }

        public void SetQuickbarButtonDM_GeneralResRefParam(byte nButton, byte nObjectType, global::NWN.LowLevel.CResRef @ref)
        {
            if (ReferenceEquals(@ref, null))
                throw new global::System.ArgumentNullException("@ref", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = @ref.__Instance;
            __Internal.SetQuickbarButtonDM_GeneralResRefParam(__Instance, nButton, nObjectType, __arg2);
        }

        public void SetQuickbarButtonGeneralNoParam(byte nButton, byte nObjectType)
        {
            __Internal.SetQuickbarButtonGeneralNoParam(__Instance, nButton, nObjectType);
        }

        public void SetQuickbarButtonGeneralINTParam(byte nButton, byte nObjectType, int nParam)
        {
            __Internal.SetQuickbarButtonGeneralINTParam(__Instance, nButton, nObjectType, nParam);
        }

        public void QuickbarButtonRemoveItem(uint oidItem)
        {
            __Internal.QuickbarButtonRemoveItem(__Instance, oidItem);
        }

        public void QuickbarButtonRemoveSpell(uint nSpellId)
        {
            __Internal.QuickbarButtonRemoveSpell(__Instance, nSpellId);
        }

        public int LoadPolymorphData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pResStruct, int bRunItemScripts)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pResStruct is null ? __IntPtr.Zero : pResStruct.__Instance;
            var __ret = __Internal.LoadPolymorphData(__Instance, __arg0, __arg1, bRunItemScripts);
            return __ret;
        }

        public void LoadQuickButtons(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.LoadQuickButtons(__Instance, __arg0, __arg1);
        }

        public void CreateDefaultQuickButtons()
        {
            __Internal.CreateDefaultQuickButtons(__Instance);
        }

        public void CreateDefaultQuickButtonsCheckItem(global::NWN.LowLevel.CNWSItem pItem, ref uint nMaxCostRanged, ref uint nMaxCostMelee, ref uint oidRangedWeapon, ref uint oidMeleeWeapon)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            fixed (uint* __nMaxCostRanged1 = &nMaxCostRanged)
            {
                var __arg1 = __nMaxCostRanged1;
                fixed (uint* __nMaxCostMelee2 = &nMaxCostMelee)
                {
                    var __arg2 = __nMaxCostMelee2;
                    fixed (uint* __oidRangedWeapon3 = &oidRangedWeapon)
                    {
                        var __arg3 = __oidRangedWeapon3;
                        fixed (uint* __oidMeleeWeapon4 = &oidMeleeWeapon)
                        {
                            var __arg4 = __oidMeleeWeapon4;
                            __Internal.CreateDefaultQuickButtonsCheckItem(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4);
                        }
                    }
                }
            }
        }

        public void CreateDefaultQuickButtonsAddFeat(byte* nButton, ushort nFeat, int bDomainFeat)
        {
            __Internal.CreateDefaultQuickButtonsAddFeat(__Instance, nButton, nFeat, bDomainFeat);
        }

        public void CreateDefaultQuickButtonsDM()
        {
            __Internal.CreateDefaultQuickButtonsDM(__Instance);
        }

        public void CopyQuickButtonsFromDM(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            __Internal.CopyQuickButtonsFromDM(__Instance, __arg0);
        }

        public void LoadQuickBarHack(global::NWN.LowLevel.CExoString sFilename)
        {
            if (ReferenceEquals(sFilename, null))
                throw new global::System.ArgumentNullException("sFilename", "Cannot be null because it is passed by value.");
            var __arg0 = sFilename.__Instance;
            __Internal.LoadQuickBarHack(__Instance, __arg0);
        }

        public void SaveQuickBarHack(global::NWN.LowLevel.CExoString sFilename)
        {
            if (ReferenceEquals(sFilename, null))
                throw new global::System.ArgumentNullException("sFilename", "Cannot be null because it is passed by value.");
            var __arg0 = sFilename.__Instance;
            __Internal.SaveQuickBarHack(__Instance, __arg0);
        }

        public void ConvertModeToggleQuickButton(global::NWN.LowLevel.CNWSQuickbarButton pButton)
        {
            var __arg0 = pButton is null ? __IntPtr.Zero : pButton.__Instance;
            __Internal.ConvertModeToggleQuickButton(__Instance, __arg0);
        }

        public void LoadAutoMapData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.LoadAutoMapData(__Instance, __arg0, __arg1);
        }

        public void SaveAutoMapData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.SaveAutoMapData(__Instance, __arg0, __arg1);
        }

        public void ApplyDeathExperience()
        {
            __Internal.ApplyDeathExperience(__Instance);
        }

        public float CalculateDeathExperience(int nPartyPotentialLevel, int nPartyEffectiveLevel)
        {
            var __ret = __Internal.CalculateDeathExperience(__Instance, nPartyPotentialLevel, nPartyEffectiveLevel);
            return __ret;
        }

        public void ResolveDamageShields(global::NWN.LowLevel.CNWSCreature pAttacker)
        {
            var __arg0 = pAttacker is null ? __IntPtr.Zero : pAttacker.__Instance;
            __Internal.ResolveDamageShields(__Instance, __arg0);
        }

        public int ResolveDefensiveEffects(global::NWN.LowLevel.ICNWSObject pTarget, int bAttackHit)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __ret = __Internal.ResolveDefensiveEffects(__Instance, __arg0, bAttackHit);
            return __ret;
        }

        public void ResolveInitiative()
        {
            __Internal.ResolveInitiative(__Instance);
        }

        public int EquipMostDamagingMeleeWeapon(uint oidVersus, int bOffHand, int bEquipGeneralWeapon)
        {
            var __ret = __Internal.EquipMostDamagingMeleeWeapon(__Instance, oidVersus, bOffHand, bEquipGeneralWeapon);
            return __ret;
        }

        public int EquipMostDamagingRangedWeapon(uint oidVersus)
        {
            var __ret = __Internal.EquipMostDamagingRangedWeapon(__Instance, oidVersus);
            return __ret;
        }

        public int EquipMostDamagingAmmunition(uint oidVersus, global::NWN.LowLevel.CNWSItem pWeapon)
        {
            var __arg1 = pWeapon is null ? __IntPtr.Zero : pWeapon.__Instance;
            var __ret = __Internal.EquipMostDamagingAmmunition(__Instance, oidVersus, __arg1);
            return __ret;
        }

        public int GetIsWeaponEffective(uint oidVersus, int bOffHand)
        {
            var __ret = __Internal.GetIsWeaponEffective(__Instance, oidVersus, bOffHand);
            return __ret;
        }

        public int EquipMostEffectiveArmor()
        {
            var __ret = __Internal.EquipMostEffectiveArmor(__Instance);
            return __ret;
        }

        public void DoPerceptionUpdateOnCreature(global::NWN.LowLevel.CNWSCreature pTarget, int bHideInPlainSight)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__Instance;
            __Internal.DoPerceptionUpdateOnCreature(__Instance, __arg0, bHideInPlainSight);
        }

        public int UseLoreOnItem(uint oidItem)
        {
            var __ret = __Internal.UseLoreOnItem(__Instance, oidItem);
            return __ret;
        }

        public void PayToIdentifyItem(uint oidItem, uint oidStore)
        {
            __Internal.PayToIdentifyItem(__Instance, oidItem, oidStore);
        }

        public int DecrementSpellReadyCount(uint nSpellID, byte nMultiClass, byte nDomainLevel, byte nMetaType, byte nCasterLevel)
        {
            var __ret = __Internal.DecrementSpellReadyCount(__Instance, nSpellID, nMultiClass, nDomainLevel, nMetaType, nCasterLevel);
            return __ret;
        }

        public void AutoCloseGUIPanels(int bCheckStoreDistance)
        {
            __Internal.AutoCloseGUIPanels(__Instance, bCheckStoreDistance);
        }

        public void CutWaypointPath()
        {
            __Internal.CutWaypointPath(__Instance);
        }

        public void FailedOpenInformAssociates()
        {
            __Internal.FailedOpenInformAssociates(__Instance);
        }

        public void SawTrapInformAssociates(uint oidTrap)
        {
            __Internal.SawTrapInformAssociates(__Instance, oidTrap);
        }

        public void AddToPVPList(uint oidPC)
        {
            __Internal.AddToPVPList(__Instance, oidPC);
        }

        public void RemoveFromPVPList(uint oidPC)
        {
            __Internal.RemoveFromPVPList(__Instance, oidPC);
        }

        public void SetPVPPlayerLikesMe(uint oidPC, int bNewAttitude, int bSetReciprocal)
        {
            __Internal.SetPVPPlayerLikesMe(__Instance, oidPC, bNewAttitude, bSetReciprocal);
        }

        public int GetPVPPlayerLikesMe(uint oidPC)
        {
            var __ret = __Internal.GetPVPPlayerLikesMe(__Instance, oidPC);
            return __ret;
        }

        public void SetInTransit(int nInTransit)
        {
            __Internal.SetInTransit(__Instance, nInTransit);
        }

        public int Polymorph(int nPolymorphType, global::NWN.LowLevel.CGameEffect pParentEffect, int bLoadingGame)
        {
            var __arg1 = pParentEffect is null ? __IntPtr.Zero : pParentEffect.__Instance;
            var __ret = __Internal.Polymorph(__Instance, nPolymorphType, __arg1, bLoadingGame);
            return __ret;
        }

        public int UnPolymorph(global::NWN.LowLevel.CGameEffect pParentEffect)
        {
            var __arg0 = pParentEffect is null ? __IntPtr.Zero : pParentEffect.__Instance;
            var __ret = __Internal.UnPolymorph(__Instance, __arg0);
            return __ret;
        }

        public void RestorePolymorphToOutputCreature(global::NWN.LowLevel.CNWSCreRestorePolymorphData polyData)
        {
            var __arg0 = polyData is null ? __IntPtr.Zero : polyData.__Instance;
            __Internal.RestorePolymorphToOutputCreature(__Instance, __arg0);
        }

        public void CheckInventoryForPlotItems()
        {
            __Internal.CheckInventoryForPlotItems(__Instance);
        }

        public void DumpToLog()
        {
            __Internal.DumpToLog(__Instance);
        }

        public int GetIsCreatureBumpable(global::NWN.LowLevel.CNWSCreature pBlockingCreature)
        {
            var __arg0 = pBlockingCreature is null ? __IntPtr.Zero : pBlockingCreature.__Instance;
            var __ret = __Internal.GetIsCreatureBumpable(__Instance, __arg0);
            return __ret;
        }

        public void ExternalResolveAttack(uint oidTarget, int nAttackTime)
        {
            __Internal.ExternalResolveAttack(__Instance, oidTarget, nAttackTime);
        }

        public void BroadcastWhirlwindAttack(int bAttackMessage)
        {
            __Internal.BroadcastWhirlwindAttack(__Instance, bAttackMessage);
        }

        public void RestoreItemPropertiesInRepository(global::NWN.LowLevel.CItemRepository pItemRepository)
        {
            var __arg0 = pItemRepository is null ? __IntPtr.Zero : pItemRepository.__Instance;
            __Internal.RestoreItemPropertiesInRepository(__Instance, __arg0);
        }

        public int BumpFriends(global::NWN.LowLevel.CNWSCreature pBlockingCreature, global::NWN.LowLevel.Vector vStart, global::NWN.LowLevel.Vector vEnd)
        {
            var __arg0 = pBlockingCreature is null ? __IntPtr.Zero : pBlockingCreature.__Instance;
            if (ReferenceEquals(vStart, null))
                throw new global::System.ArgumentNullException("vStart", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vStart.__Instance;
            if (ReferenceEquals(vEnd, null))
                throw new global::System.ArgumentNullException("vEnd", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vEnd.__Instance;
            var __ret = __Internal.BumpFriends(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int GetPVPReputation(uint oidSource)
        {
            var __ret = __Internal.GetPVPReputation(__Instance, oidSource);
            return __ret;
        }

        public int GetPVPPlayerLikesMe(uint oidPC, byte nPVPSetting)
        {
            var __ret = __Internal.GetPVPPlayerLikesMe(__Instance, oidPC, nPVPSetting);
            return __ret;
        }

        public void InitialisePVPList()
        {
            __Internal.InitialisePVPList(__Instance);
        }

        public void SetAssociatesToForgetAggression(uint oidTarget)
        {
            __Internal.SetAssociatesToForgetAggression(__Instance, oidTarget);
        }

        public void RemoveDominationEffect()
        {
            __Internal.RemoveDominationEffect(__Instance);
        }

        public byte CanEquipWeapon(global::NWN.LowLevel.CNWSItem pItem, ref uint nEquipToSlot, int bEquipping, int bDisplayFeedback, global::NWN.LowLevel.CNWSPlayer pFeedbackPlayer)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            fixed (uint* __nEquipToSlot1 = &nEquipToSlot)
            {
                var __arg1 = __nEquipToSlot1;
                var __arg4 = pFeedbackPlayer is null ? __IntPtr.Zero : pFeedbackPlayer.__Instance;
                var __ret = __Internal.CanEquipWeapon(__Instance, __arg0, __arg1, bEquipping, bDisplayFeedback, __arg4);
                return __ret;
            }
        }

        public byte CanEquipShield(global::NWN.LowLevel.CNWSItem pItem, int bEquipping, int bDisplayFeedback)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CanEquipShield(__Instance, __arg0, bEquipping, bDisplayFeedback);
            return __ret;
        }

        public byte CanEquipMiscellaneous(global::NWN.LowLevel.CNWSItem pItem, ref uint pEquipSlot, int bEquipping, int bDisplayFeedback)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            fixed (uint* __pEquipSlot1 = &pEquipSlot)
            {
                var __arg1 = __pEquipSlot1;
                var __ret = __Internal.CanEquipMiscellaneous(__Instance, __arg0, __arg1, bEquipping, bDisplayFeedback);
                return __ret;
            }
        }

        public int CheckProficiencies(global::NWN.LowLevel.CNWSItem pItem, uint nEquipToSlot)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckProficiencies(__Instance, __arg0, nEquipToSlot);
            return __ret;
        }

        public int CheckItemClassRestrictions(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckItemClassRestrictions(__Instance, __arg0);
            return __ret;
        }

        public int CheckItemAlignmentRestrictions(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckItemAlignmentRestrictions(__Instance, __arg0);
            return __ret;
        }

        public int CheckItemRaceRestrictions(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckItemRaceRestrictions(__Instance, __arg0);
            return __ret;
        }

        public int CheckUseMagicDeviceSkill(global::NWN.LowLevel.CNWSItem pItem, int nCheckType)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckUseMagicDeviceSkill(__Instance, __arg0, nCheckType);
            return __ret;
        }

        public void SaveQuickButtons(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.SaveQuickButtons(__Instance, __arg0, __arg1);
        }

        public void UpdateTrapCheck()
        {
            __Internal.UpdateTrapCheck(__Instance);
        }

        public void UpdateTrapCheckDM()
        {
            __Internal.UpdateTrapCheckDM(__Instance);
        }

        public int DoStealthDetection(global::NWN.LowLevel.CNWSCreature pHidingCreature, int bClearLOS, ref int bSeen, ref int bHeard, int bTargetHiding)
        {
            var __arg0 = pHidingCreature is null ? __IntPtr.Zero : pHidingCreature.__Instance;
            fixed (int* __bSeen2 = &bSeen)
            {
                var __arg2 = __bSeen2;
                fixed (int* __bHeard3 = &bHeard)
                {
                    var __arg3 = __bHeard3;
                    var __ret = __Internal.DoStealthDetection(__Instance, __arg0, bClearLOS, __arg2, __arg3, bTargetHiding);
                    return __ret;
                }
            }
        }

        public int DoListenDetection(global::NWN.LowLevel.CNWSCreature pHidingCreature, int bTargetInvisible)
        {
            var __arg0 = pHidingCreature is null ? __IntPtr.Zero : pHidingCreature.__Instance;
            var __ret = __Internal.DoListenDetection(__Instance, __arg0, bTargetInvisible);
            return __ret;
        }

        public int DoSpotDetection(global::NWN.LowLevel.CNWSCreature pHidingCreature, int bTargetInvisible)
        {
            var __arg0 = pHidingCreature is null ? __IntPtr.Zero : pHidingCreature.__Instance;
            var __ret = __Internal.DoSpotDetection(__Instance, __arg0, bTargetInvisible);
            return __ret;
        }

        public void ComputeAIStateOnAction(int nActionId, uint oidActionTarget)
        {
            __Internal.ComputeAIStateOnAction(__Instance, nActionId, oidActionTarget);
        }

        public override int ClearAction(global::NWN.LowLevel.CNWSObjectActionNode pNode, int bIsTopmostAction)
        {
            return base.ClearAction(pNode, bIsTopmostAction);
        }

        public void UpdateCombatRoundTimer()
        {
            __Internal.UpdateCombatRoundTimer(__Instance);
        }

        public override void UpdateEffectPtrs()
        {
            base.UpdateEffectPtrs();
        }

        public override void UpdateAttributesOnEffect(global::NWN.LowLevel.CGameEffect e, int bLoadingGame)
        {
            base.UpdateAttributesOnEffect(e, bLoadingGame);
        }

        public void AddToAssociateList(uint oidAssociate)
        {
            __Internal.AddToAssociateList(__Instance, oidAssociate);
        }

        public void RemoveFromAssociateList(uint oidAssociate)
        {
            __Internal.RemoveFromAssociateList(__Instance, oidAssociate);
        }

        public void ReprocessAssociateList()
        {
            __Internal.ReprocessAssociateList(__Instance);
        }

        public void CheckMasterIsValid(uint nCalendarDay, uint nTimeOfDay)
        {
            __Internal.CheckMasterIsValid(__Instance, nCalendarDay, nTimeOfDay);
        }

        public void SummonAssociate(global::NWN.LowLevel.CResRef cResRef, global::NWN.LowLevel.CExoString sAssociateName, ushort nAssociateType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            if (ReferenceEquals(sAssociateName, null))
                throw new global::System.ArgumentNullException("sAssociateName", "Cannot be null because it is passed by value.");
            var __arg1 = sAssociateName.__Instance;
            __Internal.SummonAssociate(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, __arg1, nAssociateType);
        }

        public int CheckVisibleList(uint oidCreature)
        {
            var __ret = __Internal.CheckVisibleList(__Instance, oidCreature);
            return __ret;
        }

        public void ResolveAttack(uint oidTarget, int nAttacks, int nTimeAnimation)
        {
            __Internal.ResolveAttack(__Instance, oidTarget, nAttacks, nTimeAnimation);
        }

        public void ResolveAttackRoll(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveAttackRoll(__Instance, __arg0);
        }

        public void ResolveSneakAttack(global::NWN.LowLevel.CNWSCreature pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__Instance;
            __Internal.ResolveSneakAttack(__Instance, __arg0);
        }

        public void ResolveDeathAttack(global::NWN.LowLevel.CNWSCreature pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__Instance;
            __Internal.ResolveDeathAttack(__Instance, __arg0);
        }

        public void ResolveCachedSpecialAttacks()
        {
            __Internal.ResolveCachedSpecialAttacks(__Instance);
        }

        public void ResolveSituationalModifiers(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveSituationalModifiers(__Instance, __arg0);
        }

        public void ResolveDamage(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveDamage(__Instance, __arg0);
        }

        public void ResolveItemCastSpell(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveItemCastSpell(__Instance, __arg0);
        }

        public void ResolveElementalDamage(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveElementalDamage(__Instance, __arg0);
        }

        public void ResolveOnHitEffect(global::NWN.LowLevel.ICNWSObject pTarget, int bOffHandAttack, int bCritical)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveOnHitEffect(__Instance, __arg0, bOffHandAttack, bCritical);
        }

        public void ResolveOnHitVisuals(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveOnHitVisuals(__Instance, __arg0);
        }

        public void ResolveRangedAttack(global::NWN.LowLevel.ICNWSObject pTarget, int nAttacks, int nTimeAnimation)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveRangedAttack(__Instance, __arg0, nAttacks, nTimeAnimation);
        }

        public void ResolveRangedSpecialAttack(global::NWN.LowLevel.ICNWSObject pTarget, int nTimeAnimation)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveRangedSpecialAttack(__Instance, __arg0, nTimeAnimation);
        }

        public void ResolvePostRangedDamage(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolvePostRangedDamage(__Instance, __arg0);
        }

        public void ResolveRangedAnimations(global::NWN.LowLevel.ICNWSObject pTarget, int nTimeAnimation)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveRangedAnimations(__Instance, __arg0, nTimeAnimation);
        }

        public void ResolveRangedMiss(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveRangedMiss(__Instance, __arg0);
        }

        public void SignalRangedDamage(global::NWN.LowLevel.ICNWSObject pTarget, int nAttacks)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.SignalRangedDamage(__Instance, __arg0, nAttacks);
        }

        public void ResolveAmmunition(uint nTimeIndex)
        {
            __Internal.ResolveAmmunition(__Instance, nTimeIndex);
        }

        public void ResolveSafeProjectile(uint nTimeIndex, int nAttackIndex)
        {
            __Internal.ResolveSafeProjectile(__Instance, nTimeIndex, nAttackIndex);
        }

        public int GetAmmunitionAvailable(int nNumAttacks)
        {
            var __ret = __Internal.GetAmmunitionAvailable(__Instance, nNumAttacks);
            return __ret;
        }

        public void ResolveMeleeAttack(global::NWN.LowLevel.ICNWSObject pTarget, int nAttacks, int nTimeAnimation)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveMeleeAttack(__Instance, __arg0, nAttacks, nTimeAnimation);
        }

        public void ResolveMeleeSpecialAttack(int nAttackIndex, int nAttacks, global::NWN.LowLevel.ICNWSObject pTarget, int nTimeAnimation)
        {
            var __arg2 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveMeleeSpecialAttack(__Instance, nAttackIndex, nAttacks, __arg2, nTimeAnimation);
        }

        public void ResolveMeleeAnimations(int nAttackIndex, int nAttacks, global::NWN.LowLevel.ICNWSObject pTarget, int nTimeAnimation)
        {
            var __arg2 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolveMeleeAnimations(__Instance, nAttackIndex, nAttacks, __arg2, nTimeAnimation);
        }

        public void ResolvePostMeleeDamage(global::NWN.LowLevel.ICNWSObject pTarget)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ResolvePostMeleeDamage(__Instance, __arg0);
        }

        public void SignalMeleeDamage(global::NWN.LowLevel.ICNWSObject pTarget, int nAttacks)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.SignalMeleeDamage(__Instance, __arg0, nAttacks);
        }

        public void ApplyOnHitBlindness(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitBlindness(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitConfusion(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitConfusion(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitDaze(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDaze(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitDeafness(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDeafness(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitDeathAttack(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDeathAttack(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitDominate(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDominate(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitDoom(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDoom(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitFear(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitFear(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitHold(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitHold(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitSilence(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitSilence(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitSleep(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitSleep(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitSlow(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitSlow(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitStun(global::NWN.LowLevel.ICNWSObject pTarget, int nDurationRounds)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitStun(__Instance, __arg0, nDurationRounds);
        }

        public void ApplyOnHitWounding(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitWounding(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitVorpal(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitVorpal(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitCastSpell(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty, global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            var __arg2 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            __Internal.ApplyOnHitCastSpell(__Instance, __arg0, __arg1, __arg2);
        }

        public void ApplyOnHitDispelMagic(global::NWN.LowLevel.ICNWSObject pTarget, uint oidAttackItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitDispelMagic(__Instance, __arg0, oidAttackItem);
        }

        public void ApplyOnHitGreaterDispel(global::NWN.LowLevel.ICNWSObject pTarget, uint oidAttackItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitGreaterDispel(__Instance, __arg0, oidAttackItem);
        }

        public void ApplyOnHitKnock(global::NWN.LowLevel.ICNWSObject pTarget, uint oidAttackItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitKnock(__Instance, __arg0, oidAttackItem);
        }

        public void ApplyOnHitLesserDispel(global::NWN.LowLevel.ICNWSObject pTarget, uint oidAttackItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitLesserDispel(__Instance, __arg0, oidAttackItem);
        }

        public void ApplyOnHitMordysDisjunction(global::NWN.LowLevel.ICNWSObject pTarget, uint oidAttackItem)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            __Internal.ApplyOnHitMordysDisjunction(__Instance, __arg0, oidAttackItem);
        }

        public void ApplyOnHitVampiricRegeneration(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitVampiricRegeneration(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitDispelMagic(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitDispelMagic(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitAbilityDamage(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitAbilityDamage(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitDisease(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitDisease(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitPoison(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitPoison(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitSlayAlignment(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitSlayAlignment(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitSlayAlignmentGroup(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitSlayAlignmentGroup(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitSlayRacialGroup(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitSlayRacialGroup(__Instance, __arg0, __arg1);
        }

        public void ApplyOnHitLevelDrain(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            __Internal.ApplyOnHitLevelDrain(__Instance, __arg0, __arg1);
        }

        public int GetCanSlayAlignment(global::NWN.LowLevel.ICNWSObject pTarget, global::NWN.LowLevel.CNWItemProperty pProperty)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __arg1 = pProperty is null ? __IntPtr.Zero : pProperty.__Instance;
            var __ret = __Internal.GetCanSlayAlignment(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int CalculateMaxElementalDamage(global::NWN.LowLevel.ICNWSObject pTarget, int bOffHand)
        {
            var __arg0 = pTarget is null ? __IntPtr.Zero : pTarget.__PointerToCNWSObject;
            var __ret = __Internal.CalculateMaxElementalDamage(__Instance, __arg0, bOffHand);
            return __ret;
        }

        public uint CalculateProjectileTimeToTarget(global::NWN.LowLevel.Vector vPosition, int bThrownWeapon)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.CalculateProjectileTimeToTarget(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, bThrownWeapon);
            return __ret;
        }

        public int WalkUpdateLocationDistance(float fDistance, global::NWN.LowLevel.Vector vNewPosition, global::NWN.LowLevel.Vector vNewOrientation, global::NWN.LowLevel.CExoArrayList<uint> aIntersectingSubAreas)
        {
            var __arg1 = vNewPosition is null ? __IntPtr.Zero : vNewPosition.__Instance;
            var __arg2 = vNewOrientation is null ? __IntPtr.Zero : vNewOrientation.__Instance;
            var __arg3 = aIntersectingSubAreas is null ? __IntPtr.Zero : aIntersectingSubAreas.__Instance;
            var __ret = __Internal.WalkUpdateLocationDistance(__Instance, fDistance, __arg1, __arg2, __arg3);
            return __ret;
        }

        public int WalkUpdateLocationTestDistance(global::NWN.LowLevel.Vector vStart, global::NWN.LowLevel.Vector vEnd)
        {
            if (ReferenceEquals(vStart, null))
                throw new global::System.ArgumentNullException("vStart", "Cannot be null because it is passed by value.");
            var __arg0 = vStart.__Instance;
            if (ReferenceEquals(vEnd, null))
                throw new global::System.ArgumentNullException("vEnd", "Cannot be null because it is passed by value.");
            var __arg1 = vEnd.__Instance;
            var __ret = __Internal.WalkUpdateLocationTestDistance(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1);
            return __ret;
        }

        public int MBPonyRide
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPonyRide;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPonyRide = value;
            }
        }

        public ushort MNEquipArrayIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEquipArrayIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEquipArrayIndex = value;
            }
        }

        public uint[] MPoidCntrSpellObjects
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_poidCntrSpellObjects, 10);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((__Internal*)__Instance)->m_poidCntrSpellObjects[i] = value[i];
                }
            }
        }

        public int MNNumCntrSpellObjects
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumCntrSpellObjects;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumCntrSpellObjects = value;
            }
        }

        public global::NWN.LowLevel.CExoString[] MSScripts
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_sScripts != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[13];
                    for (int i = 0; i < 13; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 13)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 13; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CExoString[] MSOriginalScripts
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_sOriginalScripts != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[13];
                    for (int i = 0; i < 13; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_sOriginalScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 13)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 13; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_sOriginalScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CNWSQuickbarButton MPQuickbarButton
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSQuickbarButton.__GetOrCreateInstance(((__Internal*)__Instance)->m_pQuickbarButton, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pQuickbarButton = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBLootable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLootable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLootable = value;
            }
        }

        public uint MNDecayTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDecayTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDecayTime = value;
            }
        }

        public uint MOidBodyBag
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidBodyBag;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidBodyBag = value;
            }
        }

        public uint MOidDesiredArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidDesiredArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidDesiredArea = value;
            }
        }

        public global::NWN.LowLevel.Vector MVDesiredAreaLocation
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vDesiredAreaLocation));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vDesiredAreaLocation = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MBDesiredAreaUpdateComplete
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDesiredAreaUpdateComplete;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDesiredAreaUpdateComplete = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MALinkedAreaOfEffectObjects
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aLinkedAreaOfEffectObjects));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aLinkedAreaOfEffectObjects = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MAInSubAreas
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aInSubAreas));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aInSubAreas = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public uint MOidBlockingDoor
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidBlockingDoor;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidBlockingDoor = value;
            }
        }

        public global::NWN.LowLevel.CPathfindInformation MPcPathfindInformation
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CPathfindInformation.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcPathfindInformation, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcPathfindInformation = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public float MFMovementScaleFactor
        {
            get
            {
                return ((__Internal*)__Instance)->m_fMovementScaleFactor;
            }

            set
            {
                ((__Internal*)__Instance)->m_fMovementScaleFactor = value;
            }
        }

        public int MBUpdateCombatInformation
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdateCombatInformation;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdateCombatInformation = value;
            }
        }

        public int MNNumCharSheetViewers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumCharSheetViewers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumCharSheetViewers = value;
            }
        }

        public int MBUpdateSpellSlots
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdateSpellSlots;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdateSpellSlots = value;
            }
        }

        public int MBOnCreationScriptExecuted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOnCreationScriptExecuted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOnCreationScriptExecuted = value;
            }
        }

        public uint MNLastHeartbeatScriptCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay = value;
            }
        }

        public uint MNLastHeartbeatScriptTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay = value;
            }
        }

        public uint MNHeartbeatInterval
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHeartbeatInterval;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHeartbeatInterval = value;
            }
        }

        public uint MNLastRestRadiusCheckDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRestRadiusCheckDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRestRadiusCheckDay = value;
            }
        }

        public uint MNLastRestRadiusCheckTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRestRadiusCheckTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRestRadiusCheckTimeOfDay = value;
            }
        }

        public uint MOidLastTrapDetected
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastTrapDetected;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastTrapDetected = value;
            }
        }

        public uint MNLastTrapCheckCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastTrapCheckCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastTrapCheckCalendarDay = value;
            }
        }

        public uint MNLastTrapCheckTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastTrapCheckTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastTrapCheckTimeOfDay = value;
            }
        }

        public uint MNLastStealthCheckCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastStealthCheckCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastStealthCheckCalendarDay = value;
            }
        }

        public uint MNLastStealthCheckTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastStealthCheckTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastStealthCheckTimeOfDay = value;
            }
        }

        public uint MNExcitedStateTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nExcitedStateTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nExcitedStateTimer = value;
            }
        }

        public uint MNLastVisibleCreaturesCheckCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastVisibleCreaturesCheckCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastVisibleCreaturesCheckCalendarDay = value;
            }
        }

        public uint MNLastVisibleCreaturesCheckTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastVisibleCreaturesCheckTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastVisibleCreaturesCheckTimeOfDay = value;
            }
        }

        public int MNChecksVisibleList
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChecksVisibleList;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChecksVisibleList = value;
            }
        }

        public uint MNChecksHeartbeat
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChecksHeartbeat;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChecksHeartbeat = value;
            }
        }

        public uint MNMoveSpeedTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMoveSpeedTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMoveSpeedTimer = value;
            }
        }

        public int MBPendingRealization
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPendingRealization;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPendingRealization = value;
            }
        }

        public byte MNPersonalReputationHeartbeatCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPersonalReputationHeartbeatCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPersonalReputationHeartbeatCount = value;
            }
        }

        public int MNLastActionQueueUpdateDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastActionQueueUpdateDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastActionQueueUpdateDay = value;
            }
        }

        public int MNLastActionQueueUpdateTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastActionQueueUpdateTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastActionQueueUpdateTimeOfDay = value;
            }
        }

        public global::NWN.LowLevel.CNWActionNode[] MPActionQueue
        {
            get
            {
                global::NWN.LowLevel.CNWActionNode[] __value = null;
                if (((__Internal*)__Instance)->m_pActionQueue != null)
                {
                    __value = new global::NWN.LowLevel.CNWActionNode[10];
                    for (int i = 0; i < 10; i++)
                        __value[i] = global::NWN.LowLevel.CNWActionNode.__CreateInstance(*((global::NWN.LowLevel.CNWActionNode.__Internal*)&(((__Internal*)__Instance)->m_pActionQueue[i * sizeof(global::NWN.LowLevel.CNWActionNode.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 10)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 10; i++)
                        *(global::NWN.LowLevel.CNWActionNode.__Internal*) &((__Internal*)__Instance)->m_pActionQueue[i * sizeof(global::NWN.LowLevel.CNWActionNode.__Internal)] = *(global::NWN.LowLevel.CNWActionNode.__Internal*)value[i].__Instance;
                }
            }
        }

        public byte MNAmbientAnimationState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAmbientAnimationState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAmbientAnimationState = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSModelType
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sModelType));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sModelType = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MOidAutoMapAreaList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_oidAutoMapAreaList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_oidAutoMapAreaList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public byte** MNAutoMapTileData
        {
            get
            {
                return (byte**) ((__Internal*)__Instance)->m_nAutoMapTileData;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAutoMapTileData = (__IntPtr) value;
            }
        }

        public int MBAutoMapAutoExplores
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAutoMapAutoExplores;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAutoMapAutoExplores = value;
            }
        }

        public byte MNLastExploredTileX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastExploredTileX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastExploredTileX = value;
            }
        }

        public byte MNLastExploredTileY
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastExploredTileY;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastExploredTileY = value;
            }
        }

        public uint OidLastExploredArea
        {
            get
            {
                return ((__Internal*)__Instance)->oidLastExploredArea;
            }

            set
            {
                ((__Internal*)__Instance)->oidLastExploredArea = value;
            }
        }

        public byte MNDetectMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDetectMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDetectMode = value;
            }
        }

        public byte MNStealthMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStealthMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStealthMode = value;
            }
        }

        public byte MNDefensiveCastingMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDefensiveCastingMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDefensiveCastingMode = value;
            }
        }

        public byte MNCombatMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCombatMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCombatMode = value;
            }
        }

        public byte MNDesiredCombatMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDesiredCombatMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDesiredCombatMode = value;
            }
        }

        public uint MOidCounterSpellTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidCounterSpellTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidCounterSpellTarget = value;
            }
        }

        public byte MNInitiativeRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInitiativeRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInitiativeRoll = value;
            }
        }

        public int MBInitiativeExpired
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInitiativeExpired;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInitiativeExpired = value;
            }
        }

        public int MBCombatState
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCombatState;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCombatState = value;
            }
        }

        public int MNCombatStateTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCombatStateTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCombatStateTimer = value;
            }
        }

        public int MBPassiveAttackBehaviour
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPassiveAttackBehaviour;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPassiveAttackBehaviour = value;
            }
        }

        public int MBHasArms
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasArms;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasArms = value;
            }
        }

        public int MBHasLegs
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasLegs;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasLegs = value;
            }
        }

        public int MBDisarmable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDisarmable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDisarmable = value;
            }
        }

        public int MNCreatureSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCreatureSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCreatureSize = value;
            }
        }

        public float MFPreferredAttackDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fPreferredAttackDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fPreferredAttackDistance = value;
            }
        }

        public float MFWeaponScale
        {
            get
            {
                return ((__Internal*)__Instance)->m_fWeaponScale;
            }

            set
            {
                ((__Internal*)__Instance)->m_fWeaponScale = value;
            }
        }

        public uint MOidAttackTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAttackTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAttackTarget = value;
            }
        }

        public uint MOidAttemptedAttackTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAttemptedAttackTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAttemptedAttackTarget = value;
            }
        }

        public global::NWN.LowLevel.Vector MVLastAttackPosition
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vLastAttackPosition));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vLastAttackPosition = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public uint MOidGoingToBeAttackedBy
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidGoingToBeAttackedBy;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidGoingToBeAttackedBy = value;
            }
        }

        public uint MOidAttemptedSpellTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAttemptedSpellTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAttemptedSpellTarget = value;
            }
        }

        public uint MOidSpellTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidSpellTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidSpellTarget = value;
            }
        }

        public int MNLastAmmoWarning
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastAmmoWarning;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastAmmoWarning = value;
            }
        }

        public int MNLastCombatRoundUpdate
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastCombatRoundUpdate;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastCombatRoundUpdate = value;
            }
        }

        public int MNLastRunningAOOUpdate
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRunningAOOUpdate;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRunningAOOUpdate = value;
            }
        }

        public int MBBroadcastedAOOTo
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBroadcastedAOOTo;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBroadcastedAOOTo = value;
            }
        }

        public int MNLastRunningAOOTimeOut
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRunningAOOTimeOut;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRunningAOOTimeOut = value;
            }
        }

        public int MBExternalCombatModeEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExternalCombatModeEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExternalCombatModeEnabled = value;
            }
        }

        public int MBSilent
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSilent;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSilent = value;
            }
        }

        public int MBHasted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasted = value;
            }
        }

        public int MBSlowed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSlowed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSlowed = value;
            }
        }

        public int MBTaunt
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTaunt;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTaunt = value;
            }
        }

        public int MBForcedWalk
        {
            get
            {
                return ((__Internal*)__Instance)->m_bForcedWalk;
            }

            set
            {
                ((__Internal*)__Instance)->m_bForcedWalk = value;
            }
        }

        public byte MNVisionType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVisionType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVisionType = value;
            }
        }

        public byte MNState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nState = value;
            }
        }

        public uint MNEffectSpellId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEffectSpellId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEffectSpellId = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CEffectIconObject> MAEffectIcons
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CEffectIconObject>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aEffectIcons));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aEffectIcons = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MBCutsceneCameraMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCutsceneCameraMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCutsceneCameraMode = value;
            }
        }

        public float MFCutsceneCameraMoveFactor
        {
            get
            {
                return ((__Internal*)__Instance)->m_fCutsceneCameraMoveFactor;
            }

            set
            {
                ((__Internal*)__Instance)->m_fCutsceneCameraMoveFactor = value;
            }
        }

        public int MBWasPlotCreature
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWasPlotCreature;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWasPlotCreature = value;
            }
        }

        public int MBCutsceneGhost
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCutsceneGhost;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCutsceneGhost = value;
            }
        }

        public uint MOidLastPerception
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastPerception;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastPerception = value;
            }
        }

        public int MBLastPerceptionHeard
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastPerceptionHeard;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastPerceptionHeard = value;
            }
        }

        public int MBLastPerceptionSeen
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastPerceptionSeen;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastPerceptionSeen = value;
            }
        }

        public int MBLastPerceptionInaudible
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastPerceptionInaudible;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastPerceptionInaudible = value;
            }
        }

        public int MBLastPerceptionVanished
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastPerceptionVanished;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastPerceptionVanished = value;
            }
        }

        public float MFSpotCheckDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fSpotCheckDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fSpotCheckDistance = value;
            }
        }

        public float MFMaxSpotCheckDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fMaxSpotCheckDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fMaxSpotCheckDistance = value;
            }
        }

        public float MFListenCheckDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fListenCheckDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fListenCheckDistance = value;
            }
        }

        public float MFMaxListenCheckDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fMaxListenCheckDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fMaxListenCheckDistance = value;
            }
        }

        public float MFBlindsightDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fBlindsightDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fBlindsightDistance = value;
            }
        }

        public byte MNLastHideRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHideRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHideRoll = value;
            }
        }

        public byte MNLastMoveSilentlyRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastMoveSilentlyRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastMoveSilentlyRoll = value;
            }
        }

        public byte MNLastSpotRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastSpotRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastSpotRoll = value;
            }
        }

        public byte MNLastListenRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastListenRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastListenRoll = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWVisibilityNode> MPVisibleCreaturesList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWVisibilityNode>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pVisibleCreaturesList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pVisibleCreaturesList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public uint MOidInvitedToPartyBy
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidInvitedToPartyBy;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidInvitedToPartyBy = value;
            }
        }

        public int MBInvitedToParty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInvitedToParty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInvitedToParty = value;
            }
        }

        public uint MNInvitedToPartyDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInvitedToPartyDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInvitedToPartyDay = value;
            }
        }

        public uint MNInvitedToPartyTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInvitedToPartyTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInvitedToPartyTimeOfDay = value;
            }
        }

        public uint MOidLockOnTargetObj
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLockOnTargetObj;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLockOnTargetObj = value;
            }
        }

        public int MNLastCounterSpellID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastCounterSpellID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastCounterSpellID = value;
            }
        }

        public byte MNLastCounterSpellClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastCounterSpellClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastCounterSpellClass = value;
            }
        }

        public byte MNLastCounterMetaType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastCounterMetaType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastCounterMetaType = value;
            }
        }

        public byte MNLastCounterDomainLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastCounterDomainLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastCounterDomainLevel = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MPoidSpellIdentified
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_poidSpellIdentified));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_poidSpellIdentified = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public uint MOidLastSpellCastItem
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastSpellCastItem;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastSpellCastItem = value;
            }
        }

        public int MBLastSpellUnReadied
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastSpellUnReadied;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastSpellUnReadied = value;
            }
        }

        public int MBLastItemCastSpell
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastItemCastSpell;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastItemCastSpell = value;
            }
        }

        public int MNLastItemCastSpellLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastItemCastSpellLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastItemCastSpellLevel = value;
            }
        }

        public int MBItemCastSpellBroadcastAOO
        {
            get
            {
                return ((__Internal*)__Instance)->m_bItemCastSpellBroadcastAOO;
            }

            set
            {
                ((__Internal*)__Instance)->m_bItemCastSpellBroadcastAOO = value;
            }
        }

        public uint MOidSittingObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidSittingObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidSittingObject = value;
            }
        }

        public int MBStealAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bStealAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bStealAnimationPlayed = value;
            }
        }

        public int MBStealAttemptDetected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bStealAttemptDetected;
            }

            set
            {
                ((__Internal*)__Instance)->m_bStealAttemptDetected = value;
            }
        }

        public int MBHealAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHealAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHealAnimationPlayed = value;
            }
        }

        public int MBTrapAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTrapAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTrapAnimationPlayed = value;
            }
        }

        public int MBUnlockAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUnlockAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUnlockAnimationPlayed = value;
            }
        }

        public int MBLockAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLockAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLockAnimationPlayed = value;
            }
        }

        public int MBDropItemAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDropItemAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDropItemAnimationPlayed = value;
            }
        }

        public int MBPickUpItemAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPickUpItemAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPickUpItemAnimationPlayed = value;
            }
        }

        public int MBTauntAnimationPlayed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTauntAnimationPlayed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTauntAnimationPlayed = value;
            }
        }

        public uint MNRestDurationPerHPGain
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRestDurationPerHPGain;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRestDurationPerHPGain = value;
            }
        }

        public uint MNRestHPToRecover
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRestHPToRecover;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRestHPToRecover = value;
            }
        }

        public uint MNRestDurationPerSpellLevelGain
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRestDurationPerSpellLevelGain;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRestDurationPerSpellLevelGain = value;
            }
        }

        public uint MNRestSpellLevelToRecover
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRestSpellLevelToRecover;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRestSpellLevelToRecover = value;
            }
        }

        public int MBFacingAndAnimationDone
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFacingAndAnimationDone;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFacingAndAnimationDone = value;
            }
        }

        public int MBMagicalArrowsEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMagicalArrowsEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMagicalArrowsEquipped = value;
            }
        }

        public int MBMagicalBoltsEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMagicalBoltsEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMagicalBoltsEquipped = value;
            }
        }

        public int MBMagicalBulletsEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMagicalBulletsEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMagicalBulletsEquipped = value;
            }
        }

        public uint* MPSkillTimer
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_pSkillTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSkillTimer = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CNWSCombatRound MPcCombatRound
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSCombatRound.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcCombatRound, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcCombatRound = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSJournal MPJournal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSJournal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pJournal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pJournal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSBarter MPBarterInfo
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSBarter.__GetOrCreateInstance(((__Internal*)__Instance)->m_pBarterInfo, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pBarterInfo = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNGold
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGold;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGold = value;
            }
        }

        public int MBPlayerCharacter
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPlayerCharacter;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPlayerCharacter = value;
            }
        }

        public ushort MNSoundSet
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSoundSet;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSoundSet = value;
            }
        }

        public int MNFootstepType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFootstepType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFootstepType = value;
            }
        }

        public byte MNBodyBag
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBodyBag;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBodyBag = value;
            }
        }

        public int MNInTransit
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInTransit;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInTransit = value;
            }
        }

        public int MBPoisoned
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPoisoned;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPoisoned = value;
            }
        }

        public int MBDiseased
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDiseased;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDiseased = value;
            }
        }

        public int MBIsImmortal
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsImmortal;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsImmortal = value;
            }
        }

        public int MBNoPermDeath
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNoPermDeath;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNoPermDeath = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSDisplayName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDisplayName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDisplayName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNUpdateDisplayNameSeq
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq = value;
            }
        }

        public ushort MNAIState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIState = value;
            }
        }

        public byte MNAIStateAction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIStateAction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIStateAction = value;
            }
        }

        public uint MOidAIStateActee
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAIStateActee;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAIStateActee = value;
            }
        }

        public byte MNAIStateOutput
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIStateOutput;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIStateOutput = value;
            }
        }

        public uint MNActivities
        {
            get
            {
                return ((__Internal*)__Instance)->m_nActivities;
            }

            set
            {
                ((__Internal*)__Instance)->m_nActivities = value;
            }
        }

        public uint MNActivitiesLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_nActivitiesLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_nActivitiesLocked = value;
            }
        }

        public float MFMovementRateFactor
        {
            get
            {
                return ((__Internal*)__Instance)->m_fMovementRateFactor;
            }

            set
            {
                ((__Internal*)__Instance)->m_fMovementRateFactor = value;
            }
        }

        public float MFDriveModeMoveFactor
        {
            get
            {
                return ((__Internal*)__Instance)->m_fDriveModeMoveFactor;
            }

            set
            {
                ((__Internal*)__Instance)->m_fDriveModeMoveFactor = value;
            }
        }

        public byte MNWalkAnimation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWalkAnimation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWalkAnimation = value;
            }
        }

        public int MBDriveMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDriveMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDriveMode = value;
            }
        }

        public int MBJumpedRecently
        {
            get
            {
                return ((__Internal*)__Instance)->m_bJumpedRecently;
            }

            set
            {
                ((__Internal*)__Instance)->m_bJumpedRecently = value;
            }
        }

        public uint MOidMaster
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidMaster;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidMaster = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MPAssociateList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<uint>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pAssociateList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pAssociateList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNAssociateType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAssociateType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAssociateType = value;
            }
        }

        public int MNLastAssociateCommand
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastAssociateCommand;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastAssociateCommand = value;
            }
        }

        public int MBSummonedAnimalCompanion
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSummonedAnimalCompanion;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSummonedAnimalCompanion = value;
            }
        }

        public int MBSummonedFamiliar
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSummonedFamiliar;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSummonedFamiliar = value;
            }
        }

        public int MBMasterDroppedFromServer
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMasterDroppedFromServer;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMasterDroppedFromServer = value;
            }
        }

        public uint MNMasterDroppedCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMasterDroppedCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMasterDroppedCalendarDay = value;
            }
        }

        public uint MNMasterDroppedTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMasterDroppedTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMasterDroppedTimeOfDay = value;
            }
        }

        public int MNOriginalFactionId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOriginalFactionId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOriginalFactionId = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSPersonalReputation> MPPersonalReputationList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSPersonalReputation>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pPersonalReputationList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pPersonalReputationList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPReputation
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<int>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pReputation, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pReputation = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MOidEncounter
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidEncounter;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidEncounter = value;
            }
        }

        public int MBAlreadyRemovedFromEncounter
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAlreadyRemovedFromEncounter;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAlreadyRemovedFromEncounter = value;
            }
        }

        public global::NWN.LowLevel.CNWSInventory MPInventory
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSInventory.__GetOrCreateInstance(((__Internal*)__Instance)->m_pInventory, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pInventory = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CItemRepository MPcItemRepository
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CItemRepository.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcItemRepository, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcItemRepository = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNRepositoryArrayIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRepositoryArrayIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRepositoryArrayIndex = value;
            }
        }

        public ushort MNItemContainerArrayIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nItemContainerArrayIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nItemContainerArrayIndex = value;
            }
        }

        public uint MOidCurrentItemContainer
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidCurrentItemContainer;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidCurrentItemContainer = value;
            }
        }

        public int MNEquippedWeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEquippedWeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEquippedWeight = value;
            }
        }

        public int MBComputeWeightCarried
        {
            get
            {
                return ((__Internal*)__Instance)->m_bComputeWeightCarried;
            }

            set
            {
                ((__Internal*)__Instance)->m_bComputeWeightCarried = value;
            }
        }

        public int MNEncumbranceState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEncumbranceState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEncumbranceState = value;
            }
        }

        public int MBLastPickupFailed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastPickupFailed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastPickupFailed = value;
            }
        }

        public int MNTotalWeightCarried
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalWeightCarried;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalWeightCarried = value;
            }
        }

        public uint[] MPPrePolymorphedItems
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_pPrePolymorphedItems, 18);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 18; i++)
                        ((__Internal*)__Instance)->m_pPrePolymorphedItems[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CResRef MRefPrePolymorphPortrait
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refPrePolymorphPortrait));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refPrePolymorphPortrait = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public ushort MNPrePolymorphPortraitId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphPortraitId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphPortraitId = value;
            }
        }

        public int MBIsPolymorphed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsPolymorphed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsPolymorphed = value;
            }
        }

        public ushort MNPrePolymorphAppearanceType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphAppearanceType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphAppearanceType = value;
            }
        }

        public byte MNPrePolymorphSTR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphSTR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphSTR = value;
            }
        }

        public byte MNPrePolymorphCON
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphCON;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphCON = value;
            }
        }

        public byte MNPrePolymorphDEX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphDEX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphDEX = value;
            }
        }

        public ushort MNPrePolymorphRacialType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphRacialType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphRacialType = value;
            }
        }

        public short MNPrePolymorphHP
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPrePolymorphHP;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPrePolymorphHP = value;
            }
        }

        public int MNPolymorphSpellId1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPolymorphSpellId1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPolymorphSpellId1 = value;
            }
        }

        public int MNPolymorphSpellId2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPolymorphSpellId2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPolymorphSpellId2 = value;
            }
        }

        public int MNPolymorphSpellId3
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPolymorphSpellId3;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPolymorphSpellId3 = value;
            }
        }

        public ulong MNPolymorphACBonusEffect
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPolymorphACBonusEffect;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPolymorphACBonusEffect = value;
            }
        }

        public ulong MNPolymorphHPBonusEffect
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPolymorphHPBonusEffect;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPolymorphHPBonusEffect = value;
            }
        }

        public int MBHasPrePolymorphCreatureWeaponProficiency
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasPrePolymorphCreatureWeaponProficiency;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasPrePolymorphCreatureWeaponProficiency = value;
            }
        }

        public int MBPolymorphing
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPolymorphing;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPolymorphing = value;
            }
        }

        public int MBPolymorphLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPolymorphLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPolymorphLocked = value;
            }
        }

        public global::NWN.LowLevel.CNWSCreatureAppearanceInfo MCAppearance
        {
            get
            {
                return global::NWN.LowLevel.CNWSCreatureAppearanceInfo.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cAppearance));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cAppearance = *(global::NWN.LowLevel.CNWSCreatureAppearanceInfo.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSCreatureStats MPStats
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSCreatureStats.__GetOrCreateInstance(((__Internal*)__Instance)->m_pStats, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pStats = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNLastRestCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRestCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRestCalendarDay = value;
            }
        }

        public uint MNLastRestTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastRestTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastRestTimeOfDay = value;
            }
        }

        public override global::NWN.LowLevel.CNWSCreature AsNWSCreature
        {
            get
            {
                return base.AsNWSCreature;
            }
        }

        public float MovementRateFactor
        {
            get
            {
                var __ret = __Internal.GetMovementRateFactor(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMovementRateFactor(__Instance, value);
            }
        }

        public float WalkRate
        {
            get
            {
                var __ret = __Internal.GetWalkRate(__Instance);
                return __ret;
            }
        }

        public float RunRate
        {
            get
            {
                var __ret = __Internal.GetRunRate(__Instance);
                return __ret;
            }
        }

        public int UseMonkAbilities
        {
            get
            {
                var __ret = __Internal.GetUseMonkAbilities(__Instance);
                return __ret;
            }
        }

        public int FlatFooted
        {
            get
            {
                var __ret = __Internal.GetFlatFooted(__Instance);
                return __ret;
            }
        }

        public int IsInMelee
        {
            get
            {
                var __ret = __Internal.GetIsInMelee(__Instance);
                return __ret;
            }
        }

        public short ArmorClass
        {
            get
            {
                var __ret = __Internal.GetArmorClass(__Instance);
                return __ret;
            }
        }

        public ushort DamageFlags
        {
            get
            {
                var __ret = __Internal.GetDamageFlags(__Instance);
                return __ret;
            }
        }

        public byte DetectMode
        {
            get
            {
                var __ret = __Internal.GetDetectMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDetectMode(__Instance, value);
            }
        }

        public int SpellOrHealActionQueued
        {
            get
            {
                var __ret = __Internal.GetSpellOrHealActionQueued(__Instance);
                return __ret;
            }
        }

        public int HasInvisbilityEffectApplied
        {
            get
            {
                var __ret = __Internal.GetHasInvisbilityEffectApplied(__Instance);
                return __ret;
            }
        }

        public override uint LockOrientationToObject
        {
            get
            {
                return base.LockOrientationToObject;
            }

            set
            {
                base.LockOrientationToObject = value;
            }
        }

        public int Blind
        {
            get
            {
                var __ret = __Internal.GetBlind(__Instance);
                return __ret;
            }
        }

        public int IsAbleToPossessFamiliar
        {
            get
            {
                var __ret = __Internal.GetIsAbleToPossessFamiliar(__Instance);
                return __ret;
            }
        }

        public int IsPossessedFamiliar
        {
            get
            {
                var __ret = __Internal.GetIsPossessedFamiliar(__Instance);
                return __ret;
            }
        }

        public uint DominatedCreatureId
        {
            get
            {
                var __ret = __Internal.GetDominatedCreatureId(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSFaction Faction
        {
            get
            {
                var __ret = __Internal.GetFaction(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSFaction.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int NumInvited
        {
            get
            {
                var __ret = __Internal.GetNumInvited(__Instance);
                return __ret;
            }
        }

        public int RangeWeaponEquipped
        {
            get
            {
                var __ret = __Internal.GetRangeWeaponEquipped(__Instance);
                return __ret;
            }
        }

        public int Unarmed
        {
            get
            {
                var __ret = __Internal.GetUnarmed(__Instance);
                return __ret;
            }
        }

        public int UpdateSpecialAttacks
        {
            get
            {
                var __ret = __Internal.UpdateSpecialAttacks(__Instance);
                return __ret;
            }
        }

        public uint AIActionEncounterCreatureDestroySelf
        {
            get
            {
                var __ret = __Internal.AIActionEncounterCreatureDestroySelf(__Instance);
                return __ret;
            }
        }

        public override global::NWN.LowLevel.CResRef Portrait
        {
            get
            {
                return base.Portrait;
            }

            set
            {
                base.Portrait = value;
            }
        }

        public override ushort PortraitId
        {
            get
            {
                return base.PortraitId;
            }

            set
            {
                base.PortraitId = value;
            }
        }

        public global::NWN.LowLevel.CNWSJournal Journal
        {
            get
            {
                var __ret = __Internal.GetJournal(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSJournal.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public float SpotCheckDistance
        {
            get
            {
                var __ret = __Internal.GetSpotCheckDistance(__Instance);
                return __ret;
            }
        }

        public float ListenCheckDistance
        {
            get
            {
                var __ret = __Internal.GetListenCheckDistance(__Instance);
                return __ret;
            }
        }

        public int ComputeTotalWeightCarried
        {
            get
            {
                var __ret = __Internal.ComputeTotalWeightCarried(__Instance);
                return __ret;
            }
        }

        public int ComputeTotalEquippedWeight
        {
            get
            {
                var __ret = __Internal.ComputeTotalEquippedWeight(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSCreRestorePolymorphData RemovePolymorphFromOutputCreature
        {
            get
            {
                var __ret = __Internal.RemovePolymorphFromOutputCreature(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSCreRestorePolymorphData.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int TurnResistanceHD
        {
            get
            {
                var __ret = __Internal.GetTurnResistanceHD(__Instance);
                return __ret;
            }
        }

        public ushort BodyBagAppearance
        {
            get
            {
                var __ret = __Internal.GetBodyBagAppearance(__Instance);
                return __ret;
            }
        }

        public float ComputeTotalWalkDistance
        {
            get
            {
                var __ret = __Internal.ComputeTotalWalkDistance(__Instance);
                return __ret;
            }
        }

        public uint WalkUpdateLocation
        {
            get
            {
                var __ret = __Internal.WalkUpdateLocation(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // ~CNWSCreature()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void SetId(OBJECT_ID oidNew)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(__IntPtr __instance, uint oidNew)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.SetId(oidNew);
        }

        // void ResetUpdateTimes(uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint _ResetUpdateTimesDelegateInstance;

        private static void _ResetUpdateTimesDelegateHook(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.ResetUpdateTimes(nCalendarDay, nTimeOfDay);
        }

        // CNWCObject * AsNWCObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCObjectDelegateInstance;

        private static __IntPtr _AsNWCObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSObject * AsNWSObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSObjectDelegateInstance;

        private static __IntPtr _AsNWSObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSObject;
            return __ret is null ? __IntPtr.Zero : __ret.__PointerToCNWSObject;
        }

        // CNWCDoor * AsNWCDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCDoorDelegateInstance;

        private static __IntPtr _AsNWCDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSDoor * AsNWSDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSDoorDelegateInstance;

        private static __IntPtr _AsNWSDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCModule * AsNWCModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCModuleDelegateInstance;

        private static __IntPtr _AsNWCModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSModule * AsNWSModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSModuleDelegateInstance;

        private static __IntPtr _AsNWSModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCArea * AsNWCArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaDelegateInstance;

        private static __IntPtr _AsNWCAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSArea * AsNWSArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaDelegateInstance;

        private static __IntPtr _AsNWSAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCCreature * AsNWCCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCCreatureDelegateInstance;

        private static __IntPtr _AsNWCCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSCreature * AsNWSCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSCreatureDelegateInstance;

        private static __IntPtr _AsNWSCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCItem * AsNWCItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCItemDelegateInstance;

        private static __IntPtr _AsNWCItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSItem * AsNWSItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSItemDelegateInstance;

        private static __IntPtr _AsNWSItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCTrigger * AsNWCTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCTriggerDelegateInstance;

        private static __IntPtr _AsNWCTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSTrigger * AsNWSTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSTriggerDelegateInstance;

        private static __IntPtr _AsNWSTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCProjectile * AsNWCProjectile()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCProjectileDelegateInstance;

        private static __IntPtr _AsNWCProjectileDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCProjectile;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlayerTURD * AsNWSPlayerTURD()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlayerTURDDelegateInstance;

        private static __IntPtr _AsNWSPlayerTURDDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSPlayerTURD;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlaceable * AsNWSPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlaceableDelegateInstance;

        private static __IntPtr _AsNWSPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCPlaceable * AsNWCPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCPlaceableDelegateInstance;

        private static __IntPtr _AsNWCPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSAreaOfEffectObject * AsNWSAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWSAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCAreaOfEffectObject * AsNWCAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWCAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSWaypoint * AsNWSWaypoint()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSWaypointDelegateInstance;

        private static __IntPtr _AsNWSWaypointDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSWaypoint;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSEncounter * AsNWSEncounter()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSEncounterDelegateInstance;

        private static __IntPtr _AsNWSEncounterDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSEncounter;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCStore * AsNWCStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCStoreDelegateInstance;

        private static __IntPtr _AsNWCStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSStore * AsNWSStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSStoreDelegateInstance;

        private static __IntPtr _AsNWSStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSSoundObject * AsNWSSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSSoundObjectDelegateInstance;

        private static __IntPtr _AsNWSSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWSSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCSoundObject * AsNWCSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCSoundObjectDelegateInstance;

        private static __IntPtr _AsNWCSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.AsNWCSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void AIUpdate()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _AIUpdateDelegateInstance;

        private static void _AIUpdateDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.AIUpdate();
        }

        // BOOL ClearAction(CNWSObjectActionNode * pNode, BOOL bIsTopmostAction)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int _ClearActionDelegateInstance;

        private static int _ClearActionDelegateHook(__IntPtr __instance, __IntPtr pNode, int bIsTopmostAction)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSObjectActionNode.__GetOrCreateInstance(pNode, false);
            return __target.ClearAction(__result0, bIsTopmostAction);
        }

        // void EventHandler(uint32_t nEventId, OBJECT_ID nCallerObjectId, void * pScript, uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint___IntPtr_uint_uint _EventHandlerDelegateInstance;

        private static void _EventHandlerDelegateHook(__IntPtr __instance, uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.EventHandler(nEventId, nCallerObjectId, pScript, nCalendarDay, nTimeOfDay);
        }

        // void SetAnimation(int32_t nAnimation)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetAnimationDelegateInstance;

        private static void _SetAnimationDelegateHook(__IntPtr __instance, int nAnimation)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.SetAnimation(nAnimation);
        }

        // CResRef GetDialogResref()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetDialogResrefDelegateInstance;

        private static void _GetDialogResrefDelegateHook(__IntPtr @return, __IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.DialogResref;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CResRef.__Internal*) @return = *(global::NWN.LowLevel.CResRef.__Internal*) __ret.__Instance;
        }

        // BOOL GetDialogInterruptable()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetDialogInterruptableDelegateInstance;

        private static int _GetDialogInterruptableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.DialogInterruptable;
        }

        // uint8_t GetGender()
        private static global::NWN.LowLevel.Delegates.Func_byte___IntPtr _GetGenderDelegateInstance;

        private static byte _GetGenderDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.Gender;
        }

        // CExoLocString & GetFirstName()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetFirstNameDelegateInstance;

        private static __IntPtr _GetFirstNameDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.FirstName;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // CExoLocString & GetLastName()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetLastNameDelegateInstance;

        private static __IntPtr _GetLastNameDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.LastName;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // int16_t GetMaxHitPoints(BOOL bIncludeToughness = true)
        private static global::NWN.LowLevel.Delegates.Func_short___IntPtr_int _GetMaxHitPointsDelegateInstance;

        private static short _GetMaxHitPointsDelegateHook(__IntPtr __instance, int bIncludeToughness)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.GetMaxHitPoints(bIncludeToughness);
        }

        // int16_t GetCurrentHitPoints(BOOL bExcludeTemporaryHits = false)
        private static global::NWN.LowLevel.Delegates.Func_short___IntPtr_int _GetCurrentHitPointsDelegateInstance;

        private static short _GetCurrentHitPointsDelegateHook(__IntPtr __instance, int bExcludeTemporaryHits)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.GetCurrentHitPoints(bExcludeTemporaryHits);
        }

        // void DoDamage(int32_t nDamage)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _DoDamageDelegateInstance;

        private static void _DoDamageDelegateHook(__IntPtr __instance, int nDamage)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.DoDamage(nDamage);
        }

        // int32_t DoDamageReduction(CNWSCreature * pDamager, int32_t nDamage, uint8_t nDamagePower, BOOL bSimulation, BOOL bCombatDamage)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_byte_int_int _DoDamageReductionDelegateInstance;

        private static int _DoDamageReductionDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, byte nDamagePower, int bSimulation, int bCombatDamage)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageReduction(__result0, nDamage, nDamagePower, bSimulation, bCombatDamage);
        }

        // int32_t DoDamageResistance(CNWSCreature * pDamager, int32_t nDamage, uint16_t nFlags, BOOL bSimulation, BOOL bCombatDamage, BOOL bBaseWeaponDamage = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_ushort_int_int_int _DoDamageResistanceDelegateInstance;

        private static int _DoDamageResistanceDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, ushort nFlags, int bSimulation, int bCombatDamage, int bBaseWeaponDamage)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageResistance(__result0, nDamage, nFlags, bSimulation, bCombatDamage, bBaseWeaponDamage);
        }

        // int32_t GetMaximumDamageResistanceVsDamageFlag(uint16_t nDamageFlag, int32_t * nBestIndex)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_ushort_intPtr _GetMaximumDamageResistanceVsDamageFlagDelegateInstance;

        private static int _GetMaximumDamageResistanceVsDamageFlagDelegateHook(__IntPtr __instance, ushort nDamageFlag, int* nBestIndex)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.GetMaximumDamageResistanceVsDamageFlag(nDamageFlag, ref *nBestIndex);
        }

        // int32_t DoDamageImmunity(CNWSCreature * pDamager, int32_t nDamage, uint16_t nFlags, BOOL bSimulation, BOOL bCombatDamage)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_ushort_int_int _DoDamageImmunityDelegateInstance;

        private static int _DoDamageImmunityDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, ushort nFlags, int bSimulation, int bCombatDamage)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageImmunity(__result0, nDamage, nFlags, bSimulation, bCombatDamage);
        }

        // char GetDamageImmunity(uint8_t nType)
        private static global::NWN.LowLevel.Delegates.Func_sbyte___IntPtr_byte _GetDamageImmunityDelegateInstance;

        private static sbyte _GetDamageImmunityDelegateHook(__IntPtr __instance, byte nType)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.GetDamageImmunity(nType);
        }

        // char GetDamageImmunityByFlags(uint16_t nFlags)
        private static global::NWN.LowLevel.Delegates.Func_sbyte___IntPtr_ushort _GetDamageImmunityByFlagsDelegateInstance;

        private static sbyte _GetDamageImmunityByFlagsDelegateHook(__IntPtr __instance, ushort nFlags)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.GetDamageImmunityByFlags(nFlags);
        }

        // uint32_t GetEffectSpellId()
        private static global::NWN.LowLevel.Delegates.Func_uint___IntPtr _GetEffectSpellIdDelegateInstance;

        private static uint _GetEffectSpellIdDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.EffectSpellId;
        }

        // void SetEffectSpellId(uint32_t n)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetEffectSpellIdDelegateInstance;

        private static void _SetEffectSpellIdDelegateHook(__IntPtr __instance, uint n)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.EffectSpellId = n;
        }

        // void SetLockOrientationToObject(OBJECT_ID oidLockOnObj)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetLockOrientationToObjectDelegateInstance;

        private static void _SetLockOrientationToObjectDelegateHook(__IntPtr __instance, uint oidLockOnObj)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.LockOrientationToObject = oidLockOnObj;
        }

        // OBJECT_ID GetLockOrientationToObject()
        private static global::NWN.LowLevel.Delegates.Func_uint___IntPtr _GetLockOrientationToObjectDelegateInstance;

        private static uint _GetLockOrientationToObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.LockOrientationToObject;
        }

        // CResRef GetPortrait()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetPortraitDelegateInstance;

        private static void _GetPortraitDelegateHook(__IntPtr @return, __IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __ret = __target.Portrait;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CResRef.__Internal*) @return = *(global::NWN.LowLevel.CResRef.__Internal*) __ret.__Instance;
        }

        // void SetPortrait(CResRef cPortrait)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_NWN_LowLevel_CResRef___Internal _SetPortraitDelegateInstance;

        private static void _SetPortraitDelegateHook(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cPortrait)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.Portrait = global::NWN.LowLevel.CResRef.__CreateInstance(cPortrait);
        }

        // uint16_t GetPortraitId()
        private static global::NWN.LowLevel.Delegates.Func_ushort___IntPtr _GetPortraitIdDelegateInstance;

        private static ushort _GetPortraitIdDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.PortraitId;
        }

        // void SetPortraitId(uint16_t nPortraitId)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_ushort _SetPortraitIdDelegateInstance;

        private static void _SetPortraitIdDelegateHook(__IntPtr __instance, ushort nPortraitId)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.PortraitId = nPortraitId;
        }

        // void BroadcastFloatyData(CNWCCMessageData * pMessageData)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _BroadcastFloatyDataDelegateInstance;

        private static void _BroadcastFloatyDataDelegateHook(__IntPtr __instance, __IntPtr pMessageData)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWCCMessageData.__GetOrCreateInstance(pMessageData, false);
            __target.BroadcastFloatyData(__result0);
        }

        // void BroadcastFloatyDataSTRREF(STRREF nStrRef)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _BroadcastFloatyDataSTRREFDelegateInstance;

        private static void _BroadcastFloatyDataSTRREFDelegateHook(__IntPtr __instance, uint nStrRef)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.BroadcastFloatyDataSTRREF(nStrRef);
        }

        // bool GetCanCarrySqlDatabase()
        private static global::NWN.LowLevel.Delegates.Func_bool___IntPtr _GetCanCarrySqlDatabaseDelegateInstance;

        private static bool _GetCanCarrySqlDatabaseDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            return __target.CanCarrySqlDatabase;
        }

        // void UpdateEffectPtrs()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _UpdateEffectPtrsDelegateInstance;

        private static void _UpdateEffectPtrsDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            __target.UpdateEffectPtrs();
        }

        // void UpdateAttributesOnEffect(CGameEffect * e, BOOL bLoadingGame = false)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int _UpdateAttributesOnEffectDelegateInstance;

        private static void _UpdateAttributesOnEffectDelegateHook(__IntPtr __instance, __IntPtr e, int bLoadingGame)
        {
            var __target = global::NWN.LowLevel.CNWSCreature.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(e, false);
            __target.UpdateAttributesOnEffect(__result0, bLoadingGame);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[60];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _ResetUpdateTimesDelegateInstance += _ResetUpdateTimesDelegateHook;
                _AsNWCObjectDelegateInstance += _AsNWCObjectDelegateHook;
                _AsNWSObjectDelegateInstance += _AsNWSObjectDelegateHook;
                _AsNWCDoorDelegateInstance += _AsNWCDoorDelegateHook;
                _AsNWSDoorDelegateInstance += _AsNWSDoorDelegateHook;
                _AsNWCModuleDelegateInstance += _AsNWCModuleDelegateHook;
                _AsNWSModuleDelegateInstance += _AsNWSModuleDelegateHook;
                _AsNWCAreaDelegateInstance += _AsNWCAreaDelegateHook;
                _AsNWSAreaDelegateInstance += _AsNWSAreaDelegateHook;
                _AsNWCCreatureDelegateInstance += _AsNWCCreatureDelegateHook;
                _AsNWSCreatureDelegateInstance += _AsNWSCreatureDelegateHook;
                _AsNWCItemDelegateInstance += _AsNWCItemDelegateHook;
                _AsNWSItemDelegateInstance += _AsNWSItemDelegateHook;
                _AsNWCTriggerDelegateInstance += _AsNWCTriggerDelegateHook;
                _AsNWSTriggerDelegateInstance += _AsNWSTriggerDelegateHook;
                _AsNWCProjectileDelegateInstance += _AsNWCProjectileDelegateHook;
                _AsNWSPlayerTURDDelegateInstance += _AsNWSPlayerTURDDelegateHook;
                _AsNWSPlaceableDelegateInstance += _AsNWSPlaceableDelegateHook;
                _AsNWCPlaceableDelegateInstance += _AsNWCPlaceableDelegateHook;
                _AsNWSAreaOfEffectObjectDelegateInstance += _AsNWSAreaOfEffectObjectDelegateHook;
                _AsNWCAreaOfEffectObjectDelegateInstance += _AsNWCAreaOfEffectObjectDelegateHook;
                _AsNWSWaypointDelegateInstance += _AsNWSWaypointDelegateHook;
                _AsNWSEncounterDelegateInstance += _AsNWSEncounterDelegateHook;
                _AsNWCStoreDelegateInstance += _AsNWCStoreDelegateHook;
                _AsNWSStoreDelegateInstance += _AsNWSStoreDelegateHook;
                _AsNWSSoundObjectDelegateInstance += _AsNWSSoundObjectDelegateHook;
                _AsNWCSoundObjectDelegateInstance += _AsNWCSoundObjectDelegateHook;
                _AIUpdateDelegateInstance += _AIUpdateDelegateHook;
                _ClearActionDelegateInstance += _ClearActionDelegateHook;
                _EventHandlerDelegateInstance += _EventHandlerDelegateHook;
                _SetAnimationDelegateInstance += _SetAnimationDelegateHook;
                _GetDialogResrefDelegateInstance += _GetDialogResrefDelegateHook;
                _GetDialogInterruptableDelegateInstance += _GetDialogInterruptableDelegateHook;
                _GetGenderDelegateInstance += _GetGenderDelegateHook;
                _GetFirstNameDelegateInstance += _GetFirstNameDelegateHook;
                _GetLastNameDelegateInstance += _GetLastNameDelegateHook;
                _GetMaxHitPointsDelegateInstance += _GetMaxHitPointsDelegateHook;
                _GetCurrentHitPointsDelegateInstance += _GetCurrentHitPointsDelegateHook;
                _DoDamageDelegateInstance += _DoDamageDelegateHook;
                _DoDamageReductionDelegateInstance += _DoDamageReductionDelegateHook;
                _DoDamageResistanceDelegateInstance += _DoDamageResistanceDelegateHook;
                _GetMaximumDamageResistanceVsDamageFlagDelegateInstance += _GetMaximumDamageResistanceVsDamageFlagDelegateHook;
                _DoDamageImmunityDelegateInstance += _DoDamageImmunityDelegateHook;
                _GetDamageImmunityDelegateInstance += _GetDamageImmunityDelegateHook;
                _GetDamageImmunityByFlagsDelegateInstance += _GetDamageImmunityByFlagsDelegateHook;
                _GetEffectSpellIdDelegateInstance += _GetEffectSpellIdDelegateHook;
                _SetEffectSpellIdDelegateInstance += _SetEffectSpellIdDelegateHook;
                _SetLockOrientationToObjectDelegateInstance += _SetLockOrientationToObjectDelegateHook;
                _GetLockOrientationToObjectDelegateInstance += _GetLockOrientationToObjectDelegateHook;
                _GetPortraitDelegateInstance += _GetPortraitDelegateHook;
                _SetPortraitDelegateInstance += _SetPortraitDelegateHook;
                _GetPortraitIdDelegateInstance += _GetPortraitIdDelegateHook;
                _SetPortraitIdDelegateInstance += _SetPortraitIdDelegateHook;
                _BroadcastFloatyDataDelegateInstance += _BroadcastFloatyDataDelegateHook;
                _BroadcastFloatyDataSTRREFDelegateInstance += _BroadcastFloatyDataSTRREFDelegateHook;
                _GetCanCarrySqlDatabaseDelegateInstance += _GetCanCarrySqlDatabaseDelegateHook;
                _UpdateEffectPtrsDelegateInstance += _UpdateEffectPtrsDelegateHook;
                _UpdateAttributesOnEffectDelegateInstance += _UpdateAttributesOnEffectDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetUpdateTimesDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AsNWCObjectDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AsNWSObjectDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_AsNWCDoorDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_AsNWSDoorDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AsNWCModuleDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AsNWSModuleDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_AsNWCCreatureDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_AsNWSCreatureDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AsNWCItemDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_AsNWSItemDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_AsNWCTriggerDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_AsNWSTriggerDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_AsNWCProjectileDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlayerTURDDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlaceableDelegateInstance);
                Thunks[20] = Marshal.GetFunctionPointerForDelegate(_AsNWCPlaceableDelegateInstance);
                Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaOfEffectObjectDelegateInstance);
                Thunks[22] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaOfEffectObjectDelegateInstance);
                Thunks[23] = Marshal.GetFunctionPointerForDelegate(_AsNWSWaypointDelegateInstance);
                Thunks[24] = Marshal.GetFunctionPointerForDelegate(_AsNWSEncounterDelegateInstance);
                Thunks[25] = Marshal.GetFunctionPointerForDelegate(_AsNWCStoreDelegateInstance);
                Thunks[26] = Marshal.GetFunctionPointerForDelegate(_AsNWSStoreDelegateInstance);
                Thunks[27] = Marshal.GetFunctionPointerForDelegate(_AsNWSSoundObjectDelegateInstance);
                Thunks[28] = Marshal.GetFunctionPointerForDelegate(_AsNWCSoundObjectDelegateInstance);
                Thunks[29] = Marshal.GetFunctionPointerForDelegate(_AIUpdateDelegateInstance);
                Thunks[30] = Marshal.GetFunctionPointerForDelegate(_ClearActionDelegateInstance);
                Thunks[31] = Marshal.GetFunctionPointerForDelegate(_EventHandlerDelegateInstance);
                Thunks[32] = Marshal.GetFunctionPointerForDelegate(_SetAnimationDelegateInstance);
                Thunks[33] = Marshal.GetFunctionPointerForDelegate(_GetDialogResrefDelegateInstance);
                Thunks[34] = Marshal.GetFunctionPointerForDelegate(_GetDialogInterruptableDelegateInstance);
                Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetGenderDelegateInstance);
                Thunks[36] = Marshal.GetFunctionPointerForDelegate(_GetFirstNameDelegateInstance);
                Thunks[37] = Marshal.GetFunctionPointerForDelegate(_GetLastNameDelegateInstance);
                Thunks[38] = Marshal.GetFunctionPointerForDelegate(_GetMaxHitPointsDelegateInstance);
                Thunks[39] = Marshal.GetFunctionPointerForDelegate(_GetCurrentHitPointsDelegateInstance);
                Thunks[40] = Marshal.GetFunctionPointerForDelegate(_DoDamageDelegateInstance);
                Thunks[41] = Marshal.GetFunctionPointerForDelegate(_DoDamageReductionDelegateInstance);
                Thunks[42] = Marshal.GetFunctionPointerForDelegate(_DoDamageResistanceDelegateInstance);
                Thunks[43] = Marshal.GetFunctionPointerForDelegate(_GetMaximumDamageResistanceVsDamageFlagDelegateInstance);
                Thunks[44] = Marshal.GetFunctionPointerForDelegate(_DoDamageImmunityDelegateInstance);
                Thunks[45] = Marshal.GetFunctionPointerForDelegate(_GetDamageImmunityDelegateInstance);
                Thunks[46] = Marshal.GetFunctionPointerForDelegate(_GetDamageImmunityByFlagsDelegateInstance);
                Thunks[47] = Marshal.GetFunctionPointerForDelegate(_GetEffectSpellIdDelegateInstance);
                Thunks[48] = Marshal.GetFunctionPointerForDelegate(_SetEffectSpellIdDelegateInstance);
                Thunks[49] = Marshal.GetFunctionPointerForDelegate(_SetLockOrientationToObjectDelegateInstance);
                Thunks[50] = Marshal.GetFunctionPointerForDelegate(_GetLockOrientationToObjectDelegateInstance);
                Thunks[51] = Marshal.GetFunctionPointerForDelegate(_GetPortraitDelegateInstance);
                Thunks[52] = Marshal.GetFunctionPointerForDelegate(_SetPortraitDelegateInstance);
                Thunks[53] = Marshal.GetFunctionPointerForDelegate(_GetPortraitIdDelegateInstance);
                Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetPortraitIdDelegateInstance);
                Thunks[55] = Marshal.GetFunctionPointerForDelegate(_BroadcastFloatyDataDelegateInstance);
                Thunks[56] = Marshal.GetFunctionPointerForDelegate(_BroadcastFloatyDataSTRREFDelegateInstance);
                Thunks[57] = Marshal.GetFunctionPointerForDelegate(_GetCanCarrySqlDatabaseDelegateInstance);
                Thunks[58] = Marshal.GetFunctionPointerForDelegate(_UpdateEffectPtrsDelegateInstance);
                Thunks[59] = Marshal.GetFunctionPointerForDelegate(_UpdateAttributesOnEffectDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 63);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 63);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            ManagedVTables[0][9] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            ManagedVTables[0][11] = Thunks[10];
                            ManagedVTables[0][12] = Thunks[11];
                            ManagedVTables[0][13] = Thunks[12];
                            ManagedVTables[0][14] = Thunks[13];
                            ManagedVTables[0][15] = Thunks[14];
                            ManagedVTables[0][16] = Thunks[15];
                            ManagedVTables[0][17] = Thunks[16];
                            ManagedVTables[0][18] = Thunks[17];
                            ManagedVTables[0][19] = Thunks[18];
                            ManagedVTables[0][20] = Thunks[19];
                            ManagedVTables[0][21] = Thunks[20];
                            ManagedVTables[0][22] = Thunks[21];
                            ManagedVTables[0][23] = Thunks[22];
                            ManagedVTables[0][24] = Thunks[23];
                            ManagedVTables[0][25] = Thunks[24];
                            ManagedVTables[0][26] = Thunks[25];
                            ManagedVTables[0][27] = Thunks[26];
                            ManagedVTables[0][28] = Thunks[27];
                            ManagedVTables[0][29] = Thunks[28];
                            ManagedVTables[0][30] = Thunks[29];
                            ManagedVTables[0][31] = Thunks[30];
                            ManagedVTables[0][32] = Thunks[31];
                            ManagedVTables[0][33] = Thunks[32];
                            ManagedVTables[0][34] = Thunks[33];
                            ManagedVTables[0][35] = Thunks[34];
                            ManagedVTables[0][36] = Thunks[35];
                            ManagedVTables[0][37] = Thunks[36];
                            ManagedVTables[0][38] = Thunks[37];
                            ManagedVTables[0][39] = Thunks[38];
                            ManagedVTables[0][40] = Thunks[39];
                            ManagedVTables[0][41] = Thunks[40];
                            ManagedVTables[0][42] = Thunks[41];
                            ManagedVTables[0][43] = Thunks[42];
                            ManagedVTables[0][44] = Thunks[43];
                            ManagedVTables[0][45] = Thunks[44];
                            ManagedVTables[0][46] = Thunks[45];
                            ManagedVTables[0][47] = Thunks[46];
                            ManagedVTables[0][48] = Thunks[47];
                            ManagedVTables[0][49] = Thunks[48];
                            ManagedVTables[0][50] = Thunks[49];
                            ManagedVTables[0][51] = Thunks[50];
                            ManagedVTables[0][52] = Thunks[51];
                            ManagedVTables[0][53] = Thunks[52];
                            ManagedVTables[0][54] = Thunks[53];
                            ManagedVTables[0][55] = Thunks[54];
                            ManagedVTables[0][56] = Thunks[55];
                            ManagedVTables[0][57] = Thunks[56];
                            ManagedVTables[0][58] = Thunks[57];
                            ManagedVTables[0][59] = Thunks[58];
                            ManagedVTables[0][60] = Thunks[59];
                            VTables.Methods[0] = new Delegate[63];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
