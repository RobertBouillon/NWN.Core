// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CResRef : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 32)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte m_resRefLowerCase[16];

            [FieldOffset(16)]
            internal fixed byte m_resRef[16];

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2EPKh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, byte[] resRef);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2ERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2EPKc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor_1(__IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string pName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2EPKhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, byte* pName, byte nLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef12CopyToStringER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyToString(__IntPtr __instance, __IntPtr str);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef12CopyToStringEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyToString(__IntPtr __instance, sbyte* pStr);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResRefntEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OperatorExclaim(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef9GetResRefEPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetResRef(__IntPtr __instance, byte[] resRef);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef9GetResRefEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetResRef(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef12GetResRefStrEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetResRefStr(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef7IsValidEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsValid(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK7CResRef9GetLengthEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetLength(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CResRef> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CResRef>();

        protected bool __ownsNativeInstance;

        internal static CResRef __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CResRef(native.ToPointer(), skipVTables);
        }

        internal static CResRef __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CResRef)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CResRef __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CResRef(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CResRef(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CResRef(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CResRef()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CResRef(byte[] resRef)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (resRef == null || resRef.Length != 16)
                throw new ArgumentOutOfRangeException("resRef", "The dimensions of the provided array don't match the required size.");
            __Internal.ctor(__Instance, resRef);
        }

        public CResRef(global::NWN.LowLevel.CExoString sName)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public CResRef(string pName)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor_1(__Instance, pName);
        }

        public CResRef(byte* pName, byte nLength)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, pName, nLength);
        }

        public CResRef(global::NWN.LowLevel.CResRef _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResRef.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CResRef.__Internal*) __Instance) = *((global::NWN.LowLevel.CResRef.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CResRef __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void CopyToString(global::NWN.LowLevel.CExoString str)
        {
            if (ReferenceEquals(str, null))
                throw new global::System.ArgumentNullException("str", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = str.__Instance;
            __Internal.CopyToString(__Instance, __arg0);
        }

        public void CopyToString(sbyte* pStr)
        {
            __Internal.CopyToString(__Instance, pStr);
        }

        public static int operator !(global::NWN.LowLevel.CResRef __op)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            var __ret = __Internal.OperatorExclaim(__arg0);
            return __ret;
        }

        public void GetResRef(byte[] resRef)
        {
            if (resRef == null || resRef.Length != 16)
                throw new ArgumentOutOfRangeException("resRef", "The dimensions of the provided array don't match the required size.");
            __Internal.GetResRef(__Instance, resRef);
        }

        public sbyte* GetResRef()
        {
            var __ret = __Internal.GetResRef(__Instance);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CResRef(byte[] resRef)
        {
            return new global::NWN.LowLevel.CResRef(resRef);
        }

        public static implicit operator global::NWN.LowLevel.CResRef(global::NWN.LowLevel.CExoString sName)
        {
            return new global::NWN.LowLevel.CResRef(sName);
        }

        public static implicit operator global::NWN.LowLevel.CResRef(string pName)
        {
            return new global::NWN.LowLevel.CResRef(pName);
        }

        public byte[] MResRefLowerCase
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_resRefLowerCase, 16);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((__Internal*)__Instance)->m_resRefLowerCase[i] = value[i];
                }
            }
        }

        public byte[] MResRef
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_resRef, 16);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((__Internal*)__Instance)->m_resRef[i] = value[i];
                }
            }
        }

        public sbyte* ResRefStr
        {
            get
            {
                var __ret = __Internal.GetResRefStr(__Instance);
                return __ret;
            }
        }

        public int IsValid
        {
            get
            {
                var __ret = __Internal.IsValid(__Instance);
                return __ret;
            }
        }

        public byte Length
        {
            get
            {
                var __ret = __Internal.GetLength(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
