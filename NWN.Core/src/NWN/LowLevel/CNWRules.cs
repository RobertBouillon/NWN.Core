// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWRules : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 408)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWRules;

            [FieldOffset(8)]
            internal fixed float m_fRangeTypes[5];

            [FieldOffset(32)]
            internal __IntPtr m_pBaseItemArray;

            [FieldOffset(40)]
            internal fixed uint m_nExperienceTable[41];

            [FieldOffset(208)]
            internal __IntPtr m_pSpellArray;

            [FieldOffset(216)]
            internal __IntPtr m_lstFeats;

            [FieldOffset(224)]
            internal __IntPtr m_lstMasterFeats;

            [FieldOffset(232)]
            internal __IntPtr m_lstMasterFeatDescriptions;

            [FieldOffset(240)]
            internal __IntPtr m_lstMasterFeatIcons;

            [FieldOffset(248)]
            internal __IntPtr m_lstSortedFeatIDs;

            [FieldOffset(256)]
            internal ushort m_nNumFeats;

            [FieldOffset(258)]
            internal ushort m_nNumSortedFeats;

            [FieldOffset(260)]
            internal sbyte m_nNumMasterFeats;

            [FieldOffset(261)]
            internal byte m_nNumClasses;

            [FieldOffset(262)]
            internal byte m_nNumRaces;

            [FieldOffset(263)]
            internal byte m_nNumSkills;

            [FieldOffset(264)]
            internal byte m_nNumDomains;

            [FieldOffset(272)]
            internal __IntPtr m_lstClasses;

            [FieldOffset(280)]
            internal __IntPtr m_lstRaces;

            [FieldOffset(288)]
            internal __IntPtr m_lstSkills;

            [FieldOffset(296)]
            internal __IntPtr m_lstDomains;

            [FieldOffset(304)]
            internal __IntPtr m_p2DArrays;

            [FieldOffset(312)]
            internal fixed byte m_nDifficultyOptions[35];

            [FieldOffset(352)]
            internal global::Std.UnorderedMap.__Internalc__N_std_S_unordered_map____N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry___N_std_S_hash__S0____N_std_S_equal_to__S0____N_std_S_allocator____N_std_S_pair__1S0__S3_ m_ruleset_2da_cache;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRulesC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRulesC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules9GetDomainEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDomain(__IntPtr __instance, ushort nDomain);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules13IsArcaneClassEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsArcaneClass(__IntPtr __instance, byte nClass);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules21GetFeatExpansionLevelEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetFeatExpansionLevel(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules22GetSkillExpansionLevelEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetSkillExpansionLevel(__IntPtr __instance, ushort nSkill);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules22GetClassExpansionLevelEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetClassExpansionLevel(__IntPtr __instance, byte nClass);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules22GetSpellExpansionLevelEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetSpellExpansionLevel(__IntPtr __instance, uint nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules25GetFamiliarExpansionLevelEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetFamiliarExpansionLevel(__IntPtr __instance, byte nFamiliar, int bAnimalCompanion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules7GetFeatEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetFeat(__IntPtr __instance, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules21GetMasterFeatNameTextEc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMasterFeatNameText(__IntPtr @return, __IntPtr __instance, sbyte nMasterFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules28GetMasterFeatDescriptionTextEc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMasterFeatDescriptionText(__IntPtr @return, __IntPtr __instance, sbyte nMasterFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules17GetMasterFeatIconEc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMasterFeatIcon(__IntPtr @return, __IntPtr __instance, sbyte nMasterFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules9SortFeatsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SortFeats(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules21GetMetaMagicLevelCostEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMetaMagicLevelCost(__IntPtr __instance, byte nMetaType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules13IsFeatUseableEht", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsFeatUseable(__IntPtr __instance, byte nWISBase, ushort nFeat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules8RollDiceEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort RollDice(__IntPtr __instance, byte nNumberOfDice, byte nSides);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules19GetDifficultyOptionEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDifficultyOption(__IntPtr __instance, int nOption, int nDifficultyLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules23GetWeightedDamageAmountEiiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetWeightedDamageAmount(__IntPtr __instance, int nDamageDealt, int nMaxPossibleDamage, int bPCvsNPC, int bNPCvsPC, int nDamageWeight);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules23GetDamageIndexFromFlagsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDamageIndexFromFlags(__IntPtr __instance, uint nDamageFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules9ReloadAllEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReloadAll(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules9UnloadAllEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnloadAll(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules21GetRulesetStringEntryERK10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetRulesetStringEntry(__IntPtr @return, __IntPtr __instance, __IntPtr label, __IntPtr whenMissing);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules18GetRulesetIntEntryERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRulesetIntEntry(__IntPtr __instance, __IntPtr label, int whenMissing);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules20GetRulesetFloatEntryERK10CExoStringf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetRulesetFloatEntry(__IntPtr __instance, __IntPtr label, float whenMissing);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules12LoadFeatInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadFeatInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules13LoadClassInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadClassInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules12LoadRaceInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadRaceInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules13LoadSkillInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadSkillInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules14LoadDomainInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadDomainInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules23InitLegacyClassDefaultsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitLegacyClassDefaults(__IntPtr __instance, byte nClass);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules18LoadDifficultyInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadDifficultyInfo(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWRules15LoadRulesetInfoEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadRulesetInfo(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWRules> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWRules>();

        protected bool __ownsNativeInstance;

        internal static CNWRules __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWRules(native.ToPointer(), skipVTables);
        }

        internal static CNWRules __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWRules)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWRules __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWRules)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWRules __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWRules(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWRules.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWRules(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWRules(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWRules()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWRules.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWRules");
        }

        public CNWRules(global::NWN.LowLevel.CNWRules _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWRules.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWRules");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWRules __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWRules.__Internal*) __Instance)->vptr_CNWRules = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NWN.LowLevel.CNWDomain GetDomain(ushort nDomain)
        {
            var __ret = __Internal.GetDomain(__Instance, nDomain);
            var __result0 = global::NWN.LowLevel.CNWDomain.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int IsArcaneClass(byte nClass)
        {
            var __ret = __Internal.IsArcaneClass(__Instance, nClass);
            return __ret;
        }

        public byte GetFeatExpansionLevel(ushort nFeat)
        {
            var __ret = __Internal.GetFeatExpansionLevel(__Instance, nFeat);
            return __ret;
        }

        public byte GetSkillExpansionLevel(ushort nSkill)
        {
            var __ret = __Internal.GetSkillExpansionLevel(__Instance, nSkill);
            return __ret;
        }

        public byte GetClassExpansionLevel(byte nClass)
        {
            var __ret = __Internal.GetClassExpansionLevel(__Instance, nClass);
            return __ret;
        }

        public byte GetSpellExpansionLevel(uint nSpellId)
        {
            var __ret = __Internal.GetSpellExpansionLevel(__Instance, nSpellId);
            return __ret;
        }

        public byte GetFamiliarExpansionLevel(byte nFamiliar, int bAnimalCompanion)
        {
            var __ret = __Internal.GetFamiliarExpansionLevel(__Instance, nFamiliar, bAnimalCompanion);
            return __ret;
        }

        public global::NWN.LowLevel.CNWFeat GetFeat(ushort nFeat)
        {
            var __ret = __Internal.GetFeat(__Instance, nFeat);
            var __result0 = global::NWN.LowLevel.CNWFeat.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CExoString GetMasterFeatNameText(sbyte nMasterFeat)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetMasterFeatNameText(new IntPtr(&__ret), __Instance, nMasterFeat);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString GetMasterFeatDescriptionText(sbyte nMasterFeat)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetMasterFeatDescriptionText(new IntPtr(&__ret), __Instance, nMasterFeat);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CResRef GetMasterFeatIcon(sbyte nMasterFeat)
        {
            var __ret = new global::NWN.LowLevel.CResRef.__Internal();
            __Internal.GetMasterFeatIcon(new IntPtr(&__ret), __Instance, nMasterFeat);
            return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
        }

        public void SortFeats()
        {
            __Internal.SortFeats(__Instance);
        }

        public byte GetMetaMagicLevelCost(byte nMetaType)
        {
            var __ret = __Internal.GetMetaMagicLevelCost(__Instance, nMetaType);
            return __ret;
        }

        public int IsFeatUseable(byte nWISBase, ushort nFeat)
        {
            var __ret = __Internal.IsFeatUseable(__Instance, nWISBase, nFeat);
            return __ret;
        }

        public ushort RollDice(byte nNumberOfDice, byte nSides)
        {
            var __ret = __Internal.RollDice(__Instance, nNumberOfDice, nSides);
            return __ret;
        }

        public int GetDifficultyOption(int nOption, int nDifficultyLevel)
        {
            var __ret = __Internal.GetDifficultyOption(__Instance, nOption, nDifficultyLevel);
            return __ret;
        }

        public int GetWeightedDamageAmount(int nDamageDealt, int nMaxPossibleDamage, int bPCvsNPC, int bNPCvsPC, int nDamageWeight)
        {
            var __ret = __Internal.GetWeightedDamageAmount(__Instance, nDamageDealt, nMaxPossibleDamage, bPCvsNPC, bNPCvsPC, nDamageWeight);
            return __ret;
        }

        public int GetDamageIndexFromFlags(uint nDamageFlags)
        {
            var __ret = __Internal.GetDamageIndexFromFlags(__Instance, nDamageFlags);
            return __ret;
        }

        public void ReloadAll()
        {
            __Internal.ReloadAll(__Instance);
        }

        public void UnloadAll()
        {
            __Internal.UnloadAll(__Instance);
        }

        public global::NWN.LowLevel.CExoString GetRulesetStringEntry(global::NWN.LowLevel.CExoString label, global::NWN.LowLevel.CExoString whenMissing)
        {
            if (ReferenceEquals(label, null))
                throw new global::System.ArgumentNullException("label", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = label.__Instance;
            if (ReferenceEquals(whenMissing, null))
                throw new global::System.ArgumentNullException("whenMissing", "Cannot be null because it is passed by value.");
            var __arg1 = whenMissing.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetRulesetStringEntry(new IntPtr(&__ret), __Instance, __arg0, __arg1);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int GetRulesetIntEntry(global::NWN.LowLevel.CExoString label, int whenMissing)
        {
            if (ReferenceEquals(label, null))
                throw new global::System.ArgumentNullException("label", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = label.__Instance;
            var __ret = __Internal.GetRulesetIntEntry(__Instance, __arg0, whenMissing);
            return __ret;
        }

        public float GetRulesetFloatEntry(global::NWN.LowLevel.CExoString label, float whenMissing)
        {
            if (ReferenceEquals(label, null))
                throw new global::System.ArgumentNullException("label", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = label.__Instance;
            var __ret = __Internal.GetRulesetFloatEntry(__Instance, __arg0, whenMissing);
            return __ret;
        }

        public void LoadFeatInfo()
        {
            __Internal.LoadFeatInfo(__Instance);
        }

        public void LoadClassInfo()
        {
            __Internal.LoadClassInfo(__Instance);
        }

        public void LoadRaceInfo()
        {
            __Internal.LoadRaceInfo(__Instance);
        }

        public void LoadSkillInfo()
        {
            __Internal.LoadSkillInfo(__Instance);
        }

        public void LoadDomainInfo()
        {
            __Internal.LoadDomainInfo(__Instance);
        }

        public void InitLegacyClassDefaults(byte nClass)
        {
            __Internal.InitLegacyClassDefaults(__Instance, nClass);
        }

        public void LoadDifficultyInfo()
        {
            __Internal.LoadDifficultyInfo(__Instance);
        }

        public void LoadRulesetInfo()
        {
            __Internal.LoadRulesetInfo(__Instance);
        }

        public float[] MFRangeTypes
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<float>(((__Internal*)__Instance)->m_fRangeTypes, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->m_fRangeTypes[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CNWBaseItemArray MPBaseItemArray
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWBaseItemArray.__GetOrCreateInstance(((__Internal*)__Instance)->m_pBaseItemArray, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pBaseItemArray = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint[] MNExperienceTable
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nExperienceTable, 41);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 41; i++)
                        ((__Internal*)__Instance)->m_nExperienceTable[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CNWSpellArray MPSpellArray
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSpellArray.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSpellArray, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSpellArray = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWFeat MLstFeats
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWFeat.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstFeats, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstFeats = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint* MLstMasterFeats
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_lstMasterFeats;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstMasterFeats = (__IntPtr) value;
            }
        }

        public uint* MLstMasterFeatDescriptions
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_lstMasterFeatDescriptions;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstMasterFeatDescriptions = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CResRef MLstMasterFeatIcons
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CResRef.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstMasterFeatIcons, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstMasterFeatIcons = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort* MLstSortedFeatIDs
        {
            get
            {
                return (ushort*) ((__Internal*)__Instance)->m_lstSortedFeatIDs;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstSortedFeatIDs = (__IntPtr) value;
            }
        }

        public ushort MNNumFeats
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumFeats;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumFeats = value;
            }
        }

        public ushort MNNumSortedFeats
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumSortedFeats;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumSortedFeats = value;
            }
        }

        public sbyte MNNumMasterFeats
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumMasterFeats;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumMasterFeats = value;
            }
        }

        public byte MNNumClasses
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumClasses;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumClasses = value;
            }
        }

        public byte MNNumRaces
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumRaces;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumRaces = value;
            }
        }

        public byte MNNumSkills
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumSkills;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumSkills = value;
            }
        }

        public byte MNNumDomains
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumDomains;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumDomains = value;
            }
        }

        public global::NWN.LowLevel.CNWClass MLstClasses
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWClass.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstClasses, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstClasses = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWRace MLstRaces
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWRace.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstRaces, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstRaces = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSkill MLstSkills
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSkill.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstSkills, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstSkills = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWDomain MLstDomains
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWDomain.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstDomains, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstDomains = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CTwoDimArrays MP2DArrays
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CTwoDimArrays.__GetOrCreateInstance(((__Internal*)__Instance)->m_p2DArrays, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_p2DArrays = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        #region Virtual table interop

        // virtual ~CNWRules()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWRules.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
