// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CVirtualMachine : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1360)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pJitCompiler;

            [FieldOffset(8)]
            internal int m_nReturnValueParameterType;

            [FieldOffset(16)]
            internal __IntPtr m_pReturnValue;

            [FieldOffset(24)]
            internal uint m_nInstructionsExecuted;

            [FieldOffset(28)]
            internal int m_nRecursionLevel;

            [FieldOffset(32)]
            internal fixed byte m_pVirtualMachineScript[448];

            [FieldOffset(480)]
            internal fixed int m_bValidObjectRunScript[8];

            [FieldOffset(512)]
            internal fixed uint m_oidObjectRunScript[8];

            [FieldOffset(544)]
            internal fixed byte m_lScriptParams[128];

            [FieldOffset(672)]
            internal global::NWN.LowLevel.CVirtualMachineStack.__Internal m_cRunTimeStack;

            [FieldOffset(712)]
            internal int m_nInstructPtrLevel;

            [FieldOffset(716)]
            internal fixed int m_pnRunTimeInstructPtr[128];

            [FieldOffset(1228)]
            internal int m_nSecondaryInstructionPointer;

            [FieldOffset(1232)]
            internal int m_nStackSizeToSave;

            [FieldOffset(1236)]
            internal int m_nBaseStackSizeToSave;

            [FieldOffset(1240)]
            internal __IntPtr m_pCmdImplementer;

            [FieldOffset(1248)]
            internal int m_bDebugGUIRequired;

            [FieldOffset(1252)]
            internal int m_bDebuggerSpawned;

            [FieldOffset(1256)]
            internal global::NWN.LowLevel.CVirtualMachineFile.__Internal m_cVMFile;

            [FieldOffset(1312)]
            internal __IntPtr m_pLog;

            [FieldOffset(1320)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aScriptLog;

            [FieldOffset(1336)]
            internal int m_bEnableScriptLogging;

            [FieldOffset(1340)]
            internal int m_bEnableScriptProfiling;

            [FieldOffset(1344)]
            internal uint m_nScriptStartTime;

            [FieldOffset(1348)]
            internal uint m_nScriptEndTime;

            [FieldOffset(1352)]
            internal uint m_nInstructionLimit;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachineC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachineC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachineD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine9RunScriptEP10CExoStringji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunScript(__IntPtr __instance, __IntPtr psFileName, uint oid, int bOidValid);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14RunScriptChunkERK10CExoStringjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunScriptChunk(__IntPtr __instance, __IntPtr sScriptChunk, uint oid, int bOidValid, int bWrapIntoMain);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine18RunScriptSituationEPvji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunScriptSituation(__IntPtr __instance, __IntPtr pScriptSituation, uint oid, int bOidValid);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine23GetRunScriptReturnValueEPiPPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRunScriptReturnValue(__IntPtr __instance, int* nParameterType, void** pParameter);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine15SetDebugGUIFlagEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDebugGUIFlag(__IntPtr __instance, int bValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine19SetScriptParametersERK13CExoArrayListI11ScriptParamE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetScriptParameters(__IntPtr __instance, __IntPtr lParameters);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine18GetScriptParameterERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetScriptParameter(__IntPtr @return, __IntPtr __instance, __IntPtr paramName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine18SetScriptParameterERK10CExoStringS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetScriptParameter(__IntPtr __instance, __IntPtr paramName, __IntPtr paramValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine21SetCommandImplementerEP29CVirtualMachineCmdImplementer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCommandImplementer(__IntPtr __instance, __IntPtr pImplementer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine15StackPopIntegerEPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopInteger(__IntPtr __instance, int* nInteger);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine16StackPushIntegerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushInteger(__IntPtr __instance, int nInteger);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine13StackPopFloatEPf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopFloat(__IntPtr __instance, float* fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14StackPushFloatEf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushFloat(__IntPtr __instance, float fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14StackPopVectorEP6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopVector(__IntPtr __instance, __IntPtr vVector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine15StackPushVectorE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushVector(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vVector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14StackPopStringEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopString(__IntPtr __instance, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine15StackPushStringERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushString(__IntPtr __instance, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14StackPopObjectEPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopObject(__IntPtr __instance, uint* poidObjectId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine15StackPushObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushObject(__IntPtr __instance, uint oidObjectId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine23StackPopEngineStructureEiPPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopEngineStructure(__IntPtr __instance, int nEngineStructure, void** ppEngineStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine24StackPushEngineStructureEiPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPushEngineStructure(__IntPtr __instance, int nEngineStructure, __IntPtr pEngineStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine21DeleteScriptSituationEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteScriptSituation(__IntPtr __instance, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine29Test_RunAllScriptsInDirectoryER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestRunAllScriptsInDirectory(__IntPtr __instance, __IntPtr sRunDirectoryAlias);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine12DeleteScriptEP21CVirtualMachineScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DeleteScript(__IntPtr __instance, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine19ExecuteInstructionsEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExecuteInstructions(__IntPtr __instance, int nRecursionLevel, int nNodeLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine17PopInstructionPtrEPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PopInstructionPtr(__IntPtr __instance, int* nInstructionPointer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine18PushInstructionPtrEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PushInstructionPtr(__IntPtr __instance, int nInstructionPointer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine14ReadScriptFileEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadScriptFile(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine13RunScriptFileEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunScriptFile(__IntPtr __instance, int nInstructionPointer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine22SetUpJITCompiledScriptERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetUpJITCompiledScript(__IntPtr __instance, __IntPtr sScriptChunk, int bWrapIntoMain);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine20SetUpScriptSituationEP21CVirtualMachineScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetUpScriptSituation(__IntPtr __instance, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine8DebuggerEPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Debugger(__IntPtr __instance, int* pnCurrentInstructionPointer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine24StackPopCommand_InternalEPP21CVirtualMachineScript", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StackPopCommandInternal(__IntPtr __instance, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine28SaveScriptSituation_InternalEP21CVirtualMachineScriptP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveScriptSituationInternal(__IntPtr __instance, __IntPtr pScript, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine28LoadScriptSituation_InternalEPP21CVirtualMachineScriptP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadScriptSituationInternal(__IntPtr __instance, __IntPtr pScript, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CVirtualMachine12GetScriptLogERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetScriptLog(__IntPtr __instance, __IntPtr sScript);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachine> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachine>();

        protected bool __ownsNativeInstance;

        internal static CVirtualMachine __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CVirtualMachine(native.ToPointer(), skipVTables);
        }

        internal static CVirtualMachine __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CVirtualMachine)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CVirtualMachine __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CVirtualMachine(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CVirtualMachine.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CVirtualMachine(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVirtualMachine(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CVirtualMachine()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachine.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CVirtualMachine(global::NWN.LowLevel.CVirtualMachine _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachine.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CVirtualMachine __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int RunScript(global::NWN.LowLevel.CExoString psFileName, uint oid, int bOidValid)
        {
            var __arg0 = psFileName is null ? __IntPtr.Zero : psFileName.__Instance;
            var __ret = __Internal.RunScript(__Instance, __arg0, oid, bOidValid);
            return __ret;
        }

        public int RunScriptChunk(global::NWN.LowLevel.CExoString sScriptChunk, uint oid, int bOidValid, int bWrapIntoMain)
        {
            if (ReferenceEquals(sScriptChunk, null))
                throw new global::System.ArgumentNullException("sScriptChunk", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sScriptChunk.__Instance;
            var __ret = __Internal.RunScriptChunk(__Instance, __arg0, oid, bOidValid, bWrapIntoMain);
            return __ret;
        }

        public int RunScriptSituation(__IntPtr pScriptSituation, uint oid, int bOidValid)
        {
            var __ret = __Internal.RunScriptSituation(__Instance, pScriptSituation, oid, bOidValid);
            return __ret;
        }

        public int GetRunScriptReturnValue(ref int nParameterType, void** pParameter)
        {
            fixed (int* __nParameterType0 = &nParameterType)
            {
                var __arg0 = __nParameterType0;
                var __ret = __Internal.GetRunScriptReturnValue(__Instance, __arg0, pParameter);
                return __ret;
            }
        }

        public void SetDebugGUIFlag(int bValue)
        {
            __Internal.SetDebugGUIFlag(__Instance, bValue);
        }

        public void SetScriptParameters(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam> lParameters)
        {
            if (ReferenceEquals(lParameters, null))
                throw new global::System.ArgumentNullException("lParameters", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = lParameters.__Instance;
            __Internal.SetScriptParameters(__Instance, __arg0);
        }

        public global::NWN.LowLevel.CExoString GetScriptParameter(global::NWN.LowLevel.CExoString paramName)
        {
            if (ReferenceEquals(paramName, null))
                throw new global::System.ArgumentNullException("paramName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = paramName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetScriptParameter(new IntPtr(&__ret), __Instance, __arg0);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void SetScriptParameter(global::NWN.LowLevel.CExoString paramName, global::NWN.LowLevel.CExoString paramValue)
        {
            if (ReferenceEquals(paramName, null))
                throw new global::System.ArgumentNullException("paramName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = paramName.__Instance;
            if (ReferenceEquals(paramValue, null))
                throw new global::System.ArgumentNullException("paramValue", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = paramValue.__Instance;
            __Internal.SetScriptParameter(__Instance, __arg0, __arg1);
        }

        public void SetCommandImplementer(global::NWN.LowLevel.CVirtualMachineCmdImplementer pImplementer)
        {
            var __arg0 = pImplementer is null ? __IntPtr.Zero : pImplementer.__Instance;
            __Internal.SetCommandImplementer(__Instance, __arg0);
        }

        public int StackPopInteger(ref int nInteger)
        {
            fixed (int* __nInteger0 = &nInteger)
            {
                var __arg0 = __nInteger0;
                var __ret = __Internal.StackPopInteger(__Instance, __arg0);
                return __ret;
            }
        }

        public int StackPushInteger(int nInteger)
        {
            var __ret = __Internal.StackPushInteger(__Instance, nInteger);
            return __ret;
        }

        public int StackPopFloat(ref float fFloat)
        {
            fixed (float* __fFloat0 = &fFloat)
            {
                var __arg0 = __fFloat0;
                var __ret = __Internal.StackPopFloat(__Instance, __arg0);
                return __ret;
            }
        }

        public int StackPushFloat(float fFloat)
        {
            var __ret = __Internal.StackPushFloat(__Instance, fFloat);
            return __ret;
        }

        public int StackPopVector(global::NWN.LowLevel.Vector vVector)
        {
            var __arg0 = vVector is null ? __IntPtr.Zero : vVector.__Instance;
            var __ret = __Internal.StackPopVector(__Instance, __arg0);
            return __ret;
        }

        public int StackPushVector(global::NWN.LowLevel.Vector vVector)
        {
            if (ReferenceEquals(vVector, null))
                throw new global::System.ArgumentNullException("vVector", "Cannot be null because it is passed by value.");
            var __arg0 = vVector.__Instance;
            var __ret = __Internal.StackPushVector(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public int StackPopString(global::NWN.LowLevel.CExoString sString)
        {
            var __arg0 = sString is null ? __IntPtr.Zero : sString.__Instance;
            var __ret = __Internal.StackPopString(__Instance, __arg0);
            return __ret;
        }

        public int StackPushString(global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sString.__Instance;
            var __ret = __Internal.StackPushString(__Instance, __arg0);
            return __ret;
        }

        public int StackPopObject(ref uint poidObjectId)
        {
            fixed (uint* __poidObjectId0 = &poidObjectId)
            {
                var __arg0 = __poidObjectId0;
                var __ret = __Internal.StackPopObject(__Instance, __arg0);
                return __ret;
            }
        }

        public int StackPushObject(uint oidObjectId)
        {
            var __ret = __Internal.StackPushObject(__Instance, oidObjectId);
            return __ret;
        }

        public int StackPopEngineStructure(int nEngineStructure, void** ppEngineStructure)
        {
            var __ret = __Internal.StackPopEngineStructure(__Instance, nEngineStructure, ppEngineStructure);
            return __ret;
        }

        public int StackPushEngineStructure(int nEngineStructure, __IntPtr pEngineStructure)
        {
            var __ret = __Internal.StackPushEngineStructure(__Instance, nEngineStructure, pEngineStructure);
            return __ret;
        }

        public void DeleteScriptSituation(__IntPtr pScript)
        {
            __Internal.DeleteScriptSituation(__Instance, pScript);
        }

        public int TestRunAllScriptsInDirectory(global::NWN.LowLevel.CExoString sRunDirectoryAlias)
        {
            if (ReferenceEquals(sRunDirectoryAlias, null))
                throw new global::System.ArgumentNullException("sRunDirectoryAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRunDirectoryAlias.__Instance;
            var __ret = __Internal.TestRunAllScriptsInDirectory(__Instance, __arg0);
            return __ret;
        }

        public int DeleteScript(global::NWN.LowLevel.CVirtualMachineScript pScript)
        {
            var __arg0 = pScript is null ? __IntPtr.Zero : pScript.__Instance;
            var __ret = __Internal.DeleteScript(__Instance, __arg0);
            return __ret;
        }

        public int ExecuteInstructions(int nRecursionLevel, int nNodeLocation)
        {
            var __ret = __Internal.ExecuteInstructions(__Instance, nRecursionLevel, nNodeLocation);
            return __ret;
        }

        public int PopInstructionPtr(ref int nInstructionPointer)
        {
            fixed (int* __nInstructionPointer0 = &nInstructionPointer)
            {
                var __arg0 = __nInstructionPointer0;
                var __ret = __Internal.PopInstructionPtr(__Instance, __arg0);
                return __ret;
            }
        }

        public int PushInstructionPtr(int nInstructionPointer)
        {
            var __ret = __Internal.PushInstructionPtr(__Instance, nInstructionPointer);
            return __ret;
        }

        public int ReadScriptFile(global::NWN.LowLevel.CExoString sFileName)
        {
            var __arg0 = sFileName is null ? __IntPtr.Zero : sFileName.__Instance;
            var __ret = __Internal.ReadScriptFile(__Instance, __arg0);
            return __ret;
        }

        public int RunScriptFile(int nInstructionPointer)
        {
            var __ret = __Internal.RunScriptFile(__Instance, nInstructionPointer);
            return __ret;
        }

        public int SetUpJITCompiledScript(global::NWN.LowLevel.CExoString sScriptChunk, int bWrapIntoMain)
        {
            if (ReferenceEquals(sScriptChunk, null))
                throw new global::System.ArgumentNullException("sScriptChunk", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sScriptChunk.__Instance;
            var __ret = __Internal.SetUpJITCompiledScript(__Instance, __arg0, bWrapIntoMain);
            return __ret;
        }

        public int SetUpScriptSituation(global::NWN.LowLevel.CVirtualMachineScript pScript)
        {
            var __arg0 = pScript is null ? __IntPtr.Zero : pScript.__Instance;
            var __ret = __Internal.SetUpScriptSituation(__Instance, __arg0);
            return __ret;
        }

        public void Debugger(ref int pnCurrentInstructionPointer)
        {
            fixed (int* __pnCurrentInstructionPointer0 = &pnCurrentInstructionPointer)
            {
                var __arg0 = __pnCurrentInstructionPointer0;
                __Internal.Debugger(__Instance, __arg0);
            }
        }

        public int StackPopCommandInternal(global::NWN.LowLevel.CVirtualMachineScript pScript)
        {
            var ____arg0 = pScript is null ? __IntPtr.Zero : pScript.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __ret = __Internal.StackPopCommandInternal(__Instance, __arg0);
            return __ret;
        }

        public int SaveScriptSituationInternal(global::NWN.LowLevel.CVirtualMachineScript pScript, global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pScript is null ? __IntPtr.Zero : pScript.__Instance;
            var __arg1 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg2 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveScriptSituationInternal(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int LoadScriptSituationInternal(global::NWN.LowLevel.CVirtualMachineScript pScript, global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var ____arg0 = pScript is null ? __IntPtr.Zero : pScript.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __arg1 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg2 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadScriptSituationInternal(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public global::NWN.LowLevel.CScriptLog GetScriptLog(global::NWN.LowLevel.CExoString sScript)
        {
            if (ReferenceEquals(sScript, null))
                throw new global::System.ArgumentNullException("sScript", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sScript.__Instance;
            var __ret = __Internal.GetScriptLog(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CScriptLog.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CScriptCompiler MPJitCompiler
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompiler.__GetOrCreateInstance(((__Internal*)__Instance)->m_pJitCompiler, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pJitCompiler = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNReturnValueParameterType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReturnValueParameterType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReturnValueParameterType = value;
            }
        }

        public __IntPtr MPReturnValue
        {
            get
            {
                return ((__Internal*)__Instance)->m_pReturnValue;
            }

            set
            {
                ((__Internal*)__Instance)->m_pReturnValue = (__IntPtr) value;
            }
        }

        public uint MNInstructionsExecuted
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInstructionsExecuted;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInstructionsExecuted = value;
            }
        }

        public int MNRecursionLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRecursionLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRecursionLevel = value;
            }
        }

        public global::NWN.LowLevel.CVirtualMachineScript[] MPVirtualMachineScript
        {
            get
            {
                global::NWN.LowLevel.CVirtualMachineScript[] __value = null;
                if (((__Internal*)__Instance)->m_pVirtualMachineScript != null)
                {
                    __value = new global::NWN.LowLevel.CVirtualMachineScript[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = global::NWN.LowLevel.CVirtualMachineScript.__CreateInstance(*((global::NWN.LowLevel.CVirtualMachineScript.__Internal*)&(((__Internal*)__Instance)->m_pVirtualMachineScript[i * sizeof(global::NWN.LowLevel.CVirtualMachineScript.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 8)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 8; i++)
                        *(global::NWN.LowLevel.CVirtualMachineScript.__Internal*) &((__Internal*)__Instance)->m_pVirtualMachineScript[i * sizeof(global::NWN.LowLevel.CVirtualMachineScript.__Internal)] = *(global::NWN.LowLevel.CVirtualMachineScript.__Internal*)value[i].__Instance;
                }
            }
        }

        public int[] MBValidObjectRunScript
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_bValidObjectRunScript, 8);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((__Internal*)__Instance)->m_bValidObjectRunScript[i] = value[i];
                }
            }
        }

        public uint[] MOidObjectRunScript
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_oidObjectRunScript, 8);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8; i++)
                        ((__Internal*)__Instance)->m_oidObjectRunScript[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>[] MLScriptParams
        {
            get
            {
                global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>[] __value = null;
                if (((__Internal*)__Instance)->m_lScriptParams != null)
                {
                    __value = new global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>[8];
                    for (int i = 0; i < 8; i++)
                        __value[i] = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__CreateInstance(*((global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__Internal*)&(((__Internal*)__Instance)->m_lScriptParams[i * sizeof(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 8)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 8; i++)
                        *(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__Internal*) &((__Internal*)__Instance)->m_lScriptParams[i * sizeof(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__Internal)] = *(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CVirtualMachineStack MCRunTimeStack
        {
            get
            {
                return global::NWN.LowLevel.CVirtualMachineStack.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cRunTimeStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cRunTimeStack = *(global::NWN.LowLevel.CVirtualMachineStack.__Internal*) value.__Instance;
            }
        }

        public int MNInstructPtrLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInstructPtrLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInstructPtrLevel = value;
            }
        }

        public int[] MPnRunTimeInstructPtr
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_pnRunTimeInstructPtr, 128);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 128; i++)
                        ((__Internal*)__Instance)->m_pnRunTimeInstructPtr[i] = value[i];
                }
            }
        }

        public int MNSecondaryInstructionPointer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSecondaryInstructionPointer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSecondaryInstructionPointer = value;
            }
        }

        public int MNStackSizeToSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStackSizeToSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStackSizeToSave = value;
            }
        }

        public int MNBaseStackSizeToSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBaseStackSizeToSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBaseStackSizeToSave = value;
            }
        }

        public global::NWN.LowLevel.CVirtualMachineCmdImplementer MPCmdImplementer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetOrCreateInstance(((__Internal*)__Instance)->m_pCmdImplementer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pCmdImplementer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBDebugGUIRequired
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDebugGUIRequired;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDebugGUIRequired = value;
            }
        }

        public int MBDebuggerSpawned
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDebuggerSpawned;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDebuggerSpawned = value;
            }
        }

        public global::NWN.LowLevel.CVirtualMachineFile MCVMFile
        {
            get
            {
                return global::NWN.LowLevel.CVirtualMachineFile.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cVMFile));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cVMFile = *(global::NWN.LowLevel.CVirtualMachineFile.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptLog MPLog
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptLog.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLog, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLog = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CScriptLog> MAScriptLog
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CScriptLog>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aScriptLog));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aScriptLog = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MBEnableScriptLogging
        {
            get
            {
                return ((__Internal*)__Instance)->m_bEnableScriptLogging;
            }

            set
            {
                ((__Internal*)__Instance)->m_bEnableScriptLogging = value;
            }
        }

        public int MBEnableScriptProfiling
        {
            get
            {
                return ((__Internal*)__Instance)->m_bEnableScriptProfiling;
            }

            set
            {
                ((__Internal*)__Instance)->m_bEnableScriptProfiling = value;
            }
        }

        public uint MNScriptStartTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_nScriptStartTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_nScriptStartTime = value;
            }
        }

        public uint MNScriptEndTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_nScriptEndTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_nScriptEndTime = value;
            }
        }

        public uint MNInstructionLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInstructionLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInstructionLimit = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
