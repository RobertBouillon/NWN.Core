// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoStringList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pStrings;

            [FieldOffset(8)]
            internal int m_nCount;

            [FieldOffset(12)]
            internal int m_nDuplicates;

            [FieldOffset(16)]
            internal int m_nSorted;

            [FieldOffset(20)]
            internal int m_nSize;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringListC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringListC2Eiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, int a_nSorted, int a_nDuplicates, int a_nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringListC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringListD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList3AddEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Add(__IntPtr __instance, __IntPtr a_nString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList5ClearEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Clear(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList6DeleteEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Delete(__IntPtr __instance, __IntPtr a_nString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList9GetStringEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetString(__IntPtr __instance, int a_nPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList6InsertEP10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insert(__IntPtr __instance, __IntPtr a_nString, int a_nPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList5MergeEPS_ii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Merge(__IntPtr __instance, __IntPtr a_nSecond, int a_nSorted, int a_nDuplicates);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList6RemoveEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Remove(__IntPtr __instance, int a_nPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList9AddSortedEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSorted(__IntPtr __instance, __IntPtr a_nString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList9IntroduceEP10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Introduce(__IntPtr __instance, __IntPtr a_nString, int a_nPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringListixEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr OperatorSubscript(__IntPtr __instance, int a_nPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList8GetCountEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCount(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList12GetDuplicateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDuplicate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList7GetSizeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN14CExoStringList9GetSortedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSorted(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoStringList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoStringList>();

        protected bool __ownsNativeInstance;

        internal static CExoStringList __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoStringList(native.ToPointer(), skipVTables);
        }

        internal static CExoStringList __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoStringList)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoStringList __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoStringList(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoStringList(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoStringList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoStringList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoStringList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoStringList(int a_nSorted, int a_nDuplicates, int a_nSize)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoStringList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, a_nSorted, a_nDuplicates, a_nSize);
        }

        public CExoStringList(global::NWN.LowLevel.CExoStringList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoStringList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CExoStringList.__Internal*) __Instance) = *((global::NWN.LowLevel.CExoStringList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoStringList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Add(global::NWN.LowLevel.CExoString a_nString)
        {
            var __arg0 = a_nString is null ? __IntPtr.Zero : a_nString.__Instance;
            __Internal.Add(__Instance, __arg0);
        }

        public void Clear()
        {
            __Internal.Clear(__Instance);
        }

        public void Delete(global::NWN.LowLevel.CExoString a_nString)
        {
            var __arg0 = a_nString is null ? __IntPtr.Zero : a_nString.__Instance;
            __Internal.Delete(__Instance, __arg0);
        }

        public global::NWN.LowLevel.CExoString GetString(int a_nPosition)
        {
            var __ret = __Internal.GetString(__Instance, a_nPosition);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void Insert(global::NWN.LowLevel.CExoString a_nString, int a_nPosition)
        {
            var __arg0 = a_nString is null ? __IntPtr.Zero : a_nString.__Instance;
            __Internal.Insert(__Instance, __arg0, a_nPosition);
        }

        public global::NWN.LowLevel.CExoStringList Merge(global::NWN.LowLevel.CExoStringList a_nSecond, int a_nSorted, int a_nDuplicates)
        {
            var __arg0 = a_nSecond is null ? __IntPtr.Zero : a_nSecond.__Instance;
            var __ret = __Internal.Merge(__Instance, __arg0, a_nSorted, a_nDuplicates);
            var __result0 = global::NWN.LowLevel.CExoStringList.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void Remove(int a_nPosition)
        {
            __Internal.Remove(__Instance, a_nPosition);
        }

        public void AddSorted(global::NWN.LowLevel.CExoString a_nString)
        {
            var __arg0 = a_nString is null ? __IntPtr.Zero : a_nString.__Instance;
            __Internal.AddSorted(__Instance, __arg0);
        }

        public void Introduce(global::NWN.LowLevel.CExoString a_nString, int a_nPosition)
        {
            var __arg0 = a_nString is null ? __IntPtr.Zero : a_nString.__Instance;
            __Internal.Introduce(__Instance, __arg0, a_nPosition);
        }

        public global::NWN.LowLevel.CExoString this[int a_nPosition]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript(__Instance, a_nPosition);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                *(global::NWN.LowLevel.CExoString.__Internal*) global::NWN.LowLevel.CExoStringList.__Internal.OperatorSubscript(__Instance, a_nPosition) = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPStrings
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pStrings, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_pStrings = new __IntPtr(&__value);
            }
        }

        public int MNCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCount = value;
            }
        }

        public int MNDuplicates
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDuplicates;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDuplicates = value;
            }
        }

        public int MNSorted
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSorted;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSorted = value;
            }
        }

        public int MNSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSize = value;
            }
        }

        public int Count
        {
            get
            {
                var __ret = __Internal.GetCount(__Instance);
                return __ret;
            }
        }

        public int Duplicate
        {
            get
            {
                var __ret = __Internal.GetDuplicate(__Instance);
                return __ret;
            }
        }

        public int Size
        {
            get
            {
                var __ret = __Internal.GetSize(__Instance);
                return __ret;
            }
        }

        public int Sorted
        {
            get
            {
                var __ret = __Internal.GetSorted(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
