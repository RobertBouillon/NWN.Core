// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    namespace NWNXLib
    {
        namespace API
        {
            namespace Constants
            {
                namespace Ability
                {
                    public enum TYPE : uint
                    {
                        Strength = 0,
                        Dexterity = 1,
                        Constitution = 2,
                        Intelligence = 3,
                        Wisdom = 4,
                        Charisma = 5
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants7Ability8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 5;
                    }
                }

                namespace CreatureSize
                {
                    public enum TYPE : uint
                    {
                        Invalid = 0,
                        Tiny = 1,
                        Small = 2,
                        Medium = 3,
                        Large = 4,
                        Huge = 5
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants12CreatureSize8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 5;
                    }
                }

                namespace ACBonus
                {
                    public enum TYPE : uint
                    {
                        Dodge = 0,
                        Natural = 1,
                        Armor = 2,
                        Shield = 3,
                        Deflection = 4
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants7ACBonus8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 4;
                    }
                }

                namespace SavingThrow
                {
                    public enum TYPE : uint
                    {
                        All = 0,
                        Fortitude = 1,
                        Reflex = 2,
                        Will = 3
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants11SavingThrow8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 3;
                    }
                }

                namespace SavingThrowType
                {
                    public enum TYPE : uint
                    {
                        All = 0,
                        None = 0,
                        MindSpells = 1,
                        Poison = 2,
                        Disease = 3,
                        Fear = 4,
                        Sonic = 5,
                        Acid = 6,
                        Fire = 7,
                        Electricity = 8,
                        Positive = 9,
                        Negative = 10,
                        Death = 11,
                        Cold = 12,
                        Divine = 13,
                        Trap = 14,
                        Spell = 15,
                        Good = 16,
                        Evil = 17,
                        Law = 18,
                        Chaos = 19
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants15SavingThrowType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 19;
                    }
                }

                namespace DamageType
                {
                    public enum TYPE : uint
                    {
                        None = 0x0,
                        Bludgeoning = 0x1,
                        Piercing = 0x2,
                        Slashing = 0x4,
                        Magical = 0x8,
                        Acid = 0x10,
                        Cold = 0x20,
                        Divine = 0x40,
                        Electrical = 0x80,
                        Fire = 0x100,
                        Negative = 0x200,
                        Positive = 0x400,
                        Sonic = 0x800,
                        Physical = 7,
                        Elemental = 2480,
                        Exotic = 1608
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10DamageType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 4095;
                    }
                }

                namespace ImmunityType
                {
                    public enum TYPE : uint
                    {
                        None = 0,
                        MindSpells = 1,
                        Poison = 2,
                        Disease = 3,
                        Fear = 4,
                        Trap = 5,
                        Paralysis = 6,
                        Blindness = 7,
                        Deafness = 8,
                        Slow = 9,
                        Entangle = 10,
                        Silence = 11,
                        Stun = 12,
                        Sleep = 13,
                        Charm = 14,
                        Dominate = 15,
                        Confused = 16,
                        Cursed = 17,
                        Dazed = 18,
                        AbilityDecrease = 19,
                        AttackDecrease = 20,
                        DamageDecrease = 21,
                        DamageImmunityDecrease = 22,
                        AcDecrease = 23,
                        MovementSpeedDecrease = 24,
                        SavingThrowDecrease = 25,
                        SpellResistanceDecrease = 26,
                        SkillDecrease = 27,
                        Knockdown = 28,
                        NegativeLevel = 29,
                        SneakAttack = 30,
                        CriticalHit = 31,
                        Death = 32
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants12ImmunityType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 32;
                    }
                }

                namespace ToggleMode
                {
                    public enum TYPE : uint
                    {
                        Detect = 0,
                        Stealth = 1,
                        Parry = 2,
                        PowerAttack = 3,
                        ImprovedPowerAttack = 4,
                        CounterSpell = 5,
                        FlurryOfBlows = 6,
                        RapidShot = 7,
                        Expertise = 8,
                        ImprovedExpertise = 9,
                        DefensiveCast = 10,
                        DirtyFighting = 11,
                        DefensiveStance = 12
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10ToggleMode8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 12;
                    }
                }

                namespace CombatMode
                {
                    public enum TYPE : uint
                    {
                        None = 0,
                        Parry = 1,
                        PowerAttack = 2,
                        ImprovedPowerAttack = 3,
                        CounterSpell = 4,
                        FlurryOfBlows = 5,
                        RapidShot = 6,
                        Expertise = 7,
                        ImprovedExpertise = 8,
                        DefensiveCasting = 9,
                        DirtyFighting = 10,
                        DefensiveStance = 11
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10CombatMode8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 11;
                    }
                }

                namespace Alignment
                {
                    public enum TYPE : uint
                    {
                        All = 0,
                        Neutral = 1,
                        Lawful = 2,
                        Chaotic = 3,
                        Good = 4,
                        Evil = 5
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants9Alignment8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 5;
                    }
                }

                namespace MovementRate
                {
                    public enum TYPE : uint
                    {
                        PC = 0,
                        Immobile = 1,
                        VerySlow = 2,
                        Slow = 3,
                        Normal = 4,
                        Fast = 5,
                        VeryFast = 6,
                        Default = 7,
                        DMFast = 8
                    }

                    public unsafe partial class MiscRules
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants12MovementRate8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 8;
                    }
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
