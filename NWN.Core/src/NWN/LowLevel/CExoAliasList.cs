// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoAliasListInternal
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAliasListInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAliasListInternal>();

        protected bool __ownsNativeInstance;

        internal static CExoAliasListInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoAliasListInternal(native.ToPointer(), skipVTables);
        }

        internal static CExoAliasListInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoAliasListInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoAliasListInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoAliasListInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoAliasListInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoAliasListInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CExoAliasList : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pcExoAliasListInternal;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasListC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasListC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasListD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasList3AddE10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Add(__IntPtr __instance, __IntPtr alias, __IntPtr path);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasList5ClearEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Clear(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CExoAliasList6DeleteE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Delete(__IntPtr __instance, __IntPtr alias);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoAliasList12GetAliasPathERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAliasPath(__IntPtr __instance, __IntPtr alias, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK13CExoAliasList15ResolveFileNameERK10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveFileName(__IntPtr @return, __IntPtr __instance, __IntPtr sFileName, ushort nType);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAliasList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAliasList>();

        protected bool __ownsNativeInstance;

        internal static CExoAliasList __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoAliasList(native.ToPointer(), skipVTables);
        }

        internal static CExoAliasList __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoAliasList)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoAliasList __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoAliasList(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoAliasList(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoAliasList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoAliasList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoAliasList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoAliasList(global::NWN.LowLevel.CExoAliasList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoAliasList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CExoAliasList.__Internal*) __Instance) = *((global::NWN.LowLevel.CExoAliasList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoAliasList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Add(global::NWN.LowLevel.CExoString alias, global::NWN.LowLevel.CExoString path)
        {
            if (ReferenceEquals(alias, null))
                throw new global::System.ArgumentNullException("alias", "Cannot be null because it is passed by value.");
            var __arg0 = alias.__Instance;
            if (ReferenceEquals(path, null))
                throw new global::System.ArgumentNullException("path", "Cannot be null because it is passed by value.");
            var __arg1 = path.__Instance;
            __Internal.Add(__Instance, __arg0, __arg1);
        }

        public void Clear()
        {
            __Internal.Clear(__Instance);
        }

        public void Delete(global::NWN.LowLevel.CExoString alias)
        {
            if (ReferenceEquals(alias, null))
                throw new global::System.ArgumentNullException("alias", "Cannot be null because it is passed by value.");
            var __arg0 = alias.__Instance;
            __Internal.Delete(__Instance, __arg0);
        }

        public global::NWN.LowLevel.CExoString GetAliasPath(global::NWN.LowLevel.CExoString alias, int nSize)
        {
            if (ReferenceEquals(alias, null))
                throw new global::System.ArgumentNullException("alias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = alias.__Instance;
            var __ret = __Internal.GetAliasPath(__Instance, __arg0, nSize);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CExoString ResolveFileName(global::NWN.LowLevel.CExoString sFileName, ushort nType)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.ResolveFileName(new IntPtr(&__ret), __Instance, __arg0, nType);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoAliasListInternal MPcExoAliasListInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoAliasListInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcExoAliasListInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcExoAliasListInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
