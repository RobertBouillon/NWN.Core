// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSDialogEntry : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 168)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sSpeaker;

            [FieldOffset(16)]
            internal uint m_nAnimation;

            [FieldOffset(20)]
            internal byte m_bAnimationLoop;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sText;

            [FieldOffset(40)]
            internal __IntPtr m_pReplies;

            [FieldOffset(48)]
            internal uint m_nReplies;

            [FieldOffset(52)]
            internal global::NWN.LowLevel.CResRef.__Internal m_sScript;

            [FieldOffset(88)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lActionParams;

            [FieldOffset(104)]
            internal uint m_nDelay;

            [FieldOffset(108)]
            internal global::NWN.LowLevel.CResRef.__Internal m_sSound;

            [FieldOffset(144)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sQuestTag;

            [FieldOffset(160)]
            internal uint m_nQuestId;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSDialogEntryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSDialogEntryC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSDialogEntryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSDialogEntry> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSDialogEntry>();

        protected bool __ownsNativeInstance;

        internal static CNWSDialogEntry __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSDialogEntry(native.ToPointer(), skipVTables);
        }

        internal static CNWSDialogEntry __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSDialogEntry)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSDialogEntry __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSDialogEntry(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSDialogEntry.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSDialogEntry(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSDialogEntry(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSDialogEntry(global::NWN.LowLevel.CNWSDialogEntry _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSDialogEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public CNWSDialogEntry()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSDialogEntry.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSDialogEntry __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NWN.LowLevel.CExoString MSSpeaker
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSpeaker));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSpeaker = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNAnimation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimation = value;
            }
        }

        public byte MBAnimationLoop
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAnimationLoop;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAnimationLoop = value;
            }
        }

        public global::NWN.LowLevel.CExoLocString MSText
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sText));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sText = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSDialogLinkReply MPReplies
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSDialogLinkReply.__GetOrCreateInstance(((__Internal*)__Instance)->m_pReplies, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pReplies = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNReplies
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReplies;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReplies = value;
            }
        }

        public global::NWN.LowLevel.CResRef MSScript
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sScript));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sScript = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam> MLActionParams
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.ScriptParam>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lActionParams));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lActionParams = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public uint MNDelay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDelay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDelay = value;
            }
        }

        public global::NWN.LowLevel.CResRef MSSound
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSound));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSound = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSQuestTag
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sQuestTag));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sQuestTag = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNQuestId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nQuestId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nQuestId = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
