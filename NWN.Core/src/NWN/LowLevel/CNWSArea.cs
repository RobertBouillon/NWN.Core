// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSArea : global::NWN.LowLevel.CNWArea, global::NWN.LowLevel.ICGameObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 920)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWArea;

            [FieldOffset(8)]
            internal uint m_nFlags;

            [FieldOffset(12)]
            internal int m_nWidth;

            [FieldOffset(16)]
            internal int m_nHeight;

            [FieldOffset(20)]
            internal int m_nStaticObjects;

            [FieldOffset(24)]
            internal int m_nStaticObjectsFilled;

            [FieldOffset(32)]
            internal __IntPtr m_poidStaticObjectsObjectIds;

            [FieldOffset(40)]
            internal __IntPtr m_pnStaticObjectsTriangleStart;

            [FieldOffset(48)]
            internal __IntPtr m_pnStaticObjectsTriangleCount;

            [FieldOffset(56)]
            internal __IntPtr m_pnStaticObjectsVertexStart;

            [FieldOffset(64)]
            internal __IntPtr m_pnStaticObjectsVertexCount;

            [FieldOffset(72)]
            internal int m_nStaticObjectTriangleArraySize;

            [FieldOffset(76)]
            internal int m_nStaticObjectTriangles;

            [FieldOffset(80)]
            internal __IntPtr m_pnStaticObjectTriangles;

            [FieldOffset(88)]
            internal int m_nStaticObjectVertexArraySize;

            [FieldOffset(92)]
            internal int m_nStaticObjectVertices;

            [FieldOffset(96)]
            internal __IntPtr m_pvStaticObjectVertices;

            [FieldOffset(104)]
            internal __IntPtr m_pvStaticObjectBoundingBoxes;

            [FieldOffset(112)]
            internal int m_nStaticBoundingBoxes;

            [FieldOffset(116)]
            internal int m_nStaticBoundingBoxesFilled;

            [FieldOffset(120)]
            internal __IntPtr m_pvStaticBoundingBoxes;

            [FieldOffset(128)]
            internal __IntPtr m_poidStaticBBObjectIds;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.Vector.__Internal m_vFogColor;

            [FieldOffset(148)]
            internal byte m_nFogValue;

            [FieldOffset(152)]
            internal uint m_nMoonAmbientColor;

            [FieldOffset(156)]
            internal uint m_nMoonDiffuseColor;

            [FieldOffset(160)]
            internal uint m_nMoonFogColor;

            [FieldOffset(164)]
            internal byte m_nMoonFogAmount;

            [FieldOffset(168)]
            internal int m_bMoonShadows;

            [FieldOffset(172)]
            internal uint m_nSunAmbientColor;

            [FieldOffset(176)]
            internal uint m_nSunDiffuseColor;

            [FieldOffset(180)]
            internal uint m_nSunFogColor;

            [FieldOffset(184)]
            internal byte m_nSunFogAmount;

            [FieldOffset(188)]
            internal int m_bSunShadows;

            [FieldOffset(192)]
            internal int m_bUseDayNightCycle;

            [FieldOffset(196)]
            internal int m_bIsNight;

            [FieldOffset(200)]
            internal byte m_nSkyBox;

            [FieldOffset(201)]
            internal byte m_nChanceOfRain;

            [FieldOffset(202)]
            internal byte m_nChanceOfSnow;

            [FieldOffset(203)]
            internal byte m_nChanceOfLightning;

            [FieldOffset(204)]
            internal byte m_nWindAmount;

            [FieldOffset(208)]
            internal global::NWN.LowLevel.Vector.__Internal m_vWindDirection;

            [FieldOffset(220)]
            internal float m_fWindMagnitude;

            [FieldOffset(224)]
            internal float m_fWindYaw;

            [FieldOffset(228)]
            internal float m_fWindPitch;

            [FieldOffset(232)]
            internal int m_bNoRestingAllowed;

            [FieldOffset(236)]
            internal byte m_nShadowOpacity;

            [FieldOffset(240)]
            internal float m_fFogClipDistance;

            [FieldOffset(248)]
            internal __IntPtr vptr_CResHelper;

            [FieldOffset(256)]
            internal int m_bAutoRequest;

            [FieldOffset(264)]
            internal __IntPtr m_pRes;

            [FieldOffset(272)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cResRef;

            [FieldOffset(304)]
            internal __IntPtr vptr_CGameObject;

            [FieldOffset(312)]
            internal uint m_idSelf;

            [FieldOffset(316)]
            internal byte m_nObjectType;

            [FieldOffset(320)]
            internal __IntPtr m_pNwnxData;

            [FieldOffset(328)]
            internal int m_nPlayersInArea;

            [FieldOffset(336)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pTrapList;

            [FieldOffset(352)]
            internal int m_nObjectByNameIndex;

            [FieldOffset(356)]
            internal uint m_nLastHeartbeatScriptCalendarDay;

            [FieldOffset(360)]
            internal uint m_nLastHeartbeatScriptTimeOfDay;

            [FieldOffset(368)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstExpansions;

            [FieldOffset(376)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sComments;

            [FieldOffset(392)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_lsName;

            [FieldOffset(408)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTag;

            [FieldOffset(424)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refTileSet;

            [FieldOffset(456)]
            internal __IntPtr m_pTileSet;

            [FieldOffset(464)]
            internal __IntPtr m_pTile;

            [FieldOffset(472)]
            internal __IntPtr m_pHeader;

            [FieldOffset(480)]
            internal fixed byte m_sScripts[64];

            [FieldOffset(544)]
            internal int m_nChanceOfFog;

            [FieldOffset(548)]
            internal int m_nAreaSpotModifier;

            [FieldOffset(552)]
            internal int m_nAreaListenModifier;

            [FieldOffset(560)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aGameObjects;

            [FieldOffset(576)]
            internal int m_nPosGameObjects;

            [FieldOffset(584)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aSubAreas;

            [FieldOffset(600)]
            internal __IntPtr m_pnInterTileTravel;

            [FieldOffset(608)]
            internal __IntPtr m_pfInterTileExit;

            [FieldOffset(616)]
            internal __IntPtr m_pnInterTileRegionVisited;

            [FieldOffset(624)]
            internal __IntPtr m_pnInterTileRegionDepths;

            [FieldOffset(632)]
            internal int m_nInterTileTravelLength;

            [FieldOffset(636)]
            internal int m_nInterTileGoalX;

            [FieldOffset(640)]
            internal int m_nInterTileGoalY;

            [FieldOffset(644)]
            internal int m_nInterTileGoalRegion;

            [FieldOffset(648)]
            internal float m_fGoalTargetX;

            [FieldOffset(652)]
            internal float m_fGoalTargetY;

            [FieldOffset(656)]
            internal __IntPtr m_pSearchInfo;

            [FieldOffset(664)]
            internal __IntPtr m_pSoundPathInfo;

            [FieldOffset(672)]
            internal __IntPtr m_pcGridTransTableEntry;

            [FieldOffset(680)]
            internal int g_nUnsmoothedWPList;

            [FieldOffset(688)]
            internal __IntPtr g_pfUnsmoothedWPList;

            [FieldOffset(696)]
            internal int g_nSmoothedWPList;

            [FieldOffset(704)]
            internal __IntPtr g_pfSmoothedWPList;

            [FieldOffset(712)]
            internal float g_fPersonalSpace;

            [FieldOffset(716)]
            internal int m_bGridPathfindingTerminated;

            [FieldOffset(720)]
            internal int m_nGridNodesSearched;

            [FieldOffset(724)]
            internal uint m_oidLastEntered;

            [FieldOffset(728)]
            internal uint m_oidLastLeft;

            [FieldOffset(732)]
            internal int m_nCustomScriptEventId;

            [FieldOffset(736)]
            internal __IntPtr m_pcInterTileSuccessors;

            [FieldOffset(744)]
            internal __IntPtr m_pbInterTileDeniedExitCheck;

            [FieldOffset(752)]
            internal int m_bInterAreaDFSVisited;

            [FieldOffset(760)]
            internal global::NWN.LowLevel.CNWSScriptVarTable.__Internal m_ScriptVars;

            [FieldOffset(824)]
            internal __IntPtr m_pAmbientSound;

            [FieldOffset(832)]
            internal byte m_nWeatherType;

            [FieldOffset(836)]
            internal int m_bWeatherStarted;

            [FieldOffset(840)]
            internal uint m_nWeatherMinDurationTimer;

            [FieldOffset(844)]
            internal uint m_nLastUpdateCalendarDay;

            [FieldOffset(848)]
            internal uint m_nLastUpdateTimeOfDay;

            [FieldOffset(852)]
            internal byte m_nOverrideWeatherType;

            [FieldOffset(853)]
            internal byte m_nCurrentWeatherType;

            [FieldOffset(854)]
            internal byte m_nLightingScheme;

            [FieldOffset(855)]
            internal byte m_nPVPSetting;

            [FieldOffset(856)]
            internal byte m_nMapSize;

            [FieldOffset(860)]
            internal int m_nEnvironmentalAudio;

            [FieldOffset(864)]
            internal ushort m_nLoadScreenID;

            [FieldOffset(872)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDisplayName;

            [FieldOffset(888)]
            internal global::NWN.LowLevel.CNWSUUID.__Internal m_pUUID;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSAreaC2E7CResRefij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, int bSetAutoRequest, uint oidId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSAreaC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea15AddObjectToAreaEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddObjectToArea(__IntPtr __instance, uint id, int bRunScripts);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea17ComputeAwayVectorE6VectorS0_fP20CPathfindInformation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal ComputeAwayVector(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vCurrentPosition, global::NWN.LowLevel.Vector.__Internal vPositionToMoveAwayFrom, float fMoveAwayRange, __IntPtr pPathInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea17ComputeBestCornerEffffffffPfS0_S0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeBestCorner(__IntPtr __instance, float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fPersonalSpace, float fCreatureHeight, float* fNewX1, float* fNewY1, float* fNewX2, float* fNewY2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea21TestSafeLocationPointE6VectorP20CPathfindInformation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestSafeLocationPoint(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vTestPosition, __IntPtr pPathfindInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea19ComputeSafeLocationE6VectorfP20CPathfindInformationiPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeSafeLocation(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, float fSearchRadius, __IntPtr pPathfindInfo, int bWalkStraightLineRequired, __IntPtr vNewvector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea30ComputeSafeLocationInDirectionE6VectorS0_fP20CPathfindInformationiPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeSafeLocationInDirection(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, global::NWN.LowLevel.Vector.__Internal vDirection, float fSearchRadius, __IntPtr pPathfindInfo, int bWalkStraightLineRequired, __IntPtr vNewVector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea25ComputeNonVisibleLocationE6VectorP20CPathfindInformationiPS0_f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeNonVisibleLocation(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vTargetPosition, __IntPtr pPathfindInfo, int bWalkStraightLineRequired, __IntPtr vNewPosition, float fTargetRadius);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea21CountVisibleToPlayersE6Vectori", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CountVisibleToPlayers(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, int nMaxPlayers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13ComputeHeightE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ComputeHeight(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea19ComputePathDistanceEiPf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ComputePathDistance(__IntPtr __instance, int nPoints, float* pfPoints);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14BudgeCreaturesERK6VectorS2_S2_ji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void BudgeCreatures(__IntPtr __instance, __IntPtr vPosition, __IntPtr vBBMin, __IntPtr vBBMax, uint oidNewObject, int bBumpToActionPoint);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea27CountAreaTransitionTriggersEPjiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CountAreaTransitionTriggers(__IntPtr __instance, uint* pTriggers, int nDeniedTriggers, uint* oidDeniedTriggers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12EventHandlerEjjPvjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EventHandler(__IntPtr __instance, uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea21GenerateInterTilePathEPiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateInterTilePath(__IntPtr __instance, int* nInterTileStartDepth, int nInterTileStartTileX, int nInterTileStartTileY, int nInterTileStartRegion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20GetFirstObjectInAreaERj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFirstObjectInArea(__IntPtr __instance, uint* id);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea19GetNextObjectInAreaERj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNextObjectInArea(__IntPtr __instance, uint* id);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea7GetTileE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTile(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14GoalMoveDeniedEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GoalMoveDenied(__IntPtr __instance, int level, int x, int y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20UpdatePlayerAutomapsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdatePlayerAutomaps(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea11ExploreAreaEP12CNWSCreatureiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExploreArea(__IntPtr __instance, __IntPtr pCreature, int x, int y, int nDepth);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea23InterTileDFSExploreAreaEPhiiiff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InterTileDFSExploreArea(__IntPtr __instance, byte* pTransTable, int nDepth, int x, int y, float fEntranceX, float fEntranceY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12InterTileDFSEiiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InterTileDFS(__IntPtr __instance, int level, int depth, int x, int y, int region);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea30InterTileDFSGenerateSuccessorsEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InterTileDFSGenerateSuccessors(__IntPtr __instance, int level, int x, int y, int region);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea21InterTileDFSSoundPathEPhiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InterTileDFSSoundPath(__IntPtr __instance, byte* pTransTable, int nDepth, int x, int y, int nRegion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea8LoadAreaEiP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadArea(__IntPtr __instance, int bLoadStateInfo, __IntPtr cOverrideGitGFF, __IntPtr cOverrideGitTopLevelStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea26EvaluateOverlappingTargetsEP20CPathfindInformation6Vectorjfffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EvaluateOverlappingTargets(__IntPtr __instance, __IntPtr pPathfindInfo, global::NWN.LowLevel.Vector.__Internal vPosition, uint oidAreaCreature, float fSourceX, float fSourceY, float fBothCreaturesPersonalSpace, int bEvaluateOverlappingTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea19PackAreaIntoMessageEiiiP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PackAreaIntoMessage(__IntPtr __instance, int nX, int nY, int nZ, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20PlotGridPathEnhancedEP20CPathfindInformationmb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint PlotGridPathEnhanced(__IntPtr __instance, __IntPtr pcPathfindInformation, ulong nTimeSlice, bool bMoveToNearest);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14GridSearchPathEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GridSearchPath(__IntPtr __instance, int nPathID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea25GridSearchPathInDirectionEiiiiibP17CNWSAreaGridPoint", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GridSearchPathInDirection(__IntPtr __instance, int nStepNumber, int nX, int nY, int nDirectionX, int nDirectionY, bool bTestDirectLine, __IntPtr pcSearch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12PlotGridPathEP20CPathfindInformationm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint PlotGridPath(__IntPtr __instance, __IntPtr pcPathfindInformation, ulong nTimeSlice);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12GridDFSearchEiiiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GridDFSearch(__IntPtr __instance, int nStepNumber, int nPathLength, int nStepsToExplore, int nX, int nY, int nZ);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea25GridDFSGenerateSuccessorsEiiiiiPP22CNWSAreaGridSuccessors", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GridDFSGenerateSuccessors(__IntPtr __instance, int nPathLength, int nStepsToExplore, int nX, int nY, int nZ, __IntPtr pcSuccessors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea27GridDFSTransTableInitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GridDFSTransTableInitialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea21GridDFSTransTableHashEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GridDFSTransTableHash(__IntPtr __instance, int nX, int nY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20GridDFSTransTableGetEiiPiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GridDFSTransTableGet(__IntPtr __instance, int nX, int nY, int* nShortestPath, int* nStepsExplored);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20GridDFSTransTablePutEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GridDFSTransTablePut(__IntPtr __instance, int nX, int nY, int nPathLength, int nStepsExplored);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea8PlotPathEP20CPathfindInformationm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint PlotPath(__IntPtr __instance, __IntPtr pcPathfindInformation, ulong nTimeSlice);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea19RemoveInterTileExitEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveInterTileExit(__IntPtr __instance, int nTileX, int nTileY, int nEntrance, int nExit);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20RemoveObjectFromAreaEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveObjectFromArea(__IntPtr __instance, uint id);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea8SaveAreaEP8CERFFileR10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveArea(__IntPtr __instance, __IntPtr cSaveFile, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea7SaveGITEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveGIT(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, __IntPtr aPlayers, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea7SaveGITEP8CERFFileR10CExoStringR13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveGIT(__IntPtr __instance, __IntPtr cSaveFile, __IntPtr sName, __IntPtr aPlayers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea7LoadGITEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadGIT(__IntPtr __instance, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea7LoadGITEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadGIT(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea20SmoothCornerOptimizeEiPfPiPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SmoothCornerOptimize(__IntPtr __instance, int nOldWayPoints, float* pfOldWayPoints, int* nNewWayPoints, float** pfNewWayPoints);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea15SmoothSelectionEiPfPiPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SmoothSelection(__IntPtr __instance, int nOldWayPoints, float* pfOldWayPoitns, int* nNewWayPoints, float** pfNewWayPoints);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea17SmoothSelectNodesEiPfPiPS0_ii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SmoothSelectNodes(__IntPtr __instance, int nOldWayPoints, float* pfOldWayPoints, int* nNewWayPoints, float** pfNewWayPoints, int bChopIntoMeterSegments, int bSelectBestLines);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14TestDirectLineEffffffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestDirectLine(__IntPtr __instance, float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace, float fCreatureHeight, int bIgnoreClosedDoors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea16TestLineWalkableEfffff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestLineWalkable(__IntPtr __instance, float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10UnloadAreaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnloadArea(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea16PlayVisualEffectEP11CGameEffect6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PlayVisualEffect(__IntPtr __instance, __IntPtr pEffect, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13PlotSoundPathEP20CPathfindInformation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PlotSoundPath(__IntPtr __instance, __IntPtr pcPathfindInformation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea23GetFirstObjectIndiceByXEPif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFirstObjectIndiceByX(__IntPtr __instance, int* nIndice, float fMinX);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea28UpdatePositionInObjectsArrayEP11CGameObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdatePositionInObjectsArray(__IntPtr __instance, __IntPtr pUpdateObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10InSubAreasE6VectorP13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InSubAreas(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, __IntPtr aSubAreasWithin);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea23IntersectingLineSegmentE6VectorS0_P13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntersectingLineSegment(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vStart, global::NWN.LowLevel.Vector.__Internal vEnd, __IntPtr aIntersectingSubAreas);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14GetDoorCrossedE6VectorS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetDoorCrossed(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vStart, global::NWN.LowLevel.Vector.__Internal vEnd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea11ApplyEffectEP11CGameEffect6VectorS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ApplyEffect(__IntPtr __instance, __IntPtr pEffect, global::NWN.LowLevel.Vector.__Internal vPosition, global::NWN.LowLevel.Vector.__Internal vOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea16ClearLineOfSightE6VectorS0_PS0_Pjjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClearLineOfSight(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vSource, global::NWN.LowLevel.Vector.__Internal vTarget, __IntPtr vImpact, uint* oidImpact, uint oidStart, uint oidTarget, int bIgnoreTransDoors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea22IncrementPlayersInAreaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IncrementPlayersInArea(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea22DecrementPlayersInAreaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DecrementPlayersInArea(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea18GetSurfaceMaterialE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSurfaceMaterial(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea16PositionWalkableE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PositionWalkable(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea17SetCurrentWeatherEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCurrentWeather(__IntPtr __instance, byte nWeatherType, int bWeatherStarted);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14LoadAreaHeaderEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadAreaHeader(__IntPtr __instance, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea15LoadTileSetInfoEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadTileSetInfo(__IntPtr __instance, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13LoadCreaturesEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCreatures(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea11LoadPlayersEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPlayers(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea9LoadItemsEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadItems(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea9LoadDoorsEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadDoors(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12LoadTriggersEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadTriggers(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14LoadEncountersEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadEncounters(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13LoadWaypointsEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadWaypoints(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10LoadSoundsEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadSounds(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14LoadPlaceablesEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPlaceables(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10LoadStoresEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadStores(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea15LoadAreaEffectsEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadAreaEffects(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bLoadStateInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14LoadPropertiesEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadProperties(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea23IncreaseAILevelPriorityEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IncreaseAILevelPriority(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea23DecreaseAILevelPriorityEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DecreaseAILevelPriority(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13SaveCreaturesEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveCreatures(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aCreatures, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea9SaveItemsEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveItems(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aItems, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea9SaveDoorsEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveDoors(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aDoors, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea12SaveTriggersEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveTriggers(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aTriggers, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14SaveEncountersEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveEncounters(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aEncounters, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13SaveWaypointsEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveWaypoints(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aWaypoints, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10SaveSoundsEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveSounds(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aSounds, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14SavePlaceablesEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SavePlaceables(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aPlaceables, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea10SaveStoresEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveStores(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aStores, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea15SaveAreaEffectsEP7CResGFFP10CResStructR13CExoArrayListIjEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveAreaEffects(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct, __IntPtr aStores, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea14SavePropertiesEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveProperties(__IntPtr __instance, __IntPtr pRes, __IntPtr pTopLevelStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea8AIUpdateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AIUpdate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea18SmoothPointsOnPathEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SmoothPointsOnPath(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSArea13GetPVPSettingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetPVPSetting(__IntPtr __instance);
        }

        internal static new CNWSArea __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSArea(native.ToPointer(), skipVTables);
        }

        internal static new CNWSArea __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSArea)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CNWSArea __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWSArea)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWSArea __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSArea(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSArea.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSArea(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSArea(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWSArea(global::NWN.LowLevel.CResRef cResRef, int bSetAutoRequest, uint oidId)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            __Internal.ctor(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, bSetAutoRequest, oidId);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSArea");
        }

        public CNWSArea(global::NWN.LowLevel.CNWSArea _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSArea");
        }

        public int AddObjectToArea(uint id, int bRunScripts)
        {
            var __ret = __Internal.AddObjectToArea(__Instance, id, bRunScripts);
            return __ret;
        }

        public global::NWN.LowLevel.Vector ComputeAwayVector(global::NWN.LowLevel.Vector vCurrentPosition, global::NWN.LowLevel.Vector vPositionToMoveAwayFrom, float fMoveAwayRange, global::NWN.LowLevel.CPathfindInformation pPathInfo)
        {
            if (ReferenceEquals(vCurrentPosition, null))
                throw new global::System.ArgumentNullException("vCurrentPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vCurrentPosition.__Instance;
            if (ReferenceEquals(vPositionToMoveAwayFrom, null))
                throw new global::System.ArgumentNullException("vPositionToMoveAwayFrom", "Cannot be null because it is passed by value.");
            var __arg1 = vPositionToMoveAwayFrom.__Instance;
            var __arg3 = pPathInfo is null ? __IntPtr.Zero : pPathInfo.__Instance;
            var __ret = __Internal.ComputeAwayVector(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, fMoveAwayRange, __arg3);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public int ComputeBestCorner(float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fPersonalSpace, float fCreatureHeight, ref float fNewX1, ref float fNewY1, ref float fNewX2, ref float fNewY2)
        {
            fixed (float* __fNewX18 = &fNewX1)
            {
                var __arg8 = __fNewX18;
                fixed (float* __fNewY19 = &fNewY1)
                {
                    var __arg9 = __fNewY19;
                    fixed (float* __fNewX210 = &fNewX2)
                    {
                        var __arg10 = __fNewX210;
                        fixed (float* __fNewY211 = &fNewY2)
                        {
                            var __arg11 = __fNewY211;
                            var __ret = __Internal.ComputeBestCorner(__Instance, fX1, fY1, fX2, fY2, fX3, fY3, fPersonalSpace, fCreatureHeight, __arg8, __arg9, __arg10, __arg11);
                            return __ret;
                        }
                    }
                }
            }
        }

        public int TestSafeLocationPoint(global::NWN.LowLevel.Vector vTestPosition, global::NWN.LowLevel.CPathfindInformation pPathfindInfo)
        {
            if (ReferenceEquals(vTestPosition, null))
                throw new global::System.ArgumentNullException("vTestPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vTestPosition.__Instance;
            var __arg1 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var __ret = __Internal.TestSafeLocationPoint(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, __arg1);
            return __ret;
        }

        public int ComputeSafeLocation(global::NWN.LowLevel.Vector vPosition, float fSearchRadius, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, global::NWN.LowLevel.Vector vNewvector)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __arg2 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var __arg4 = vNewvector is null ? __IntPtr.Zero : vNewvector.__Instance;
            var __ret = __Internal.ComputeSafeLocation(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, fSearchRadius, __arg2, bWalkStraightLineRequired, __arg4);
            return __ret;
        }

        public int ComputeSafeLocationInDirection(global::NWN.LowLevel.Vector vPosition, global::NWN.LowLevel.Vector vDirection, float fSearchRadius, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, global::NWN.LowLevel.Vector vNewVector)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            if (ReferenceEquals(vDirection, null))
                throw new global::System.ArgumentNullException("vDirection", "Cannot be null because it is passed by value.");
            var __arg1 = vDirection.__Instance;
            var __arg3 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var __arg5 = vNewVector is null ? __IntPtr.Zero : vNewVector.__Instance;
            var __ret = __Internal.ComputeSafeLocationInDirection(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, fSearchRadius, __arg3, bWalkStraightLineRequired, __arg5);
            return __ret;
        }

        public int ComputeNonVisibleLocation(global::NWN.LowLevel.Vector vTargetPosition, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, int bWalkStraightLineRequired, global::NWN.LowLevel.Vector vNewPosition, float fTargetRadius)
        {
            if (ReferenceEquals(vTargetPosition, null))
                throw new global::System.ArgumentNullException("vTargetPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vTargetPosition.__Instance;
            var __arg1 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var __arg3 = vNewPosition is null ? __IntPtr.Zero : vNewPosition.__Instance;
            var __ret = __Internal.ComputeNonVisibleLocation(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, __arg1, bWalkStraightLineRequired, __arg3, fTargetRadius);
            return __ret;
        }

        public int CountVisibleToPlayers(global::NWN.LowLevel.Vector vPosition, int nMaxPlayers)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.CountVisibleToPlayers(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, nMaxPlayers);
            return __ret;
        }

        public float ComputeHeight(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.ComputeHeight(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public float ComputePathDistance(int nPoints, ref float pfPoints)
        {
            fixed (float* __pfPoints1 = &pfPoints)
            {
                var __arg1 = __pfPoints1;
                var __ret = __Internal.ComputePathDistance(__Instance, nPoints, __arg1);
                return __ret;
            }
        }

        public void BudgeCreatures(global::NWN.LowLevel.Vector vPosition, global::NWN.LowLevel.Vector vBBMin, global::NWN.LowLevel.Vector vBBMax, uint oidNewObject, int bBumpToActionPoint)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = vPosition.__Instance;
            if (ReferenceEquals(vBBMin, null))
                throw new global::System.ArgumentNullException("vBBMin", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vBBMin.__Instance;
            if (ReferenceEquals(vBBMax, null))
                throw new global::System.ArgumentNullException("vBBMax", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vBBMax.__Instance;
            __Internal.BudgeCreatures(__Instance, __arg0, __arg1, __arg2, oidNewObject, bBumpToActionPoint);
        }

        public int CountAreaTransitionTriggers(ref uint pTriggers, int nDeniedTriggers, ref uint oidDeniedTriggers)
        {
            fixed (uint* __pTriggers0 = &pTriggers)
            {
                var __arg0 = __pTriggers0;
                fixed (uint* __oidDeniedTriggers2 = &oidDeniedTriggers)
                {
                    var __arg2 = __oidDeniedTriggers2;
                    var __ret = __Internal.CountAreaTransitionTriggers(__Instance, __arg0, nDeniedTriggers, __arg2);
                    return __ret;
                }
            }
        }

        public void EventHandler(uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay)
        {
            __Internal.EventHandler(__Instance, nEventId, nCallerObjectId, pScript, nCalendarDay, nTimeOfDay);
        }

        public int GenerateInterTilePath(ref int nInterTileStartDepth, int nInterTileStartTileX, int nInterTileStartTileY, int nInterTileStartRegion)
        {
            fixed (int* __nInterTileStartDepth0 = &nInterTileStartDepth)
            {
                var __arg0 = __nInterTileStartDepth0;
                var __ret = __Internal.GenerateInterTilePath(__Instance, __arg0, nInterTileStartTileX, nInterTileStartTileY, nInterTileStartRegion);
                return __ret;
            }
        }

        public int GetFirstObjectInArea(ref uint id)
        {
            fixed (uint* __id0 = &id)
            {
                var __arg0 = __id0;
                var __ret = __Internal.GetFirstObjectInArea(__Instance, __arg0);
                return __ret;
            }
        }

        public int GetNextObjectInArea(ref uint id)
        {
            fixed (uint* __id0 = &id)
            {
                var __arg0 = __id0;
                var __ret = __Internal.GetNextObjectInArea(__Instance, __arg0);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSTile GetTile(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.GetTile(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            var __result0 = global::NWN.LowLevel.CNWSTile.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int GoalMoveDenied(int level, int x, int y)
        {
            var __ret = __Internal.GoalMoveDenied(__Instance, level, x, y);
            return __ret;
        }

        public void UpdatePlayerAutomaps()
        {
            __Internal.UpdatePlayerAutomaps(__Instance);
        }

        public int ExploreArea(global::NWN.LowLevel.CNWSCreature pCreature, int x, int y, int nDepth)
        {
            var __arg0 = pCreature is null ? __IntPtr.Zero : pCreature.__Instance;
            var __ret = __Internal.ExploreArea(__Instance, __arg0, x, y, nDepth);
            return __ret;
        }

        public void InterTileDFSExploreArea(byte* pTransTable, int nDepth, int x, int y, float fEntranceX, float fEntranceY)
        {
            __Internal.InterTileDFSExploreArea(__Instance, pTransTable, nDepth, x, y, fEntranceX, fEntranceY);
        }

        public int InterTileDFS(int level, int depth, int x, int y, int region)
        {
            var __ret = __Internal.InterTileDFS(__Instance, level, depth, x, y, region);
            return __ret;
        }

        public int InterTileDFSGenerateSuccessors(int level, int x, int y, int region)
        {
            var __ret = __Internal.InterTileDFSGenerateSuccessors(__Instance, level, x, y, region);
            return __ret;
        }

        public int InterTileDFSSoundPath(byte* pTransTable, int nDepth, int x, int y, int nRegion)
        {
            var __ret = __Internal.InterTileDFSSoundPath(__Instance, pTransTable, nDepth, x, y, nRegion);
            return __ret;
        }

        public int LoadArea(int bLoadStateInfo, global::NWN.LowLevel.CResGFF cOverrideGitGFF, global::NWN.LowLevel.CResStruct cOverrideGitTopLevelStruct)
        {
            var __arg1 = cOverrideGitGFF is null ? __IntPtr.Zero : cOverrideGitGFF.__Instance;
            var __arg2 = cOverrideGitTopLevelStruct is null ? __IntPtr.Zero : cOverrideGitTopLevelStruct.__Instance;
            var __ret = __Internal.LoadArea(__Instance, bLoadStateInfo, __arg1, __arg2);
            return __ret;
        }

        public override int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, ref uint poidBlockingCreature, int bEvaluateOverlappingTarget)
        {
            return base.NoCreaturesOnLine(fSourceX, fSourceY, fTargetX, fTargetY, pPathfindInfo, bCheckSourceOccluded, bIgnoreAssociates, ref poidBlockingCreature, bEvaluateOverlappingTarget);
        }

        public int EvaluateOverlappingTargets(global::NWN.LowLevel.CPathfindInformation pPathfindInfo, global::NWN.LowLevel.Vector vPosition, uint oidAreaCreature, float fSourceX, float fSourceY, float fBothCreaturesPersonalSpace, int bEvaluateOverlappingTarget)
        {
            var __arg0 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vPosition.__Instance;
            var __ret = __Internal.EvaluateOverlappingTargets(__Instance, __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, oidAreaCreature, fSourceX, fSourceY, fBothCreaturesPersonalSpace, bEvaluateOverlappingTarget);
            return __ret;
        }

        public int PackAreaIntoMessage(int nX, int nY, int nZ, global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg3 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.PackAreaIntoMessage(__Instance, nX, nY, nZ, __arg3);
            return __ret;
        }

        public uint PlotGridPathEnhanced(global::NWN.LowLevel.CPathfindInformation pcPathfindInformation, ulong nTimeSlice, bool bMoveToNearest)
        {
            var __arg0 = pcPathfindInformation is null ? __IntPtr.Zero : pcPathfindInformation.__Instance;
            var __ret = __Internal.PlotGridPathEnhanced(__Instance, __arg0, nTimeSlice, bMoveToNearest);
            return __ret;
        }

        public void GridSearchPath(int nPathID)
        {
            __Internal.GridSearchPath(__Instance, nPathID);
        }

        public bool GridSearchPathInDirection(int nStepNumber, int nX, int nY, int nDirectionX, int nDirectionY, bool bTestDirectLine, global::NWN.LowLevel.CNWSAreaGridPoint pcSearch)
        {
            var __arg6 = pcSearch is null ? __IntPtr.Zero : pcSearch.__Instance;
            var __ret = __Internal.GridSearchPathInDirection(__Instance, nStepNumber, nX, nY, nDirectionX, nDirectionY, bTestDirectLine, __arg6);
            return __ret;
        }

        public uint PlotGridPath(global::NWN.LowLevel.CPathfindInformation pcPathfindInformation, ulong nTimeSlice)
        {
            var __arg0 = pcPathfindInformation is null ? __IntPtr.Zero : pcPathfindInformation.__Instance;
            var __ret = __Internal.PlotGridPath(__Instance, __arg0, nTimeSlice);
            return __ret;
        }

        public int GridDFSearch(int nStepNumber, int nPathLength, int nStepsToExplore, int nX, int nY, int nZ)
        {
            var __ret = __Internal.GridDFSearch(__Instance, nStepNumber, nPathLength, nStepsToExplore, nX, nY, nZ);
            return __ret;
        }

        public int GridDFSGenerateSuccessors(int nPathLength, int nStepsToExplore, int nX, int nY, int nZ, global::NWN.LowLevel.CNWSAreaGridSuccessors pcSuccessors)
        {
            var ____arg5 = pcSuccessors is null ? __IntPtr.Zero : pcSuccessors.__Instance;
            var __arg5 = new __IntPtr(&____arg5);
            var __ret = __Internal.GridDFSGenerateSuccessors(__Instance, nPathLength, nStepsToExplore, nX, nY, nZ, __arg5);
            return __ret;
        }

        public void GridDFSTransTableInitialize()
        {
            __Internal.GridDFSTransTableInitialize(__Instance);
        }

        public int GridDFSTransTableHash(int nX, int nY)
        {
            var __ret = __Internal.GridDFSTransTableHash(__Instance, nX, nY);
            return __ret;
        }

        public int GridDFSTransTableGet(int nX, int nY, ref int nShortestPath, ref int nStepsExplored)
        {
            fixed (int* __nShortestPath2 = &nShortestPath)
            {
                var __arg2 = __nShortestPath2;
                fixed (int* __nStepsExplored3 = &nStepsExplored)
                {
                    var __arg3 = __nStepsExplored3;
                    var __ret = __Internal.GridDFSTransTableGet(__Instance, nX, nY, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public void GridDFSTransTablePut(int nX, int nY, int nPathLength, int nStepsExplored)
        {
            __Internal.GridDFSTransTablePut(__Instance, nX, nY, nPathLength, nStepsExplored);
        }

        public uint PlotPath(global::NWN.LowLevel.CPathfindInformation pcPathfindInformation, ulong nTimeSlice)
        {
            var __arg0 = pcPathfindInformation is null ? __IntPtr.Zero : pcPathfindInformation.__Instance;
            var __ret = __Internal.PlotPath(__Instance, __arg0, nTimeSlice);
            return __ret;
        }

        public int RemoveInterTileExit(int nTileX, int nTileY, int nEntrance, int nExit)
        {
            var __ret = __Internal.RemoveInterTileExit(__Instance, nTileX, nTileY, nEntrance, nExit);
            return __ret;
        }

        public int RemoveObjectFromArea(uint id)
        {
            var __ret = __Internal.RemoveObjectFromArea(__Instance, id);
            return __ret;
        }

        public void SaveArea(global::NWN.LowLevel.CERFFile cSaveFile, global::NWN.LowLevel.CExoString sName)
        {
            var __arg0 = cSaveFile is null ? __IntPtr.Zero : cSaveFile.__Instance;
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            __Internal.SaveArea(__Instance, __arg0, __arg1);
        }

        public void SaveGIT(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, global::NWN.LowLevel.CExoArrayList<uint> aPlayers, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            if (ReferenceEquals(aPlayers, null))
                throw new global::System.ArgumentNullException("aPlayers", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aPlayers.__Instance;
            __Internal.SaveGIT(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveGIT(global::NWN.LowLevel.CERFFile cSaveFile, global::NWN.LowLevel.CExoString sName, global::NWN.LowLevel.CExoArrayList<uint> aPlayers)
        {
            var __arg0 = cSaveFile is null ? __IntPtr.Zero : cSaveFile.__Instance;
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            if (ReferenceEquals(aPlayers, null))
                throw new global::System.ArgumentNullException("aPlayers", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aPlayers.__Instance;
            __Internal.SaveGIT(__Instance, __arg0, __arg1, __arg2);
        }

        public int LoadGIT(int bLoadStateInfo)
        {
            var __ret = __Internal.LoadGIT(__Instance, bLoadStateInfo);
            return __ret;
        }

        public void LoadGIT(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.LoadGIT(__Instance, __arg0, __arg1, bLoadStateInfo);
        }

        public void SmoothCornerOptimize(int nOldWayPoints, ref float pfOldWayPoints, ref int nNewWayPoints, float** pfNewWayPoints)
        {
            fixed (float* __pfOldWayPoints1 = &pfOldWayPoints)
            {
                var __arg1 = __pfOldWayPoints1;
                fixed (int* __nNewWayPoints2 = &nNewWayPoints)
                {
                    var __arg2 = __nNewWayPoints2;
                    __Internal.SmoothCornerOptimize(__Instance, nOldWayPoints, __arg1, __arg2, pfNewWayPoints);
                }
            }
        }

        public void SmoothSelection(int nOldWayPoints, ref float pfOldWayPoitns, ref int nNewWayPoints, float** pfNewWayPoints)
        {
            fixed (float* __pfOldWayPoitns1 = &pfOldWayPoitns)
            {
                var __arg1 = __pfOldWayPoitns1;
                fixed (int* __nNewWayPoints2 = &nNewWayPoints)
                {
                    var __arg2 = __nNewWayPoints2;
                    __Internal.SmoothSelection(__Instance, nOldWayPoints, __arg1, __arg2, pfNewWayPoints);
                }
            }
        }

        public void SmoothSelectNodes(int nOldWayPoints, ref float pfOldWayPoints, ref int nNewWayPoints, float** pfNewWayPoints, int bChopIntoMeterSegments, int bSelectBestLines)
        {
            fixed (float* __pfOldWayPoints1 = &pfOldWayPoints)
            {
                var __arg1 = __pfOldWayPoints1;
                fixed (int* __nNewWayPoints2 = &nNewWayPoints)
                {
                    var __arg2 = __nNewWayPoints2;
                    __Internal.SmoothSelectNodes(__Instance, nOldWayPoints, __arg1, __arg2, pfNewWayPoints, bChopIntoMeterSegments, bSelectBestLines);
                }
            }
        }

        public int TestDirectLine(float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace, float fCreatureHeight, int bIgnoreClosedDoors)
        {
            var __ret = __Internal.TestDirectLine(__Instance, fStartX, fStartY, fEndX, fEndY, fPersonalSpace, fCreatureHeight, bIgnoreClosedDoors);
            return __ret;
        }

        public int TestLineWalkable(float fStartX, float fStartY, float fEndX, float fEndY, float fPersonalSpace)
        {
            var __ret = __Internal.TestLineWalkable(__Instance, fStartX, fStartY, fEndX, fEndY, fPersonalSpace);
            return __ret;
        }

        public void UnloadArea()
        {
            __Internal.UnloadArea(__Instance);
        }

        public void PlayVisualEffect(global::NWN.LowLevel.CGameEffect pEffect, global::NWN.LowLevel.Vector vPosition)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vPosition.__Instance;
            __Internal.PlayVisualEffect(__Instance, __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1);
        }

        public int PlotSoundPath(global::NWN.LowLevel.CPathfindInformation pcPathfindInformation)
        {
            var __arg0 = pcPathfindInformation is null ? __IntPtr.Zero : pcPathfindInformation.__Instance;
            var __ret = __Internal.PlotSoundPath(__Instance, __arg0);
            return __ret;
        }

        public int GetFirstObjectIndiceByX(ref int nIndice, float fMinX)
        {
            fixed (int* __nIndice0 = &nIndice)
            {
                var __arg0 = __nIndice0;
                var __ret = __Internal.GetFirstObjectIndiceByX(__Instance, __arg0, fMinX);
                return __ret;
            }
        }

        public int UpdatePositionInObjectsArray(global::NWN.LowLevel.ICGameObject pUpdateObject)
        {
            var __arg0 = pUpdateObject is null ? __IntPtr.Zero : pUpdateObject.__PointerToCGameObject;
            var __ret = __Internal.UpdatePositionInObjectsArray(__Instance, __arg0);
            return __ret;
        }

        public int InSubAreas(global::NWN.LowLevel.Vector vPosition, global::NWN.LowLevel.CExoArrayList<uint> aSubAreasWithin)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __arg1 = aSubAreasWithin is null ? __IntPtr.Zero : aSubAreasWithin.__Instance;
            var __ret = __Internal.InSubAreas(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, __arg1);
            return __ret;
        }

        public int IntersectingLineSegment(global::NWN.LowLevel.Vector vStart, global::NWN.LowLevel.Vector vEnd, global::NWN.LowLevel.CExoArrayList<uint> aIntersectingSubAreas)
        {
            if (ReferenceEquals(vStart, null))
                throw new global::System.ArgumentNullException("vStart", "Cannot be null because it is passed by value.");
            var __arg0 = vStart.__Instance;
            if (ReferenceEquals(vEnd, null))
                throw new global::System.ArgumentNullException("vEnd", "Cannot be null because it is passed by value.");
            var __arg1 = vEnd.__Instance;
            var __arg2 = aIntersectingSubAreas is null ? __IntPtr.Zero : aIntersectingSubAreas.__Instance;
            var __ret = __Internal.IntersectingLineSegment(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, __arg2);
            return __ret;
        }

        public uint GetDoorCrossed(global::NWN.LowLevel.Vector vStart, global::NWN.LowLevel.Vector vEnd)
        {
            if (ReferenceEquals(vStart, null))
                throw new global::System.ArgumentNullException("vStart", "Cannot be null because it is passed by value.");
            var __arg0 = vStart.__Instance;
            if (ReferenceEquals(vEnd, null))
                throw new global::System.ArgumentNullException("vEnd", "Cannot be null because it is passed by value.");
            var __arg1 = vEnd.__Instance;
            var __ret = __Internal.GetDoorCrossed(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1);
            return __ret;
        }

        public void ApplyEffect(global::NWN.LowLevel.CGameEffect pEffect, global::NWN.LowLevel.Vector vPosition, global::NWN.LowLevel.Vector vOrientation)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg1 = vPosition.__Instance;
            if (ReferenceEquals(vOrientation, null))
                throw new global::System.ArgumentNullException("vOrientation", "Cannot be null because it is passed by value.");
            var __arg2 = vOrientation.__Instance;
            __Internal.ApplyEffect(__Instance, __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, *(global::NWN.LowLevel.Vector.__Internal*) __arg2);
        }

        public int ClearLineOfSight(global::NWN.LowLevel.Vector vSource, global::NWN.LowLevel.Vector vTarget, global::NWN.LowLevel.Vector vImpact, ref uint oidImpact, uint oidStart, uint oidTarget, int bIgnoreTransDoors)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg0 = vSource.__Instance;
            if (ReferenceEquals(vTarget, null))
                throw new global::System.ArgumentNullException("vTarget", "Cannot be null because it is passed by value.");
            var __arg1 = vTarget.__Instance;
            var __arg2 = vImpact is null ? __IntPtr.Zero : vImpact.__Instance;
            fixed (uint* __oidImpact3 = &oidImpact)
            {
                var __arg3 = __oidImpact3;
                var __ret = __Internal.ClearLineOfSight(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, __arg2, __arg3, oidStart, oidTarget, bIgnoreTransDoors);
                return __ret;
            }
        }

        public virtual int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, ref uint oidBlockingDoor, int bWalking, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList, int bIgnoreTransDoors)
        {
            var ___HandleTransparentDoorsDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float_float_float_float_uint_uintPtr_int___IntPtr_int>(0, 3);
            fixed (uint* __oidBlockingDoor8 = &oidBlockingDoor)
            {
                var __arg8 = __oidBlockingDoor8;
                var __arg10 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
                var __ret = ___HandleTransparentDoorsDelegate(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, __arg8, bWalking, __arg10, bIgnoreTransDoors);
                return __ret;
            }
        }

        public virtual int GetIsIDInExcludeList(uint oidID, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList)
        {
            var ___GetIsIDInExcludeListDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr>(0, 4);
            var __arg1 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
            var __ret = ___GetIsIDInExcludeListDelegate(__Instance, oidID, __arg1);
            return __ret;
        }

        public override int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking)
        {
            return base.NoNoneWalkPolysInStaticObject(oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
        }

        public void IncrementPlayersInArea()
        {
            __Internal.IncrementPlayersInArea(__Instance);
        }

        public void DecrementPlayersInArea()
        {
            __Internal.DecrementPlayersInArea(__Instance);
        }

        public int GetSurfaceMaterial(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.GetSurfaceMaterial(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public int PositionWalkable(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.PositionWalkable(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public void SetCurrentWeather(byte nWeatherType, int bWeatherStarted)
        {
            __Internal.SetCurrentWeather(__Instance, nWeatherType, bWeatherStarted);
        }

        public int LoadAreaHeader(global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadAreaHeader(__Instance, __arg0);
            return __ret;
        }

        public int LoadTileSetInfo(global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadTileSetInfo(__Instance, __arg0);
            return __ret;
        }

        public int LoadCreatures(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadCreatures(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadPlayers(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadPlayers(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadItems(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadItems(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadDoors(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadDoors(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadTriggers(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadTriggers(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadEncounters(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadEncounters(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadWaypoints(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadWaypoints(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadSounds(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadSounds(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadPlaceables(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadPlaceables(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadStores(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadStores(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadAreaEffects(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bLoadStateInfo)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadAreaEffects(__Instance, __arg0, __arg1, bLoadStateInfo);
            return __ret;
        }

        public int LoadProperties(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadProperties(__Instance, __arg0, __arg1);
            return __ret;
        }

        public void IncreaseAILevelPriority()
        {
            __Internal.IncreaseAILevelPriority(__Instance);
        }

        public void DecreaseAILevelPriority()
        {
            __Internal.DecreaseAILevelPriority(__Instance);
        }

        public void SaveCreatures(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aCreatures, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aCreatures, null))
                throw new global::System.ArgumentNullException("aCreatures", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aCreatures.__Instance;
            __Internal.SaveCreatures(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveItems(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aItems, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aItems, null))
                throw new global::System.ArgumentNullException("aItems", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aItems.__Instance;
            __Internal.SaveItems(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveDoors(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aDoors, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aDoors, null))
                throw new global::System.ArgumentNullException("aDoors", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aDoors.__Instance;
            __Internal.SaveDoors(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveTriggers(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aTriggers, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aTriggers, null))
                throw new global::System.ArgumentNullException("aTriggers", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aTriggers.__Instance;
            __Internal.SaveTriggers(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveEncounters(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aEncounters, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aEncounters, null))
                throw new global::System.ArgumentNullException("aEncounters", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aEncounters.__Instance;
            __Internal.SaveEncounters(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveWaypoints(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aWaypoints, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aWaypoints, null))
                throw new global::System.ArgumentNullException("aWaypoints", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aWaypoints.__Instance;
            __Internal.SaveWaypoints(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveSounds(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aSounds, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aSounds, null))
                throw new global::System.ArgumentNullException("aSounds", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aSounds.__Instance;
            __Internal.SaveSounds(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SavePlaceables(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aPlaceables, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aPlaceables, null))
                throw new global::System.ArgumentNullException("aPlaceables", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aPlaceables.__Instance;
            __Internal.SavePlaceables(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveStores(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aStores, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aStores, null))
                throw new global::System.ArgumentNullException("aStores", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aStores.__Instance;
            __Internal.SaveStores(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveAreaEffects(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct, global::NWN.LowLevel.CExoArrayList<uint> aStores, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            if (ReferenceEquals(aStores, null))
                throw new global::System.ArgumentNullException("aStores", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = aStores.__Instance;
            __Internal.SaveAreaEffects(__Instance, __arg0, __arg1, __arg2, bSaveOIDs);
        }

        public void SaveProperties(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pTopLevelStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pTopLevelStruct is null ? __IntPtr.Zero : pTopLevelStruct.__Instance;
            __Internal.SaveProperties(__Instance, __arg0, __arg1);
        }

        public virtual void SetId(uint oidNew)
        {
            var ___SetIdDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_uint>(0, 2);
            ___SetIdDelegate(__Instance + 304, oidNew);
        }

        public virtual void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay)
        {
            var ___ResetUpdateTimesDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint>(0, 3);
            ___ResetUpdateTimesDelegate(__Instance + 304, nCalendarDay, nTimeOfDay);
        }

        public int MNPlayersInArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlayersInArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlayersInArea = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MPTrapList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pTrapList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pTrapList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MNObjectByNameIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nObjectByNameIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nObjectByNameIndex = value;
            }
        }

        public uint MNLastHeartbeatScriptCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay = value;
            }
        }

        public uint MNLastHeartbeatScriptTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.NWAREAEXPANSION> MLstExpansions
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.NWAREAEXPANSION>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstExpansions));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstExpansions = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSComments
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sComments));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sComments = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLocString MLsName
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lsName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lsName = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSTag
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sTag));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sTag = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef MRefTileSet
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refTileSet));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refTileSet = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWTileSet MPTileSet
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSet.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTileSet, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTileSet = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSTile MPTile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSTile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.NWAREAHEADER MPHeader
        {
            get
            {
                var __result0 = global::NWN.LowLevel.NWAREAHEADER.__GetOrCreateInstance(((__Internal*)__Instance)->m_pHeader, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pHeader = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString[] MSScripts
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_sScripts != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[4];
                    for (int i = 0; i < 4; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 4)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 4; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public int MNChanceOfFog
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChanceOfFog;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChanceOfFog = value;
            }
        }

        public int MNAreaSpotModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAreaSpotModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAreaSpotModifier = value;
            }
        }

        public int MNAreaListenModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAreaListenModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAreaListenModifier = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MAGameObjects
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aGameObjects));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aGameObjects = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MNPosGameObjects
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPosGameObjects;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPosGameObjects = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MASubAreas
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_aSubAreas));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_aSubAreas = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int* MPnInterTileTravel
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnInterTileTravel;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInterTileTravel = (__IntPtr) value;
            }
        }

        public float* MPfInterTileExit
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfInterTileExit;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfInterTileExit = (__IntPtr) value;
            }
        }

        public int* MPnInterTileRegionVisited
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnInterTileRegionVisited;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInterTileRegionVisited = (__IntPtr) value;
            }
        }

        public byte* MPnInterTileRegionDepths
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pnInterTileRegionDepths;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInterTileRegionDepths = (__IntPtr) value;
            }
        }

        public int MNInterTileTravelLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterTileTravelLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterTileTravelLength = value;
            }
        }

        public int MNInterTileGoalX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterTileGoalX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterTileGoalX = value;
            }
        }

        public int MNInterTileGoalY
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterTileGoalY;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterTileGoalY = value;
            }
        }

        public int MNInterTileGoalRegion
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterTileGoalRegion;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterTileGoalRegion = value;
            }
        }

        public float MFGoalTargetX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalTargetX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalTargetX = value;
            }
        }

        public float MFGoalTargetY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalTargetY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalTargetY = value;
            }
        }

        public global::NWN.LowLevel.CPathfindInformation MPSearchInfo
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CPathfindInformation.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSearchInfo, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSearchInfo = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CPathfindInformation MPSoundPathInfo
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CPathfindInformation.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSoundPathInfo, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSoundPathInfo = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSAreaGridTransTableEntry MPcGridTransTableEntry
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSAreaGridTransTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcGridTransTableEntry, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcGridTransTableEntry = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int GNUnsmoothedWPList
        {
            get
            {
                return ((__Internal*)__Instance)->g_nUnsmoothedWPList;
            }

            set
            {
                ((__Internal*)__Instance)->g_nUnsmoothedWPList = value;
            }
        }

        public float* GPfUnsmoothedWPList
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->g_pfUnsmoothedWPList;
            }

            set
            {
                ((__Internal*)__Instance)->g_pfUnsmoothedWPList = (__IntPtr) value;
            }
        }

        public int GNSmoothedWPList
        {
            get
            {
                return ((__Internal*)__Instance)->g_nSmoothedWPList;
            }

            set
            {
                ((__Internal*)__Instance)->g_nSmoothedWPList = value;
            }
        }

        public float* GPfSmoothedWPList
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->g_pfSmoothedWPList;
            }

            set
            {
                ((__Internal*)__Instance)->g_pfSmoothedWPList = (__IntPtr) value;
            }
        }

        public float GFPersonalSpace
        {
            get
            {
                return ((__Internal*)__Instance)->g_fPersonalSpace;
            }

            set
            {
                ((__Internal*)__Instance)->g_fPersonalSpace = value;
            }
        }

        public int MBGridPathfindingTerminated
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGridPathfindingTerminated;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGridPathfindingTerminated = value;
            }
        }

        public int MNGridNodesSearched
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridNodesSearched;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridNodesSearched = value;
            }
        }

        public uint MOidLastEntered
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastEntered;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastEntered = value;
            }
        }

        public uint MOidLastLeft
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastLeft;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastLeft = value;
            }
        }

        public int MNCustomScriptEventId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCustomScriptEventId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCustomScriptEventId = value;
            }
        }

        public global::NWN.LowLevel.CNWSAreaInterTileSuccessors MPcInterTileSuccessors
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSAreaInterTileSuccessors.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcInterTileSuccessors, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcInterTileSuccessors = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPbInterTileDeniedExitCheck
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pbInterTileDeniedExitCheck;
            }

            set
            {
                ((__Internal*)__Instance)->m_pbInterTileDeniedExitCheck = (__IntPtr) value;
            }
        }

        public int MBInterAreaDFSVisited
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInterAreaDFSVisited;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInterAreaDFSVisited = value;
            }
        }

        public global::NWN.LowLevel.CNWSScriptVarTable MScriptVars
        {
            get
            {
                return global::NWN.LowLevel.CNWSScriptVarTable.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_ScriptVars));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_ScriptVars = *(global::NWN.LowLevel.CNWSScriptVarTable.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSAmbientSound MPAmbientSound
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSAmbientSound.__GetOrCreateInstance(((__Internal*)__Instance)->m_pAmbientSound, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pAmbientSound = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public byte MNWeatherType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWeatherType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWeatherType = value;
            }
        }

        public int MBWeatherStarted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWeatherStarted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWeatherStarted = value;
            }
        }

        public uint MNWeatherMinDurationTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWeatherMinDurationTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWeatherMinDurationTimer = value;
            }
        }

        public uint MNLastUpdateCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastUpdateCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastUpdateCalendarDay = value;
            }
        }

        public uint MNLastUpdateTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastUpdateTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastUpdateTimeOfDay = value;
            }
        }

        public byte MNOverrideWeatherType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOverrideWeatherType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOverrideWeatherType = value;
            }
        }

        public byte MNCurrentWeatherType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentWeatherType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentWeatherType = value;
            }
        }

        public byte MNLightingScheme
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLightingScheme;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLightingScheme = value;
            }
        }

        public byte MNPVPSetting
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPVPSetting;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPVPSetting = value;
            }
        }

        public byte MNMapSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMapSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMapSize = value;
            }
        }

        public int MNEnvironmentalAudio
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEnvironmentalAudio;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEnvironmentalAudio = value;
            }
        }

        public ushort MNLoadScreenID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLoadScreenID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLoadScreenID = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSDisplayName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDisplayName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDisplayName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSUUID MPUUID
        {
            get
            {
                return global::NWN.LowLevel.CNWSUUID.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pUUID));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pUUID = *(global::NWN.LowLevel.CNWSUUID.__Internal*) value.__Instance;
            }
        }

        public uint MIdSelf
        {
            get
            {
                return ((__Internal*)__Instance)->m_idSelf;
            }

            set
            {
                ((__Internal*)__Instance)->m_idSelf = value;
            }
        }

        public byte MNObjectType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nObjectType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nObjectType = value;
            }
        }

        public __IntPtr MPNwnxData
        {
            get
            {
                return ((__Internal*)__Instance)->m_pNwnxData;
            }

            set
            {
                ((__Internal*)__Instance)->m_pNwnxData = (__IntPtr) value;
            }
        }

        public __IntPtr __PointerToCGameObject
        {
            get
            {
                return __Instance + 304;
            }
        }

        public __IntPtr __PointerToCCallbackHandlerBase
        {
            get
            {
                return __Instance + 304;
            }
        }

        public virtual global::NWN.LowLevel.CNWSArea AsNWSArea
        {
            get
            {
                var ___AsNWSAreaDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 9);
                var __ret = ___AsNWSAreaDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSArea.__GetOrCreateInstance(__ret, true);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSArea NWAreaAsNWSArea
        {
            get
            {
                var ___NWAreaAsNWSAreaDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 10);
                var __ret = ___NWAreaAsNWSAreaDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSArea.__GetOrCreateInstance(__ret, true);
                return __result0;
            }
        }

        public int AIUpdate
        {
            get
            {
                var __ret = __Internal.AIUpdate(__Instance);
                return __ret;
            }
        }

        public int SmoothPointsOnPath
        {
            get
            {
                var __ret = __Internal.SmoothPointsOnPath(__Instance);
                return __ret;
            }
        }

        public byte PVPSetting
        {
            get
            {
                var __ret = __Internal.GetPVPSetting(__Instance);
                return __ret;
            }
        }

        public virtual global::NWN.LowLevel.CNWCObject AsNWCObject
        {
            get
            {
                var ___AsNWCObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 4);
                var __ret = ___AsNWCObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSObject AsNWSObject
        {
            get
            {
                var ___AsNWSObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 5);
                var __ret = ___AsNWSObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCDoor AsNWCDoor
        {
            get
            {
                var ___AsNWCDoorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 6);
                var __ret = ___AsNWCDoorDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCDoor.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSDoor AsNWSDoor
        {
            get
            {
                var ___AsNWSDoorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 7);
                var __ret = ___AsNWSDoorDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSDoor.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCModule AsNWCModule
        {
            get
            {
                var ___AsNWCModuleDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 8);
                var __ret = ___AsNWCModuleDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSModule AsNWSModule
        {
            get
            {
                var ___AsNWSModuleDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 9);
                var __ret = ___AsNWSModuleDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCArea AsNWCArea
        {
            get
            {
                var ___AsNWCAreaDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 10);
                var __ret = ___AsNWCAreaDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCArea.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCCreature AsNWCCreature
        {
            get
            {
                var ___AsNWCCreatureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 12);
                var __ret = ___AsNWCCreatureDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCCreature.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSCreature AsNWSCreature
        {
            get
            {
                var ___AsNWSCreatureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 13);
                var __ret = ___AsNWSCreatureDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCItem AsNWCItem
        {
            get
            {
                var ___AsNWCItemDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 14);
                var __ret = ___AsNWCItemDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCItem.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSItem AsNWSItem
        {
            get
            {
                var ___AsNWSItemDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 15);
                var __ret = ___AsNWSItemDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCTrigger AsNWCTrigger
        {
            get
            {
                var ___AsNWCTriggerDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 16);
                var __ret = ___AsNWCTriggerDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCTrigger.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSTrigger AsNWSTrigger
        {
            get
            {
                var ___AsNWSTriggerDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 17);
                var __ret = ___AsNWSTriggerDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSTrigger.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCProjectile AsNWCProjectile
        {
            get
            {
                var ___AsNWCProjectileDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 18);
                var __ret = ___AsNWCProjectileDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCProjectile.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSPlayerTURD AsNWSPlayerTURD
        {
            get
            {
                var ___AsNWSPlayerTURDDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 19);
                var __ret = ___AsNWSPlayerTURDDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSPlayerTURD.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSPlaceable AsNWSPlaceable
        {
            get
            {
                var ___AsNWSPlaceableDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 20);
                var __ret = ___AsNWSPlaceableDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSPlaceable.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCPlaceable AsNWCPlaceable
        {
            get
            {
                var ___AsNWCPlaceableDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 21);
                var __ret = ___AsNWCPlaceableDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCPlaceable.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSAreaOfEffectObject AsNWSAreaOfEffectObject
        {
            get
            {
                var ___AsNWSAreaOfEffectObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 22);
                var __ret = ___AsNWSAreaOfEffectObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCAreaOfEffectObject AsNWCAreaOfEffectObject
        {
            get
            {
                var ___AsNWCAreaOfEffectObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 23);
                var __ret = ___AsNWCAreaOfEffectObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSWaypoint AsNWSWaypoint
        {
            get
            {
                var ___AsNWSWaypointDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 24);
                var __ret = ___AsNWSWaypointDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSWaypoint.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSEncounter AsNWSEncounter
        {
            get
            {
                var ___AsNWSEncounterDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 25);
                var __ret = ___AsNWSEncounterDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSEncounter.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCStore AsNWCStore
        {
            get
            {
                var ___AsNWCStoreDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 26);
                var __ret = ___AsNWCStoreDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCStore.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSStore AsNWSStore
        {
            get
            {
                var ___AsNWSStoreDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 27);
                var __ret = ___AsNWSStoreDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSStore.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSSoundObject AsNWSSoundObject
        {
            get
            {
                var ___AsNWSSoundObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 28);
                var __ret = ___AsNWSSoundObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWSSoundObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCSoundObject AsNWCSoundObject
        {
            get
            {
                var ___AsNWCSoundObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 29);
                var __ret = ___AsNWCSoundObjectDelegate(__Instance + 304);
                var __result0 = global::NWN.LowLevel.CNWCSoundObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        #region Virtual table interop

        // ~CNWSArea()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // BOOL NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation * pPathfindInfo, BOOL bCheckSourceOccluded = true, BOOL bIgnoreAssociates = false, OBJECT_ID * poidBlockingCreature = nullptr, BOOL bEvaluateOverlappingTarget = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float___IntPtr_int_int_uintPtr_int _NoCreaturesOnLineDelegateInstance;

        private static int _NoCreaturesOnLineDelegateHook(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, __IntPtr pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature, int bEvaluateOverlappingTarget)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __result4 = global::NWN.LowLevel.CPathfindInformation.__GetOrCreateInstance(pPathfindInfo, false);
            return __target.NoCreaturesOnLine(fSourceX, fSourceY, fTargetX, fTargetY, __result4, bCheckSourceOccluded, bIgnoreAssociates, ref *poidBlockingCreature, bEvaluateOverlappingTarget);
        }

        // BOOL HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, OBJECT_ID oidDeniedDoor, OBJECT_ID & oidBlockingDoor, BOOL bWalking, CExoArrayList<CGameObject *> * pExcludeList = nullptr, BOOL bIgnoreTransDoors = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float_float_float_float_uint_uintPtr_int___IntPtr_int _HandleTransparentDoorsDelegateInstance;

        private static int _HandleTransparentDoorsDelegateHook(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, __IntPtr pExcludeList, int bIgnoreTransDoors)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __result10 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject>.__GetOrCreateInstance(pExcludeList, false);
            return __target.HandleTransparentDoors(fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, ref *oidBlockingDoor, bWalking, __result10, bIgnoreTransDoors);
        }

        // BOOL GetIsIDInExcludeList(OBJECT_ID oidID, CExoArrayList<CGameObject *> * pExcludeList = nullptr)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr _GetIsIDInExcludeListDelegateInstance;

        private static int _GetIsIDInExcludeListDelegateHook(__IntPtr __instance, uint oidID, __IntPtr pExcludeList)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __result1 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject>.__GetOrCreateInstance(pExcludeList, false);
            return __target.GetIsIDInExcludeList(oidID, __result1);
        }

        // BOOL NoNoneWalkPolysInStaticObject(OBJECT_ID oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, OBJECT_ID oidDeniedDoor, BOOL bWalking = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint_float_float_float_float_float_float_float_uint_int _NoNoneWalkPolysInStaticObjectDelegateInstance;

        private static int _NoNoneWalkPolysInStaticObjectDelegateHook(__IntPtr __instance, uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            return __target.NoNoneWalkPolysInStaticObject(oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
        }

        // BOOL SetFog(int32_t nFogValue, Vector vColor)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_NWN_LowLevel_Vector___Internal _SetFogDelegateInstance;

        private static int _SetFogDelegateHook(__IntPtr __instance, int nFogValue, global::NWN.LowLevel.Vector.__Internal vColor)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            return __target.SetFog(nFogValue, global::NWN.LowLevel.Vector.__CreateInstance(vColor));
        }

        // BOOL SetIsNight(BOOL bIsNight)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int _SetIsNightDelegateInstance;

        private static int _SetIsNightDelegateHook(__IntPtr __instance, int bIsNight)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            return __target.SetIsNight(bIsNight);
        }

        // BOOL SetWind(uint8_t nAmount)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_byte _SetWindDelegateInstance;

        private static int _SetWindDelegateHook(__IntPtr __instance, byte nAmount)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            return __target.SetWind(nAmount);
        }

        // CNWSArea * AsNWSArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaDelegateInstance;

        private static __IntPtr _AsNWSAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSArea * NWAreaAsNWSArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _NWAreaAsNWSAreaDelegateInstance;

        private static __IntPtr _NWAreaAsNWSAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.NWAreaAsNWSArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void SetId(OBJECT_ID oidNew)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(__IntPtr __instance, uint oidNew)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            __target.SetId(oidNew);
        }

        // void ResetUpdateTimes(uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint _ResetUpdateTimesDelegateInstance;

        private static void _ResetUpdateTimesDelegateHook(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            __target.ResetUpdateTimes(nCalendarDay, nTimeOfDay);
        }

        // CNWCObject * AsNWCObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCObjectDelegateInstance;

        private static __IntPtr _AsNWCObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSObject * AsNWSObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSObjectDelegateInstance;

        private static __IntPtr _AsNWSObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCDoor * AsNWCDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCDoorDelegateInstance;

        private static __IntPtr _AsNWCDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSDoor * AsNWSDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSDoorDelegateInstance;

        private static __IntPtr _AsNWSDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCModule * AsNWCModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCModuleDelegateInstance;

        private static __IntPtr _AsNWCModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSModule * AsNWSModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSModuleDelegateInstance;

        private static __IntPtr _AsNWSModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCArea * AsNWCArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaDelegateInstance;

        private static __IntPtr _AsNWCAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCCreature * AsNWCCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCCreatureDelegateInstance;

        private static __IntPtr _AsNWCCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSCreature * AsNWSCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSCreatureDelegateInstance;

        private static __IntPtr _AsNWSCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCItem * AsNWCItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCItemDelegateInstance;

        private static __IntPtr _AsNWCItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSItem * AsNWSItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSItemDelegateInstance;

        private static __IntPtr _AsNWSItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCTrigger * AsNWCTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCTriggerDelegateInstance;

        private static __IntPtr _AsNWCTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSTrigger * AsNWSTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSTriggerDelegateInstance;

        private static __IntPtr _AsNWSTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCProjectile * AsNWCProjectile()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCProjectileDelegateInstance;

        private static __IntPtr _AsNWCProjectileDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCProjectile;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlayerTURD * AsNWSPlayerTURD()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlayerTURDDelegateInstance;

        private static __IntPtr _AsNWSPlayerTURDDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSPlayerTURD;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlaceable * AsNWSPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlaceableDelegateInstance;

        private static __IntPtr _AsNWSPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCPlaceable * AsNWCPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCPlaceableDelegateInstance;

        private static __IntPtr _AsNWCPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSAreaOfEffectObject * AsNWSAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWSAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCAreaOfEffectObject * AsNWCAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWCAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSWaypoint * AsNWSWaypoint()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSWaypointDelegateInstance;

        private static __IntPtr _AsNWSWaypointDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSWaypoint;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSEncounter * AsNWSEncounter()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSEncounterDelegateInstance;

        private static __IntPtr _AsNWSEncounterDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSEncounter;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCStore * AsNWCStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCStoreDelegateInstance;

        private static __IntPtr _AsNWCStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSStore * AsNWSStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSStoreDelegateInstance;

        private static __IntPtr _AsNWSStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSSoundObject * AsNWSSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSSoundObjectDelegateInstance;

        private static __IntPtr _AsNWSSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWSSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCSoundObject * AsNWCSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCSoundObjectDelegateInstance;

        private static __IntPtr _AsNWCSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSArea.__GetInstance(__instance);
            var __ret = __target.AsNWCSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[37];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _NoCreaturesOnLineDelegateInstance += _NoCreaturesOnLineDelegateHook;
                _HandleTransparentDoorsDelegateInstance += _HandleTransparentDoorsDelegateHook;
                _GetIsIDInExcludeListDelegateInstance += _GetIsIDInExcludeListDelegateHook;
                _NoNoneWalkPolysInStaticObjectDelegateInstance += _NoNoneWalkPolysInStaticObjectDelegateHook;
                _SetFogDelegateInstance += _SetFogDelegateHook;
                _SetIsNightDelegateInstance += _SetIsNightDelegateHook;
                _SetWindDelegateInstance += _SetWindDelegateHook;
                _AsNWSAreaDelegateInstance += _AsNWSAreaDelegateHook;
                _NWAreaAsNWSAreaDelegateInstance += _NWAreaAsNWSAreaDelegateHook;
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _ResetUpdateTimesDelegateInstance += _ResetUpdateTimesDelegateHook;
                _AsNWCObjectDelegateInstance += _AsNWCObjectDelegateHook;
                _AsNWSObjectDelegateInstance += _AsNWSObjectDelegateHook;
                _AsNWCDoorDelegateInstance += _AsNWCDoorDelegateHook;
                _AsNWSDoorDelegateInstance += _AsNWSDoorDelegateHook;
                _AsNWCModuleDelegateInstance += _AsNWCModuleDelegateHook;
                _AsNWSModuleDelegateInstance += _AsNWSModuleDelegateHook;
                _AsNWCAreaDelegateInstance += _AsNWCAreaDelegateHook;
                _AsNWCCreatureDelegateInstance += _AsNWCCreatureDelegateHook;
                _AsNWSCreatureDelegateInstance += _AsNWSCreatureDelegateHook;
                _AsNWCItemDelegateInstance += _AsNWCItemDelegateHook;
                _AsNWSItemDelegateInstance += _AsNWSItemDelegateHook;
                _AsNWCTriggerDelegateInstance += _AsNWCTriggerDelegateHook;
                _AsNWSTriggerDelegateInstance += _AsNWSTriggerDelegateHook;
                _AsNWCProjectileDelegateInstance += _AsNWCProjectileDelegateHook;
                _AsNWSPlayerTURDDelegateInstance += _AsNWSPlayerTURDDelegateHook;
                _AsNWSPlaceableDelegateInstance += _AsNWSPlaceableDelegateHook;
                _AsNWCPlaceableDelegateInstance += _AsNWCPlaceableDelegateHook;
                _AsNWSAreaOfEffectObjectDelegateInstance += _AsNWSAreaOfEffectObjectDelegateHook;
                _AsNWCAreaOfEffectObjectDelegateInstance += _AsNWCAreaOfEffectObjectDelegateHook;
                _AsNWSWaypointDelegateInstance += _AsNWSWaypointDelegateHook;
                _AsNWSEncounterDelegateInstance += _AsNWSEncounterDelegateHook;
                _AsNWCStoreDelegateInstance += _AsNWCStoreDelegateHook;
                _AsNWSStoreDelegateInstance += _AsNWSStoreDelegateHook;
                _AsNWSSoundObjectDelegateInstance += _AsNWSSoundObjectDelegateHook;
                _AsNWCSoundObjectDelegateInstance += _AsNWCSoundObjectDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_NoCreaturesOnLineDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_HandleTransparentDoorsDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetIsIDInExcludeListDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_NoNoneWalkPolysInStaticObjectDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetFogDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SetIsNightDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_SetWindDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_NWAreaAsNWSAreaDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_ResetUpdateTimesDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_AsNWCObjectDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AsNWSObjectDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_AsNWCDoorDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_AsNWSDoorDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_AsNWCModuleDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_AsNWSModuleDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_AsNWCCreatureDelegateInstance);
                Thunks[20] = Marshal.GetFunctionPointerForDelegate(_AsNWSCreatureDelegateInstance);
                Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AsNWCItemDelegateInstance);
                Thunks[22] = Marshal.GetFunctionPointerForDelegate(_AsNWSItemDelegateInstance);
                Thunks[23] = Marshal.GetFunctionPointerForDelegate(_AsNWCTriggerDelegateInstance);
                Thunks[24] = Marshal.GetFunctionPointerForDelegate(_AsNWSTriggerDelegateInstance);
                Thunks[25] = Marshal.GetFunctionPointerForDelegate(_AsNWCProjectileDelegateInstance);
                Thunks[26] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlayerTURDDelegateInstance);
                Thunks[27] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlaceableDelegateInstance);
                Thunks[28] = Marshal.GetFunctionPointerForDelegate(_AsNWCPlaceableDelegateInstance);
                Thunks[29] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaOfEffectObjectDelegateInstance);
                Thunks[30] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaOfEffectObjectDelegateInstance);
                Thunks[31] = Marshal.GetFunctionPointerForDelegate(_AsNWSWaypointDelegateInstance);
                Thunks[32] = Marshal.GetFunctionPointerForDelegate(_AsNWSEncounterDelegateInstance);
                Thunks[33] = Marshal.GetFunctionPointerForDelegate(_AsNWCStoreDelegateInstance);
                Thunks[34] = Marshal.GetFunctionPointerForDelegate(_AsNWSStoreDelegateInstance);
                Thunks[35] = Marshal.GetFunctionPointerForDelegate(_AsNWSSoundObjectDelegateInstance);
                Thunks[36] = Marshal.GetFunctionPointerForDelegate(_AsNWCSoundObjectDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 49);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTablesDtorOnly[0][14] = Thunks[0];
                            ManagedVTablesDtorOnly[0][18] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 49);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            ManagedVTables[0][9] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            ManagedVTables[0][14] = Thunks[0];
                            ManagedVTables[0][18] = Thunks[0];
                            ManagedVTables[0][19] = Thunks[10];
                            ManagedVTables[0][20] = Thunks[11];
                            ManagedVTables[0][21] = Thunks[12];
                            ManagedVTables[0][22] = Thunks[13];
                            ManagedVTables[0][23] = Thunks[14];
                            ManagedVTables[0][24] = Thunks[15];
                            ManagedVTables[0][25] = Thunks[16];
                            ManagedVTables[0][26] = Thunks[17];
                            ManagedVTables[0][27] = Thunks[18];
                            ManagedVTables[0][28] = Thunks[8];
                            ManagedVTables[0][29] = Thunks[19];
                            ManagedVTables[0][30] = Thunks[20];
                            ManagedVTables[0][31] = Thunks[21];
                            ManagedVTables[0][32] = Thunks[22];
                            ManagedVTables[0][33] = Thunks[23];
                            ManagedVTables[0][34] = Thunks[24];
                            ManagedVTables[0][35] = Thunks[25];
                            ManagedVTables[0][36] = Thunks[26];
                            ManagedVTables[0][37] = Thunks[27];
                            ManagedVTables[0][38] = Thunks[28];
                            ManagedVTables[0][39] = Thunks[29];
                            ManagedVTables[0][40] = Thunks[30];
                            ManagedVTables[0][41] = Thunks[31];
                            ManagedVTables[0][42] = Thunks[32];
                            ManagedVTables[0][43] = Thunks[33];
                            ManagedVTables[0][44] = Thunks[34];
                            ManagedVTables[0][45] = Thunks[35];
                            ManagedVTables[0][46] = Thunks[36];
                            VTables.Methods[0] = new Delegate[49];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
