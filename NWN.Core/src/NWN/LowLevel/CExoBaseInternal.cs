// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoBaseInternal : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nResTypes;

            [FieldOffset(8)]
            internal __IntPtr m_pnResTypes;

            [FieldOffset(16)]
            internal __IntPtr m_psResTypeNames;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternalC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternalC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternalD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal8AddAliasEi10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddAlias(__IntPtr __instance, int idxIniFile, __IntPtr sAlias, __IntPtr sDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal16GetDirectoryListEP13CExoArrayListI10CExoStringES1_tii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDirectoryList(__IntPtr __instance, __IntPtr lstFilename, __IntPtr sPath, ushort nResType, int bGetDirectories, int bSort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal25GetAugmentedDirectoryListEP13CExoArrayListI9CFileInfoE10CExoStringti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAugmentedDirectoryList(__IntPtr __instance, __IntPtr lstFileInfo, __IntPtr sAlias, ushort nResType, int bSort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal28CreateResourceExtensionTableEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateResourceExtensionTable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal20GetResourceExtensionEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetResourceExtension(__IntPtr __instance, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal23GetResTypeFromExtensionERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetResTypeFromExtension(__IntPtr __instance, __IntPtr sExtension);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal11LoadAliasesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAliases(__IntPtr __instance, int idxIniFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal8ShutDownEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutDown(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal24SpawnExternalApplicationERK10CExoStringS2_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SpawnExternalApplication(__IntPtr __instance, __IntPtr sAppName, __IntPtr sParams, int bShutDownNWN);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CExoBaseInternal10CheckForCDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckForCD(__IntPtr __instance, uint nLanguage);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoBaseInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoBaseInternal>();

        protected bool __ownsNativeInstance;

        internal static CExoBaseInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoBaseInternal(native.ToPointer(), skipVTables);
        }

        internal static CExoBaseInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoBaseInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoBaseInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoBaseInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoBaseInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoBaseInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoBaseInternal()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoBaseInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoBaseInternal(global::NWN.LowLevel.CExoBaseInternal _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoBaseInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CExoBaseInternal.__Internal*) __Instance) = *((global::NWN.LowLevel.CExoBaseInternal.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoBaseInternal __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void AddAlias(int idxIniFile, global::NWN.LowLevel.CExoString sAlias, global::NWN.LowLevel.CExoString sDefault)
        {
            if (ReferenceEquals(sAlias, null))
                throw new global::System.ArgumentNullException("sAlias", "Cannot be null because it is passed by value.");
            var __arg1 = sAlias.__Instance;
            if (ReferenceEquals(sDefault, null))
                throw new global::System.ArgumentNullException("sDefault", "Cannot be null because it is passed by value.");
            var __arg2 = sDefault.__Instance;
            __Internal.AddAlias(__Instance, idxIniFile, __arg1, __arg2);
        }

        public int GetDirectoryList(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> lstFilename, global::NWN.LowLevel.CExoString sPath, ushort nResType, int bGetDirectories, int bSort)
        {
            var __arg0 = lstFilename is null ? __IntPtr.Zero : lstFilename.__Instance;
            if (ReferenceEquals(sPath, null))
                throw new global::System.ArgumentNullException("sPath", "Cannot be null because it is passed by value.");
            var __arg1 = sPath.__Instance;
            var __ret = __Internal.GetDirectoryList(__Instance, __arg0, __arg1, nResType, bGetDirectories, bSort);
            return __ret;
        }

        public int GetAugmentedDirectoryList(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CFileInfo> lstFileInfo, global::NWN.LowLevel.CExoString sAlias, ushort nResType, int bSort)
        {
            var __arg0 = lstFileInfo is null ? __IntPtr.Zero : lstFileInfo.__Instance;
            if (ReferenceEquals(sAlias, null))
                throw new global::System.ArgumentNullException("sAlias", "Cannot be null because it is passed by value.");
            var __arg1 = sAlias.__Instance;
            var __ret = __Internal.GetAugmentedDirectoryList(__Instance, __arg0, __arg1, nResType, bSort);
            return __ret;
        }

        public void CreateResourceExtensionTable()
        {
            __Internal.CreateResourceExtensionTable(__Instance);
        }

        public global::NWN.LowLevel.CExoString GetResourceExtension(ushort nType)
        {
            var __ret = __Internal.GetResourceExtension(__Instance, nType);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public ushort GetResTypeFromExtension(global::NWN.LowLevel.CExoString sExtension)
        {
            if (ReferenceEquals(sExtension, null))
                throw new global::System.ArgumentNullException("sExtension", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sExtension.__Instance;
            var __ret = __Internal.GetResTypeFromExtension(__Instance, __arg0);
            return __ret;
        }

        public void LoadAliases(int idxIniFile)
        {
            __Internal.LoadAliases(__Instance, idxIniFile);
        }

        public void ShutDown()
        {
            __Internal.ShutDown(__Instance);
        }

        public void SpawnExternalApplication(global::NWN.LowLevel.CExoString sAppName, global::NWN.LowLevel.CExoString sParams, int bShutDownNWN)
        {
            if (ReferenceEquals(sAppName, null))
                throw new global::System.ArgumentNullException("sAppName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sAppName.__Instance;
            if (ReferenceEquals(sParams, null))
                throw new global::System.ArgumentNullException("sParams", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sParams.__Instance;
            __Internal.SpawnExternalApplication(__Instance, __arg0, __arg1, bShutDownNWN);
        }

        public int CheckForCD(uint nLanguage)
        {
            var __ret = __Internal.CheckForCD(__Instance, nLanguage);
            return __ret;
        }

        public int MNResTypes
        {
            get
            {
                return ((__Internal*)__Instance)->m_nResTypes;
            }

            set
            {
                ((__Internal*)__Instance)->m_nResTypes = value;
            }
        }

        public ushort* MPnResTypes
        {
            get
            {
                return (ushort*) ((__Internal*)__Instance)->m_pnResTypes;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnResTypes = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsResTypeNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_psResTypeNames, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_psResTypeNames = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
