// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoAppInternal
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAppInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoAppInternal>();

        protected bool __ownsNativeInstance;

        internal static CExoAppInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoAppInternal(native.ToPointer(), skipVTables);
        }

        internal static CExoAppInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoAppInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoAppInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoAppInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoAppInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoAppInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CExoApp : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pcExoAppInternal;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoAppC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoAppC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoAppD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp19AdmitNetworkAddressEj10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AdmitNetworkAddress(__IntPtr __instance, uint nProtocol, __IntPtr sAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp20SetNetworkAddressBanEj10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetNetworkAddressBan(__IntPtr __instance, uint nProtocol, __IntPtr sAddress, int bBanPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp15AdmitPlayerNameE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AdmitPlayerName(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp16PlayerListChangeEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PlayerListChange(__IntPtr __instance, uint nPlayerId, int bEnter, int bPrimaryPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp14GetIniFileNameER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIniFileName(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp13HandleMessageEjPhji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleMessage(__IntPtr __instance, uint nPlayerId, byte* pData, uint dwSize, int bRawMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp11LoadAliasesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAliases(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp10OnCDChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnCDChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp6OnExitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnExit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp11OnGainFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnGainFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp11OnLostFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnLostFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp13OnVideoChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnVideoChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp13StartServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp12StopServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StopServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp12UninitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Uninitialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CExoApp8MainLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MainLoop(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoApp> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoApp>();

        protected bool __ownsNativeInstance;

        internal static CExoApp __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoApp(native.ToPointer(), skipVTables);
        }

        internal static CExoApp __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoApp)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoApp __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoApp(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoApp(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoApp(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoApp()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoApp.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoApp(global::NWN.LowLevel.CExoApp _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoApp.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CExoApp.__Internal*) __Instance) = *((global::NWN.LowLevel.CExoApp.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoApp __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AdmitNetworkAddress(uint nProtocol, global::NWN.LowLevel.CExoString sAddress)
        {
            if (ReferenceEquals(sAddress, null))
                throw new global::System.ArgumentNullException("sAddress", "Cannot be null because it is passed by value.");
            var __arg1 = sAddress.__Instance;
            var __ret = __Internal.AdmitNetworkAddress(__Instance, nProtocol, __arg1);
            return __ret;
        }

        public int SetNetworkAddressBan(uint nProtocol, global::NWN.LowLevel.CExoString sAddress, int bBanPlayer)
        {
            if (ReferenceEquals(sAddress, null))
                throw new global::System.ArgumentNullException("sAddress", "Cannot be null because it is passed by value.");
            var __arg1 = sAddress.__Instance;
            var __ret = __Internal.SetNetworkAddressBan(__Instance, nProtocol, __arg1, bBanPlayer);
            return __ret;
        }

        public int AdmitPlayerName(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            var __ret = __Internal.AdmitPlayerName(__Instance, __arg0);
            return __ret;
        }

        public void PlayerListChange(uint nPlayerId, int bEnter, int bPrimaryPlayer)
        {
            __Internal.PlayerListChange(__Instance, nPlayerId, bEnter, bPrimaryPlayer);
        }

        public int GetIniFileName(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.GetIniFileName(__Instance, __arg0);
            return __ret;
        }

        public int HandleMessage(uint nPlayerId, byte* pData, uint dwSize, int bRawMessage)
        {
            var __ret = __Internal.HandleMessage(__Instance, nPlayerId, pData, dwSize, bRawMessage);
            return __ret;
        }

        public int Initialize()
        {
            var __ret = __Internal.Initialize(__Instance);
            return __ret;
        }

        public void LoadAliases()
        {
            __Internal.LoadAliases(__Instance);
        }

        public void OnCDChange()
        {
            __Internal.OnCDChange(__Instance);
        }

        public void OnExit()
        {
            __Internal.OnExit(__Instance);
        }

        public void OnGainFocus()
        {
            __Internal.OnGainFocus(__Instance);
        }

        public void OnLostFocus()
        {
            __Internal.OnLostFocus(__Instance);
        }

        public void OnVideoChange()
        {
            __Internal.OnVideoChange(__Instance);
        }

        public void StartServices()
        {
            __Internal.StartServices(__Instance);
        }

        public void StopServices()
        {
            __Internal.StopServices(__Instance);
        }

        public void Uninitialize()
        {
            __Internal.Uninitialize(__Instance);
        }

        public global::NWN.LowLevel.CExoAppInternal MPcExoAppInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoAppInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcExoAppInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcExoAppInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MainLoop
        {
            get
            {
                var __ret = __Internal.MainLoop(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
