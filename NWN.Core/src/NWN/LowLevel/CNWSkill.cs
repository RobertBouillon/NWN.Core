// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSkill : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nNameStrref;

            [FieldOffset(4)]
            internal int m_nDescriptionStrref;

            [FieldOffset(8)]
            internal int m_nTalentCategory;

            [FieldOffset(12)]
            internal int m_nTalentMaxCR;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sIconName;

            [FieldOffset(32)]
            internal int m_nKeyAbility;

            [FieldOffset(36)]
            internal int m_bHostileSkill;

            [FieldOffset(40)]
            internal int m_bUntrained;

            [FieldOffset(44)]
            internal int m_bArmorCheckPenalty;

            [FieldOffset(48)]
            internal int m_bAllClassesCanUse;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSkillC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSkillC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSkillD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSkill11GetNameTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetNameText(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CNWSkill18GetDescriptionTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetDescriptionText(__IntPtr @return, __IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSkill> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSkill>();

        protected bool __ownsNativeInstance;

        internal static CNWSkill __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSkill(native.ToPointer(), skipVTables);
        }

        internal static CNWSkill __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSkill)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSkill __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSkill(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSkill.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSkill(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSkill(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSkill()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSkill.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWSkill(global::NWN.LowLevel.CNWSkill _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSkill.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSkill __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int MNNameStrref
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNameStrref;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNameStrref = value;
            }
        }

        public int MNDescriptionStrref
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDescriptionStrref;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDescriptionStrref = value;
            }
        }

        public int MNTalentCategory
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTalentCategory;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTalentCategory = value;
            }
        }

        public int MNTalentMaxCR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTalentMaxCR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTalentMaxCR = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSIconName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sIconName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sIconName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNKeyAbility
        {
            get
            {
                return ((__Internal*)__Instance)->m_nKeyAbility;
            }

            set
            {
                ((__Internal*)__Instance)->m_nKeyAbility = value;
            }
        }

        public int MBHostileSkill
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHostileSkill;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHostileSkill = value;
            }
        }

        public int MBUntrained
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUntrained;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUntrained = value;
            }
        }

        public int MBArmorCheckPenalty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bArmorCheckPenalty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bArmorCheckPenalty = value;
            }
        }

        public int MBAllClassesCanUse
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllClassesCanUse;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllClassesCanUse = value;
            }
        }

        public global::NWN.LowLevel.CExoString NameText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetNameText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString DescriptionText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetDescriptionText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
