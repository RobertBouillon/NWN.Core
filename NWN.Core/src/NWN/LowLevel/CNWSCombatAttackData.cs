// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSCombatAttackData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 200)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte m_nAttackGroup;

            [FieldOffset(2)]
            internal ushort m_nAnimationLength;

            [FieldOffset(4)]
            internal uint m_oidReactObject;

            [FieldOffset(8)]
            internal ushort m_nReactionDelay;

            [FieldOffset(10)]
            internal ushort m_nReactionAnimation;

            [FieldOffset(12)]
            internal ushort m_nReactionAnimationLength;

            [FieldOffset(14)]
            internal byte m_nToHitRoll;

            [FieldOffset(15)]
            internal byte m_nThreatRoll;

            [FieldOffset(16)]
            internal int m_nToHitMod;

            [FieldOffset(20)]
            internal sbyte m_nMissedBy;

            [FieldOffset(22)]
            internal fixed short m_nDamage[13];

            [FieldOffset(48)]
            internal byte m_nWeaponAttackType;

            [FieldOffset(49)]
            internal byte m_nAttackMode;

            [FieldOffset(50)]
            internal byte m_nConcealment;

            [FieldOffset(52)]
            internal int m_bRangedAttack;

            [FieldOffset(56)]
            internal int m_bSneakAttack;

            [FieldOffset(60)]
            internal int m_bDeathAttack;

            [FieldOffset(64)]
            internal int m_bKillingBlow;

            [FieldOffset(68)]
            internal int m_bCoupDeGrace;

            [FieldOffset(72)]
            internal int m_bCriticalThreat;

            [FieldOffset(76)]
            internal int m_bAttackDeflected;

            [FieldOffset(80)]
            internal byte m_nAttackResult;

            [FieldOffset(82)]
            internal ushort m_nAttackType;

            [FieldOffset(84)]
            internal ushort m_nSpecialAttackID;

            [FieldOffset(88)]
            internal global::NWN.LowLevel.Vector.__Internal m_vRangedTarget;

            [FieldOffset(100)]
            internal uint m_oidAmmunition;

            [FieldOffset(104)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sAttackDebugText;

            [FieldOffset(120)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDamageDebugText;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_alstOnHitGameEffects;

            [FieldOffset(152)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_alstOnHitSpellScripts;

            [FieldOffset(168)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_alstOnHitEnemySpellScripts;

            [FieldOffset(184)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_alstPendingFeedback;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackDataC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackDataC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackDataD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData15ClearAttackDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAttackData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData4CopyEPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Copy(__IntPtr __instance, __IntPtr pData, int bCopyDebugInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData13SetBaseDamageEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetBaseDamage(__IntPtr __instance, int nDamage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData9SetDamageEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDamage(__IntPtr __instance, ushort nDamageType, int nDamage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData9AddDamageEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddDamage(__IntPtr __instance, ushort nDamageType, int nDamage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData9GetDamageEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDamage(__IntPtr __instance, ushort nDamageType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData14GetTotalDamageEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTotalDamage(__IntPtr __instance, int bBaseDamage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData8SaveDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNWSCombatAttackData8LoadDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCombatAttackData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCombatAttackData>();

        protected bool __ownsNativeInstance;

        internal static CNWSCombatAttackData __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSCombatAttackData(native.ToPointer(), skipVTables);
        }

        internal static CNWSCombatAttackData __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSCombatAttackData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSCombatAttackData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSCombatAttackData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSCombatAttackData.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSCombatAttackData(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSCombatAttackData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSCombatAttackData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCombatAttackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWSCombatAttackData(global::NWN.LowLevel.CNWSCombatAttackData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCombatAttackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSCombatAttackData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ClearAttackData()
        {
            __Internal.ClearAttackData(__Instance);
        }

        public void Copy(global::NWN.LowLevel.CNWSCombatAttackData pData, int bCopyDebugInfo)
        {
            var __arg0 = pData is null ? __IntPtr.Zero : pData.__Instance;
            __Internal.Copy(__Instance, __arg0, bCopyDebugInfo);
        }

        public void SetBaseDamage(int nDamage)
        {
            __Internal.SetBaseDamage(__Instance, nDamage);
        }

        public void SetDamage(ushort nDamageType, int nDamage)
        {
            __Internal.SetDamage(__Instance, nDamageType, nDamage);
        }

        public void AddDamage(ushort nDamageType, int nDamage)
        {
            __Internal.AddDamage(__Instance, nDamageType, nDamage);
        }

        public int GetDamage(ushort nDamageType)
        {
            var __ret = __Internal.GetDamage(__Instance, nDamageType);
            return __ret;
        }

        public int GetTotalDamage(int bBaseDamage)
        {
            var __ret = __Internal.GetTotalDamage(__Instance, bBaseDamage);
            return __ret;
        }

        public int SaveData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveData(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadData(__Instance, __arg0, __arg1);
            return __ret;
        }

        public byte MNAttackGroup
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackGroup;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackGroup = value;
            }
        }

        public ushort MNAnimationLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimationLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimationLength = value;
            }
        }

        public uint MOidReactObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidReactObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidReactObject = value;
            }
        }

        public ushort MNReactionDelay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReactionDelay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReactionDelay = value;
            }
        }

        public ushort MNReactionAnimation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReactionAnimation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReactionAnimation = value;
            }
        }

        public ushort MNReactionAnimationLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReactionAnimationLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReactionAnimationLength = value;
            }
        }

        public byte MNToHitRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nToHitRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nToHitRoll = value;
            }
        }

        public byte MNThreatRoll
        {
            get
            {
                return ((__Internal*)__Instance)->m_nThreatRoll;
            }

            set
            {
                ((__Internal*)__Instance)->m_nThreatRoll = value;
            }
        }

        public int MNToHitMod
        {
            get
            {
                return ((__Internal*)__Instance)->m_nToHitMod;
            }

            set
            {
                ((__Internal*)__Instance)->m_nToHitMod = value;
            }
        }

        public sbyte MNMissedBy
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMissedBy;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMissedBy = value;
            }
        }

        public short[] MNDamage
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<short>(((__Internal*)__Instance)->m_nDamage, 13);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 13; i++)
                        ((__Internal*)__Instance)->m_nDamage[i] = value[i];
                }
            }
        }

        public byte MNWeaponAttackType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWeaponAttackType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWeaponAttackType = value;
            }
        }

        public byte MNAttackMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackMode = value;
            }
        }

        public byte MNConcealment
        {
            get
            {
                return ((__Internal*)__Instance)->m_nConcealment;
            }

            set
            {
                ((__Internal*)__Instance)->m_nConcealment = value;
            }
        }

        public int MBRangedAttack
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRangedAttack;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRangedAttack = value;
            }
        }

        public int MBSneakAttack
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSneakAttack;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSneakAttack = value;
            }
        }

        public int MBDeathAttack
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDeathAttack;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDeathAttack = value;
            }
        }

        public int MBKillingBlow
        {
            get
            {
                return ((__Internal*)__Instance)->m_bKillingBlow;
            }

            set
            {
                ((__Internal*)__Instance)->m_bKillingBlow = value;
            }
        }

        public int MBCoupDeGrace
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCoupDeGrace;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCoupDeGrace = value;
            }
        }

        public int MBCriticalThreat
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCriticalThreat;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCriticalThreat = value;
            }
        }

        public int MBAttackDeflected
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAttackDeflected;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAttackDeflected = value;
            }
        }

        public byte MNAttackResult
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackResult;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackResult = value;
            }
        }

        public ushort MNAttackType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackType = value;
            }
        }

        public ushort MNSpecialAttackID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpecialAttackID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpecialAttackID = value;
            }
        }

        public global::NWN.LowLevel.Vector MVRangedTarget
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vRangedTarget));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vRangedTarget = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public uint MOidAmmunition
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAmmunition;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAmmunition = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSAttackDebugText
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sAttackDebugText));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sAttackDebugText = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSDamageDebugText
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDamageDebugText));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDamageDebugText = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameEffect> MAlstOnHitGameEffects
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameEffect>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_alstOnHitGameEffects));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_alstOnHitGameEffects = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSSpellScriptData> MAlstOnHitSpellScripts
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSSpellScriptData>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_alstOnHitSpellScripts));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_alstOnHitSpellScripts = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSSpellScriptData> MAlstOnHitEnemySpellScripts
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSSpellScriptData>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_alstOnHitEnemySpellScripts));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_alstOnHitEnemySpellScripts = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWCCMessageData> MAlstPendingFeedback
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWCCMessageData>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_alstPendingFeedback));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_alstPendingFeedback = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
