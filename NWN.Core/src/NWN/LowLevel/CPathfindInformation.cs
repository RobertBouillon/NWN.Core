// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CPathfindInformation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 592)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_bClientMoving;

            [FieldOffset(4)]
            internal float m_fPersonalSpace;

            [FieldOffset(8)]
            internal float m_fCreaturePersonalSpace;

            [FieldOffset(12)]
            internal float m_fHeight;

            [FieldOffset(16)]
            internal float m_fHitDistance;

            [FieldOffset(20)]
            internal int m_bUnsmoothedPath;

            [FieldOffset(24)]
            internal int m_bInterTileOnly;

            [FieldOffset(28)]
            internal int m_bGenerateClosestPointPath;

            [FieldOffset(32)]
            internal int m_nClientPathNumber;

            [FieldOffset(36)]
            internal uint m_oidSelf;

            [FieldOffset(40)]
            internal uint m_oidMovingTo;

            [FieldOffset(44)]
            internal int m_nCallsToPlotPath;

            [FieldOffset(48)]
            internal int m_bTempPoints;

            [FieldOffset(52)]
            internal float m_fTempPointEndX;

            [FieldOffset(56)]
            internal float m_fTempPointEndY;

            [FieldOffset(60)]
            internal float m_fTempPointEndZ;

            [FieldOffset(64)]
            internal float m_fTempPointTolerance;

            [FieldOffset(68)]
            internal uint m_oidTempPointEndArea;

            [FieldOffset(72)]
            internal int m_bNewPoints;

            [FieldOffset(76)]
            internal float m_fNewPointEndX;

            [FieldOffset(80)]
            internal float m_fNewPointEndY;

            [FieldOffset(84)]
            internal float m_fNewPointEndZ;

            [FieldOffset(88)]
            internal float m_fPointTolerance;

            [FieldOffset(92)]
            internal int m_nStepTolerance;

            [FieldOffset(96)]
            internal uint m_oidNewPointEndArea;

            [FieldOffset(100)]
            internal float m_fNewPointStartX;

            [FieldOffset(104)]
            internal float m_fNewPointStartY;

            [FieldOffset(108)]
            internal float m_fNewPointStartZ;

            [FieldOffset(112)]
            internal uint m_oidNewPointStartArea;

            [FieldOffset(116)]
            internal int m_bReversePoints;

            [FieldOffset(120)]
            internal int m_bFullComplete;

            [FieldOffset(124)]
            internal int m_nWayPoints;

            [FieldOffset(128)]
            internal __IntPtr m_pfWayPoints;

            [FieldOffset(136)]
            internal int m_nUnsmoothedWayPoints;

            [FieldOffset(144)]
            internal __IntPtr m_pfUnsmoothedWayPoints;

            [FieldOffset(152)]
            internal int m_nLocationOnList;

            [FieldOffset(156)]
            internal int m_bInterAreaPathResolved;

            [FieldOffset(160)]
            internal int m_bInterAreaPathInProgress;

            [FieldOffset(164)]
            internal int m_nInterAreas;

            [FieldOffset(168)]
            internal __IntPtr m_poidInterAreas;

            [FieldOffset(176)]
            internal __IntPtr m_poidInterAreaExits;

            [FieldOffset(184)]
            internal int m_nInterAreaDeniedTriggers;

            [FieldOffset(192)]
            internal __IntPtr m_poidInterAreaDeniedTriggerIds;

            [FieldOffset(200)]
            internal uint m_oidDeniedDoor;

            [FieldOffset(204)]
            internal int m_nInterTileDeniedExits;

            [FieldOffset(208)]
            internal __IntPtr m_pnInterTileDeniedExitTiles;

            [FieldOffset(216)]
            internal __IntPtr m_pnInterTileDeniedExitLocations;

            [FieldOffset(224)]
            internal int m_nTilesToBeExplored;

            [FieldOffset(232)]
            internal __IntPtr m_pnTilesToBeExplored;

            [FieldOffset(240)]
            internal __IntPtr m_pfTileExitsToBeExplored;

            [FieldOffset(248)]
            internal int m_bFirstTileSearching;

            [FieldOffset(252)]
            internal float m_fFirstTileFValue;

            [FieldOffset(256)]
            internal int m_bFirstTileFValueInProgress;

            [FieldOffset(260)]
            internal int m_nFirstTileFValueAlternativeSize;

            [FieldOffset(264)]
            internal __IntPtr m_pnFirstTileFValueCurrentAlternatives;

            [FieldOffset(272)]
            internal __IntPtr m_pnFirstTileFValueTotalAlternatives;

            [FieldOffset(280)]
            internal __IntPtr m_pcFirstTileFValueComputedAlternatives;

            [FieldOffset(288)]
            internal __IntPtr m_pcFirstTileHashTable;

            [FieldOffset(296)]
            internal int m_bWalkedPathCut;

            [FieldOffset(300)]
            internal int m_bWalkedPathCutArea;

            [FieldOffset(304)]
            internal byte m_nWalkedPathCutVerify;

            [FieldOffset(308)]
            internal int m_nWalkedPathCutPoints;

            [FieldOffset(312)]
            internal global::NWN.LowLevel.Vector.__Internal m_vWalkedPathCutNewLastPoint;

            [FieldOffset(324)]
            internal global::NWN.LowLevel.Vector.__Internal m_vWalkedPathCutNewLastOrientation;

            [FieldOffset(336)]
            internal int m_nGridStartLocationX;

            [FieldOffset(340)]
            internal int m_nGridStartLocationY;

            [FieldOffset(344)]
            internal int m_nGridStartLocationZ;

            [FieldOffset(348)]
            internal global::NWN.LowLevel.Vector2.__Internal m_vGridSearchZeroLocation;

            [FieldOffset(356)]
            internal global::NWN.LowLevel.Vector2.__Internal m_vGridSearchStepX;

            [FieldOffset(364)]
            internal global::NWN.LowLevel.Vector2.__Internal m_vGridSearchStepY;

            [FieldOffset(372)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridZeroLocation;

            [FieldOffset(384)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridStepX;

            [FieldOffset(396)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridStepY;

            [FieldOffset(408)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridStepZ;

            [FieldOffset(424)]
            internal __IntPtr m_pnGridStepsArray;

            [FieldOffset(432)]
            internal int m_nGridStepsTaken;

            [FieldOffset(436)]
            internal int m_nGridSearchLimit;

            [FieldOffset(440)]
            internal float m_fGridSearchObjectDistance;

            [FieldOffset(444)]
            internal int m_nGridSearchLastDistance;

            [FieldOffset(448)]
            internal __IntPtr m_pGridSearchLastTransTable;

            [FieldOffset(456)]
            internal global::NWN.LowLevel.Vector2.__Internal m_vGridSearchStartPoint;

            [FieldOffset(464)]
            internal global::NWN.LowLevel.Vector2.__Internal m_vGridSearchEndPoint;

            [FieldOffset(472)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridSearchLastStartPoint;

            [FieldOffset(484)]
            internal global::NWN.LowLevel.Vector.__Internal m_vGridSearchLastEndPoint;

            [FieldOffset(496)]
            internal int m_nPathToClosestPointSize;

            [FieldOffset(504)]
            internal __IntPtr m_pnPathToClosestPointArray;

            [FieldOffset(512)]
            internal int m_nPathToClosestPointDistance;

            [FieldOffset(516)]
            internal int m_bUsePlotGridPath;

            [FieldOffset(520)]
            internal int m_bWalkStraightLineOnly;

            [FieldOffset(524)]
            internal int m_nPlotPathInAreaResult;

            [FieldOffset(528)]
            internal byte m_nTileSearchedCount;

            [FieldOffset(536)]
            internal __IntPtr m_bGridPointsSearchedArray;

            [FieldOffset(544)]
            internal int m_nGridPointsSearchedOffsetX;

            [FieldOffset(548)]
            internal int m_nGridPointsSearchedOffsetY;

            [FieldOffset(552)]
            internal ulong m_nGridSearchTimerStart;

            [FieldOffset(560)]
            internal ulong m_nGridSearchTimeSlice;

            [FieldOffset(568)]
            internal __IntPtr m_pnGridSearchPathStepsArray;

            [FieldOffset(576)]
            internal int m_nGridSearchActivePaths;

            [FieldOffset(584)]
            internal __IntPtr m_nGridSearchPath;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformationC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformationC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformationD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation8ShutdownEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Shutdown(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation16ResetAtEndOfPathEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetAtEndOfPath(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation24ResetInterAreaSearchDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetInterAreaSearchData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation28ResetInterAreaPathSearchDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetInterAreaPathSearchData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation19ResetGridSearchDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetGridSearchData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation17ResetWayPointDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetWayPointData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation24ResetInterTileSearchDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetInterTileSearchData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation24ResetIntraTileSearchDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetIntraTileSearchData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation18FlipStartEndPointsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipStartEndPoints(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation17FlipTempEndPointsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlipTempEndPoints(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation30GetFirstTileFValueAlternativesEiPiS0_PP32CPathfindInfoIntraTileSuccessors", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetFirstTileFValueAlternatives(__IntPtr __instance, int level, int* nCurrentAlternative, int* nAlternatives, __IntPtr pSuccessors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation30SetFirstTileFValueAlternativesEiiiP32CPathfindInfoIntraTileSuccessors", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFirstTileFValueAlternatives(__IntPtr __instance, int level, int nCurrentAlternative, int nAlternatives, __IntPtr pSuccessors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation33CreateFirstTileFValueAlternativesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateFirstTileFValueAlternatives(__IntPtr __instance, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation33DeleteFirstTileFValueAlternativesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteFirstTileFValueAlternatives(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation20GetGridPointSearchedEii", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool GetGridPointSearched(__IntPtr __instance, int nX, int nY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation20SetGridPointSearchedEiib", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGridPointSearched(__IntPtr __instance, int nX, int nY, bool bSet);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation20CreateGridSearchPathEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CreateGridSearchPath(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation19AddToGridSearchPathEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToGridSearchPath(__IntPtr __instance, int nID, int nX, int nY, int nStepSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation21GetGridSearchPathInfoEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetGridSearchPathInfo(__IntPtr @return, __IntPtr __instance, int nID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation21SetGridSearchPathInfoEi17CNWGridSearchPath", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGridSearchPathInfo(__IntPtr __instance, int nID, global::NWN.LowLevel.CNWGridSearchPath.__Internal nGridSearch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation20ComputeStepToleranceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeStepTolerance(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation24GetGridSearchActivePathsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetGridSearchActivePaths(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CPathfindInformation24SetGridSearchActivePathsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGridSearchActivePaths(__IntPtr __instance, int nCount);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CPathfindInformation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CPathfindInformation>();

        protected bool __ownsNativeInstance;

        internal static CPathfindInformation __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CPathfindInformation(native.ToPointer(), skipVTables);
        }

        internal static CPathfindInformation __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CPathfindInformation)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CPathfindInformation __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CPathfindInformation(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CPathfindInformation(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CPathfindInformation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CPathfindInformation()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CPathfindInformation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CPathfindInformation(global::NWN.LowLevel.CPathfindInformation _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CPathfindInformation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CPathfindInformation.__Internal*) __Instance) = *((global::NWN.LowLevel.CPathfindInformation.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CPathfindInformation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Initialize()
        {
            __Internal.Initialize(__Instance);
        }

        public void Shutdown()
        {
            __Internal.Shutdown(__Instance);
        }

        public void ResetAtEndOfPath()
        {
            __Internal.ResetAtEndOfPath(__Instance);
        }

        public void ResetInterAreaSearchData()
        {
            __Internal.ResetInterAreaSearchData(__Instance);
        }

        public void ResetInterAreaPathSearchData()
        {
            __Internal.ResetInterAreaPathSearchData(__Instance);
        }

        public void ResetGridSearchData()
        {
            __Internal.ResetGridSearchData(__Instance);
        }

        public void ResetWayPointData()
        {
            __Internal.ResetWayPointData(__Instance);
        }

        public void ResetInterTileSearchData()
        {
            __Internal.ResetInterTileSearchData(__Instance);
        }

        public void ResetIntraTileSearchData()
        {
            __Internal.ResetIntraTileSearchData(__Instance);
        }

        public void FlipStartEndPoints()
        {
            __Internal.FlipStartEndPoints(__Instance);
        }

        public void FlipTempEndPoints()
        {
            __Internal.FlipTempEndPoints(__Instance);
        }

        public void GetFirstTileFValueAlternatives(int level, ref int nCurrentAlternative, ref int nAlternatives, global::NWN.LowLevel.CPathfindInfoIntraTileSuccessors pSuccessors)
        {
            fixed (int* __nCurrentAlternative1 = &nCurrentAlternative)
            {
                var __arg1 = __nCurrentAlternative1;
                fixed (int* __nAlternatives2 = &nAlternatives)
                {
                    var __arg2 = __nAlternatives2;
                    var ____arg3 = pSuccessors is null ? __IntPtr.Zero : pSuccessors.__Instance;
                    var __arg3 = new __IntPtr(&____arg3);
                    __Internal.GetFirstTileFValueAlternatives(__Instance, level, __arg1, __arg2, __arg3);
                }
            }
        }

        public void SetFirstTileFValueAlternatives(int level, int nCurrentAlternative, int nAlternatives, global::NWN.LowLevel.CPathfindInfoIntraTileSuccessors pSuccessors)
        {
            var __arg3 = pSuccessors is null ? __IntPtr.Zero : pSuccessors.__Instance;
            __Internal.SetFirstTileFValueAlternatives(__Instance, level, nCurrentAlternative, nAlternatives, __arg3);
        }

        public void CreateFirstTileFValueAlternatives(int nSize)
        {
            __Internal.CreateFirstTileFValueAlternatives(__Instance, nSize);
        }

        public void DeleteFirstTileFValueAlternatives()
        {
            __Internal.DeleteFirstTileFValueAlternatives(__Instance);
        }

        public bool GetGridPointSearched(int nX, int nY)
        {
            var __ret = __Internal.GetGridPointSearched(__Instance, nX, nY);
            return __ret;
        }

        public void SetGridPointSearched(int nX, int nY, bool bSet)
        {
            __Internal.SetGridPointSearched(__Instance, nX, nY, bSet);
        }

        public int CreateGridSearchPath()
        {
            var __ret = __Internal.CreateGridSearchPath(__Instance);
            return __ret;
        }

        public void AddToGridSearchPath(int nID, int nX, int nY, int nStepSize)
        {
            __Internal.AddToGridSearchPath(__Instance, nID, nX, nY, nStepSize);
        }

        public global::NWN.LowLevel.CNWGridSearchPath GetGridSearchPathInfo(int nID)
        {
            var __ret = new global::NWN.LowLevel.CNWGridSearchPath.__Internal();
            __Internal.GetGridSearchPathInfo(new IntPtr(&__ret), __Instance, nID);
            return global::NWN.LowLevel.CNWGridSearchPath.__CreateInstance(__ret);
        }

        public void SetGridSearchPathInfo(int nID, global::NWN.LowLevel.CNWGridSearchPath nGridSearch)
        {
            if (ReferenceEquals(nGridSearch, null))
                throw new global::System.ArgumentNullException("nGridSearch", "Cannot be null because it is passed by value.");
            var __arg1 = nGridSearch.__Instance;
            __Internal.SetGridSearchPathInfo(__Instance, nID, *(global::NWN.LowLevel.CNWGridSearchPath.__Internal*) __arg1);
        }

        public void ComputeStepTolerance()
        {
            __Internal.ComputeStepTolerance(__Instance);
        }

        public int MBClientMoving
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClientMoving;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClientMoving = value;
            }
        }

        public float MFPersonalSpace
        {
            get
            {
                return ((__Internal*)__Instance)->m_fPersonalSpace;
            }

            set
            {
                ((__Internal*)__Instance)->m_fPersonalSpace = value;
            }
        }

        public float MFCreaturePersonalSpace
        {
            get
            {
                return ((__Internal*)__Instance)->m_fCreaturePersonalSpace;
            }

            set
            {
                ((__Internal*)__Instance)->m_fCreaturePersonalSpace = value;
            }
        }

        public float MFHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_fHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_fHeight = value;
            }
        }

        public float MFHitDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fHitDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fHitDistance = value;
            }
        }

        public int MBUnsmoothedPath
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUnsmoothedPath;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUnsmoothedPath = value;
            }
        }

        public int MBInterTileOnly
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInterTileOnly;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInterTileOnly = value;
            }
        }

        public int MBGenerateClosestPointPath
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGenerateClosestPointPath;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGenerateClosestPointPath = value;
            }
        }

        public int MNClientPathNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClientPathNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClientPathNumber = value;
            }
        }

        public uint MOidSelf
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidSelf;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidSelf = value;
            }
        }

        public uint MOidMovingTo
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidMovingTo;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidMovingTo = value;
            }
        }

        public int MNCallsToPlotPath
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCallsToPlotPath;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCallsToPlotPath = value;
            }
        }

        public int MBTempPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTempPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTempPoints = value;
            }
        }

        public float MFTempPointEndX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fTempPointEndX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fTempPointEndX = value;
            }
        }

        public float MFTempPointEndY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fTempPointEndY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fTempPointEndY = value;
            }
        }

        public float MFTempPointEndZ
        {
            get
            {
                return ((__Internal*)__Instance)->m_fTempPointEndZ;
            }

            set
            {
                ((__Internal*)__Instance)->m_fTempPointEndZ = value;
            }
        }

        public float MFTempPointTolerance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fTempPointTolerance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fTempPointTolerance = value;
            }
        }

        public uint MOidTempPointEndArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidTempPointEndArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidTempPointEndArea = value;
            }
        }

        public int MBNewPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNewPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNewPoints = value;
            }
        }

        public float MFNewPointEndX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointEndX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointEndX = value;
            }
        }

        public float MFNewPointEndY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointEndY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointEndY = value;
            }
        }

        public float MFNewPointEndZ
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointEndZ;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointEndZ = value;
            }
        }

        public float MFPointTolerance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fPointTolerance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fPointTolerance = value;
            }
        }

        public int MNStepTolerance
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStepTolerance;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStepTolerance = value;
            }
        }

        public uint MOidNewPointEndArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidNewPointEndArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidNewPointEndArea = value;
            }
        }

        public float MFNewPointStartX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointStartX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointStartX = value;
            }
        }

        public float MFNewPointStartY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointStartY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointStartY = value;
            }
        }

        public float MFNewPointStartZ
        {
            get
            {
                return ((__Internal*)__Instance)->m_fNewPointStartZ;
            }

            set
            {
                ((__Internal*)__Instance)->m_fNewPointStartZ = value;
            }
        }

        public uint MOidNewPointStartArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidNewPointStartArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidNewPointStartArea = value;
            }
        }

        public int MBReversePoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_bReversePoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_bReversePoints = value;
            }
        }

        public int MBFullComplete
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFullComplete;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFullComplete = value;
            }
        }

        public int MNWayPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWayPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWayPoints = value;
            }
        }

        public float* MPfWayPoints
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfWayPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfWayPoints = (__IntPtr) value;
            }
        }

        public int MNUnsmoothedWayPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUnsmoothedWayPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUnsmoothedWayPoints = value;
            }
        }

        public float* MPfUnsmoothedWayPoints
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfUnsmoothedWayPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfUnsmoothedWayPoints = (__IntPtr) value;
            }
        }

        public int MNLocationOnList
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLocationOnList;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLocationOnList = value;
            }
        }

        public int MBInterAreaPathResolved
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInterAreaPathResolved;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInterAreaPathResolved = value;
            }
        }

        public int MBInterAreaPathInProgress
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInterAreaPathInProgress;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInterAreaPathInProgress = value;
            }
        }

        public int MNInterAreas
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterAreas;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterAreas = value;
            }
        }

        public uint* MPoidInterAreas
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidInterAreas;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidInterAreas = (__IntPtr) value;
            }
        }

        public uint* MPoidInterAreaExits
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidInterAreaExits;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidInterAreaExits = (__IntPtr) value;
            }
        }

        public int MNInterAreaDeniedTriggers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterAreaDeniedTriggers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterAreaDeniedTriggers = value;
            }
        }

        public uint* MPoidInterAreaDeniedTriggerIds
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidInterAreaDeniedTriggerIds;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidInterAreaDeniedTriggerIds = (__IntPtr) value;
            }
        }

        public uint MOidDeniedDoor
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidDeniedDoor;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidDeniedDoor = value;
            }
        }

        public int MNInterTileDeniedExits
        {
            get
            {
                return ((__Internal*)__Instance)->m_nInterTileDeniedExits;
            }

            set
            {
                ((__Internal*)__Instance)->m_nInterTileDeniedExits = value;
            }
        }

        public int* MPnInterTileDeniedExitTiles
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnInterTileDeniedExitTiles;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInterTileDeniedExitTiles = (__IntPtr) value;
            }
        }

        public int* MPnInterTileDeniedExitLocations
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnInterTileDeniedExitLocations;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnInterTileDeniedExitLocations = (__IntPtr) value;
            }
        }

        public int MNTilesToBeExplored
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTilesToBeExplored;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTilesToBeExplored = value;
            }
        }

        public int* MPnTilesToBeExplored
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTilesToBeExplored;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTilesToBeExplored = (__IntPtr) value;
            }
        }

        public float* MPfTileExitsToBeExplored
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfTileExitsToBeExplored;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfTileExitsToBeExplored = (__IntPtr) value;
            }
        }

        public int MBFirstTileSearching
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFirstTileSearching;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFirstTileSearching = value;
            }
        }

        public float MFFirstTileFValue
        {
            get
            {
                return ((__Internal*)__Instance)->m_fFirstTileFValue;
            }

            set
            {
                ((__Internal*)__Instance)->m_fFirstTileFValue = value;
            }
        }

        public int MBFirstTileFValueInProgress
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFirstTileFValueInProgress;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFirstTileFValueInProgress = value;
            }
        }

        public int MNFirstTileFValueAlternativeSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFirstTileFValueAlternativeSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFirstTileFValueAlternativeSize = value;
            }
        }

        public int* MPnFirstTileFValueCurrentAlternatives
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnFirstTileFValueCurrentAlternatives;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnFirstTileFValueCurrentAlternatives = (__IntPtr) value;
            }
        }

        public int* MPnFirstTileFValueTotalAlternatives
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnFirstTileFValueTotalAlternatives;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnFirstTileFValueTotalAlternatives = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CPathfindInfoIntraTileSuccessors MPcFirstTileFValueComputedAlternatives
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CPathfindInfoIntraTileSuccessors.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcFirstTileFValueComputedAlternatives, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_pcFirstTileFValueComputedAlternatives = new __IntPtr(&__value);
            }
        }

        public global::NWN.LowLevel.CNWTileSurfaceMeshHashTableEntry MPcFirstTileHashTable
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSurfaceMeshHashTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcFirstTileHashTable, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcFirstTileHashTable = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBWalkedPathCut
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWalkedPathCut;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWalkedPathCut = value;
            }
        }

        public int MBWalkedPathCutArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWalkedPathCutArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWalkedPathCutArea = value;
            }
        }

        public byte MNWalkedPathCutVerify
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWalkedPathCutVerify;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWalkedPathCutVerify = value;
            }
        }

        public int MNWalkedPathCutPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWalkedPathCutPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWalkedPathCutPoints = value;
            }
        }

        public global::NWN.LowLevel.Vector MVWalkedPathCutNewLastPoint
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vWalkedPathCutNewLastPoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vWalkedPathCutNewLastPoint = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVWalkedPathCutNewLastOrientation
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vWalkedPathCutNewLastOrientation));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vWalkedPathCutNewLastOrientation = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MNGridStartLocationX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridStartLocationX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridStartLocationX = value;
            }
        }

        public int MNGridStartLocationY
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridStartLocationY;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridStartLocationY = value;
            }
        }

        public int MNGridStartLocationZ
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridStartLocationZ;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridStartLocationZ = value;
            }
        }

        public global::NWN.LowLevel.Vector2 MVGridSearchZeroLocation
        {
            get
            {
                return global::NWN.LowLevel.Vector2.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchZeroLocation));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchZeroLocation = *(global::NWN.LowLevel.Vector2.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector2 MVGridSearchStepX
        {
            get
            {
                return global::NWN.LowLevel.Vector2.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchStepX));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchStepX = *(global::NWN.LowLevel.Vector2.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector2 MVGridSearchStepY
        {
            get
            {
                return global::NWN.LowLevel.Vector2.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchStepY));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchStepY = *(global::NWN.LowLevel.Vector2.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridZeroLocation
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridZeroLocation));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridZeroLocation = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridStepX
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridStepX));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridStepX = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridStepY
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridStepY));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridStepY = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridStepZ
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridStepZ));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridStepZ = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int* MPnGridStepsArray
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnGridStepsArray;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnGridStepsArray = (__IntPtr) value;
            }
        }

        public int MNGridStepsTaken
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridStepsTaken;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridStepsTaken = value;
            }
        }

        public int MNGridSearchLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridSearchLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchLimit = value;
            }
        }

        public float MFGridSearchObjectDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGridSearchObjectDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGridSearchObjectDistance = value;
            }
        }

        public int MNGridSearchLastDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridSearchLastDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchLastDistance = value;
            }
        }

        public __IntPtr MPGridSearchLastTransTable
        {
            get
            {
                return ((__Internal*)__Instance)->m_pGridSearchLastTransTable;
            }

            set
            {
                ((__Internal*)__Instance)->m_pGridSearchLastTransTable = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.Vector2 MVGridSearchStartPoint
        {
            get
            {
                return global::NWN.LowLevel.Vector2.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchStartPoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchStartPoint = *(global::NWN.LowLevel.Vector2.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector2 MVGridSearchEndPoint
        {
            get
            {
                return global::NWN.LowLevel.Vector2.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchEndPoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchEndPoint = *(global::NWN.LowLevel.Vector2.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridSearchLastStartPoint
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchLastStartPoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchLastStartPoint = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVGridSearchLastEndPoint
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vGridSearchLastEndPoint));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vGridSearchLastEndPoint = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MNPathToClosestPointSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPathToClosestPointSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPathToClosestPointSize = value;
            }
        }

        public int* MPnPathToClosestPointArray
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnPathToClosestPointArray;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnPathToClosestPointArray = (__IntPtr) value;
            }
        }

        public int MNPathToClosestPointDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPathToClosestPointDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPathToClosestPointDistance = value;
            }
        }

        public int MBUsePlotGridPath
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUsePlotGridPath;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUsePlotGridPath = value;
            }
        }

        public int MBWalkStraightLineOnly
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWalkStraightLineOnly;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWalkStraightLineOnly = value;
            }
        }

        public int MNPlotPathInAreaResult
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlotPathInAreaResult;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlotPathInAreaResult = value;
            }
        }

        public byte MNTileSearchedCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTileSearchedCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTileSearchedCount = value;
            }
        }

        public sbyte* MBGridPointsSearchedArray
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_bGridPointsSearchedArray;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGridPointsSearchedArray = (__IntPtr) value;
            }
        }

        public int MNGridPointsSearchedOffsetX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridPointsSearchedOffsetX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridPointsSearchedOffsetX = value;
            }
        }

        public int MNGridPointsSearchedOffsetY
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridPointsSearchedOffsetY;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridPointsSearchedOffsetY = value;
            }
        }

        public ulong MNGridSearchTimerStart
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridSearchTimerStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchTimerStart = value;
            }
        }

        public ulong MNGridSearchTimeSlice
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridSearchTimeSlice;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchTimeSlice = value;
            }
        }

        public int** MPnGridSearchPathStepsArray
        {
            get
            {
                return (int**) ((__Internal*)__Instance)->m_pnGridSearchPathStepsArray;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnGridSearchPathStepsArray = (__IntPtr) value;
            }
        }

        public int MNGridSearchActivePaths
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridSearchActivePaths;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchActivePaths = value;
            }
        }

        public global::NWN.LowLevel.CNWGridSearchPath MNGridSearchPath
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWGridSearchPath.__GetOrCreateInstance(((__Internal*)__Instance)->m_nGridSearchPath, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridSearchPath = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int GridSearchActivePaths
        {
            get
            {
                var __ret = __Internal.GetGridSearchActivePaths(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetGridSearchActivePaths(__Instance, value);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
