// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWArea : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 248)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWArea;

            [FieldOffset(8)]
            internal uint m_nFlags;

            [FieldOffset(12)]
            internal int m_nWidth;

            [FieldOffset(16)]
            internal int m_nHeight;

            [FieldOffset(20)]
            internal int m_nStaticObjects;

            [FieldOffset(24)]
            internal int m_nStaticObjectsFilled;

            [FieldOffset(32)]
            internal __IntPtr m_poidStaticObjectsObjectIds;

            [FieldOffset(40)]
            internal __IntPtr m_pnStaticObjectsTriangleStart;

            [FieldOffset(48)]
            internal __IntPtr m_pnStaticObjectsTriangleCount;

            [FieldOffset(56)]
            internal __IntPtr m_pnStaticObjectsVertexStart;

            [FieldOffset(64)]
            internal __IntPtr m_pnStaticObjectsVertexCount;

            [FieldOffset(72)]
            internal int m_nStaticObjectTriangleArraySize;

            [FieldOffset(76)]
            internal int m_nStaticObjectTriangles;

            [FieldOffset(80)]
            internal __IntPtr m_pnStaticObjectTriangles;

            [FieldOffset(88)]
            internal int m_nStaticObjectVertexArraySize;

            [FieldOffset(92)]
            internal int m_nStaticObjectVertices;

            [FieldOffset(96)]
            internal __IntPtr m_pvStaticObjectVertices;

            [FieldOffset(104)]
            internal __IntPtr m_pvStaticObjectBoundingBoxes;

            [FieldOffset(112)]
            internal int m_nStaticBoundingBoxes;

            [FieldOffset(116)]
            internal int m_nStaticBoundingBoxesFilled;

            [FieldOffset(120)]
            internal __IntPtr m_pvStaticBoundingBoxes;

            [FieldOffset(128)]
            internal __IntPtr m_poidStaticBBObjectIds;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.Vector.__Internal m_vFogColor;

            [FieldOffset(148)]
            internal byte m_nFogValue;

            [FieldOffset(152)]
            internal uint m_nMoonAmbientColor;

            [FieldOffset(156)]
            internal uint m_nMoonDiffuseColor;

            [FieldOffset(160)]
            internal uint m_nMoonFogColor;

            [FieldOffset(164)]
            internal byte m_nMoonFogAmount;

            [FieldOffset(168)]
            internal int m_bMoonShadows;

            [FieldOffset(172)]
            internal uint m_nSunAmbientColor;

            [FieldOffset(176)]
            internal uint m_nSunDiffuseColor;

            [FieldOffset(180)]
            internal uint m_nSunFogColor;

            [FieldOffset(184)]
            internal byte m_nSunFogAmount;

            [FieldOffset(188)]
            internal int m_bSunShadows;

            [FieldOffset(192)]
            internal int m_bUseDayNightCycle;

            [FieldOffset(196)]
            internal int m_bIsNight;

            [FieldOffset(200)]
            internal byte m_nSkyBox;

            [FieldOffset(201)]
            internal byte m_nChanceOfRain;

            [FieldOffset(202)]
            internal byte m_nChanceOfSnow;

            [FieldOffset(203)]
            internal byte m_nChanceOfLightning;

            [FieldOffset(204)]
            internal byte m_nWindAmount;

            [FieldOffset(208)]
            internal global::NWN.LowLevel.Vector.__Internal m_vWindDirection;

            [FieldOffset(220)]
            internal float m_fWindMagnitude;

            [FieldOffset(224)]
            internal float m_fWindYaw;

            [FieldOffset(228)]
            internal float m_fWindPitch;

            [FieldOffset(232)]
            internal int m_bNoRestingAllowed;

            [FieldOffset(236)]
            internal byte m_nShadowOpacity;

            [FieldOffset(240)]
            internal float m_fFogClipDistance;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWAreaC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWAreaC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea15AddStaticObjectEjRK6VectorS2_iPS0_iPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddStaticObject(__IntPtr __instance, uint oidObject, __IntPtr vOrientation, __IntPtr vPosition, int nVertices, __IntPtr pvVertices, int nTriangles, int* pnTriangles);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea19ReplaceStaticObjectEijRK6VectorS2_iPS0_iPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReplaceStaticObject(__IntPtr __instance, int nObjectPosition, uint oidObject, __IntPtr vOrientation, __IntPtr vPosition, int nVertices, __IntPtr pvVertices, int nTriangles, int* pnTriangles);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea20AddStaticBoundingBoxEjRK6VectorS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddStaticBoundingBox(__IntPtr __instance, uint oidObject, __IntPtr vMinimum, __IntPtr vMaximum);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea23RemoveStaticBoundingBoxEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveStaticBoundingBox(__IntPtr __instance, uint oidObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea21GrowStaticObjectArrayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GrowStaticObjectArray(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea24GrowStaticObjectVerticesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GrowStaticObjectVertices(__IntPtr __instance, int nNewVertices);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea25GrowStaticObjectTrianglesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GrowStaticObjectTriangles(__IntPtr __instance, int nNewTriangles);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea23InitializeStaticObjectsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeStaticObjects(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea21IntersectLineSegmentsEffffffffPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntersectLineSegments(__IntPtr __instance, float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fX4, float fY4, float* fXIntersect, float* fYIntersect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea14NoNonWalkPolysEfffffffj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NoNonWalkPolys(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea22NoNonWalkPolysDetailedEfffffffjRjiP13CExoArrayListIP11CGameObjectEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NoNonWalkPolysDetailed(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, __IntPtr pExcludeList, int bIgnoreTransDoors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea21NoNonWalkPolysInDoorsEfffffffjRjiP13CExoArrayListIP11CGameObjectEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NoNonWalkPolysInDoors(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, __IntPtr pExcludeList, int bIgnoreTransDoors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea18RemoveStaticObjectEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveStaticObject(__IntPtr __instance, int nObjectIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea6GetFogEPiP6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetFog(__IntPtr __instance, int* pFogValue, __IntPtr pColor);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea13SetCustomWindE6Vectorfff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCustomWind(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vDirection, float fMagnitude, float fYaw, float fPitch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWArea10GetIsNightEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsNight(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWArea> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWArea>();

        protected bool __ownsNativeInstance;

        internal static CNWArea __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWArea(native.ToPointer(), skipVTables);
        }

        internal static CNWArea __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWArea)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWArea __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWArea)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWArea __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWArea(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWArea.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWArea(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWArea(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWArea()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWArea");
        }

        public CNWArea(global::NWN.LowLevel.CNWArea _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWArea.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWArea");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWArea __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWArea.__Internal*) __Instance)->vptr_CNWArea = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AddStaticObject(uint oidObject, global::NWN.LowLevel.Vector vOrientation, global::NWN.LowLevel.Vector vPosition, int nVertices, global::NWN.LowLevel.Vector pvVertices, int nTriangles, ref int pnTriangles)
        {
            if (ReferenceEquals(vOrientation, null))
                throw new global::System.ArgumentNullException("vOrientation", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vOrientation.__Instance;
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vPosition.__Instance;
            var __arg4 = pvVertices is null ? __IntPtr.Zero : pvVertices.__Instance;
            fixed (int* __pnTriangles6 = &pnTriangles)
            {
                var __arg6 = __pnTriangles6;
                var __ret = __Internal.AddStaticObject(__Instance, oidObject, __arg1, __arg2, nVertices, __arg4, nTriangles, __arg6);
                return __ret;
            }
        }

        public void ReplaceStaticObject(int nObjectPosition, uint oidObject, global::NWN.LowLevel.Vector vOrientation, global::NWN.LowLevel.Vector vPosition, int nVertices, global::NWN.LowLevel.Vector pvVertices, int nTriangles, ref int pnTriangles)
        {
            if (ReferenceEquals(vOrientation, null))
                throw new global::System.ArgumentNullException("vOrientation", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vOrientation.__Instance;
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = vPosition.__Instance;
            var __arg5 = pvVertices is null ? __IntPtr.Zero : pvVertices.__Instance;
            fixed (int* __pnTriangles7 = &pnTriangles)
            {
                var __arg7 = __pnTriangles7;
                __Internal.ReplaceStaticObject(__Instance, nObjectPosition, oidObject, __arg2, __arg3, nVertices, __arg5, nTriangles, __arg7);
            }
        }

        public int AddStaticBoundingBox(uint oidObject, global::NWN.LowLevel.Vector vMinimum, global::NWN.LowLevel.Vector vMaximum)
        {
            if (ReferenceEquals(vMinimum, null))
                throw new global::System.ArgumentNullException("vMinimum", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = vMinimum.__Instance;
            if (ReferenceEquals(vMaximum, null))
                throw new global::System.ArgumentNullException("vMaximum", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vMaximum.__Instance;
            var __ret = __Internal.AddStaticBoundingBox(__Instance, oidObject, __arg1, __arg2);
            return __ret;
        }

        public int RemoveStaticBoundingBox(uint oidObject)
        {
            var __ret = __Internal.RemoveStaticBoundingBox(__Instance, oidObject);
            return __ret;
        }

        public virtual int NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, ref uint poidBlockingCreature, int bEvaluateOverlappingTarget)
        {
            var ___NoCreaturesOnLineDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float___IntPtr_int_int_uintPtr_int>(0, 2);
            var __arg4 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            fixed (uint* __poidBlockingCreature7 = &poidBlockingCreature)
            {
                var __arg7 = __poidBlockingCreature7;
                var __ret = ___NoCreaturesOnLineDelegate(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, __arg4, bCheckSourceOccluded, bIgnoreAssociates, __arg7, bEvaluateOverlappingTarget);
                return __ret;
            }
        }

        public void GrowStaticObjectArray()
        {
            __Internal.GrowStaticObjectArray(__Instance);
        }

        public void GrowStaticObjectVertices(int nNewVertices)
        {
            __Internal.GrowStaticObjectVertices(__Instance, nNewVertices);
        }

        public void GrowStaticObjectTriangles(int nNewTriangles)
        {
            __Internal.GrowStaticObjectTriangles(__Instance, nNewTriangles);
        }

        public void InitializeStaticObjects()
        {
            __Internal.InitializeStaticObjects(__Instance);
        }

        public int IntersectLineSegments(float fX1, float fY1, float fX2, float fY2, float fX3, float fY3, float fX4, float fY4, ref float fXIntersect, ref float fYIntersect)
        {
            fixed (float* __fXIntersect8 = &fXIntersect)
            {
                var __arg8 = __fXIntersect8;
                fixed (float* __fYIntersect9 = &fYIntersect)
                {
                    var __arg9 = __fYIntersect9;
                    var __ret = __Internal.IntersectLineSegments(__Instance, fX1, fY1, fX2, fY2, fX3, fY3, fX4, fY4, __arg8, __arg9);
                    return __ret;
                }
            }
        }

        public int NoNonWalkPolys(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor)
        {
            var __ret = __Internal.NoNonWalkPolys(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor);
            return __ret;
        }

        public int NoNonWalkPolysDetailed(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, ref uint oidBlockingDoor, int bWalking, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList, int bIgnoreTransDoors)
        {
            fixed (uint* __oidBlockingDoor8 = &oidBlockingDoor)
            {
                var __arg8 = __oidBlockingDoor8;
                var __arg10 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
                var __ret = __Internal.NoNonWalkPolysDetailed(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, __arg8, bWalking, __arg10, bIgnoreTransDoors);
                return __ret;
            }
        }

        public int NoNonWalkPolysInDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, ref uint oidBlockingDoor, int bWalking, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList, int bIgnoreTransDoors)
        {
            fixed (uint* __oidBlockingDoor8 = &oidBlockingDoor)
            {
                var __arg8 = __oidBlockingDoor8;
                var __arg10 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
                var __ret = __Internal.NoNonWalkPolysInDoors(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, __arg8, bWalking, __arg10, bIgnoreTransDoors);
                return __ret;
            }
        }

        public virtual int HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, ref uint oidBlockingDoor, int bWalking, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList, int bIgnoreTransDoors)
        {
            var ___HandleTransparentDoorsDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float_float_float_float_uint_uintPtr_int___IntPtr_int>(0, 3);
            fixed (uint* __oidBlockingDoor8 = &oidBlockingDoor)
            {
                var __arg8 = __oidBlockingDoor8;
                var __arg10 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
                var __ret = ___HandleTransparentDoorsDelegate(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, __arg8, bWalking, __arg10, bIgnoreTransDoors);
                return __ret;
            }
        }

        public virtual int GetIsIDInExcludeList(uint oidID, global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject> pExcludeList)
        {
            var ___GetIsIDInExcludeListDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr>(0, 4);
            var __arg1 = pExcludeList is null ? __IntPtr.Zero : pExcludeList.__Instance;
            var __ret = ___GetIsIDInExcludeListDelegate(__Instance, oidID, __arg1);
            return __ret;
        }

        public virtual int NoNoneWalkPolysInStaticObject(uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking)
        {
            var ___NoNoneWalkPolysInStaticObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint_float_float_float_float_float_float_float_uint_int>(0, 5);
            var __ret = ___NoNoneWalkPolysInStaticObjectDelegate(__Instance, oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
            return __ret;
        }

        public void RemoveStaticObject(int nObjectIndex)
        {
            __Internal.RemoveStaticObject(__Instance, nObjectIndex);
        }

        public void GetFog(ref int pFogValue, global::NWN.LowLevel.Vector pColor)
        {
            fixed (int* __pFogValue0 = &pFogValue)
            {
                var __arg0 = __pFogValue0;
                var __arg1 = pColor is null ? __IntPtr.Zero : pColor.__Instance;
                __Internal.GetFog(__Instance, __arg0, __arg1);
            }
        }

        public virtual int SetFog(int nFogValue, global::NWN.LowLevel.Vector vColor)
        {
            var ___SetFogDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_NWN_LowLevel_Vector___Internal>(0, 6);
            if (ReferenceEquals(vColor, null))
                throw new global::System.ArgumentNullException("vColor", "Cannot be null because it is passed by value.");
            var __arg1 = vColor.__Instance;
            var __ret = ___SetFogDelegate(__Instance, nFogValue, *(global::NWN.LowLevel.Vector.__Internal*) __arg1);
            return __ret;
        }

        public virtual int SetIsNight(int bIsNight)
        {
            var ___SetIsNightDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int>(0, 7);
            var __ret = ___SetIsNightDelegate(__Instance, bIsNight);
            return __ret;
        }

        public virtual int SetWind(byte nAmount)
        {
            var ___SetWindDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_byte>(0, 8);
            var __ret = ___SetWindDelegate(__Instance, nAmount);
            return __ret;
        }

        public void SetCustomWind(global::NWN.LowLevel.Vector vDirection, float fMagnitude, float fYaw, float fPitch)
        {
            if (ReferenceEquals(vDirection, null))
                throw new global::System.ArgumentNullException("vDirection", "Cannot be null because it is passed by value.");
            var __arg0 = vDirection.__Instance;
            __Internal.SetCustomWind(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, fMagnitude, fYaw, fPitch);
        }

        public uint MNFlags
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFlags;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFlags = value;
            }
        }

        public int MNWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWidth = value;
            }
        }

        public int MNHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHeight = value;
            }
        }

        public int MNStaticObjects
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjects;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjects = value;
            }
        }

        public int MNStaticObjectsFilled
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectsFilled;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectsFilled = value;
            }
        }

        public uint* MPoidStaticObjectsObjectIds
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidStaticObjectsObjectIds;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidStaticObjectsObjectIds = (__IntPtr) value;
            }
        }

        public int* MPnStaticObjectsTriangleStart
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnStaticObjectsTriangleStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnStaticObjectsTriangleStart = (__IntPtr) value;
            }
        }

        public int* MPnStaticObjectsTriangleCount
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnStaticObjectsTriangleCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnStaticObjectsTriangleCount = (__IntPtr) value;
            }
        }

        public int* MPnStaticObjectsVertexStart
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnStaticObjectsVertexStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnStaticObjectsVertexStart = (__IntPtr) value;
            }
        }

        public int* MPnStaticObjectsVertexCount
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnStaticObjectsVertexCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnStaticObjectsVertexCount = (__IntPtr) value;
            }
        }

        public int MNStaticObjectTriangleArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectTriangleArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectTriangleArraySize = value;
            }
        }

        public int MNStaticObjectTriangles
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectTriangles = value;
            }
        }

        public int* MPnStaticObjectTriangles
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnStaticObjectTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnStaticObjectTriangles = (__IntPtr) value;
            }
        }

        public int MNStaticObjectVertexArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectVertexArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectVertexArraySize = value;
            }
        }

        public int MNStaticObjectVertices
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectVertices;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectVertices = value;
            }
        }

        public global::NWN.LowLevel.Vector MPvStaticObjectVertices
        {
            get
            {
                var __result0 = global::NWN.LowLevel.Vector.__GetOrCreateInstance(((__Internal*)__Instance)->m_pvStaticObjectVertices, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pvStaticObjectVertices = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MPvStaticObjectBoundingBoxes
        {
            get
            {
                var __result0 = global::NWN.LowLevel.Vector.__GetOrCreateInstance(((__Internal*)__Instance)->m_pvStaticObjectBoundingBoxes, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pvStaticObjectBoundingBoxes = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNStaticBoundingBoxes
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticBoundingBoxes;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticBoundingBoxes = value;
            }
        }

        public int MNStaticBoundingBoxesFilled
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticBoundingBoxesFilled;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticBoundingBoxesFilled = value;
            }
        }

        public global::NWN.LowLevel.Vector MPvStaticBoundingBoxes
        {
            get
            {
                var __result0 = global::NWN.LowLevel.Vector.__GetOrCreateInstance(((__Internal*)__Instance)->m_pvStaticBoundingBoxes, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pvStaticBoundingBoxes = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint* MPoidStaticBBObjectIds
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_poidStaticBBObjectIds;
            }

            set
            {
                ((__Internal*)__Instance)->m_poidStaticBBObjectIds = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.Vector MVFogColor
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vFogColor));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vFogColor = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public byte MNFogValue
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFogValue;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFogValue = value;
            }
        }

        public uint MNMoonAmbientColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMoonAmbientColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMoonAmbientColor = value;
            }
        }

        public uint MNMoonDiffuseColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMoonDiffuseColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMoonDiffuseColor = value;
            }
        }

        public uint MNMoonFogColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMoonFogColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMoonFogColor = value;
            }
        }

        public byte MNMoonFogAmount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMoonFogAmount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMoonFogAmount = value;
            }
        }

        public int MBMoonShadows
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMoonShadows;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMoonShadows = value;
            }
        }

        public uint MNSunAmbientColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSunAmbientColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSunAmbientColor = value;
            }
        }

        public uint MNSunDiffuseColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSunDiffuseColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSunDiffuseColor = value;
            }
        }

        public uint MNSunFogColor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSunFogColor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSunFogColor = value;
            }
        }

        public byte MNSunFogAmount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSunFogAmount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSunFogAmount = value;
            }
        }

        public int MBSunShadows
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSunShadows;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSunShadows = value;
            }
        }

        public int MBUseDayNightCycle
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUseDayNightCycle;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUseDayNightCycle = value;
            }
        }

        public int MBIsNight
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsNight;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsNight = value;
            }
        }

        public byte MNSkyBox
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSkyBox;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSkyBox = value;
            }
        }

        public byte MNChanceOfRain
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChanceOfRain;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChanceOfRain = value;
            }
        }

        public byte MNChanceOfSnow
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChanceOfSnow;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChanceOfSnow = value;
            }
        }

        public byte MNChanceOfLightning
        {
            get
            {
                return ((__Internal*)__Instance)->m_nChanceOfLightning;
            }

            set
            {
                ((__Internal*)__Instance)->m_nChanceOfLightning = value;
            }
        }

        public byte MNWindAmount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWindAmount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWindAmount = value;
            }
        }

        public global::NWN.LowLevel.Vector MVWindDirection
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vWindDirection));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vWindDirection = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public float MFWindMagnitude
        {
            get
            {
                return ((__Internal*)__Instance)->m_fWindMagnitude;
            }

            set
            {
                ((__Internal*)__Instance)->m_fWindMagnitude = value;
            }
        }

        public float MFWindYaw
        {
            get
            {
                return ((__Internal*)__Instance)->m_fWindYaw;
            }

            set
            {
                ((__Internal*)__Instance)->m_fWindYaw = value;
            }
        }

        public float MFWindPitch
        {
            get
            {
                return ((__Internal*)__Instance)->m_fWindPitch;
            }

            set
            {
                ((__Internal*)__Instance)->m_fWindPitch = value;
            }
        }

        public int MBNoRestingAllowed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNoRestingAllowed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNoRestingAllowed = value;
            }
        }

        public byte MNShadowOpacity
        {
            get
            {
                return ((__Internal*)__Instance)->m_nShadowOpacity;
            }

            set
            {
                ((__Internal*)__Instance)->m_nShadowOpacity = value;
            }
        }

        public float MFFogClipDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fFogClipDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fFogClipDistance = value;
            }
        }

        public int IsNight
        {
            get
            {
                var __ret = __Internal.GetIsNight(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CNWArea()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // BOOL NoCreaturesOnLine(float fSourceX, float fSourceY, float fTargetX, float fTargetY, CPathfindInformation * pPathfindInfo, BOOL bCheckSourceOccluded = true, BOOL bIgnoreAssociates = false, OBJECT_ID * poidBlockingCreature = nullptr, BOOL bEvaluateOverlappingTarget = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float___IntPtr_int_int_uintPtr_int _NoCreaturesOnLineDelegateInstance;

        private static int _NoCreaturesOnLineDelegateHook(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, __IntPtr pPathfindInfo, int bCheckSourceOccluded, int bIgnoreAssociates, uint* poidBlockingCreature, int bEvaluateOverlappingTarget)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            var __result4 = global::NWN.LowLevel.CPathfindInformation.__GetOrCreateInstance(pPathfindInfo, false);
            return __target.NoCreaturesOnLine(fSourceX, fSourceY, fTargetX, fTargetY, __result4, bCheckSourceOccluded, bIgnoreAssociates, ref *poidBlockingCreature, bEvaluateOverlappingTarget);
        }

        // BOOL HandleTransparentDoors(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, OBJECT_ID oidDeniedDoor, OBJECT_ID & oidBlockingDoor, BOOL bWalking, CExoArrayList<CGameObject *> * pExcludeList = nullptr, BOOL bIgnoreTransDoors = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_float_float_float_float_float_float_float_uint_uintPtr_int___IntPtr_int _HandleTransparentDoorsDelegateInstance;

        private static int _HandleTransparentDoorsDelegateHook(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, uint* oidBlockingDoor, int bWalking, __IntPtr pExcludeList, int bIgnoreTransDoors)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            var __result10 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject>.__GetOrCreateInstance(pExcludeList, false);
            return __target.HandleTransparentDoors(fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, ref *oidBlockingDoor, bWalking, __result10, bIgnoreTransDoors);
        }

        // BOOL GetIsIDInExcludeList(OBJECT_ID oidID, CExoArrayList<CGameObject *> * pExcludeList = nullptr)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr _GetIsIDInExcludeListDelegateInstance;

        private static int _GetIsIDInExcludeListDelegateHook(__IntPtr __instance, uint oidID, __IntPtr pExcludeList)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            var __result1 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CGameObject>.__GetOrCreateInstance(pExcludeList, false);
            return __target.GetIsIDInExcludeList(oidID, __result1);
        }

        // BOOL NoNoneWalkPolysInStaticObject(OBJECT_ID oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, OBJECT_ID oidDeniedDoor, BOOL bWalking = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint_float_float_float_float_float_float_float_uint_int _NoNoneWalkPolysInStaticObjectDelegateInstance;

        private static int _NoNoneWalkPolysInStaticObjectDelegateHook(__IntPtr __instance, uint oidObject, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, uint oidDeniedDoor, int bWalking)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            return __target.NoNoneWalkPolysInStaticObject(oidObject, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, oidDeniedDoor, bWalking);
        }

        // BOOL SetFog(int32_t nFogValue, Vector vColor)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_NWN_LowLevel_Vector___Internal _SetFogDelegateInstance;

        private static int _SetFogDelegateHook(__IntPtr __instance, int nFogValue, global::NWN.LowLevel.Vector.__Internal vColor)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            return __target.SetFog(nFogValue, global::NWN.LowLevel.Vector.__CreateInstance(vColor));
        }

        // BOOL SetIsNight(BOOL bIsNight)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int _SetIsNightDelegateInstance;

        private static int _SetIsNightDelegateHook(__IntPtr __instance, int bIsNight)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            return __target.SetIsNight(bIsNight);
        }

        // BOOL SetWind(uint8_t nAmount)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_byte _SetWindDelegateInstance;

        private static int _SetWindDelegateHook(__IntPtr __instance, byte nAmount)
        {
            var __target = global::NWN.LowLevel.CNWArea.__GetInstance(__instance);
            return __target.SetWind(nAmount);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[8];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _NoCreaturesOnLineDelegateInstance += _NoCreaturesOnLineDelegateHook;
                _HandleTransparentDoorsDelegateInstance += _HandleTransparentDoorsDelegateHook;
                _GetIsIDInExcludeListDelegateInstance += _GetIsIDInExcludeListDelegateHook;
                _NoNoneWalkPolysInStaticObjectDelegateInstance += _NoNoneWalkPolysInStaticObjectDelegateHook;
                _SetFogDelegateInstance += _SetFogDelegateHook;
                _SetIsNightDelegateInstance += _SetIsNightDelegateHook;
                _SetWindDelegateInstance += _SetWindDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_NoCreaturesOnLineDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_HandleTransparentDoorsDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_GetIsIDInExcludeListDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_NoNoneWalkPolysInStaticObjectDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetFogDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_SetIsNightDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_SetWindDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 11);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 11);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            VTables.Methods[0] = new Delegate[11];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
