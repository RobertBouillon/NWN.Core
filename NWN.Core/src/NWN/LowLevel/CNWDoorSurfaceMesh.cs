// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWDoorSurfaceMesh : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 232)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CResHelper;

            [FieldOffset(8)]
            internal int m_bAutoRequest;

            [FieldOffset(16)]
            internal __IntPtr m_pRes;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cResRef;

            [FieldOffset(56)]
            internal fixed int m_pnVertices[3];

            [FieldOffset(72)]
            internal __IntPtr m_ppfVertices;

            [FieldOffset(96)]
            internal fixed int m_pnTriangles[3];

            [FieldOffset(112)]
            internal __IntPtr m_ppnTriangles;

            [FieldOffset(136)]
            internal __IntPtr m_ppnTriangleMaterial;

            [FieldOffset(160)]
            internal fixed byte m_pvOpenLocations[6];

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMeshC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMeshC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMesh18LoadWalkMeshStringEPPhPjS0_j", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadWalkMeshString(__IntPtr __instance, byte** pInput, uint* nInputSize, byte* pchBuffer, uint nBufferSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMesh12LoadWalkMeshE7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadWalkMesh(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cWalkMesh);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMesh27NoNonWalkPolysOnSurfaceMeshEifffffff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NoNonWalkPolysOnSurfaceMesh(__IntPtr __instance, int nDoorState, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMesh21IntersectLineSegmentsE6VectorS0_S0_S0_PS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntersectLineSegments(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal v1, global::NWN.LowLevel.Vector.__Internal v2, global::NWN.LowLevel.Vector.__Internal v3, global::NWN.LowLevel.Vector.__Internal v4, __IntPtr vIntersect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWDoorSurfaceMesh18GetMeshBoundingBoxE6VectorS0_RS0_S1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMeshBoundingBox(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition, global::NWN.LowLevel.Vector.__Internal vOrientation, __IntPtr vMin, __IntPtr vMax);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWDoorSurfaceMesh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWDoorSurfaceMesh>();

        protected bool __ownsNativeInstance;

        internal static CNWDoorSurfaceMesh __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWDoorSurfaceMesh(native.ToPointer(), skipVTables);
        }

        internal static CNWDoorSurfaceMesh __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWDoorSurfaceMesh)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWDoorSurfaceMesh __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWDoorSurfaceMesh)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWDoorSurfaceMesh __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWDoorSurfaceMesh(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWDoorSurfaceMesh.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWDoorSurfaceMesh(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWDoorSurfaceMesh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWDoorSurfaceMesh()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWDoorSurfaceMesh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWDoorSurfaceMesh");
        }

        public CNWDoorSurfaceMesh(global::NWN.LowLevel.CNWDoorSurfaceMesh _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWDoorSurfaceMesh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWDoorSurfaceMesh");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWDoorSurfaceMesh __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWDoorSurfaceMesh.__Internal*) __Instance)->vptr_CResHelper = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int LoadWalkMeshString(byte** pInput, ref uint nInputSize, byte* pchBuffer, uint nBufferSize)
        {
            fixed (uint* __nInputSize1 = &nInputSize)
            {
                var __arg1 = __nInputSize1;
                var __ret = __Internal.LoadWalkMeshString(__Instance, pInput, __arg1, pchBuffer, nBufferSize);
                return __ret;
            }
        }

        public int LoadWalkMesh(global::NWN.LowLevel.CResRef cWalkMesh)
        {
            if (ReferenceEquals(cWalkMesh, null))
                throw new global::System.ArgumentNullException("cWalkMesh", "Cannot be null because it is passed by value.");
            var __arg0 = cWalkMesh.__Instance;
            var __ret = __Internal.LoadWalkMesh(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0);
            return __ret;
        }

        public int NoNonWalkPolysOnSurfaceMesh(int nDoorState, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace)
        {
            var __ret = __Internal.NoNonWalkPolysOnSurfaceMesh(__Instance, nDoorState, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace);
            return __ret;
        }

        public int IntersectLineSegments(global::NWN.LowLevel.Vector v1, global::NWN.LowLevel.Vector v2, global::NWN.LowLevel.Vector v3, global::NWN.LowLevel.Vector v4, global::NWN.LowLevel.Vector vIntersect)
        {
            if (ReferenceEquals(v1, null))
                throw new global::System.ArgumentNullException("v1", "Cannot be null because it is passed by value.");
            var __arg0 = v1.__Instance;
            if (ReferenceEquals(v2, null))
                throw new global::System.ArgumentNullException("v2", "Cannot be null because it is passed by value.");
            var __arg1 = v2.__Instance;
            if (ReferenceEquals(v3, null))
                throw new global::System.ArgumentNullException("v3", "Cannot be null because it is passed by value.");
            var __arg2 = v3.__Instance;
            if (ReferenceEquals(v4, null))
                throw new global::System.ArgumentNullException("v4", "Cannot be null because it is passed by value.");
            var __arg3 = v4.__Instance;
            var __arg4 = vIntersect is null ? __IntPtr.Zero : vIntersect.__Instance;
            var __ret = __Internal.IntersectLineSegments(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, *(global::NWN.LowLevel.Vector.__Internal*) __arg3, __arg4);
            return __ret;
        }

        public int GetMeshBoundingBox(global::NWN.LowLevel.Vector vPosition, global::NWN.LowLevel.Vector vOrientation, global::NWN.LowLevel.Vector vMin, global::NWN.LowLevel.Vector vMax)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            if (ReferenceEquals(vOrientation, null))
                throw new global::System.ArgumentNullException("vOrientation", "Cannot be null because it is passed by value.");
            var __arg1 = vOrientation.__Instance;
            if (ReferenceEquals(vMin, null))
                throw new global::System.ArgumentNullException("vMin", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vMin.__Instance;
            if (ReferenceEquals(vMax, null))
                throw new global::System.ArgumentNullException("vMax", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = vMax.__Instance;
            var __ret = __Internal.GetMeshBoundingBox(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, __arg2, __arg3);
            return __ret;
        }

        public int[] MPnVertices
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_pnVertices, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_pnVertices[i] = value[i];
                }
            }
        }

        private float*[] __m_ppfVertices;

        private bool __m_ppfVerticesInitialised;
        public float*[] MPpfVertices
        {
            get
            {
                if (!__m_ppfVerticesInitialised)
                {
                    __m_ppfVertices = null;
                    __m_ppfVerticesInitialised = true;
                }
                return __m_ppfVertices;
            }

            set
            {
                __m_ppfVertices = value;
                if (!__m_ppfVerticesInitialised)
                {
                    __m_ppfVerticesInitialised = true;
                }
            }
        }

        public int[] MPnTriangles
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_pnTriangles, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_pnTriangles[i] = value[i];
                }
            }
        }

        private int*[] __m_ppnTriangles;

        private bool __m_ppnTrianglesInitialised;
        public int*[] MPpnTriangles
        {
            get
            {
                if (!__m_ppnTrianglesInitialised)
                {
                    __m_ppnTriangles = null;
                    __m_ppnTrianglesInitialised = true;
                }
                return __m_ppnTriangles;
            }

            set
            {
                __m_ppnTriangles = value;
                if (!__m_ppnTrianglesInitialised)
                {
                    __m_ppnTrianglesInitialised = true;
                }
            }
        }

        private int*[] __m_ppnTriangleMaterial;

        private bool __m_ppnTriangleMaterialInitialised;
        public int*[] MPpnTriangleMaterial
        {
            get
            {
                if (!__m_ppnTriangleMaterialInitialised)
                {
                    __m_ppnTriangleMaterial = null;
                    __m_ppnTriangleMaterialInitialised = true;
                }
                return __m_ppnTriangleMaterial;
            }

            set
            {
                __m_ppnTriangleMaterial = value;
                if (!__m_ppnTriangleMaterialInitialised)
                {
                    __m_ppnTriangleMaterialInitialised = true;
                }
            }
        }

        #region Virtual table interop

        // ~CNWDoorSurfaceMesh()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWDoorSurfaceMesh.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
