// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoString : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_sString;

            [FieldOffset(8)]
            internal uint m_nBufferLength;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2ERK7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, __IntPtr source);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor_1(__IntPtr __instance, __IntPtr source);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2EPKci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string source, int length);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, int value);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor_2(__IntPtr __instance, __IntPtr other);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoStringD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString6stringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void String(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoStringplERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OperatorPlus(__IntPtr @return, __IntPtr __instance, __IntPtr @string);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString4FindERKS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Find(__IntPtr __instance, __IntPtr @string, int position);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString4FindEci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Find(__IntPtr __instance, sbyte ch, int position);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString7FindNotEci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindNot(__IntPtr __instance, sbyte ch, int position);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoString6FormatEPKc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Format(__IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoString6InsertERKS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insert(__IntPtr __instance, __IntPtr @string, int position);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString4LeftEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Left(__IntPtr @return, __IntPtr __instance, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString5RightEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Right(__IntPtr @return, __IntPtr __instance, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString9SubStringEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SubString(__IntPtr @return, __IntPtr __instance, int start, int count);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString13CompareNoCaseERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CompareNoCase(__IntPtr __instance, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString19ComparePrefixNoCaseERKS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComparePrefixNoCase(__IntPtr __instance, __IntPtr sString, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoString20StripNonAlphaNumericEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StripNonAlphaNumeric(__IntPtr __instance, int bFileName, int bEmail, int bMasterServer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString5StripEbbPKc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Strip(__IntPtr @return, __IntPtr __instance, bool leading, bool trailing, [MarshalAs(UnmanagedType.LPUTF8Str)] string set);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoStringixEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte OperatorSubscript(__IntPtr __instance, int position);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString5AsINTEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AsINT(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString7AsFLOATEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float AsFLOAT(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString4CStrEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* CStr(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString9GetLengthEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetLength(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString7IsEmptyEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsEmpty(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString9LowerCaseEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LowerCase(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString9UpperCaseEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpperCase(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK10CExoString5AsTAGEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AsTAG(__IntPtr @return, __IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoString> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoString>();

        protected bool __ownsNativeInstance;

        internal static CExoString __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoString(native.ToPointer(), skipVTables);
        }

        internal static CExoString __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoString)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoString __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoString(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoString.__Internal.cctor_1(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoString(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoString(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoString()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoString(global::NWN.LowLevel.CResRef source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public CExoString(global::NWN.LowLevel.CExoString source)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(source, null))
                throw new global::System.ArgumentNullException("source", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = source.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
        }

        public CExoString(string source, int length)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, source, length);
        }

        public CExoString(int value)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, value);
        }

        public CExoString(string other)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoString.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __basicString0 = new global::Std.BasicString<sbyte, global::Std.CharTraits<sbyte>, global::Std.Allocator<sbyte>>();
            global::Std.BasicStringExtensions.Assign(__basicString0, other);
            var __arg0 = __basicString0.__Instance;
            __Internal.ctor_2(__Instance, __arg0);
            __basicString0.Dispose();
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoString __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void String()
        {
            __Internal.String(__Instance);
        }

        public static global::NWN.LowLevel.CExoString operator +(global::NWN.LowLevel.CExoString __op, global::NWN.LowLevel.CExoString @string)
        {
            if (ReferenceEquals(__op, null))
                throw new global::System.ArgumentNullException("__op", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = __op.__Instance;
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = @string.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.OperatorPlus(new IntPtr(&__ret), __arg0, __arg1);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int Find(global::NWN.LowLevel.CExoString @string, int position)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @string.__Instance;
            var __ret = __Internal.Find(__Instance, __arg0, position);
            return __ret;
        }

        public int Find(sbyte ch, int position)
        {
            var __ret = __Internal.Find(__Instance, ch, position);
            return __ret;
        }

        public int FindNot(sbyte ch, int position)
        {
            var __ret = __Internal.FindNot(__Instance, ch, position);
            return __ret;
        }

        public void Format(string format)
        {
            __Internal.Format(__Instance, format);
        }

        public void Insert(global::NWN.LowLevel.CExoString @string, int position)
        {
            if (ReferenceEquals(@string, null))
                throw new global::System.ArgumentNullException("@string", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = @string.__Instance;
            __Internal.Insert(__Instance, __arg0, position);
        }

        public global::NWN.LowLevel.CExoString Left(int count)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.Left(new IntPtr(&__ret), __Instance, count);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString Right(int count)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.Right(new IntPtr(&__ret), __Instance, count);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoString SubString(int start, int count)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.SubString(new IntPtr(&__ret), __Instance, start, count);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int CompareNoCase(global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sString.__Instance;
            var __ret = __Internal.CompareNoCase(__Instance, __arg0);
            return __ret;
        }

        public int ComparePrefixNoCase(global::NWN.LowLevel.CExoString sString, int nSize)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sString.__Instance;
            var __ret = __Internal.ComparePrefixNoCase(__Instance, __arg0, nSize);
            return __ret;
        }

        public int StripNonAlphaNumeric(int bFileName, int bEmail, int bMasterServer)
        {
            var __ret = __Internal.StripNonAlphaNumeric(__Instance, bFileName, bEmail, bMasterServer);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString Strip(bool leading, bool trailing, string set)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.Strip(new IntPtr(&__ret), __Instance, leading, trailing, set);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public static implicit operator global::NWN.LowLevel.CExoString(global::NWN.LowLevel.CResRef source)
        {
            return new global::NWN.LowLevel.CExoString(source);
        }

        public static implicit operator global::NWN.LowLevel.CExoString(int value)
        {
            return new global::NWN.LowLevel.CExoString(value);
        }

        public static implicit operator global::NWN.LowLevel.CExoString(string other)
        {
            return new global::NWN.LowLevel.CExoString(other);
        }

        public sbyte this[int position]
        {
            get
            {
                var __ret = __Internal.OperatorSubscript(__Instance, position);
                return __ret;
            }
        }

        public sbyte* MSString
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_sString;
            }

            set
            {
                ((__Internal*)__Instance)->m_sString = (__IntPtr) value;
            }
        }

        public uint MNBufferLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBufferLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBufferLength = value;
            }
        }

        public int AsINT
        {
            get
            {
                var __ret = __Internal.AsINT(__Instance);
                return __ret;
            }
        }

        public float AsFLOAT
        {
            get
            {
                var __ret = __Internal.AsFLOAT(__Instance);
                return __ret;
            }
        }

        public sbyte* CStr
        {
            get
            {
                var __ret = __Internal.CStr(__Instance);
                return __ret;
            }
        }

        public int Length
        {
            get
            {
                var __ret = __Internal.GetLength(__Instance);
                return __ret;
            }
        }

        public int IsEmpty
        {
            get
            {
                var __ret = __Internal.IsEmpty(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString LowerCase
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.LowerCase(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString UpperCase
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.UpperCase(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString AsTAG
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.AsTAG(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
