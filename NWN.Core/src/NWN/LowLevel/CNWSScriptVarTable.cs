// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSScriptVarTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::Std.UnorderedMap.__Internalc__N_std_S_unordered_map____S_CExoString___S_CNWSScriptVar___N_std_S_hash__S0____N_std_S_equal_to__S0____N_std_S_allocator____N_std_S_pair__1S0__S1_ m_vars;

            [FieldOffset(56)]
            internal __IntPtr m_pCreature;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTableC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTableC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTableD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable6GetIntER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetInt(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable8GetFloatER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetFloat(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable9GetStringER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetString(__IntPtr @return, __IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable9GetObjectER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetObject(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable11GetLocationER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetLocation(__IntPtr @return, __IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable6SetIntER10CExoStringii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetInt(__IntPtr __instance, __IntPtr sVarName, int nValue, int bLoading);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable8SetFloatER10CExoStringf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFloat(__IntPtr __instance, __IntPtr sVarName, float fValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable9SetStringER10CExoStringS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetString(__IntPtr __instance, __IntPtr sVarName, __IntPtr sValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable9SetObjectER10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetObject(__IntPtr __instance, __IntPtr sVarName, uint oValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable11SetLocationER10CExoString15CScriptLocation", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetLocation(__IntPtr __instance, __IntPtr sVarName, global::NWN.LowLevel.CScriptLocation.__Internal lValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable10DestroyIntER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyInt(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable12DestroyFloatER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyFloat(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable13DestroyStringER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyString(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable13DestroyObjectER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyObject(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable15DestroyLocationER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyLocation(__IntPtr __instance, __IntPtr sVarName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable12LoadVarTableEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadVarTable(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable12SaveVarTableEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveVarTable(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable10MatchIndexER10CExoStringji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr MatchIndex(__IntPtr __instance, __IntPtr sVarName, uint nVarType, int bCreate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSScriptVarTable11DeleteIndexER10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteIndex(__IntPtr __instance, __IntPtr sVarName, uint nVarType);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSScriptVarTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSScriptVarTable>();

        protected bool __ownsNativeInstance;

        internal static CNWSScriptVarTable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSScriptVarTable(native.ToPointer(), skipVTables);
        }

        internal static CNWSScriptVarTable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSScriptVarTable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSScriptVarTable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSScriptVarTable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSScriptVarTable.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSScriptVarTable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSScriptVarTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSScriptVarTable(global::NWN.LowLevel.CNWSScriptVarTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSScriptVarTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public CNWSScriptVarTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSScriptVarTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSScriptVarTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int GetInt(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = __Internal.GetInt(__Instance, __arg0);
            return __ret;
        }

        public float GetFloat(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = __Internal.GetFloat(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString GetString(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetString(new IntPtr(&__ret), __Instance, __arg0);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public uint GetObject(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = __Internal.GetObject(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CScriptLocation GetLocation(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = new global::NWN.LowLevel.CScriptLocation.__Internal();
            __Internal.GetLocation(new IntPtr(&__ret), __Instance, __arg0);
            return global::NWN.LowLevel.CScriptLocation.__CreateInstance(__ret);
        }

        public void SetInt(global::NWN.LowLevel.CExoString sVarName, int nValue, int bLoading)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.SetInt(__Instance, __arg0, nValue, bLoading);
        }

        public void SetFloat(global::NWN.LowLevel.CExoString sVarName, float fValue)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.SetFloat(__Instance, __arg0, fValue);
        }

        public void SetString(global::NWN.LowLevel.CExoString sVarName, global::NWN.LowLevel.CExoString sValue)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            if (ReferenceEquals(sValue, null))
                throw new global::System.ArgumentNullException("sValue", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sValue.__Instance;
            __Internal.SetString(__Instance, __arg0, __arg1);
        }

        public void SetObject(global::NWN.LowLevel.CExoString sVarName, uint oValue)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.SetObject(__Instance, __arg0, oValue);
        }

        public void SetLocation(global::NWN.LowLevel.CExoString sVarName, global::NWN.LowLevel.CScriptLocation lValue)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            if (ReferenceEquals(lValue, null))
                throw new global::System.ArgumentNullException("lValue", "Cannot be null because it is passed by value.");
            var __arg1 = lValue.__Instance;
            __Internal.SetLocation(__Instance, __arg0, *(global::NWN.LowLevel.CScriptLocation.__Internal*) __arg1);
        }

        public void DestroyInt(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DestroyInt(__Instance, __arg0);
        }

        public void DestroyFloat(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DestroyFloat(__Instance, __arg0);
        }

        public void DestroyString(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DestroyString(__Instance, __arg0);
        }

        public void DestroyObject(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DestroyObject(__Instance, __arg0);
        }

        public void DestroyLocation(global::NWN.LowLevel.CExoString sVarName)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DestroyLocation(__Instance, __arg0);
        }

        public void LoadVarTable(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.LoadVarTable(__Instance, __arg0, __arg1);
        }

        public void SaveVarTable(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.SaveVarTable(__Instance, __arg0, __arg1);
        }

        public global::NWN.LowLevel.CNWSScriptVar MatchIndex(global::NWN.LowLevel.CExoString sVarName, uint nVarType, int bCreate)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            var __ret = __Internal.MatchIndex(__Instance, __arg0, nVarType, bCreate);
            var __result0 = global::NWN.LowLevel.CNWSScriptVar.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void DeleteIndex(global::NWN.LowLevel.CExoString sVarName, uint nVarType)
        {
            if (ReferenceEquals(sVarName, null))
                throw new global::System.ArgumentNullException("sVarName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sVarName.__Instance;
            __Internal.DeleteIndex(__Instance, __arg0, nVarType);
        }

        public global::NWN.LowLevel.CNWSCreature MPCreature
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(((__Internal*)__Instance)->m_pCreature, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pCreature = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
