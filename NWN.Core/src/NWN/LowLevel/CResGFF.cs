// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CResGFF : global::NWN.LowLevel.CRes, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 272)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CRes;

            [FieldOffset(8)]
            internal ushort m_nDemands;

            [FieldOffset(10)]
            internal ushort m_nRequests;

            [FieldOffset(12)]
            internal global::NWN.LowLevel.RESID.__Internal m_nID;

            [FieldOffset(28)]
            internal uint m_status;

            [FieldOffset(32)]
            internal __IntPtr m_pResource;

            [FieldOffset(40)]
            internal __IntPtr m_pKeyEntry;

            [FieldOffset(48)]
            internal uint m_nSize;

            [FieldOffset(52)]
            internal uint m_nRefs;

            [FieldOffset(56)]
            internal int m_bAllocHeaderData;

            [FieldOffset(60)]
            internal int m_bAllocTrailingData;

            [FieldOffset(64)]
            internal __IntPtr m_pos;

            [FieldOffset(72)]
            internal int m_bAllowCaching;

            [FieldOffset(76)]
            internal uint STRUCT_GROWSIZE;

            [FieldOffset(80)]
            internal uint FIELD_GROWSIZE;

            [FieldOffset(84)]
            internal uint LABEL_GROWSIZE;

            [FieldOffset(88)]
            internal uint DATAFIELD_GROWSIZE;

            [FieldOffset(92)]
            internal uint DATALAYOUTFIELD_GROWSIZE;

            [FieldOffset(96)]
            internal uint DATALAYOUTLIST_GROWSIZE;

            [FieldOffset(104)]
            internal __IntPtr m_pFileHeader;

            [FieldOffset(112)]
            internal __IntPtr m_pDDFileHeader;

            [FieldOffset(120)]
            internal uint m_nHeaderOffset;

            [FieldOffset(128)]
            internal __IntPtr m_pStruct;

            [FieldOffset(136)]
            internal uint m_nStructAllocated;

            [FieldOffset(144)]
            internal __IntPtr m_pField;

            [FieldOffset(152)]
            internal uint m_nFieldAllocated;

            [FieldOffset(160)]
            internal __IntPtr m_pLabel;

            [FieldOffset(168)]
            internal uint m_nLabelAllocated;

            [FieldOffset(176)]
            internal __IntPtr m_pDataField;

            [FieldOffset(184)]
            internal uint m_nDataFieldAllocated;

            [FieldOffset(192)]
            internal __IntPtr m_pDataLayoutField;

            [FieldOffset(200)]
            internal uint m_nDataLayoutFieldAllocated;

            [FieldOffset(204)]
            internal uint m_nDataLayoutFieldWasted;

            [FieldOffset(208)]
            internal __IntPtr m_pDataLayoutList;

            [FieldOffset(216)]
            internal uint m_nDataLayoutListAllocated;

            [FieldOffset(220)]
            internal uint m_nDataLayoutListWasted;

            [FieldOffset(224)]
            internal fixed sbyte m_pLabelBuffer[17];

            [FieldOffset(241)]
            internal fixed sbyte m_pFileType[4];

            [FieldOffset(248)]
            internal int m_bLoaded;

            [FieldOffset(252)]
            internal int m_bResourceLoaded;

            [FieldOffset(256)]
            internal int m_bSelfDemanded;

            [FieldOffset(260)]
            internal int m_bDataPtrOwned;

            [FieldOffset(264)]
            internal int m_bReplaceExistingFields;

            [FieldOffset(268)]
            internal int m_bValidationFailed;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFFC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFFC2EtPcRK7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, ushort nType, sbyte* cIDStr, __IntPtr cResRef);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFFC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15GetDataFromFileEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDataFromFile(__IntPtr __instance, sbyte* pFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF18GetDataFromPointerEPvi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDataFromPointer(__IntPtr __instance, __IntPtr pData, int nDataSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14GetGFFFileInfoEP10CExoStringS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetGFFFileInfo(__IntPtr __instance, __IntPtr pFileType, __IntPtr pVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14GetElementTypeEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetElementType(__IntPtr __instance, __IntPtr pStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13GetFieldCountEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFieldCount(__IntPtr __instance, __IntPtr pStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12GetFieldTypeEP10CResStructPcj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFieldType(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF16GetFieldStringIDEP10CResStructj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetFieldStringID(__IntPtr __instance, __IntPtr pStructure, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12GetFieldSizeEP10CResStructPcj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFieldSize(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF7GetListEP8CResListP10CResStructPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetList(__IntPtr __instance, __IntPtr pList, __IntPtr pStructure, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12GetListCountEP8CResList", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetListCount(__IntPtr __instance, __IntPtr pList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14GetListElementEP10CResStructP8CResListj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetListElement(__IntPtr __instance, __IntPtr pStruct, __IntPtr pList, uint nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF19GetStructFromStructEP10CResStructS1_Pc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStructFromStruct(__IntPtr __instance, __IntPtr pStruct, __IntPtr pParentStruct, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17GetTopLevelStructEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTopLevelStruct(__IntPtr __instance, __IntPtr pStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13ReadFieldBYTEEP10CResStructPcRih", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte ReadFieldBYTE(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, byte nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13ReadFieldCHAREP10CResStructPcRic", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte ReadFieldCHAR(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, sbyte nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13ReadFieldWORDEP10CResStructPcRit", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort ReadFieldWORD(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, ushort nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14ReadFieldSHORTEP10CResStructPcRis", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short ReadFieldSHORT(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, short nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14ReadFieldDWORDEP10CResStructPcRij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ReadFieldDWORD(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, uint nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12ReadFieldINTEP10CResStructPcRii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadFieldINT(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, int nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF16ReadFieldDWORD64EP10CResStructPcRim", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong ReadFieldDWORD64(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, ulong nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14ReadFieldINT64EP10CResStructPcRil", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long ReadFieldINT64(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, long nDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14ReadFieldFLOATEP10CResStructPcRif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ReadFieldFLOAT(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, float fDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15ReadFieldDOUBLEEP10CResStructPcRid", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern double ReadFieldDOUBLE(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, double fDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF16ReadFieldCResRefEP10CResStructPcRiRK7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.CResRef.__Internal ReadFieldCResRef(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, __IntPtr sDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF19ReadFieldCExoStringEP10CResStructPcRiRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.CExoString.__Internal ReadFieldCExoString(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, __IntPtr sDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF22ReadFieldCExoLocStringEP10CResStructPcRiRK13CExoLocString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.CExoLocString.__Internal ReadFieldCExoLocString(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, int* bSuccess, __IntPtr sDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13ReadFieldVOIDEP10CResStructPvjPcRiS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ReadFieldVOID(__IntPtr __instance, __IntPtr pStructure, __IntPtr pVariable, uint nSize, sbyte* szFieldID, int* bSuccess, __IntPtr pDefault);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF7AddListEP8CResListP10CResStructPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddList(__IntPtr __instance, __IntPtr pList, __IntPtr pStructure, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14AddListElementEP10CResStructP8CResListj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddListElement(__IntPtr __instance, __IntPtr pStruct, __IntPtr pList, uint nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17AddStructToStructEP10CResStructS1_Pcj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddStructToStruct(__IntPtr __instance, __IntPtr pNewStruct, __IntPtr pParentStruct, sbyte* szFieldID, uint nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13CreateGFFFileEP10CResStructRK10CExoStringS4_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CreateGFFFile(__IntPtr __instance, __IntPtr pStruct, __IntPtr sFileType, __IntPtr sVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14WriteFieldBYTEEP10CResStructhPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldBYTE(__IntPtr __instance, __IntPtr pStructure, byte nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14WriteFieldCHAREP10CResStructcPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldCHAR(__IntPtr __instance, __IntPtr pStructure, sbyte nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14WriteFieldWORDEP10CResStructtPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldWORD(__IntPtr __instance, __IntPtr pStructure, ushort nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15WriteFieldSHORTEP10CResStructsPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldSHORT(__IntPtr __instance, __IntPtr pStructure, short nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15WriteFieldDWORDEP10CResStructjPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldDWORD(__IntPtr __instance, __IntPtr pStructure, uint nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13WriteFieldINTEP10CResStructiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldINT(__IntPtr __instance, __IntPtr pStructure, int nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17WriteFieldDWORD64EP10CResStructmPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldDWORD64(__IntPtr __instance, __IntPtr pStructure, ulong nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15WriteFieldINT64EP10CResStructlPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldINT64(__IntPtr __instance, __IntPtr pStructure, long nVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15WriteFieldFLOATEP10CResStructfPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldFLOAT(__IntPtr __instance, __IntPtr pStructure, float fVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF16WriteFieldDOUBLEEP10CResStructdPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldDOUBLE(__IntPtr __instance, __IntPtr pStructure, double fVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17WriteFieldCResRefEP10CResStructRK7CResRefPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldCResRef(__IntPtr __instance, __IntPtr pStructure, __IntPtr sVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF20WriteFieldCExoStringEP10CResStructRK10CExoStringPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldCExoString(__IntPtr __instance, __IntPtr pStructure, __IntPtr sVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF23WriteFieldCExoLocStringEP10CResStruct13CExoLocStringPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldCExoLocString(__IntPtr __instance, __IntPtr pStructure, global::NWN.LowLevel.CExoLocString.__Internal sVariable, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF14WriteFieldVOIDEP10CResStructPKvjPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFieldVOID(__IntPtr __instance, __IntPtr pStructure, __IntPtr pVariable, uint nSize, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12WriteGFFFileERK10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteGFFFile(__IntPtr __instance, __IntPtr sFileName, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12WriteGFFFileEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteGFFFile(__IntPtr __instance, sbyte* szFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12WriteGFFDataER8CExoFileRj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteGFFData(__IntPtr __instance, __IntPtr cFile, uint* nBytesWritten);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17WriteGFFToPointerEPPvRi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteGFFToPointer(__IntPtr __instance, void** pData, int* nLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF4PackEhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Pack(__IntPtr __instance, byte nPercentThreshold, uint nByteThreshold);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF20InitializeForWritingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeForWriting(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13PrepareHeaderEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PrepareHeader(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13FinalizeSetupEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FinalizeSetup(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF16ValidateAndSetupEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ValidateAndSetup(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15ReleaseResourceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReleaseResource(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF9GetStructEP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStruct(__IntPtr __instance, __IntPtr pStructure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF8GetFieldEP10CResStructj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetField(__IntPtr __instance, __IntPtr pStructure, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF8GetLabelEP10CResStructj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetLabel(__IntPtr __instance, __IntPtr pStructure, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12GetDataFieldEP12CResGFFFieldRj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* GetDataField(__IntPtr __instance, __IntPtr pField, uint* nMaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF18GetDataLayoutFieldEP12CResGFFFieldRj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* GetDataLayoutField(__IntPtr __instance, __IntPtr pField, uint* nMaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17GetDataLayoutListEP12CResGFFFieldRj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* GetDataLayoutList(__IntPtr __instance, __IntPtr pField, uint* nMaxSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF15GetFieldByLabelEP10CResStructPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFieldByLabel(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13IsDataInPlaceEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsDataInPlace(__IntPtr __instance, uint nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13GetFieldLabelEP10CResStructj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern sbyte* GetFieldLabel(__IntPtr __instance, __IntPtr pStructure, uint nFieldIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF13GetFieldCountEP13CResGFFStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFieldCount_1(__IntPtr __instance, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF9AddStructEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AddStruct(__IntPtr __instance, uint nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF8AddFieldEP10CResStructPcj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AddField(__IntPtr __instance, __IntPtr pStructure, sbyte* szFieldID, uint nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF8AddLabelEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AddLabel(__IntPtr __instance, sbyte* szFieldID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12AddDataFieldEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* AddDataField(__IntPtr __instance, uint nCurrentOffset, uint nCurrentSize, uint nNewSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF18AddDataLayoutFieldEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* AddDataLayoutField(__IntPtr __instance, uint nCurrentOffset, uint nCurrentSize, uint nNewSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF17AddDataLayoutListEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte* AddDataLayoutList(__IntPtr __instance, uint nCurrentOffset, uint nCurrentSize, uint nNewSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CResGFF12GetTotalSizeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetTotalSize(__IntPtr __instance);
        }

        internal static new CResGFF __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CResGFF(native.ToPointer(), skipVTables);
        }

        internal static new CResGFF __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CResGFF)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CResGFF __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CResGFF)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CResGFF __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CResGFF(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CResGFF.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CResGFF(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CResGFF(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CResGFF()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResGFF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CResGFF");
        }

        public CResGFF(ushort nType, sbyte* cIDStr, global::NWN.LowLevel.CResRef cResRef)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResGFF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = cResRef.__Instance;
            __Internal.ctor(__Instance, nType, cIDStr, __arg2);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CResGFF");
        }

        public CResGFF(global::NWN.LowLevel.CResGFF _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CResGFF.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CResGFF");
        }

        public override int OnResourceServiced()
        {
            return base.OnResourceServiced();
        }

        public override int OnResourceFreed()
        {
            return base.OnResourceFreed();
        }

        public int GetDataFromFile(sbyte* pFileName)
        {
            var __ret = __Internal.GetDataFromFile(__Instance, pFileName);
            return __ret;
        }

        public int GetDataFromPointer(__IntPtr pData, int nDataSize)
        {
            var __ret = __Internal.GetDataFromPointer(__Instance, pData, nDataSize);
            return __ret;
        }

        public void GetGFFFileInfo(global::NWN.LowLevel.CExoString pFileType, global::NWN.LowLevel.CExoString pVersion)
        {
            var __arg0 = pFileType is null ? __IntPtr.Zero : pFileType.__Instance;
            var __arg1 = pVersion is null ? __IntPtr.Zero : pVersion.__Instance;
            __Internal.GetGFFFileInfo(__Instance, __arg0, __arg1);
        }

        public uint GetElementType(global::NWN.LowLevel.CResStruct pStructure)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetElementType(__Instance, __arg0);
            return __ret;
        }

        public uint GetFieldCount(global::NWN.LowLevel.CResStruct pStructure)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldCount(__Instance, __arg0);
            return __ret;
        }

        public uint GetFieldType(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldType(__Instance, __arg0, szFieldID, nFieldIndex);
            return __ret;
        }

        public sbyte* GetFieldStringID(global::NWN.LowLevel.CResStruct pStructure, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldStringID(__Instance, __arg0, nFieldIndex);
            return __ret;
        }

        public uint GetFieldSize(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldSize(__Instance, __arg0, szFieldID, nFieldIndex);
            return __ret;
        }

        public int GetList(global::NWN.LowLevel.CResList pList, global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID)
        {
            var __arg0 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __arg1 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetList(__Instance, __arg0, __arg1, szFieldID);
            return __ret;
        }

        public uint GetListCount(global::NWN.LowLevel.CResList pList)
        {
            var __arg0 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __ret = __Internal.GetListCount(__Instance, __arg0);
            return __ret;
        }

        public int GetListElement(global::NWN.LowLevel.CResStruct pStruct, global::NWN.LowLevel.CResList pList, uint nIndex)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __arg1 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __ret = __Internal.GetListElement(__Instance, __arg0, __arg1, nIndex);
            return __ret;
        }

        public int GetStructFromStruct(global::NWN.LowLevel.CResStruct pStruct, global::NWN.LowLevel.CResStruct pParentStruct, sbyte* szFieldID)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __arg1 = pParentStruct is null ? __IntPtr.Zero : pParentStruct.__Instance;
            var __ret = __Internal.GetStructFromStruct(__Instance, __arg0, __arg1, szFieldID);
            return __ret;
        }

        public int GetTopLevelStruct(global::NWN.LowLevel.CResStruct pStructure)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetTopLevelStruct(__Instance, __arg0);
            return __ret;
        }

        public byte ReadFieldBYTE(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, byte nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldBYTE(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public sbyte ReadFieldCHAR(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, sbyte nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldCHAR(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public ushort ReadFieldWORD(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, ushort nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldWORD(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public short ReadFieldSHORT(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, short nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldSHORT(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public uint ReadFieldDWORD(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, uint nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldDWORD(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public int ReadFieldINT(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, int nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldINT(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public ulong ReadFieldDWORD64(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, ulong nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldDWORD64(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public long ReadFieldINT64(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, long nDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldINT64(__Instance, __arg0, szFieldID, __arg2, nDefault);
                return __ret;
            }
        }

        public float ReadFieldFLOAT(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, float fDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldFLOAT(__Instance, __arg0, szFieldID, __arg2, fDefault);
                return __ret;
            }
        }

        public double ReadFieldDOUBLE(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, double fDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                var __ret = __Internal.ReadFieldDOUBLE(__Instance, __arg0, szFieldID, __arg2, fDefault);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CResRef ReadFieldCResRef(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, global::NWN.LowLevel.CResRef sDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                if (ReferenceEquals(sDefault, null))
                    throw new global::System.ArgumentNullException("sDefault", "Cannot be null because it is a C++ reference (&).");
                var __arg3 = sDefault.__Instance;
                var __ret = __Internal.ReadFieldCResRef(__Instance, __arg0, szFieldID, __arg2, __arg3);
                return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString ReadFieldCExoString(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, global::NWN.LowLevel.CExoString sDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                if (ReferenceEquals(sDefault, null))
                    throw new global::System.ArgumentNullException("sDefault", "Cannot be null because it is a C++ reference (&).");
                var __arg3 = sDefault.__Instance;
                var __ret = __Internal.ReadFieldCExoString(__Instance, __arg0, szFieldID, __arg2, __arg3);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoLocString ReadFieldCExoLocString(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, ref int bSuccess, global::NWN.LowLevel.CExoLocString sDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess2 = &bSuccess)
            {
                var __arg2 = __bSuccess2;
                if (ReferenceEquals(sDefault, null))
                    throw new global::System.ArgumentNullException("sDefault", "Cannot be null because it is a C++ reference (&).");
                var __arg3 = sDefault.__Instance;
                var __ret = __Internal.ReadFieldCExoLocString(__Instance, __arg0, szFieldID, __arg2, __arg3);
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(__ret);
            }
        }

        public __IntPtr ReadFieldVOID(global::NWN.LowLevel.CResStruct pStructure, __IntPtr pVariable, uint nSize, sbyte* szFieldID, ref int bSuccess, __IntPtr pDefault)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            fixed (int* __bSuccess4 = &bSuccess)
            {
                var __arg4 = __bSuccess4;
                var __ret = __Internal.ReadFieldVOID(__Instance, __arg0, pVariable, nSize, szFieldID, __arg4, pDefault);
                return __ret;
            }
        }

        public int AddList(global::NWN.LowLevel.CResList pList, global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID)
        {
            var __arg0 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __arg1 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.AddList(__Instance, __arg0, __arg1, szFieldID);
            return __ret;
        }

        public int AddListElement(global::NWN.LowLevel.CResStruct pStruct, global::NWN.LowLevel.CResList pList, uint nType)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __arg1 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __ret = __Internal.AddListElement(__Instance, __arg0, __arg1, nType);
            return __ret;
        }

        public int AddStructToStruct(global::NWN.LowLevel.CResStruct pNewStruct, global::NWN.LowLevel.CResStruct pParentStruct, sbyte* szFieldID, uint nType)
        {
            var __arg0 = pNewStruct is null ? __IntPtr.Zero : pNewStruct.__Instance;
            var __arg1 = pParentStruct is null ? __IntPtr.Zero : pParentStruct.__Instance;
            var __ret = __Internal.AddStructToStruct(__Instance, __arg0, __arg1, szFieldID, nType);
            return __ret;
        }

        public int CreateGFFFile(global::NWN.LowLevel.CResStruct pStruct, global::NWN.LowLevel.CExoString sFileType, global::NWN.LowLevel.CExoString sVersion)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            if (ReferenceEquals(sFileType, null))
                throw new global::System.ArgumentNullException("sFileType", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sFileType.__Instance;
            if (ReferenceEquals(sVersion, null))
                throw new global::System.ArgumentNullException("sVersion", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sVersion.__Instance;
            var __ret = __Internal.CreateGFFFile(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int WriteFieldBYTE(global::NWN.LowLevel.CResStruct pStructure, byte nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldBYTE(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldCHAR(global::NWN.LowLevel.CResStruct pStructure, sbyte nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldCHAR(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldWORD(global::NWN.LowLevel.CResStruct pStructure, ushort nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldWORD(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldSHORT(global::NWN.LowLevel.CResStruct pStructure, short nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldSHORT(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldDWORD(global::NWN.LowLevel.CResStruct pStructure, uint nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldDWORD(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldINT(global::NWN.LowLevel.CResStruct pStructure, int nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldINT(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldDWORD64(global::NWN.LowLevel.CResStruct pStructure, ulong nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldDWORD64(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldINT64(global::NWN.LowLevel.CResStruct pStructure, long nVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldINT64(__Instance, __arg0, nVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldFLOAT(global::NWN.LowLevel.CResStruct pStructure, float fVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldFLOAT(__Instance, __arg0, fVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldDOUBLE(global::NWN.LowLevel.CResStruct pStructure, double fVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldDOUBLE(__Instance, __arg0, fVariable, szFieldID);
            return __ret;
        }

        public int WriteFieldCResRef(global::NWN.LowLevel.CResStruct pStructure, global::NWN.LowLevel.CResRef sVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            if (ReferenceEquals(sVariable, null))
                throw new global::System.ArgumentNullException("sVariable", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sVariable.__Instance;
            var __ret = __Internal.WriteFieldCResRef(__Instance, __arg0, __arg1, szFieldID);
            return __ret;
        }

        public int WriteFieldCExoString(global::NWN.LowLevel.CResStruct pStructure, global::NWN.LowLevel.CExoString sVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            if (ReferenceEquals(sVariable, null))
                throw new global::System.ArgumentNullException("sVariable", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sVariable.__Instance;
            var __ret = __Internal.WriteFieldCExoString(__Instance, __arg0, __arg1, szFieldID);
            return __ret;
        }

        public int WriteFieldCExoLocString(global::NWN.LowLevel.CResStruct pStructure, global::NWN.LowLevel.CExoLocString sVariable, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            if (ReferenceEquals(sVariable, null))
                throw new global::System.ArgumentNullException("sVariable", "Cannot be null because it is passed by value.");
            var __arg1 = sVariable.__Instance;
            var __ret = __Internal.WriteFieldCExoLocString(__Instance, __arg0, *(global::NWN.LowLevel.CExoLocString.__Internal*) __arg1, szFieldID);
            return __ret;
        }

        public int WriteFieldVOID(global::NWN.LowLevel.CResStruct pStructure, __IntPtr pVariable, uint nSize, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.WriteFieldVOID(__Instance, __arg0, pVariable, nSize, szFieldID);
            return __ret;
        }

        public int WriteGFFFile(global::NWN.LowLevel.CExoString sFileName, ushort nType)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.WriteGFFFile(__Instance, __arg0, nType);
            return __ret;
        }

        public int WriteGFFFile(sbyte* szFileName)
        {
            var __ret = __Internal.WriteGFFFile(__Instance, szFileName);
            return __ret;
        }

        public int WriteGFFData(global::NWN.LowLevel.CExoFile cFile, ref uint nBytesWritten)
        {
            if (ReferenceEquals(cFile, null))
                throw new global::System.ArgumentNullException("cFile", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cFile.__Instance;
            fixed (uint* __nBytesWritten1 = &nBytesWritten)
            {
                var __arg1 = __nBytesWritten1;
                var __ret = __Internal.WriteGFFData(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public int WriteGFFToPointer(void** pData, ref int nLength)
        {
            fixed (int* __nLength1 = &nLength)
            {
                var __arg1 = __nLength1;
                var __ret = __Internal.WriteGFFToPointer(__Instance, pData, __arg1);
                return __ret;
            }
        }

        public void Pack(byte nPercentThreshold, uint nByteThreshold)
        {
            __Internal.Pack(__Instance, nPercentThreshold, nByteThreshold);
        }

        public void InitializeForWriting()
        {
            __Internal.InitializeForWriting(__Instance);
        }

        public int PrepareHeader()
        {
            var __ret = __Internal.PrepareHeader(__Instance);
            return __ret;
        }

        public int FinalizeSetup()
        {
            var __ret = __Internal.FinalizeSetup(__Instance);
            return __ret;
        }

        public int ValidateAndSetup()
        {
            var __ret = __Internal.ValidateAndSetup(__Instance);
            return __ret;
        }

        public void ReleaseResource()
        {
            __Internal.ReleaseResource(__Instance);
        }

        public global::NWN.LowLevel.CResGFFStruct GetStruct(global::NWN.LowLevel.CResStruct pStructure)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetStruct(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CResGFFStruct.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CResGFFField GetField(global::NWN.LowLevel.CResStruct pStructure, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetField(__Instance, __arg0, nFieldIndex);
            var __result0 = global::NWN.LowLevel.CResGFFField.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CResGFFLabel GetLabel(global::NWN.LowLevel.CResStruct pStructure, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetLabel(__Instance, __arg0, nFieldIndex);
            var __result0 = global::NWN.LowLevel.CResGFFLabel.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public byte* GetDataField(global::NWN.LowLevel.CResGFFField pField, ref uint nMaxSize)
        {
            var __arg0 = pField is null ? __IntPtr.Zero : pField.__Instance;
            fixed (uint* __nMaxSize1 = &nMaxSize)
            {
                var __arg1 = __nMaxSize1;
                var __ret = __Internal.GetDataField(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public byte* GetDataLayoutField(global::NWN.LowLevel.CResGFFField pField, ref uint nMaxSize)
        {
            var __arg0 = pField is null ? __IntPtr.Zero : pField.__Instance;
            fixed (uint* __nMaxSize1 = &nMaxSize)
            {
                var __arg1 = __nMaxSize1;
                var __ret = __Internal.GetDataLayoutField(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public byte* GetDataLayoutList(global::NWN.LowLevel.CResGFFField pField, ref uint nMaxSize)
        {
            var __arg0 = pField is null ? __IntPtr.Zero : pField.__Instance;
            fixed (uint* __nMaxSize1 = &nMaxSize)
            {
                var __arg1 = __nMaxSize1;
                var __ret = __Internal.GetDataLayoutList(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public uint GetFieldByLabel(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldByLabel(__Instance, __arg0, szFieldID);
            return __ret;
        }

        public int IsDataInPlace(uint nType)
        {
            var __ret = __Internal.IsDataInPlace(__Instance, nType);
            return __ret;
        }

        public sbyte* GetFieldLabel(global::NWN.LowLevel.CResStruct pStructure, uint nFieldIndex)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.GetFieldLabel(__Instance, __arg0, nFieldIndex);
            return __ret;
        }

        public uint GetFieldCount(global::NWN.LowLevel.CResGFFStruct pStruct)
        {
            var __arg0 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.GetFieldCount_1(__Instance, __arg0);
            return __ret;
        }

        public uint AddStruct(uint nType)
        {
            var __ret = __Internal.AddStruct(__Instance, nType);
            return __ret;
        }

        public global::NWN.LowLevel.CResGFFField AddField(global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID, uint nType)
        {
            var __arg0 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            var __ret = __Internal.AddField(__Instance, __arg0, szFieldID, nType);
            var __result0 = global::NWN.LowLevel.CResGFFField.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public uint AddLabel(sbyte* szFieldID)
        {
            var __ret = __Internal.AddLabel(__Instance, szFieldID);
            return __ret;
        }

        public byte* AddDataField(uint nCurrentOffset, uint nCurrentSize, uint nNewSize)
        {
            var __ret = __Internal.AddDataField(__Instance, nCurrentOffset, nCurrentSize, nNewSize);
            return __ret;
        }

        public byte* AddDataLayoutField(uint nCurrentOffset, uint nCurrentSize, uint nNewSize)
        {
            var __ret = __Internal.AddDataLayoutField(__Instance, nCurrentOffset, nCurrentSize, nNewSize);
            return __ret;
        }

        public byte* AddDataLayoutList(uint nCurrentOffset, uint nCurrentSize, uint nNewSize)
        {
            var __ret = __Internal.AddDataLayoutList(__Instance, nCurrentOffset, nCurrentSize, nNewSize);
            return __ret;
        }

        public uint STRUCT_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->STRUCT_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->STRUCT_GROWSIZE = value;
            }
        }

        public uint FIELD_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->FIELD_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->FIELD_GROWSIZE = value;
            }
        }

        public uint LABEL_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->LABEL_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->LABEL_GROWSIZE = value;
            }
        }

        public uint DATAFIELD_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->DATAFIELD_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->DATAFIELD_GROWSIZE = value;
            }
        }

        public uint DATALAYOUTFIELD_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->DATALAYOUTFIELD_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->DATALAYOUTFIELD_GROWSIZE = value;
            }
        }

        public uint DATALAYOUTLIST_GROWSIZE
        {
            get
            {
                return ((__Internal*)__Instance)->DATALAYOUTLIST_GROWSIZE;
            }

            set
            {
                ((__Internal*)__Instance)->DATALAYOUTLIST_GROWSIZE = value;
            }
        }

        public global::NWN.LowLevel.CResGFFFileHeader MPFileHeader
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CResGFFFileHeader.__GetOrCreateInstance(((__Internal*)__Instance)->m_pFileHeader, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pFileHeader = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public byte* MPDDFileHeader
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pDDFileHeader;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDDFileHeader = (__IntPtr) value;
            }
        }

        public uint MNHeaderOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHeaderOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHeaderOffset = value;
            }
        }

        public global::NWN.LowLevel.CResGFFStruct MPStruct
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CResGFFStruct.__GetOrCreateInstance(((__Internal*)__Instance)->m_pStruct, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pStruct = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNStructAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStructAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStructAllocated = value;
            }
        }

        public global::NWN.LowLevel.CResGFFField MPField
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CResGFFField.__GetOrCreateInstance(((__Internal*)__Instance)->m_pField, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pField = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNFieldAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFieldAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFieldAllocated = value;
            }
        }

        public global::NWN.LowLevel.CResGFFLabel MPLabel
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CResGFFLabel.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLabel, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLabel = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNLabelAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLabelAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLabelAllocated = value;
            }
        }

        public byte* MPDataField
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pDataField;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDataField = (__IntPtr) value;
            }
        }

        public uint MNDataFieldAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataFieldAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataFieldAllocated = value;
            }
        }

        public byte* MPDataLayoutField
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pDataLayoutField;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDataLayoutField = (__IntPtr) value;
            }
        }

        public uint MNDataLayoutFieldAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutFieldAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutFieldAllocated = value;
            }
        }

        public uint MNDataLayoutFieldWasted
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutFieldWasted;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutFieldWasted = value;
            }
        }

        public byte* MPDataLayoutList
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pDataLayoutList;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDataLayoutList = (__IntPtr) value;
            }
        }

        public uint MNDataLayoutListAllocated
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutListAllocated;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutListAllocated = value;
            }
        }

        public uint MNDataLayoutListWasted
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataLayoutListWasted;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataLayoutListWasted = value;
            }
        }

        public sbyte[] MPLabelBuffer
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_pLabelBuffer, 17);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 17; i++)
                        ((__Internal*)__Instance)->m_pLabelBuffer[i] = value[i];
                }
            }
        }

        public sbyte[] MPFileType
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_pFileType, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_pFileType[i] = value[i];
                }
            }
        }

        public int MBLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLoaded;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLoaded = value;
            }
        }

        public int MBResourceLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bResourceLoaded;
            }

            set
            {
                ((__Internal*)__Instance)->m_bResourceLoaded = value;
            }
        }

        public int MBSelfDemanded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSelfDemanded;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSelfDemanded = value;
            }
        }

        public int MBDataPtrOwned
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDataPtrOwned;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDataPtrOwned = value;
            }
        }

        public int MBReplaceExistingFields
        {
            get
            {
                return ((__Internal*)__Instance)->m_bReplaceExistingFields;
            }

            set
            {
                ((__Internal*)__Instance)->m_bReplaceExistingFields = value;
            }
        }

        public int MBValidationFailed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bValidationFailed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bValidationFailed = value;
            }
        }

        public uint TotalSize
        {
            get
            {
                var __ret = __Internal.GetTotalSize(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CResGFF()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CResGFF.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // int32_t GetFixedResourceSize()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetFixedResourceSizeDelegateInstance;

        private static int _GetFixedResourceSizeDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CResGFF.__GetInstance(__instance);
            return __target.FixedResourceSize;
        }

        // int32_t GetFixedResourceDataOffset()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetFixedResourceDataOffsetDelegateInstance;

        private static int _GetFixedResourceDataOffsetDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CResGFF.__GetInstance(__instance);
            return __target.FixedResourceDataOffset;
        }

        // BOOL OnResourceFreed()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _OnResourceFreedDelegateInstance;

        private static int _OnResourceFreedDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CResGFF.__GetInstance(__instance);
            return __target.OnResourceFreed();
        }

        // BOOL OnResourceServiced()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _OnResourceServicedDelegateInstance;

        private static int _OnResourceServicedDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CResGFF.__GetInstance(__instance);
            return __target.OnResourceServiced();
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[5];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _GetFixedResourceSizeDelegateInstance += _GetFixedResourceSizeDelegateHook;
                _GetFixedResourceDataOffsetDelegateInstance += _GetFixedResourceDataOffsetDelegateHook;
                _OnResourceFreedDelegateInstance += _OnResourceFreedDelegateHook;
                _OnResourceServicedDelegateInstance += _OnResourceServicedDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetFixedResourceSizeDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetFixedResourceDataOffsetDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnResourceFreedDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OnResourceServicedDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            VTables.Methods[0] = new Delegate[8];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
