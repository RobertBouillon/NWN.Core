// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNetLayerSessionInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 176)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_nConnectionId;

            [FieldOffset(8)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sSessionName;

            [FieldOffset(24)]
            internal uint m_nProtocol;

            [FieldOffset(28)]
            internal uint m_nPort;

            [FieldOffset(32)]
            internal fixed uint m_nPingPacketSent[4];

            [FieldOffset(48)]
            internal fixed uint m_nPingPacketReceived[4];

            [FieldOffset(64)]
            internal uint m_nPingTotalTime;

            [FieldOffset(68)]
            internal uint m_nPingNumPackets;

            [FieldOffset(72)]
            internal int m_bPingActive;

            [FieldOffset(76)]
            internal uint m_nPingPacketTimeout;

            [FieldOffset(80)]
            internal __IntPtr m_pExtendedInfo;

            [FieldOffset(88)]
            internal int m_bHasChanged;

            [FieldOffset(92)]
            internal int m_bServerDetailsChanged;

            [FieldOffset(96)]
            internal int m_bRecievedBNXR;

            [FieldOffset(100)]
            internal uint m_nLastUpdate;

            [FieldOffset(104)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sVisibleAddress;

            [FieldOffset(120)]
            internal global::NWN.LowLevel.NWSyncAdvertisement.__Internal m_nwsyncData;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNetLayerSessionInfoC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNetLayerSessionInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNetLayerSessionInfoD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN20CNetLayerSessionInfo5CleanEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Clean(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerSessionInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerSessionInfo>();

        protected bool __ownsNativeInstance;

        internal static CNetLayerSessionInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNetLayerSessionInfo(native.ToPointer(), skipVTables);
        }

        internal static CNetLayerSessionInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNetLayerSessionInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNetLayerSessionInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNetLayerSessionInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNetLayerSessionInfo.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNetLayerSessionInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNetLayerSessionInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNetLayerSessionInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayerSessionInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNetLayerSessionInfo(global::NWN.LowLevel.CNetLayerSessionInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayerSessionInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNetLayerSessionInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Clean()
        {
            __Internal.Clean(__Instance);
        }

        public uint MNConnectionId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nConnectionId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nConnectionId = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSSessionName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSessionName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSessionName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNProtocol
        {
            get
            {
                return ((__Internal*)__Instance)->m_nProtocol;
            }

            set
            {
                ((__Internal*)__Instance)->m_nProtocol = value;
            }
        }

        public uint MNPort
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPort;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPort = value;
            }
        }

        public uint[] MNPingPacketSent
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nPingPacketSent, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_nPingPacketSent[i] = value[i];
                }
            }
        }

        public uint[] MNPingPacketReceived
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nPingPacketReceived, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_nPingPacketReceived[i] = value[i];
                }
            }
        }

        public uint MNPingTotalTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPingTotalTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPingTotalTime = value;
            }
        }

        public uint MNPingNumPackets
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPingNumPackets;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPingNumPackets = value;
            }
        }

        public int MBPingActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPingActive;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPingActive = value;
            }
        }

        public uint MNPingPacketTimeout
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPingPacketTimeout;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPingPacketTimeout = value;
            }
        }

        public global::NWN.LowLevel.CExtendedServerInfo MPExtendedInfo
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExtendedServerInfo.__GetOrCreateInstance(((__Internal*)__Instance)->m_pExtendedInfo, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pExtendedInfo = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBHasChanged
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasChanged;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasChanged = value;
            }
        }

        public int MBServerDetailsChanged
        {
            get
            {
                return ((__Internal*)__Instance)->m_bServerDetailsChanged;
            }

            set
            {
                ((__Internal*)__Instance)->m_bServerDetailsChanged = value;
            }
        }

        public int MBRecievedBNXR
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRecievedBNXR;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRecievedBNXR = value;
            }
        }

        public uint MNLastUpdate
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastUpdate;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastUpdate = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSVisibleAddress
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sVisibleAddress));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sVisibleAddress = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.NWSyncAdvertisement MNwsyncData
        {
            get
            {
                return global::NWN.LowLevel.NWSyncAdvertisement.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nwsyncData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nwsyncData = *(global::NWN.LowLevel.NWSyncAdvertisement.__Internal*) value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
