// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSBarter : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pBarterList;

            [FieldOffset(8)]
            internal __IntPtr m_pLastUpdate;

            [FieldOffset(16)]
            internal __IntPtr m_pOtherLastUpdate;

            [FieldOffset(24)]
            internal int m_bListLocked;

            [FieldOffset(28)]
            internal int m_bListAccepted;

            [FieldOffset(32)]
            internal int m_bInitiator;

            [FieldOffset(36)]
            internal int m_bWindowOpen;

            [FieldOffset(40)]
            internal uint m_oidBarrator;

            [FieldOffset(48)]
            internal __IntPtr m_pOwner;

            [FieldOffset(56)]
            internal int m_bDoReset;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarterC2EP12CNWSCreature", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, __IntPtr pCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarterC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarterD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter5ResetEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Reset(__IntPtr __instance, uint oidBarrator, int bInitiator);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter7CleanUpEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanUp(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter7AddItemEjRhS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddItem(__IntPtr __instance, uint oidItem, byte* xPos, byte* yPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter10RemoveItemEjRhS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveItem(__IntPtr __instance, uint oidItem, byte* xPos, byte* yPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter8MoveItemEjRhS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MoveItem(__IntPtr __instance, uint oidItem, byte* xPos, byte* yPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter11PullItemOutEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PullItemOut(__IntPtr __instance, uint oidItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter13SetListLockedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetListLocked(__IntPtr __instance, int bLocked);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter15SetListAcceptedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetListAccepted(__IntPtr __instance, int bAccepted);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSBarter8GetStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetState(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSBarter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSBarter>();

        protected bool __ownsNativeInstance;

        internal static CNWSBarter __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSBarter(native.ToPointer(), skipVTables);
        }

        internal static CNWSBarter __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSBarter)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSBarter __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSBarter(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWSBarter(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSBarter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSBarter(global::NWN.LowLevel.CNWSCreature pCreature)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSBarter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = pCreature is null ? __IntPtr.Zero : pCreature.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public CNWSBarter(global::NWN.LowLevel.CNWSBarter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSBarter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CNWSBarter.__Internal*) __Instance) = *((global::NWN.LowLevel.CNWSBarter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSBarter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Reset(uint oidBarrator, int bInitiator)
        {
            __Internal.Reset(__Instance, oidBarrator, bInitiator);
        }

        public void CleanUp()
        {
            __Internal.CleanUp(__Instance);
        }

        public int AddItem(uint oidItem, byte* xPos, byte* yPos)
        {
            var __ret = __Internal.AddItem(__Instance, oidItem, xPos, yPos);
            return __ret;
        }

        public int RemoveItem(uint oidItem, byte* xPos, byte* yPos)
        {
            var __ret = __Internal.RemoveItem(__Instance, oidItem, xPos, yPos);
            return __ret;
        }

        public int MoveItem(uint oidItem, byte* xPos, byte* yPos)
        {
            var __ret = __Internal.MoveItem(__Instance, oidItem, xPos, yPos);
            return __ret;
        }

        public int PullItemOut(uint oidItem)
        {
            var __ret = __Internal.PullItemOut(__Instance, oidItem);
            return __ret;
        }

        public int SetListLocked(int bLocked)
        {
            var __ret = __Internal.SetListLocked(__Instance, bLocked);
            return __ret;
        }

        public int SetListAccepted(int bAccepted)
        {
            var __ret = __Internal.SetListAccepted(__Instance, bAccepted);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CNWSBarter(global::NWN.LowLevel.CNWSCreature pCreature)
        {
            return new global::NWN.LowLevel.CNWSBarter(pCreature);
        }

        public global::NWN.LowLevel.CItemRepository MPBarterList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CItemRepository.__GetOrCreateInstance(((__Internal*)__Instance)->m_pBarterList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pBarterList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSPlayerLUOInventory MPLastUpdate
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSPlayerLUOInventory.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLastUpdate, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLastUpdate = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSPlayerLUOInventory MPOtherLastUpdate
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSPlayerLUOInventory.__GetOrCreateInstance(((__Internal*)__Instance)->m_pOtherLastUpdate, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pOtherLastUpdate = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBListLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_bListLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_bListLocked = value;
            }
        }

        public int MBListAccepted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bListAccepted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bListAccepted = value;
            }
        }

        public int MBInitiator
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInitiator;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInitiator = value;
            }
        }

        public int MBWindowOpen
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWindowOpen;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWindowOpen = value;
            }
        }

        public uint MOidBarrator
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidBarrator;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidBarrator = value;
            }
        }

        public global::NWN.LowLevel.CNWSCreature MPOwner
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(((__Internal*)__Instance)->m_pOwner, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pOwner = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBDoReset
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDoReset;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDoReset = value;
            }
        }

        public byte State
        {
            get
            {
                var __ret = __Internal.GetState(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
