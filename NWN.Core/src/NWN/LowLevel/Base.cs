// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    namespace NWNXLib
    {
        namespace API
        {
            namespace Constants
            {
                public unsafe partial class Base
                {
                    public partial struct __Internal
                    {
                    }

                    public static uint OBJECT_INVALID { get; } = 2130706432;

                    public static uint PLAYERID_ALL_SERVERADMINS { get; } = 4294967285;

                    public static uint PLAYERID_ALL_GAMEMASTERS { get; } = 4294967286;

                    public static uint PLAYERID_ALL_PLAYERS { get; } = 4294967287;

                    public static uint PLAYERID_SERVER { get; } = 4294967293;

                    public static uint PLAYERID_INVALIDID { get; } = 4294967294;

                    public static uint PLAYERID_ALL_CLIENTS { get; } = 4294967295;
                }

                namespace ObjectType
                {
                    public enum TYPE : uint
                    {
                        GUI = 1,
                        Tile = 2,
                        Module = 3,
                        Area = 4,
                        Creature = 5,
                        Item = 6,
                        Trigger = 7,
                        Projectile = 8,
                        Placeable = 9,
                        Door = 10,
                        AreaOfEffect = 11,
                        Waypoint = 12,
                        Encounter = 13,
                        Store = 14,
                        Portal = 15,
                        Sound = 16
                    }

                    public unsafe partial class Base
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10ObjectType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint objectType);
                        }

                        public static string ToString(uint objectType)
                        {
                            var __ret = __Internal.ToString(objectType);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 16;
                    }
                }

                namespace AIPriority
                {
                    public enum TYPE : uint
                    {
                        VeryLow = 0,
                        Low = 1,
                        Medium = 2,
                        High = 3,
                        VeryHigh = 4
                    }

                    public unsafe partial class Base
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10AIPriority8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 4;
                    }
                }

                namespace AIState
                {
                    [Flags]
                    public enum TYPE : uint
                    {
                        IsAlive = 0x1,
                        CanUseLegs = 0x2,
                        CanUseHands = 0x4,
                        CanUseMouth = 0x8,
                        CanUseEars = 0x10,
                        CanUseEyes = 0x20,
                        CanUseMind = 0x40,
                        IsAbleToGoHostile = 0x80
                    }
                }

                namespace ResRefType
                {
                    public enum TYPE : uint
                    {
                        BMP = 1,
                        MVE = 2,
                        TGA = 3,
                        WAV = 4,
                        PLT = 6,
                        INI = 7,
                        BMU = 8,
                        MPG = 9,
                        TXT = 10,
                        PLH = 2000,
                        TEX = 2001,
                        MDL = 2002,
                        THG = 2003,
                        FNT = 2005,
                        LUA = 2007,
                        SLT = 2008,
                        NSS = 2009,
                        NCS = 2010,
                        MOD = 2011,
                        ARE = 2012,
                        SET = 2013,
                        IFO = 2014,
                        BIC = 2015,
                        WOK = 2016,
                        TWODA = 2017,
                        TLK = 2018,
                        TXI = 2022,
                        GIT = 2023,
                        BTI = 2024,
                        UTI = 2025,
                        BTC = 2026,
                        UTC = 2027,
                        DLG = 2029,
                        ITP = 2030,
                        BTT = 2031,
                        UTT = 2032,
                        DDS = 2033,
                        BTS = 2034,
                        UTS = 2035,
                        LTR = 2036,
                        GFF = 2037,
                        FAC = 2038,
                        BTE = 2039,
                        UTE = 2040,
                        BTD = 2041,
                        UTD = 2042,
                        BTP = 2043,
                        UTP = 2044,
                        DFT = 2045,
                        GIC = 2046,
                        GUI = 2047,
                        CSS = 2048,
                        CCS = 2049,
                        BTM = 2050,
                        UTM = 2051,
                        DWK = 2052,
                        PWK = 2053,
                        BTG = 2054,
                        UTG = 2055,
                        JRL = 2056,
                        SAV = 2057,
                        UTW = 2058,
                        FOURPC = 2059,
                        SSF = 2060,
                        HAK = 2061,
                        NWM = 2062,
                        BIK = 2063,
                        NDB = 2064,
                        PTM = 2065,
                        PTT = 2066,
                        BAK = 2067,
                        DAT = 2068,
                        SHD = 2069,
                        XBC = 2070,
                        WBM = 2071,
                        MTR = 2072,
                        KTX = 2073,
                        TTF = 2074,
                        SQL = 2075,
                        TML = 2076,
                        SQ3 = 2077,
                        LOD = 2078,
                        IDS = 9996,
                        ERF = 9997,
                        BIF = 9998,
                        KEY = 9999
                    }

                    public unsafe partial class Base
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants10ResRefType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 1;

                        public static int MAX { get; } = 9999;
                    }
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
