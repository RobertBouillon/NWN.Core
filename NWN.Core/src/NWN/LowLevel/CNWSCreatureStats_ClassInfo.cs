// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSCreatureStatsClassInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 392)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte m_pKnownSpellList[160];

            [FieldOffset(160)]
            internal fixed byte m_pMemorizedSpellList[160];

            [FieldOffset(320)]
            internal fixed uint m_nBonusSpellsList[10];

            [FieldOffset(360)]
            internal fixed byte m_nSpellsPerDayLeft[10];

            [FieldOffset(370)]
            internal fixed byte m_nMaxSpellsPerDayLeft[10];

            [FieldOffset(380)]
            internal byte m_nClass;

            [FieldOffset(381)]
            internal byte m_nLevel;

            [FieldOffset(382)]
            internal byte m_nNegativeLevels;

            [FieldOffset(383)]
            internal byte m_nSchool;

            [FieldOffset(384)]
            internal fixed byte m_nDomain[2];

            [FieldOffset(388)]
            internal int m_bHasLostClassAbilities;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfoC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfoD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo21SetMemorizedSpellSlotEhhjih", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMemorizedSpellSlot(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot, uint nSpellId, int bDomainSpell, byte nMetaType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo23ClearMemorizedSpellSlotEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearMemorizedSpellSlot(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo25ClearMemorizedKnownSpellsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearMemorizedKnownSpells(__IntPtr __instance, uint nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo13AddKnownSpellEhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddKnownSpell(__IntPtr __instance, byte nSpellLevel, uint nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo16RemoveKnownSpellEhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveKnownSpell(__IntPtr __instance, byte nSpellLevel, uint nSpellId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo13GetKnownSpellEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetKnownSpell(__IntPtr __instance, byte nSpellLevel, byte nSpellListIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo23GetMemorizedSpellInSlotEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetMemorizedSpellInSlot(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo16GetIsDomainSpellEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsDomainSpell(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo18ConfirmDomainSpellEhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ConfirmDomainSpell(__IntPtr __instance, byte nSpellLevel, uint nSpellID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo30GetMemorizedSpellInSlotDetailsEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetMemorizedSpellInSlotDetails(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo20GetNumberKnownSpellsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetNumberKnownSpells(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo28GetNumberMemorizedSpellSlotsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetNumberMemorizedSpellSlots(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo28SetNumberMemorizedSpellSlotsEhhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNumberMemorizedSpellSlots(__IntPtr __instance, byte nSpellLevel, byte nNumSlots, int bClear);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo20GetNumberBonusSpellsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetNumberBonusSpells(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo23ModifyNumberBonusSpellsEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ModifyNumberBonusSpells(__IntPtr __instance, byte nSpellLevel, int nDelta);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo20MemorizeAllNPCSpellsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MemorizeAllNPCSpells(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo28GetMemorizedSpellInSlotReadyEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMemorizedSpellInSlotReady(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo28SetMemorizedSpellInSlotReadyEhhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMemorizedSpellInSlotReady(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot, int bReady);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo27GetMemorizedSpellReadyCountEjPhS0_h", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMemorizedSpellReadyCount(__IntPtr __instance, uint nSpellID, byte* nMinSpellLevel, byte* nMinSpellSlot, byte nRequestedMetaType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo27GetMemorizedSpellReadyCountEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMemorizedSpellReadyCount(__IntPtr __instance, uint nSpellID, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo31GetMemorizedSpellInSlotMetaTypeEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMemorizedSpellInSlotMetaType(__IntPtr __instance, byte nSpellLevel, byte nSpellSlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo19GetSpellsPerDayLeftEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo19SetSpellsPerDayLeftEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel, byte nNumSpells);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo22GetMaxSpellsPerDayLeftEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMaxSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo22SetMaxSpellsPerDayLeftEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMaxSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel, byte nNumSpells);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo25DecrementSpellsPerDayLeftEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DecrementSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo25IncrementSpellsPerDayLeftEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IncrementSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN27CNWSCreatureStats_ClassInfo21ResetSpellsPerDayLeftEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetSpellsPerDayLeft(__IntPtr __instance, byte nSpellLevel, byte nSpellGain);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCreatureStatsClassInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCreatureStatsClassInfo>();

        protected bool __ownsNativeInstance;

        internal static CNWSCreatureStatsClassInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSCreatureStatsClassInfo(native.ToPointer(), skipVTables);
        }

        internal static CNWSCreatureStatsClassInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSCreatureStatsClassInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSCreatureStatsClassInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSCreatureStatsClassInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSCreatureStatsClassInfo.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSCreatureStatsClassInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSCreatureStatsClassInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSCreatureStatsClassInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCreatureStatsClassInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWSCreatureStatsClassInfo(global::NWN.LowLevel.CNWSCreatureStatsClassInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCreatureStatsClassInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSCreatureStatsClassInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetMemorizedSpellSlot(byte nSpellLevel, byte nSpellSlot, uint nSpellId, int bDomainSpell, byte nMetaType)
        {
            __Internal.SetMemorizedSpellSlot(__Instance, nSpellLevel, nSpellSlot, nSpellId, bDomainSpell, nMetaType);
        }

        public void ClearMemorizedSpellSlot(byte nSpellLevel, byte nSpellSlot)
        {
            __Internal.ClearMemorizedSpellSlot(__Instance, nSpellLevel, nSpellSlot);
        }

        public void ClearMemorizedKnownSpells(uint nSpellId)
        {
            __Internal.ClearMemorizedKnownSpells(__Instance, nSpellId);
        }

        public void AddKnownSpell(byte nSpellLevel, uint nSpellId)
        {
            __Internal.AddKnownSpell(__Instance, nSpellLevel, nSpellId);
        }

        public void RemoveKnownSpell(byte nSpellLevel, uint nSpellId)
        {
            __Internal.RemoveKnownSpell(__Instance, nSpellLevel, nSpellId);
        }

        public uint GetKnownSpell(byte nSpellLevel, byte nSpellListIndex)
        {
            var __ret = __Internal.GetKnownSpell(__Instance, nSpellLevel, nSpellListIndex);
            return __ret;
        }

        public uint GetMemorizedSpellInSlot(byte nSpellLevel, byte nSpellSlot)
        {
            var __ret = __Internal.GetMemorizedSpellInSlot(__Instance, nSpellLevel, nSpellSlot);
            return __ret;
        }

        public int GetIsDomainSpell(byte nSpellLevel, byte nSpellSlot)
        {
            var __ret = __Internal.GetIsDomainSpell(__Instance, nSpellLevel, nSpellSlot);
            return __ret;
        }

        public int ConfirmDomainSpell(byte nSpellLevel, uint nSpellID)
        {
            var __ret = __Internal.ConfirmDomainSpell(__Instance, nSpellLevel, nSpellID);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSStatsSpell GetMemorizedSpellInSlotDetails(byte nSpellLevel, byte nSpellSlot)
        {
            var __ret = __Internal.GetMemorizedSpellInSlotDetails(__Instance, nSpellLevel, nSpellSlot);
            var __result0 = global::NWN.LowLevel.CNWSStatsSpell.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public ushort GetNumberKnownSpells(byte nSpellLevel)
        {
            var __ret = __Internal.GetNumberKnownSpells(__Instance, nSpellLevel);
            return __ret;
        }

        public byte GetNumberMemorizedSpellSlots(byte nSpellLevel)
        {
            var __ret = __Internal.GetNumberMemorizedSpellSlots(__Instance, nSpellLevel);
            return __ret;
        }

        public void SetNumberMemorizedSpellSlots(byte nSpellLevel, byte nNumSlots, int bClear)
        {
            __Internal.SetNumberMemorizedSpellSlots(__Instance, nSpellLevel, nNumSlots, bClear);
        }

        public byte GetNumberBonusSpells(byte nSpellLevel)
        {
            var __ret = __Internal.GetNumberBonusSpells(__Instance, nSpellLevel);
            return __ret;
        }

        public void ModifyNumberBonusSpells(byte nSpellLevel, int nDelta)
        {
            __Internal.ModifyNumberBonusSpells(__Instance, nSpellLevel, nDelta);
        }

        public void MemorizeAllNPCSpells()
        {
            __Internal.MemorizeAllNPCSpells(__Instance);
        }

        public int GetMemorizedSpellInSlotReady(byte nSpellLevel, byte nSpellSlot)
        {
            var __ret = __Internal.GetMemorizedSpellInSlotReady(__Instance, nSpellLevel, nSpellSlot);
            return __ret;
        }

        public void SetMemorizedSpellInSlotReady(byte nSpellLevel, byte nSpellSlot, int bReady)
        {
            __Internal.SetMemorizedSpellInSlotReady(__Instance, nSpellLevel, nSpellSlot, bReady);
        }

        public byte GetMemorizedSpellReadyCount(uint nSpellID, byte* nMinSpellLevel, byte* nMinSpellSlot, byte nRequestedMetaType)
        {
            var __ret = __Internal.GetMemorizedSpellReadyCount(__Instance, nSpellID, nMinSpellLevel, nMinSpellSlot, nRequestedMetaType);
            return __ret;
        }

        public byte GetMemorizedSpellReadyCount(uint nSpellID, byte nSpellLevel)
        {
            var __ret = __Internal.GetMemorizedSpellReadyCount(__Instance, nSpellID, nSpellLevel);
            return __ret;
        }

        public byte GetMemorizedSpellInSlotMetaType(byte nSpellLevel, byte nSpellSlot)
        {
            var __ret = __Internal.GetMemorizedSpellInSlotMetaType(__Instance, nSpellLevel, nSpellSlot);
            return __ret;
        }

        public byte GetSpellsPerDayLeft(byte nSpellLevel)
        {
            var __ret = __Internal.GetSpellsPerDayLeft(__Instance, nSpellLevel);
            return __ret;
        }

        public void SetSpellsPerDayLeft(byte nSpellLevel, byte nNumSpells)
        {
            __Internal.SetSpellsPerDayLeft(__Instance, nSpellLevel, nNumSpells);
        }

        public byte GetMaxSpellsPerDayLeft(byte nSpellLevel)
        {
            var __ret = __Internal.GetMaxSpellsPerDayLeft(__Instance, nSpellLevel);
            return __ret;
        }

        public void SetMaxSpellsPerDayLeft(byte nSpellLevel, byte nNumSpells)
        {
            __Internal.SetMaxSpellsPerDayLeft(__Instance, nSpellLevel, nNumSpells);
        }

        public void DecrementSpellsPerDayLeft(byte nSpellLevel)
        {
            __Internal.DecrementSpellsPerDayLeft(__Instance, nSpellLevel);
        }

        public void IncrementSpellsPerDayLeft(byte nSpellLevel)
        {
            __Internal.IncrementSpellsPerDayLeft(__Instance, nSpellLevel);
        }

        public void ResetSpellsPerDayLeft(byte nSpellLevel, byte nSpellGain)
        {
            __Internal.ResetSpellsPerDayLeft(__Instance, nSpellLevel, nSpellGain);
        }

        public global::NWN.LowLevel.CExoArrayList<uint>[] MPKnownSpellList
        {
            get
            {
                global::NWN.LowLevel.CExoArrayList<uint>[] __value = null;
                if (((__Internal*)__Instance)->m_pKnownSpellList != null)
                {
                    __value = new global::NWN.LowLevel.CExoArrayList<uint>[10];
                    for (int i = 0; i < 10; i++)
                        __value[i] = global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(*((global::NWN.LowLevel.CExoArrayList<uint>.__Internal*)&(((__Internal*)__Instance)->m_pKnownSpellList[i * sizeof(global::NWN.LowLevel.CExoArrayList<uint>.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 10)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 10; i++)
                        *(global::NWN.LowLevel.CExoArrayList<uint>.__Internal*) &((__Internal*)__Instance)->m_pKnownSpellList[i * sizeof(global::NWN.LowLevel.CExoArrayList<uint>.__Internal)] = *(global::NWN.LowLevel.CExoArrayList<uint>.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>[] MPMemorizedSpellList
        {
            get
            {
                global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>[] __value = null;
                if (((__Internal*)__Instance)->m_pMemorizedSpellList != null)
                {
                    __value = new global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>[10];
                    for (int i = 0; i < 10; i++)
                        __value[i] = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__CreateInstance(*((global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__Internal*)&(((__Internal*)__Instance)->m_pMemorizedSpellList[i * sizeof(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 10)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 10; i++)
                        *(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__Internal*) &((__Internal*)__Instance)->m_pMemorizedSpellList[i * sizeof(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__Internal)] = *(global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNWSStatsSpell>.__Internal*)value[i].__Instance;
                }
            }
        }

        public uint[] MNBonusSpellsList
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nBonusSpellsList, 10);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((__Internal*)__Instance)->m_nBonusSpellsList[i] = value[i];
                }
            }
        }

        public byte[] MNSpellsPerDayLeft
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nSpellsPerDayLeft, 10);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((__Internal*)__Instance)->m_nSpellsPerDayLeft[i] = value[i];
                }
            }
        }

        public byte[] MNMaxSpellsPerDayLeft
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nMaxSpellsPerDayLeft, 10);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 10; i++)
                        ((__Internal*)__Instance)->m_nMaxSpellsPerDayLeft[i] = value[i];
                }
            }
        }

        public byte MNClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClass = value;
            }
        }

        public byte MNLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLevel = value;
            }
        }

        public byte MNNegativeLevels
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNegativeLevels;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNegativeLevels = value;
            }
        }

        public byte MNSchool
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSchool;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSchool = value;
            }
        }

        public byte[] MNDomain
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nDomain, 2);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_nDomain[i] = value[i];
                }
            }
        }

        public int MBHasLostClassAbilities
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasLostClassAbilities;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasLostClassAbilities = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
