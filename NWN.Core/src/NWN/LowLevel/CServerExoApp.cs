// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CCampaignDB
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCampaignDB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCampaignDB>();

        protected bool __ownsNativeInstance;

        internal static CCampaignDB __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CCampaignDB(native.ToPointer(), skipVTables);
        }

        internal static CCampaignDB __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CCampaignDB)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CCampaignDB __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CCampaignDB(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCampaignDB(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCampaignDB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CServerExoApp : global::NWN.LowLevel.CBaseExoApp, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CBaseExoApp;

            [FieldOffset(8)]
            internal __IntPtr m_pcExoAppInternal;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoAppC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoAppC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23VomitServerOptionsToLogEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void VomitServerOptionsToLog(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17RemovePCFromWorldEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePCFromWorld(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp8ShutdownEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Shutdown(__IntPtr __instance, int bWarnLocals, int bFromMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19SetGameSpyReportingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGameSpyReporting(__IntPtr __instance, int bEnabled);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp14GetIniFileNameER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIniFileName(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp8LoadGameEjR10CExoStringS1_P10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadGame(__IntPtr __instance, uint nSlot, __IntPtr sSaveName, __IntPtr sModuleName, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp14StartNewModuleER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartNewModule(__IntPtr __instance, __IntPtr sModuleName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17SetEndGamePendingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetEndGamePending(__IntPtr __instance, int bPending);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16SetEndGameStringER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetEndGameString(__IntPtr __instance, __IntPtr sMovieName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp32AddExportPlayersCharacterRequestEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddExportPlayersCharacterRequest(__IntPtr __instance, uint oid);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp34ClearExportPlayerCharacterRequestsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearExportPlayerCharacterRequests(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18LoadCharacterStartEhP10CNWSPlayer7CResRefPvj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCharacterStart(__IntPtr __instance, byte nType, __IntPtr pPlayer, global::NWN.LowLevel.CResRef.__Internal cResRef, __IntPtr pCharData, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19LoadCharacterFinishEP10CNWSPlayerii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCharacterFinish(__IntPtr __instance, __IntPtr pPlayer, int bUseSaveGameCharacter, int bUseStateDataInSaveGame);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17LoadPrimaryPlayerEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPrimaryPlayer(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetGameObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetGameObject(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22GetStoreByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStoreByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp21GetItemByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetItemByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetCreatureByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetCreatureByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23GetModuleByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetModuleByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp21GetAreaByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAreaByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24GetTriggerByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTriggerByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp26GetPlaceableByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlaceableByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp21GetDoorByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDoorByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp29GetAreaOfEffectByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAreaOfEffectByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetWaypointByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetWaypointByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp26GetEncounterByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetEncounterByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp28GetSoundObjectByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSoundObjectByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetPlayerIDByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetPlayerIDByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17GetPlayerLanguageEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerLanguage(__IntPtr __instance, uint nPlayerID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp14GetActiveTimerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetActiveTimer(__IntPtr __instance, uint oid);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp11LoadAliasesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadAliases(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp12UnloadModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnloadModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp10LoadModuleE10CExoStringiP10CNWSPlayeri", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadModule(__IntPtr __instance, global::NWN.LowLevel.CExoString.__Internal moduleResRef, int bIsSaveGame, __IntPtr pPlayer, int sourceType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp9RunModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp10OnCDChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnCDChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp6OnExitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnExit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp11OnGainFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnGainFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp11OnLostFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnLostFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13OnVideoChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnVideoChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13StartServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16ShutdownNetLayerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutdownNetLayer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp15RestartNetLayerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestartNetLayer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp12StopServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StopServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp12UninitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Uninitialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp14SetForceUpdateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetForceUpdate(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18SendCharacterQueryEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendCharacterQuery(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetClientObjectByObjectIdEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClientObjectByObjectId(__IntPtr __instance, uint nObjectId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16TogglePauseStateEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TogglePauseState(__IntPtr __instance, byte nState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetPauseStateEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPauseState(__IntPtr __instance, byte nState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13SetPauseStateEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPauseState(__IntPtr __instance, byte nState, int bPause);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18AddToExclusionListEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToExclusionList(__IntPtr __instance, uint oidExclude, byte nList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23RemoveFromExclusionListEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromExclusionList(__IntPtr __instance, uint oidExclude, byte nList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23IsOnActiveExclusionListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsOnActiveExclusionList(__IntPtr __instance, uint oidExclude);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23GetIsControlledByPlayerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsControlledByPlayer(__IntPtr __instance, uint oidObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetClientObjectByPlayerIdEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClientObjectByPlayerId(__IntPtr __instance, uint nPlayerId, byte nClientType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19ValidatePlayerLoginEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ValidatePlayerLogin(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16MovePlayerToAreaEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MovePlayerToArea(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23InitiateModuleForPlayerEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitiateModuleForPlayer(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp20GetPlayerAddressDataEjPjPPhS2_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerAddressData(__IntPtr __instance, uint nConnectionId, uint* nProtocol, byte** pNetAddress1, byte** pNetAddress2, uint* nPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18GetFactionOfObjectEjPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFactionOfObject(__IntPtr __instance, uint oObject, int* nFaction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24ResolvePlayerByFirstNameERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ResolvePlayerByFirstName(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetDifficultyOptionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDifficultyOption(__IntPtr __instance, int nOption);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18AddCharListRequestEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCharListRequest(__IntPtr __instance, uint nPlayerId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17IsOnExclusionListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsOnExclusionList(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17AddIPToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddIPToBannedList(__IntPtr __instance, __IntPtr sIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25AddPlayerNameToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddPlayerNameToBannedList(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp20AddCDKeyToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCDKeyToBannedList(__IntPtr __instance, __IntPtr sKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22RemoveIPFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveIPFromBannedList(__IntPtr __instance, __IntPtr sIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp30RemovePlayerNameFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePlayerNameFromBannedList(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25RemoveCDKeyFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveCDKeyFromBannedList(__IntPtr __instance, __IntPtr sKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16StripColorTokensER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StripColorTokens(__IntPtr __instance, __IntPtr sInput);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24AddSubNetProfileSendSizeEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSubNetProfileSendSize(__IntPtr __instance, uint nPlayerID, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19SetAttackBonusLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAttackBonusLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19SetDamageBonusLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDamageBonusLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24SetSavingThrowBonusLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSavingThrowBonusLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp20SetAbilityBonusLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAbilityBonusLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22SetAbilityPenaltyLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAbilityPenaltyLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18SetSkillBonusLimitEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSkillBonusLimit(__IntPtr __instance, int newLimit, int isModuleOverride);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp20SetDDCipherForModuleE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetDDCipherForModule(__IntPtr __instance, __IntPtr moduleName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp9GetModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetModuleNameEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetModuleName(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22GetMoveToModulePendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMoveToModulePending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22SetMoveToModulePendingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMoveToModulePending(__IntPtr __instance, int bPending);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp21GetMoveToModuleStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMoveToModuleString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp21SetMoveToModuleStringER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMoveToModuleString(__IntPtr __instance, __IntPtr sModName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16GetLoadingModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetLoadingModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16SetLoadingModuleEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetLoadingModule(__IntPtr __instance, int bLoading);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16GetImportingCharEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetImportingChar(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16SetImportingCharEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetImportingChar(__IntPtr __instance, int bImporting);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18GetAutoSavePendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAutoSavePending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18SetAutoSavePendingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutoSavePending(__IntPtr __instance, int bPending);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16ExportAllPlayersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExportAllPlayers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25GetExportCharacterPendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetExportCharacterPending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp25SetExportCharacterPendingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetExportCharacterPending(__IntPtr __instance, int bPending);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp33GetExportPlayersCharacterRequestsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetExportPlayersCharacterRequests(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp14GetObjectArrayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetObjectArray(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17GetModuleLanguageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetModuleLanguage(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17GetServerAIMasterEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetServerAIMaster(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp15GetSysAdminListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSysAdminList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetPlayerListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlayerList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetNWSMessageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetNWSMessage(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetPlaceMeshManagerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlaceMeshManager(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetServerModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern short GetServerMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp12GetDebugModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDebugMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp12SetDebugModeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDebugMode(__IntPtr __instance, int bMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetWorldTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetWorldTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16GetTimestopTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTimestopTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetPauseTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPauseTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetPlayerListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPlayerListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetBannedListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetBannedListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetPortalListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPortalListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp8MainLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MainLoop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetActivePauseStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetActivePauseState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22GetActiveExclusionListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetActiveExclusionList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp13GetCampaignDBEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetCampaignDB(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24GetReloadModuleWhenEmptyEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetReloadModuleWhenEmpty(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24SetReloadModuleWhenEmptyEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReloadModuleWhenEmpty(__IntPtr __instance, int bReloadModuleWhenEmpty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp16GetFirstPCObjectEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFirstPCObject(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp15GetNextPCObjectEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetNextPCObject(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17GetGameSpyEnabledEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetGameSpyEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp17SetGameSpyEnabledEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGameSpyEnabled(__IntPtr __instance, int b);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23GetCreatureDeathLoggingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCreatureDeathLogging(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp23SetCreatureDeathLoggingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCreatureDeathLogging(__IntPtr __instance, int _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetHeartBeatLoggingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetHeartBeatLogging(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19SetHeartBeatLoggingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetHeartBeatLogging(__IntPtr __instance, int _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp35GetClientsRequiredToDisableCPUSleepEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetClientsRequiredToDisableCPUSleep(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp27GetStickyCombatModesEnabledEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStickyCombatModesEnabled(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp27SetStickyCombatModesEnabledEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetStickyCombatModesEnabled(__IntPtr __instance, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetAttackBonusLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAttackBonusLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp19GetDamageBonusLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDamageBonusLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp24GetSavingThrowBonusLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSavingThrowBonusLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp20GetAbilityBonusLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAbilityBonusLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp22GetAbilityPenaltyLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAbilityPenaltyLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp18GetSkillBonusLimitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSkillBonusLimit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CServerExoApp37GetHostedPublicInternetAddressAndPortEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetHostedPublicInternetAddressAndPort(__IntPtr @return, __IntPtr __instance);
        }

        internal static new CServerExoApp __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CServerExoApp(native.ToPointer(), skipVTables);
        }

        internal static new CServerExoApp __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CServerExoApp)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CServerExoApp __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CServerExoApp)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CServerExoApp __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CServerExoApp(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CServerExoApp.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CServerExoApp(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CServerExoApp(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CServerExoApp()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerExoApp.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CServerExoApp");
        }

        public CServerExoApp(global::NWN.LowLevel.CServerExoApp _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerExoApp.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CServerExoApp");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CBaseExoApp __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CServerExoApp.__Internal*) __Instance)->vptr_CBaseExoApp = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 28);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public override int AdmitNetworkAddress(uint nProtocol, global::NWN.LowLevel.CExoString sAddress)
        {
            return base.AdmitNetworkAddress(nProtocol, sAddress);
        }

        public override int SetNetworkAddressBan(uint nProtocol, global::NWN.LowLevel.CExoString sAddress, int bBanPlayer)
        {
            return base.SetNetworkAddressBan(nProtocol, sAddress, bBanPlayer);
        }

        public override int AdmitPlayerName(global::NWN.LowLevel.CExoString sPlayerName)
        {
            return base.AdmitPlayerName(sPlayerName);
        }

        public override void PlayerListChange(uint nPlayerId, int bEnter, int bPrimaryPlayer)
        {
            base.PlayerListChange(nPlayerId, bEnter, bPrimaryPlayer);
        }

        public void VomitServerOptionsToLog()
        {
            __Internal.VomitServerOptionsToLog(__Instance);
        }

        public override int ContinueMessageProcessing()
        {
            return base.ContinueMessageProcessing();
        }

        public void RemovePCFromWorld(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            __Internal.RemovePCFromWorld(__Instance, __arg0);
        }

        public void Shutdown(int bWarnLocals, int bFromMessage)
        {
            __Internal.Shutdown(__Instance, bWarnLocals, bFromMessage);
        }

        public void SetGameSpyReporting(int bEnabled)
        {
            __Internal.SetGameSpyReporting(__Instance, bEnabled);
        }

        public int GetIniFileName(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.GetIniFileName(__Instance, __arg0);
            return __ret;
        }

        public int LoadGame(uint nSlot, global::NWN.LowLevel.CExoString sSaveName, global::NWN.LowLevel.CExoString sModuleName, global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            if (ReferenceEquals(sSaveName, null))
                throw new global::System.ArgumentNullException("sSaveName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sSaveName.__Instance;
            if (ReferenceEquals(sModuleName, null))
                throw new global::System.ArgumentNullException("sModuleName", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sModuleName.__Instance;
            var __arg3 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadGame(__Instance, nSlot, __arg1, __arg2, __arg3);
            return __ret;
        }

        public int StartNewModule(global::NWN.LowLevel.CExoString sModuleName)
        {
            if (ReferenceEquals(sModuleName, null))
                throw new global::System.ArgumentNullException("sModuleName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sModuleName.__Instance;
            var __ret = __Internal.StartNewModule(__Instance, __arg0);
            return __ret;
        }

        public void SetEndGamePending(int bPending)
        {
            __Internal.SetEndGamePending(__Instance, bPending);
        }

        public void SetEndGameString(global::NWN.LowLevel.CExoString sMovieName)
        {
            if (ReferenceEquals(sMovieName, null))
                throw new global::System.ArgumentNullException("sMovieName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sMovieName.__Instance;
            __Internal.SetEndGameString(__Instance, __arg0);
        }

        public void AddExportPlayersCharacterRequest(uint oid)
        {
            __Internal.AddExportPlayersCharacterRequest(__Instance, oid);
        }

        public void ClearExportPlayerCharacterRequests()
        {
            __Internal.ClearExportPlayerCharacterRequests(__Instance);
        }

        public int LoadCharacterStart(byte nType, global::NWN.LowLevel.CNWSPlayer pPlayer, global::NWN.LowLevel.CResRef cResRef, __IntPtr pCharData, uint nSize)
        {
            var __arg1 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg2 = cResRef.__Instance;
            var __ret = __Internal.LoadCharacterStart(__Instance, nType, __arg1, *(global::NWN.LowLevel.CResRef.__Internal*) __arg2, pCharData, nSize);
            return __ret;
        }

        public int LoadCharacterFinish(global::NWN.LowLevel.CNWSPlayer pPlayer, int bUseSaveGameCharacter, int bUseStateDataInSaveGame)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadCharacterFinish(__Instance, __arg0, bUseSaveGameCharacter, bUseStateDataInSaveGame);
            return __ret;
        }

        public int LoadPrimaryPlayer(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadPrimaryPlayer(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CGameObject GetGameObject(uint nObjectID)
        {
            var __ret = __Internal.GetGameObject(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CGameObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSStore GetStoreByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetStoreByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSStore.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSItem GetItemByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetItemByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSCreature GetCreatureByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetCreatureByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSModule GetModuleByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetModuleByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSArea GetAreaByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetAreaByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSArea.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSTrigger GetTriggerByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetTriggerByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSTrigger.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSPlaceable GetPlaceableByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetPlaceableByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSPlaceable.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSDoor GetDoorByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetDoorByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSDoor.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSAreaOfEffectObject GetAreaOfEffectByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetAreaOfEffectByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSWaypoint GetWaypointByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetWaypointByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSWaypoint.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSEncounter GetEncounterByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetEncounterByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSEncounter.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSSoundObject GetSoundObjectByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetSoundObjectByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSSoundObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public uint GetPlayerIDByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetPlayerIDByGameObjectID(__Instance, nObjectID);
            return __ret;
        }

        public int GetPlayerLanguage(uint nPlayerID)
        {
            var __ret = __Internal.GetPlayerLanguage(__Instance, nPlayerID);
            return __ret;
        }

        public global::NWN.LowLevel.CWorldTimer GetActiveTimer(uint oid)
        {
            var __ret = __Internal.GetActiveTimer(__Instance, oid);
            var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public override int HandleMessage(uint nPlayerId, byte* pData, uint dwSize, int bRawMessage)
        {
            return base.HandleMessage(nPlayerId, pData, dwSize, bRawMessage);
        }

        public int Initialize()
        {
            var __ret = __Internal.Initialize(__Instance);
            return __ret;
        }

        public void LoadAliases()
        {
            __Internal.LoadAliases(__Instance);
        }

        public int UnloadModule()
        {
            var __ret = __Internal.UnloadModule(__Instance);
            return __ret;
        }

        public int LoadModule(global::NWN.LowLevel.CExoString moduleResRef, int bIsSaveGame, global::NWN.LowLevel.CNWSPlayer pPlayer, int sourceType)
        {
            if (ReferenceEquals(moduleResRef, null))
                throw new global::System.ArgumentNullException("moduleResRef", "Cannot be null because it is passed by value.");
            var __arg0 = moduleResRef.__Instance;
            var __arg2 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadModule(__Instance, *(global::NWN.LowLevel.CExoString.__Internal*) __arg0, bIsSaveGame, __arg2, sourceType);
            return __ret;
        }

        public int RunModule()
        {
            var __ret = __Internal.RunModule(__Instance);
            return __ret;
        }

        public void OnCDChange()
        {
            __Internal.OnCDChange(__Instance);
        }

        public void OnExit()
        {
            __Internal.OnExit(__Instance);
        }

        public void OnGainFocus()
        {
            __Internal.OnGainFocus(__Instance);
        }

        public void OnLostFocus()
        {
            __Internal.OnLostFocus(__Instance);
        }

        public void OnVideoChange()
        {
            __Internal.OnVideoChange(__Instance);
        }

        public void StartServices()
        {
            __Internal.StartServices(__Instance);
        }

        public void ShutdownNetLayer()
        {
            __Internal.ShutdownNetLayer(__Instance);
        }

        public void RestartNetLayer()
        {
            __Internal.RestartNetLayer(__Instance);
        }

        public void StopServices()
        {
            __Internal.StopServices(__Instance);
        }

        public void Uninitialize()
        {
            __Internal.Uninitialize(__Instance);
        }

        public void SetForceUpdate()
        {
            __Internal.SetForceUpdate(__Instance);
        }

        public int SendCharacterQuery(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.SendCharacterQuery(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSPlayer GetClientObjectByObjectId(uint nObjectId)
        {
            var __ret = __Internal.GetClientObjectByObjectId(__Instance, nObjectId);
            var __result0 = global::NWN.LowLevel.CNWSPlayer.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void TogglePauseState(byte nState)
        {
            __Internal.TogglePauseState(__Instance, nState);
        }

        public int GetPauseState(byte nState)
        {
            var __ret = __Internal.GetPauseState(__Instance, nState);
            return __ret;
        }

        public void SetPauseState(byte nState, int bPause)
        {
            __Internal.SetPauseState(__Instance, nState, bPause);
        }

        public void AddToExclusionList(uint oidExclude, byte nList)
        {
            __Internal.AddToExclusionList(__Instance, oidExclude, nList);
        }

        public void RemoveFromExclusionList(uint oidExclude, byte nList)
        {
            __Internal.RemoveFromExclusionList(__Instance, oidExclude, nList);
        }

        public int IsOnActiveExclusionList(uint oidExclude)
        {
            var __ret = __Internal.IsOnActiveExclusionList(__Instance, oidExclude);
            return __ret;
        }

        public int GetIsControlledByPlayer(uint oidObject)
        {
            var __ret = __Internal.GetIsControlledByPlayer(__Instance, oidObject);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSClient GetClientObjectByPlayerId(uint nPlayerId, byte nClientType)
        {
            var __ret = __Internal.GetClientObjectByPlayerId(__Instance, nPlayerId, nClientType);
            var __result0 = global::NWN.LowLevel.CNWSClient.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int ValidatePlayerLogin(__IntPtr pPlayer)
        {
            var __ret = __Internal.ValidatePlayerLogin(__Instance, pPlayer);
            return __ret;
        }

        public void MovePlayerToArea(__IntPtr pPlayer)
        {
            __Internal.MovePlayerToArea(__Instance, pPlayer);
        }

        public void InitiateModuleForPlayer(__IntPtr pPlayer)
        {
            __Internal.InitiateModuleForPlayer(__Instance, pPlayer);
        }

        public override void HandleGameSpyToServerMessage(int nKeyId, __IntPtr pOutBuf, int nIndex)
        {
            base.HandleGameSpyToServerMessage(nKeyId, pOutBuf, nIndex);
        }

        public int GetPlayerAddressData(uint nConnectionId, ref uint nProtocol, byte** pNetAddress1, byte** pNetAddress2, ref uint nPort)
        {
            fixed (uint* __nProtocol1 = &nProtocol)
            {
                var __arg1 = __nProtocol1;
                fixed (uint* __nPort4 = &nPort)
                {
                    var __arg4 = __nPort4;
                    var __ret = __Internal.GetPlayerAddressData(__Instance, nConnectionId, __arg1, pNetAddress1, pNetAddress2, __arg4);
                    return __ret;
                }
            }
        }

        public int GetFactionOfObject(uint oObject, ref int nFaction)
        {
            fixed (int* __nFaction1 = &nFaction)
            {
                var __arg1 = __nFaction1;
                var __ret = __Internal.GetFactionOfObject(__Instance, oObject, __arg1);
                return __ret;
            }
        }

        public uint ResolvePlayerByFirstName(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.ResolvePlayerByFirstName(__Instance, __arg0);
            return __ret;
        }

        public int GetDifficultyOption(int nOption)
        {
            var __ret = __Internal.GetDifficultyOption(__Instance, nOption);
            return __ret;
        }

        public void AddCharListRequest(uint nPlayerId)
        {
            __Internal.AddCharListRequest(__Instance, nPlayerId);
        }

        public int IsOnExclusionList(uint oidTarget)
        {
            var __ret = __Internal.IsOnExclusionList(__Instance, oidTarget);
            return __ret;
        }

        public void AddIPToBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            if (ReferenceEquals(sIP, null))
                throw new global::System.ArgumentNullException("sIP", "Cannot be null because it is passed by value.");
            var __arg0 = sIP.__Instance;
            __Internal.AddIPToBannedList(__Instance, __arg0);
        }

        public void AddPlayerNameToBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            __Internal.AddPlayerNameToBannedList(__Instance, __arg0);
        }

        public void AddCDKeyToBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            if (ReferenceEquals(sKey, null))
                throw new global::System.ArgumentNullException("sKey", "Cannot be null because it is passed by value.");
            var __arg0 = sKey.__Instance;
            __Internal.AddCDKeyToBannedList(__Instance, __arg0);
        }

        public void RemoveIPFromBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            if (ReferenceEquals(sIP, null))
                throw new global::System.ArgumentNullException("sIP", "Cannot be null because it is passed by value.");
            var __arg0 = sIP.__Instance;
            __Internal.RemoveIPFromBannedList(__Instance, __arg0);
        }

        public void RemovePlayerNameFromBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            __Internal.RemovePlayerNameFromBannedList(__Instance, __arg0);
        }

        public void RemoveCDKeyFromBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            if (ReferenceEquals(sKey, null))
                throw new global::System.ArgumentNullException("sKey", "Cannot be null because it is passed by value.");
            var __arg0 = sKey.__Instance;
            __Internal.RemoveCDKeyFromBannedList(__Instance, __arg0);
        }

        public override int GetIsIPOnBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            return base.GetIsIPOnBannedList(sIP);
        }

        public override int GetIsPlayerNameOnBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            return base.GetIsPlayerNameOnBannedList(sPlayerName);
        }

        public override int GetIsCDKeyOnBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            return base.GetIsCDKeyOnBannedList(sKey);
        }

        public override void HandleOldServerVaultMigration(global::NWN.LowLevel.CExoString sClientCDKey, global::NWN.LowLevel.CExoString sClientLegacyCDKey, global::NWN.LowLevel.CExoString sPlayerName)
        {
            base.HandleOldServerVaultMigration(sClientCDKey, sClientLegacyCDKey, sPlayerName);
        }

        public override int CheckStickyPlayerNameReserved(global::NWN.LowLevel.CExoString sClientCDKey, global::NWN.LowLevel.CExoString sClientLegacyCDKey, global::NWN.LowLevel.CExoString sPlayerName, int nConnectionType)
        {
            return base.CheckStickyPlayerNameReserved(sClientCDKey, sClientLegacyCDKey, sPlayerName, nConnectionType);
        }

        public override void PushMessageOverWall(byte* pData, uint nMsgLength)
        {
            base.PushMessageOverWall(pData, nMsgLength);
        }

        public int StripColorTokens(global::NWN.LowLevel.CExoString sInput)
        {
            if (ReferenceEquals(sInput, null))
                throw new global::System.ArgumentNullException("sInput", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sInput.__Instance;
            var __ret = __Internal.StripColorTokens(__Instance, __arg0);
            return __ret;
        }

        public void AddSubNetProfileSendSize(uint nPlayerID, uint nSize)
        {
            __Internal.AddSubNetProfileSendSize(__Instance, nPlayerID, nSize);
        }

        public void SetAttackBonusLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetAttackBonusLimit(__Instance, newLimit, isModuleOverride);
        }

        public void SetDamageBonusLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetDamageBonusLimit(__Instance, newLimit, isModuleOverride);
        }

        public void SetSavingThrowBonusLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetSavingThrowBonusLimit(__Instance, newLimit, isModuleOverride);
        }

        public void SetAbilityBonusLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetAbilityBonusLimit(__Instance, newLimit, isModuleOverride);
        }

        public void SetAbilityPenaltyLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetAbilityPenaltyLimit(__Instance, newLimit, isModuleOverride);
        }

        public void SetSkillBonusLimit(int newLimit, int isModuleOverride)
        {
            __Internal.SetSkillBonusLimit(__Instance, newLimit, isModuleOverride);
        }

        public int SetDDCipherForModule(global::NWN.LowLevel.CExoString moduleName)
        {
            if (ReferenceEquals(moduleName, null))
                throw new global::System.ArgumentNullException("moduleName", "Cannot be null because it is passed by value.");
            var __arg0 = moduleName.__Instance;
            var __ret = __Internal.SetDDCipherForModule(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CServerExoAppInternal MPcExoAppInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CServerExoAppInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcExoAppInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcExoAppInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public override global::NWN.LowLevel.CServerInfo ServerInfo
        {
            get
            {
                return base.ServerInfo;
            }
        }

        public override global::NWN.LowLevel.CExoLocString ModuleDescription
        {
            get
            {
                return base.ModuleDescription;
            }
        }

        public virtual global::NWN.LowLevel.CExtendedServerInfo GetExtendedServerInfo
        {
            get
            {
                return base.GetExtendedServerInfo;
            }

            set
            {
                base.GetExtendedServerInfo = value;
            }
        }

        public global::NWN.LowLevel.CNWSModule Module
        {
            get
            {
                var __ret = __Internal.GetModule(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CExoString ModuleName
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetModuleName(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public int MoveToModulePending
        {
            get
            {
                var __ret = __Internal.GetMoveToModulePending(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetMoveToModulePending(__Instance, value);
            }
        }

        public global::NWN.LowLevel.CExoString MoveToModuleString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetMoveToModuleString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetMoveToModuleString(__Instance, __arg0);
            }
        }

        public int LoadingModule
        {
            get
            {
                var __ret = __Internal.GetLoadingModule(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetLoadingModule(__Instance, value);
            }
        }

        public int ImportingChar
        {
            get
            {
                var __ret = __Internal.GetImportingChar(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetImportingChar(__Instance, value);
            }
        }

        public int AutoSavePending
        {
            get
            {
                var __ret = __Internal.GetAutoSavePending(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetAutoSavePending(__Instance, value);
            }
        }

        public int ExportAllPlayers
        {
            get
            {
                var __ret = __Internal.ExportAllPlayers(__Instance);
                return __ret;
            }
        }

        public int ExportCharacterPending
        {
            get
            {
                var __ret = __Internal.GetExportCharacterPending(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetExportCharacterPending(__Instance, value);
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> ExportPlayersCharacterRequests
        {
            get
            {
                var __ret = __Internal.GetExportPlayersCharacterRequests(__Instance);
                var __result0 = global::NWN.LowLevel.CExoArrayList<uint>.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CGameObjectArray ObjectArray
        {
            get
            {
                var __ret = __Internal.GetObjectArray(__Instance);
                var __result0 = global::NWN.LowLevel.CGameObjectArray.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int ModuleLanguage
        {
            get
            {
                var __ret = __Internal.GetModuleLanguage(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CServerAIMaster ServerAIMaster
        {
            get
            {
                var __ret = __Internal.GetServerAIMaster(__Instance);
                var __result0 = global::NWN.LowLevel.CServerAIMaster.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public __IntPtr SysAdminList
        {
            get
            {
                var __ret = __Internal.GetSysAdminList(__Instance);
                return __ret;
            }
        }

        public __IntPtr PlayerList
        {
            get
            {
                var __ret = __Internal.GetPlayerList(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSMessage NWSMessage
        {
            get
            {
                var __ret = __Internal.GetNWSMessage(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSMessage.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public override global::NWN.LowLevel.CNetLayer NetLayer
        {
            get
            {
                return base.NetLayer;
            }
        }

        public global::NWN.LowLevel.CNWPlaceMeshManager PlaceMeshManager
        {
            get
            {
                var __ret = __Internal.GetPlaceMeshManager(__Instance);
                var __result0 = global::NWN.LowLevel.CNWPlaceMeshManager.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public short ServerMode
        {
            get
            {
                var __ret = __Internal.GetServerMode(__Instance);
                return __ret;
            }
        }

        public int DebugMode
        {
            get
            {
                var __ret = __Internal.GetDebugMode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDebugMode(__Instance, value);
            }
        }

        public global::NWN.LowLevel.CWorldTimer WorldTimer
        {
            get
            {
                var __ret = __Internal.GetWorldTimer(__Instance);
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CWorldTimer TimestopTimer
        {
            get
            {
                var __ret = __Internal.GetTimestopTimer(__Instance);
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CWorldTimer PauseTimer
        {
            get
            {
                var __ret = __Internal.GetPauseTimer(__Instance);
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CExoString PlayerListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetPlayerListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString BannedListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetBannedListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString PortalListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetPortalListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public int MainLoop
        {
            get
            {
                var __ret = __Internal.MainLoop(__Instance);
                return __ret;
            }
        }

        public byte ActivePauseState
        {
            get
            {
                var __ret = __Internal.GetActivePauseState(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.AurList<uint> ActiveExclusionList
        {
            get
            {
                var __ret = __Internal.GetActiveExclusionList(__Instance);
                var __result0 = global::NWN.LowLevel.AurList<uint>.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public override global::NWN.LowLevel.CConnectionLib ConnectionLib
        {
            get
            {
                return base.ConnectionLib;
            }
        }

        public global::NWN.LowLevel.CCampaignDB CampaignDB
        {
            get
            {
                var __ret = __Internal.GetCampaignDB(__Instance);
                var __result0 = global::NWN.LowLevel.CCampaignDB.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public override int MultiplayerEnabled
        {
            get
            {
                return base.MultiplayerEnabled;
            }
        }

        public int ReloadModuleWhenEmpty
        {
            get
            {
                var __ret = __Internal.GetReloadModuleWhenEmpty(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetReloadModuleWhenEmpty(__Instance, value);
            }
        }

        public override uint ApplicationId
        {
            get
            {
                return base.ApplicationId;
            }
        }

        public override int IsPlayerNameSticky
        {
            get
            {
                return base.IsPlayerNameSticky;
            }
        }

        public uint FirstPCObject
        {
            get
            {
                var __ret = __Internal.GetFirstPCObject(__Instance);
                return __ret;
            }
        }

        public uint NextPCObject
        {
            get
            {
                var __ret = __Internal.GetNextPCObject(__Instance);
                return __ret;
            }
        }

        public override int IsMultiPlayer
        {
            get
            {
                return base.IsMultiPlayer;
            }
        }

        public int GameSpyEnabled
        {
            get
            {
                var __ret = __Internal.GetGameSpyEnabled(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetGameSpyEnabled(__Instance, value);
            }
        }

        public int CreatureDeathLogging
        {
            get
            {
                var __ret = __Internal.GetCreatureDeathLogging(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetCreatureDeathLogging(__Instance, value);
            }
        }

        public int HeartBeatLogging
        {
            get
            {
                var __ret = __Internal.GetHeartBeatLogging(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetHeartBeatLogging(__Instance, value);
            }
        }

        public uint ClientsRequiredToDisableCPUSleep
        {
            get
            {
                var __ret = __Internal.GetClientsRequiredToDisableCPUSleep(__Instance);
                return __ret;
            }
        }

        public int StickyCombatModesEnabled
        {
            get
            {
                var __ret = __Internal.GetStickyCombatModesEnabled(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetStickyCombatModesEnabled(__Instance, value);
            }
        }

        public int AttackBonusLimit
        {
            get
            {
                var __ret = __Internal.GetAttackBonusLimit(__Instance);
                return __ret;
            }
        }

        public int DamageBonusLimit
        {
            get
            {
                var __ret = __Internal.GetDamageBonusLimit(__Instance);
                return __ret;
            }
        }

        public int SavingThrowBonusLimit
        {
            get
            {
                var __ret = __Internal.GetSavingThrowBonusLimit(__Instance);
                return __ret;
            }
        }

        public int AbilityBonusLimit
        {
            get
            {
                var __ret = __Internal.GetAbilityBonusLimit(__Instance);
                return __ret;
            }
        }

        public int AbilityPenaltyLimit
        {
            get
            {
                var __ret = __Internal.GetAbilityPenaltyLimit(__Instance);
                return __ret;
            }
        }

        public int SkillBonusLimit
        {
            get
            {
                var __ret = __Internal.GetSkillBonusLimit(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString HostedPublicInternetAddressAndPort
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetHostedPublicInternetAddressAndPort(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        #region Virtual table interop

        // BOOL AdmitNetworkAddress(uint32_t nProtocol, CExoString sAddress)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr _AdmitNetworkAddressDelegateInstance;

        private static int _AdmitNetworkAddressDelegateHook(__IntPtr __instance, uint nProtocol, __IntPtr sAddress)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result1 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sAddress, false);
            return __target.AdmitNetworkAddress(nProtocol, __result1);
        }

        // BOOL AdmitPlayerName(CExoString sPlayerName)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr _AdmitPlayerNameDelegateInstance;

        private static int _AdmitPlayerNameDelegateHook(__IntPtr __instance, __IntPtr sPlayerName)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sPlayerName, false);
            return __target.AdmitPlayerName(__result0);
        }

        // BOOL SetNetworkAddressBan(uint32_t nProtocol, CExoString sAddress, BOOL bBanPlayer)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint___IntPtr_int _SetNetworkAddressBanDelegateInstance;

        private static int _SetNetworkAddressBanDelegateHook(__IntPtr __instance, uint nProtocol, __IntPtr sAddress, int bBanPlayer)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result1 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sAddress, false);
            return __target.SetNetworkAddressBan(nProtocol, __result1, bBanPlayer);
        }

        // void PlayerListChange(uint32_t nPlayerId, BOOL bEnter, BOOL bPrimaryPlayer = false)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_int_int _PlayerListChangeDelegateInstance;

        private static void _PlayerListChangeDelegateHook(__IntPtr __instance, uint nPlayerId, int bEnter, int bPrimaryPlayer)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.PlayerListChange(nPlayerId, bEnter, bPrimaryPlayer);
        }

        // BOOL HandleMessage(uint32_t nPlayerId, uint8_t * pData, uint32_t dwSize, BOOL bRawMessage)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_uint_bytePtr_uint_int _HandleMessageDelegateInstance;

        private static int _HandleMessageDelegateHook(__IntPtr __instance, uint nPlayerId, byte* pData, uint dwSize, int bRawMessage)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.HandleMessage(nPlayerId, pData, dwSize, bRawMessage);
        }

        // float GetFPS()
        private static global::NWN.LowLevel.Delegates.Func_float___IntPtr _GetFPSDelegateInstance;

        private static float _GetFPSDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.FPS;
        }

        // BOOL ContinueMessageProcessing()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _ContinueMessageProcessingDelegateInstance;

        private static int _ContinueMessageProcessingDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.ContinueMessageProcessing();
        }

        // CNetLayer * GetNetLayer()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetNetLayerDelegateInstance;

        private static __IntPtr _GetNetLayerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __ret = __target.NetLayer;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void ShutDownToMainMenu()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _ShutDownToMainMenuDelegateInstance;

        private static void _ShutDownToMainMenuDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.ShutDownToMainMenu();
        }

        // BOOL GetMultiplayerEnabled(void )
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetMultiplayerEnabledDelegateInstance;

        private static int _GetMultiplayerEnabledDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.MultiplayerEnabled;
        }

        // class CExtendedServerInfo * GetExtendedServerInfo()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetExtendedServerInfoDelegateInstance;

        private static __IntPtr _GetExtendedServerInfoDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __ret = __target.ExtendedServerInfo;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void HandleGameSpyToServerMessage(int32_t nKeyId, void * pOutBuf, int nIndex = - 1)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int___IntPtr_int _HandleGameSpyToServerMessageDelegateInstance;

        private static void _HandleGameSpyToServerMessageDelegateHook(__IntPtr __instance, int nKeyId, __IntPtr pOutBuf, int nIndex)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.HandleGameSpyToServerMessage(nKeyId, pOutBuf, nIndex);
        }

        // CConnectionLib * GetConnectionLib()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetConnectionLibDelegateInstance;

        private static __IntPtr _GetConnectionLibDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __ret = __target.ConnectionLib;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // class CServerInfo * GetServerInfo()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetServerInfoDelegateInstance;

        private static __IntPtr _GetServerInfoDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __ret = __target.ServerInfo;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void GetExtendedServerInfo(class CExtendedServerInfo * pInfo)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetExtendedServerInfoDelegateInstance;

        private static void _GetExtendedServerInfoDelegateHook(__IntPtr __instance, __IntPtr pInfo)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExtendedServerInfo.__GetOrCreateInstance(pInfo, false);
            __target.GetExtendedServerInfo = __result0;
        }

        // CExoLocString GetModuleDescription()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetModuleDescriptionDelegateInstance;

        private static void _GetModuleDescriptionDelegateHook(__IntPtr @return, __IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __ret = __target.ModuleDescription;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CExoLocString.__Internal*) @return = *(global::NWN.LowLevel.CExoLocString.__Internal*) __ret.__Instance;
        }

        // uint32_t GetApplicationId()
        private static global::NWN.LowLevel.Delegates.Func_uint___IntPtr _GetApplicationIdDelegateInstance;

        private static uint _GetApplicationIdDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.ApplicationId;
        }

        // void SetApplicationIdsMatch(BOOL b)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetApplicationIdsMatchDelegateInstance;

        private static void _SetApplicationIdsMatchDelegateHook(__IntPtr __instance, int b)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.SetApplicationIdsMatch(b);
        }

        // BOOL GetIsIPOnBannedList(CExoString sIP)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr _GetIsIPOnBannedListDelegateInstance;

        private static int _GetIsIPOnBannedListDelegateHook(__IntPtr __instance, __IntPtr sIP)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sIP, false);
            return __target.GetIsIPOnBannedList(__result0);
        }

        // BOOL GetIsPlayerNameOnBannedList(CExoString sPlayerName)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr _GetIsPlayerNameOnBannedListDelegateInstance;

        private static int _GetIsPlayerNameOnBannedListDelegateHook(__IntPtr __instance, __IntPtr sPlayerName)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sPlayerName, false);
            return __target.GetIsPlayerNameOnBannedList(__result0);
        }

        // BOOL GetIsCDKeyOnBannedList(CExoString sKey)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr _GetIsCDKeyOnBannedListDelegateInstance;

        private static int _GetIsCDKeyOnBannedListDelegateHook(__IntPtr __instance, __IntPtr sKey)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sKey, false);
            return __target.GetIsCDKeyOnBannedList(__result0);
        }

        // void HandleOldServerVaultMigration(CExoString sClientCDKey, CExoString sClientLegacyCDKey, CExoString sPlayerName)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr___IntPtr___IntPtr _HandleOldServerVaultMigrationDelegateInstance;

        private static void _HandleOldServerVaultMigrationDelegateHook(__IntPtr __instance, __IntPtr sClientCDKey, __IntPtr sClientLegacyCDKey, __IntPtr sPlayerName)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sClientCDKey, false);
            var __result1 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sClientLegacyCDKey, false);
            var __result2 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sPlayerName, false);
            __target.HandleOldServerVaultMigration(__result0, __result1, __result2);
        }

        // BOOL IsPlayerNameSticky()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _IsPlayerNameStickyDelegateInstance;

        private static int _IsPlayerNameStickyDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.IsPlayerNameSticky;
        }

        // BOOL CheckStickyPlayerNameReserved(CExoString sClientCDKey, CExoString sClientLegacyCDKey, CExoString sPlayerName, int32_t nConnectionType)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr___IntPtr___IntPtr_int _CheckStickyPlayerNameReservedDelegateInstance;

        private static int _CheckStickyPlayerNameReservedDelegateHook(__IntPtr __instance, __IntPtr sClientCDKey, __IntPtr sClientLegacyCDKey, __IntPtr sPlayerName, int nConnectionType)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sClientCDKey, false);
            var __result1 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sClientLegacyCDKey, false);
            var __result2 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sPlayerName, false);
            return __target.CheckStickyPlayerNameReserved(__result0, __result1, __result2, nConnectionType);
        }

        // void PushMessageOverWall(uint8_t * pData, uint32_t nMsgLength)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_bytePtr_uint _PushMessageOverWallDelegateInstance;

        private static void _PushMessageOverWallDelegateHook(__IntPtr __instance, byte* pData, uint nMsgLength)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.PushMessageOverWall(pData, nMsgLength);
        }

        // BOOL GetIsMultiPlayer()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetIsMultiPlayerDelegateInstance;

        private static int _GetIsMultiPlayerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            return __target.IsMultiPlayer;
        }

        // BOOL GetCDKeys(CExoArrayList<CExoString> * * lstKeys)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr _GetCDKeysDelegateInstance;

        private static int _GetCDKeysDelegateHook(__IntPtr __instance, __IntPtr lstKeys)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __IntPtr __lstKeys = lstKeys == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) lstKeys);
            var __result0 = global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__GetOrCreateInstance(__lstKeys, false);
            return __target.GetCDKeys(__result0);
        }

        // void SetWeGotDisconnected()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _SetWeGotDisconnectedDelegateInstance;

        private static void _SetWeGotDisconnectedDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.SetWeGotDisconnected();
        }

        // virtual ~CServerExoApp()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CServerExoApp.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[29];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _AdmitNetworkAddressDelegateInstance += _AdmitNetworkAddressDelegateHook;
                _AdmitPlayerNameDelegateInstance += _AdmitPlayerNameDelegateHook;
                _SetNetworkAddressBanDelegateInstance += _SetNetworkAddressBanDelegateHook;
                _PlayerListChangeDelegateInstance += _PlayerListChangeDelegateHook;
                _HandleMessageDelegateInstance += _HandleMessageDelegateHook;
                _GetFPSDelegateInstance += _GetFPSDelegateHook;
                _ContinueMessageProcessingDelegateInstance += _ContinueMessageProcessingDelegateHook;
                _GetNetLayerDelegateInstance += _GetNetLayerDelegateHook;
                _ShutDownToMainMenuDelegateInstance += _ShutDownToMainMenuDelegateHook;
                _GetMultiplayerEnabledDelegateInstance += _GetMultiplayerEnabledDelegateHook;
                _GetExtendedServerInfoDelegateInstance += _GetExtendedServerInfoDelegateHook;
                _HandleGameSpyToServerMessageDelegateInstance += _HandleGameSpyToServerMessageDelegateHook;
                _GetConnectionLibDelegateInstance += _GetConnectionLibDelegateHook;
                _GetServerInfoDelegateInstance += _GetServerInfoDelegateHook;
                _GetExtendedServerInfoDelegateInstance += _GetExtendedServerInfoDelegateHook;
                _GetModuleDescriptionDelegateInstance += _GetModuleDescriptionDelegateHook;
                _GetApplicationIdDelegateInstance += _GetApplicationIdDelegateHook;
                _SetApplicationIdsMatchDelegateInstance += _SetApplicationIdsMatchDelegateHook;
                _GetIsIPOnBannedListDelegateInstance += _GetIsIPOnBannedListDelegateHook;
                _GetIsPlayerNameOnBannedListDelegateInstance += _GetIsPlayerNameOnBannedListDelegateHook;
                _GetIsCDKeyOnBannedListDelegateInstance += _GetIsCDKeyOnBannedListDelegateHook;
                _HandleOldServerVaultMigrationDelegateInstance += _HandleOldServerVaultMigrationDelegateHook;
                _IsPlayerNameStickyDelegateInstance += _IsPlayerNameStickyDelegateHook;
                _CheckStickyPlayerNameReservedDelegateInstance += _CheckStickyPlayerNameReservedDelegateHook;
                _PushMessageOverWallDelegateInstance += _PushMessageOverWallDelegateHook;
                _GetIsMultiPlayerDelegateInstance += _GetIsMultiPlayerDelegateHook;
                _GetCDKeysDelegateInstance += _GetCDKeysDelegateHook;
                _SetWeGotDisconnectedDelegateInstance += _SetWeGotDisconnectedDelegateHook;
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_AdmitNetworkAddressDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_AdmitPlayerNameDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_SetNetworkAddressBanDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_PlayerListChangeDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_HandleMessageDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_GetFPSDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_ContinueMessageProcessingDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetNetLayerDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_ShutDownToMainMenuDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_GetMultiplayerEnabledDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_GetExtendedServerInfoDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_HandleGameSpyToServerMessageDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetConnectionLibDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetServerInfoDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetExtendedServerInfoDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_GetModuleDescriptionDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_GetApplicationIdDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_SetApplicationIdsMatchDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_GetIsIPOnBannedListDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_GetIsPlayerNameOnBannedListDelegateInstance);
                Thunks[20] = Marshal.GetFunctionPointerForDelegate(_GetIsCDKeyOnBannedListDelegateInstance);
                Thunks[21] = Marshal.GetFunctionPointerForDelegate(_HandleOldServerVaultMigrationDelegateInstance);
                Thunks[22] = Marshal.GetFunctionPointerForDelegate(_IsPlayerNameStickyDelegateInstance);
                Thunks[23] = Marshal.GetFunctionPointerForDelegate(_CheckStickyPlayerNameReservedDelegateInstance);
                Thunks[24] = Marshal.GetFunctionPointerForDelegate(_PushMessageOverWallDelegateInstance);
                Thunks[25] = Marshal.GetFunctionPointerForDelegate(_GetIsMultiPlayerDelegateInstance);
                Thunks[26] = Marshal.GetFunctionPointerForDelegate(_GetCDKeysDelegateInstance);
                Thunks[27] = Marshal.GetFunctionPointerForDelegate(_SetWeGotDisconnectedDelegateInstance);
                Thunks[28] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 32);
                            ManagedVTablesDtorOnly[0][29] = Thunks[28];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 32);
                            ManagedVTables[0][0] = Thunks[0];
                            ManagedVTables[0][1] = Thunks[1];
                            ManagedVTables[0][2] = Thunks[2];
                            ManagedVTables[0][3] = Thunks[3];
                            ManagedVTables[0][4] = Thunks[4];
                            ManagedVTables[0][5] = Thunks[5];
                            ManagedVTables[0][6] = Thunks[6];
                            ManagedVTables[0][7] = Thunks[7];
                            ManagedVTables[0][8] = Thunks[8];
                            ManagedVTables[0][9] = Thunks[9];
                            ManagedVTables[0][10] = Thunks[10];
                            ManagedVTables[0][11] = Thunks[11];
                            ManagedVTables[0][12] = Thunks[12];
                            ManagedVTables[0][13] = Thunks[13];
                            ManagedVTables[0][14] = Thunks[14];
                            ManagedVTables[0][15] = Thunks[15];
                            ManagedVTables[0][16] = Thunks[16];
                            ManagedVTables[0][17] = Thunks[17];
                            ManagedVTables[0][18] = Thunks[18];
                            ManagedVTables[0][19] = Thunks[19];
                            ManagedVTables[0][20] = Thunks[20];
                            ManagedVTables[0][21] = Thunks[21];
                            ManagedVTables[0][22] = Thunks[22];
                            ManagedVTables[0][23] = Thunks[23];
                            ManagedVTables[0][24] = Thunks[24];
                            ManagedVTables[0][25] = Thunks[25];
                            ManagedVTables[0][26] = Thunks[26];
                            ManagedVTables[0][27] = Thunks[27];
                            ManagedVTables[0][29] = Thunks[28];
                            VTables.Methods[0] = new Delegate[32];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
