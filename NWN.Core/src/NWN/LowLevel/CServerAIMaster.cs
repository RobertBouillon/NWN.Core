// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CServerAIMaster : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 224)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pExoAppInternal;

            [FieldOffset(8)]
            internal fixed byte m_apGameAIList[120];

            [FieldOffset(128)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lEventQueue;

            [FieldOffset(136)]
            internal __IntPtr m_pGameEffectApplierRemover;

            [FieldOffset(144)]
            internal __IntPtr m_pItemPropertyApplierRemover;

            [FieldOffset(152)]
            internal int m_nScriptsRun;

            [FieldOffset(156)]
            internal int m_nScriptsRunSize;

            [FieldOffset(160)]
            internal __IntPtr m_psScriptsRun;

            [FieldOffset(168)]
            internal int m_bPlotPathRun;

            [FieldOffset(172)]
            internal int m_bGridPathRun;

            [FieldOffset(176)]
            internal int m_bUpdateVisibleListRun;

            [FieldOffset(180)]
            internal int m_bBroadcastAOORun;

            [FieldOffset(184)]
            internal int m_bTrapCheckRun;

            [FieldOffset(188)]
            internal int m_nLastActionRun;

            [FieldOffset(192)]
            internal __IntPtr m_pAttackRepAdj;

            [FieldOffset(200)]
            internal __IntPtr m_pTheftRepAdj;

            [FieldOffset(208)]
            internal __IntPtr m_pKillRepAdj;

            [FieldOffset(216)]
            internal __IntPtr m_pHelpRepAdj;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMasterC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMasterC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMasterD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster17SetExoAppInternalEP21CServerExoAppInternal", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetExoAppInternal(__IntPtr __instance, __IntPtr pExoAppInternal);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster11UpdateStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15ClearEventQueueEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearEventQueue(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster9AddObjectEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddObject(__IntPtr __instance, __IntPtr pObject, int nAILevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster12RemoveObjectEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveObject(__IntPtr __instance, __IntPtr pObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster10SetAILevelEP10CNWSObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetAILevel(__IntPtr __instance, __IntPtr pObject, int nAILevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster17AddEventDeltaTimeEjjjjjPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEventDeltaTime(__IntPtr __instance, uint nDaysFromNow, uint nTimeFromNow, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster20AddEventAbsoluteTimeEjjjjjPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEventAbsoluteTime(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster27AddEventAbsoluteTimeViaTailEjjjjjPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEventAbsoluteTimeViaTail(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster12EventPendingEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EventPending(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15GetPendingEventEPjS0_S0_S0_S0_PPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPendingEvent(__IntPtr __instance, uint* nCalendarDay, uint* nTimeOfDay, uint* nCallerObjectId, uint* nObjectId, uint* nEventId, void** pScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster14SaveEventQueueEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveEventQueue(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster14LoadEventQueueEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadEventQueue(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15OnEffectAppliedEP10CNWSObjectP11CGameEffecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OnEffectApplied(__IntPtr __instance, __IntPtr pObject, __IntPtr effect, int bLoadingGame);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15OnEffectRemovedEP10CNWSObjectP11CGameEffect", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OnEffectRemoved(__IntPtr __instance, __IntPtr pObject, __IntPtr effect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster21OnItemPropertyAppliedEP8CNWSItemP15CNWItemPropertyP12CNWSCreatureji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OnItemPropertyApplied(__IntPtr __instance, __IntPtr pItem, __IntPtr pItemProperty, __IntPtr pTargetCreature, uint nTargetInventorySlot, int bLoadingGame);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster21OnItemPropertyRemovedEP8CNWSItemP15CNWItemPropertyP12CNWSCreaturej", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OnItemPropertyRemoved(__IntPtr __instance, __IntPtr pItem, __IntPtr pItemProperty, __IntPtr pTargetCreature, uint nTargetInventorySlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster33AdjustTargetAndWitnessReputationsEjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AdjustTargetAndWitnessReputations(__IntPtr __instance, uint oidTarget, uint oidSource, int nActionType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster25LoadReputationAdjustmentsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadReputationAdjustments(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15ClearScriptsRunEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearScriptsRun(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster18AppendToScriptsRunE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AppendToScriptsRun(__IntPtr __instance, __IntPtr sScriptName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster15DeleteEventDataEjPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteEventData(__IntPtr __instance, uint nEventId, __IntPtr pEventData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CServerAIMaster13GetScriptsRunEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetScriptsRun(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerAIMaster> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerAIMaster>();

        protected bool __ownsNativeInstance;

        internal static CServerAIMaster __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CServerAIMaster(native.ToPointer(), skipVTables);
        }

        internal static CServerAIMaster __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CServerAIMaster)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CServerAIMaster __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CServerAIMaster(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CServerAIMaster.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CServerAIMaster(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CServerAIMaster(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CServerAIMaster()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerAIMaster.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CServerAIMaster(global::NWN.LowLevel.CServerAIMaster _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerAIMaster.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CServerAIMaster __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetExoAppInternal(global::NWN.LowLevel.CServerExoAppInternal pExoAppInternal)
        {
            var __arg0 = pExoAppInternal is null ? __IntPtr.Zero : pExoAppInternal.__Instance;
            __Internal.SetExoAppInternal(__Instance, __arg0);
        }

        public void UpdateState()
        {
            __Internal.UpdateState(__Instance);
        }

        public void ClearEventQueue()
        {
            __Internal.ClearEventQueue(__Instance);
        }

        public int AddObject(global::NWN.LowLevel.CNWSObject pObject, int nAILevel)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__Instance;
            var __ret = __Internal.AddObject(__Instance, __arg0, nAILevel);
            return __ret;
        }

        public int RemoveObject(global::NWN.LowLevel.CNWSObject pObject)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__Instance;
            var __ret = __Internal.RemoveObject(__Instance, __arg0);
            return __ret;
        }

        public int SetAILevel(global::NWN.LowLevel.CNWSObject pObject, int nAILevel)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__Instance;
            var __ret = __Internal.SetAILevel(__Instance, __arg0, nAILevel);
            return __ret;
        }

        public int AddEventDeltaTime(uint nDaysFromNow, uint nTimeFromNow, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript)
        {
            var __ret = __Internal.AddEventDeltaTime(__Instance, nDaysFromNow, nTimeFromNow, nCallerObjectId, nObjectId, nEventId, pScript);
            return __ret;
        }

        public int AddEventAbsoluteTime(uint nCalendarDay, uint nTimeOfDay, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript)
        {
            var __ret = __Internal.AddEventAbsoluteTime(__Instance, nCalendarDay, nTimeOfDay, nCallerObjectId, nObjectId, nEventId, pScript);
            return __ret;
        }

        public int AddEventAbsoluteTimeViaTail(uint nCalendarDay, uint nTimeOfDay, uint nCallerObjectId, uint nObjectId, uint nEventId, __IntPtr pScript)
        {
            var __ret = __Internal.AddEventAbsoluteTimeViaTail(__Instance, nCalendarDay, nTimeOfDay, nCallerObjectId, nObjectId, nEventId, pScript);
            return __ret;
        }

        public int EventPending(uint nCalendarDay, uint nTimeOfDay)
        {
            var __ret = __Internal.EventPending(__Instance, nCalendarDay, nTimeOfDay);
            return __ret;
        }

        public int GetPendingEvent(ref uint nCalendarDay, ref uint nTimeOfDay, ref uint nCallerObjectId, ref uint nObjectId, ref uint nEventId, void** pScript)
        {
            fixed (uint* __nCalendarDay0 = &nCalendarDay)
            {
                var __arg0 = __nCalendarDay0;
                fixed (uint* __nTimeOfDay1 = &nTimeOfDay)
                {
                    var __arg1 = __nTimeOfDay1;
                    fixed (uint* __nCallerObjectId2 = &nCallerObjectId)
                    {
                        var __arg2 = __nCallerObjectId2;
                        fixed (uint* __nObjectId3 = &nObjectId)
                        {
                            var __arg3 = __nObjectId3;
                            fixed (uint* __nEventId4 = &nEventId)
                            {
                                var __arg4 = __nEventId4;
                                var __ret = __Internal.GetPendingEvent(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4, pScript);
                                return __ret;
                            }
                        }
                    }
                }
            }
        }

        public int SaveEventQueue(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveEventQueue(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadEventQueue(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadEventQueue(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int OnEffectApplied(global::NWN.LowLevel.CNWSObject pObject, global::NWN.LowLevel.CGameEffect effect, int bLoadingGame)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__Instance;
            var __arg1 = effect is null ? __IntPtr.Zero : effect.__Instance;
            var __ret = __Internal.OnEffectApplied(__Instance, __arg0, __arg1, bLoadingGame);
            return __ret;
        }

        public int OnEffectRemoved(global::NWN.LowLevel.CNWSObject pObject, global::NWN.LowLevel.CGameEffect effect)
        {
            var __arg0 = pObject is null ? __IntPtr.Zero : pObject.__Instance;
            var __arg1 = effect is null ? __IntPtr.Zero : effect.__Instance;
            var __ret = __Internal.OnEffectRemoved(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int OnItemPropertyApplied(global::NWN.LowLevel.CNWSItem pItem, global::NWN.LowLevel.CNWItemProperty pItemProperty, global::NWN.LowLevel.CNWSCreature pTargetCreature, uint nTargetInventorySlot, int bLoadingGame)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __arg1 = pItemProperty is null ? __IntPtr.Zero : pItemProperty.__Instance;
            var __arg2 = pTargetCreature is null ? __IntPtr.Zero : pTargetCreature.__Instance;
            var __ret = __Internal.OnItemPropertyApplied(__Instance, __arg0, __arg1, __arg2, nTargetInventorySlot, bLoadingGame);
            return __ret;
        }

        public int OnItemPropertyRemoved(global::NWN.LowLevel.CNWSItem pItem, global::NWN.LowLevel.CNWItemProperty pItemProperty, global::NWN.LowLevel.CNWSCreature pTargetCreature, uint nTargetInventorySlot)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __arg1 = pItemProperty is null ? __IntPtr.Zero : pItemProperty.__Instance;
            var __arg2 = pTargetCreature is null ? __IntPtr.Zero : pTargetCreature.__Instance;
            var __ret = __Internal.OnItemPropertyRemoved(__Instance, __arg0, __arg1, __arg2, nTargetInventorySlot);
            return __ret;
        }

        public void AdjustTargetAndWitnessReputations(uint oidTarget, uint oidSource, int nActionType)
        {
            __Internal.AdjustTargetAndWitnessReputations(__Instance, oidTarget, oidSource, nActionType);
        }

        public void LoadReputationAdjustments()
        {
            __Internal.LoadReputationAdjustments(__Instance);
        }

        public void ClearScriptsRun()
        {
            __Internal.ClearScriptsRun(__Instance);
        }

        public void AppendToScriptsRun(global::NWN.LowLevel.CExoString sScriptName)
        {
            if (ReferenceEquals(sScriptName, null))
                throw new global::System.ArgumentNullException("sScriptName", "Cannot be null because it is passed by value.");
            var __arg0 = sScriptName.__Instance;
            __Internal.AppendToScriptsRun(__Instance, __arg0);
        }

        public void DeleteEventData(uint nEventId, __IntPtr pEventData)
        {
            __Internal.DeleteEventData(__Instance, nEventId, pEventData);
        }

        public global::NWN.LowLevel.CServerExoAppInternal MPExoAppInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CServerExoAppInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pExoAppInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pExoAppInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CServerAIList[] MApGameAIList
        {
            get
            {
                global::NWN.LowLevel.CServerAIList[] __value = null;
                if (((__Internal*)__Instance)->m_apGameAIList != null)
                {
                    __value = new global::NWN.LowLevel.CServerAIList[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = global::NWN.LowLevel.CServerAIList.__CreateInstance(*((global::NWN.LowLevel.CServerAIList.__Internal*)&(((__Internal*)__Instance)->m_apGameAIList[i * sizeof(global::NWN.LowLevel.CServerAIList.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 5)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 5; i++)
                        *(global::NWN.LowLevel.CServerAIList.__Internal*) &((__Internal*)__Instance)->m_apGameAIList[i * sizeof(global::NWN.LowLevel.CServerAIList.__Internal)] = *(global::NWN.LowLevel.CServerAIList.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CServerAIEventNode> MLEventQueue
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CServerAIEventNode>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lEventQueue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lEventQueue = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CGameEffectApplierRemover MPGameEffectApplierRemover
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CGameEffectApplierRemover.__GetOrCreateInstance(((__Internal*)__Instance)->m_pGameEffectApplierRemover, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pGameEffectApplierRemover = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CItemPropertyApplierRemover MPItemPropertyApplierRemover
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CItemPropertyApplierRemover.__GetOrCreateInstance(((__Internal*)__Instance)->m_pItemPropertyApplierRemover, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pItemPropertyApplierRemover = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNScriptsRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_nScriptsRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_nScriptsRun = value;
            }
        }

        public int MNScriptsRunSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nScriptsRunSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nScriptsRunSize = value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsScriptsRun
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_psScriptsRun, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_psScriptsRun = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBPlotPathRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPlotPathRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPlotPathRun = value;
            }
        }

        public int MBGridPathRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGridPathRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGridPathRun = value;
            }
        }

        public int MBUpdateVisibleListRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUpdateVisibleListRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUpdateVisibleListRun = value;
            }
        }

        public int MBBroadcastAOORun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bBroadcastAOORun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bBroadcastAOORun = value;
            }
        }

        public int MBTrapCheckRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTrapCheckRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTrapCheckRun = value;
            }
        }

        public int MNLastActionRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastActionRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastActionRun = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPAttackRepAdj
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<int>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pAttackRepAdj, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pAttackRepAdj = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPTheftRepAdj
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<int>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTheftRepAdj, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTheftRepAdj = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPKillRepAdj
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<int>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pKillRepAdj, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pKillRepAdj = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPHelpRepAdj
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoArrayList<int>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pHelpRepAdj, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pHelpRepAdj = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString ScriptsRun
        {
            get
            {
                var __ret = __Internal.GetScriptsRun(__Instance);
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
