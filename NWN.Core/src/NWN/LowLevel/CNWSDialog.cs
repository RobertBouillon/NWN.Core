// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class ScriptParamsList
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.ScriptParamsList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.ScriptParamsList>();

        protected bool __ownsNativeInstance;

        internal static ScriptParamsList __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new ScriptParamsList(native.ToPointer(), skipVTables);
        }

        internal static ScriptParamsList __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (ScriptParamsList)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static ScriptParamsList __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new ScriptParamsList(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ScriptParamsList(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ScriptParamsList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWSDialog : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 192)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWSDialog;

            [FieldOffset(8)]
            internal uint m_nEntries;

            [FieldOffset(16)]
            internal __IntPtr m_pEntries;

            [FieldOffset(24)]
            internal uint m_nReplies;

            [FieldOffset(32)]
            internal __IntPtr m_pReplies;

            [FieldOffset(40)]
            internal uint m_nStartingEntries;

            [FieldOffset(48)]
            internal __IntPtr m_pStartingEntries;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refEndDialogNormal;

            [FieldOffset(88)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refEndDialogAbort;

            [FieldOffset(120)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lPlayers;

            [FieldOffset(128)]
            internal int m_bRepliesSent;

            [FieldOffset(132)]
            internal int m_bEndOfDialog;

            [FieldOffset(136)]
            internal uint m_currentEntryIndex;

            [FieldOffset(140)]
            internal uint m_nReplyIndex;

            [FieldOffset(144)]
            internal byte m_lastGender;

            [FieldOffset(148)]
            internal uint m_oidLastObject;

            [FieldOffset(152)]
            internal uint m_oidDialogOwner;

            [FieldOffset(160)]
            internal __IntPtr m_pSpeakerMap;

            [FieldOffset(168)]
            internal uint m_nSpeakerMap;

            [FieldOffset(172)]
            internal int m_bMultiPCDialogViewOnly;

            [FieldOffset(176)]
            internal int m_bPrivate;

            [FieldOffset(180)]
            internal uint m_oidLastEntrySpeaker;

            [FieldOffset(184)]
            internal uint m_oidLastReplySpeaker;

            [FieldOffset(188)]
            internal int m_bDisableCameraZoom;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialogC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialogC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog24ClearDialogOwnerInObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearDialogOwnerInObject(__IntPtr __instance, uint oidObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog7CleanupEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Cleanup(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog10LoadDialogEP7CResGFFi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadDialog(__IntPtr __instance, __IntPtr pRes, int bLoadReplies);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog10GetSpeakerEP10CNWSObjectRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSpeaker(__IntPtr __instance, __IntPtr pNWSObjectOwner, __IntPtr sSpeaker);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog11CheckScriptEP10CNWSObjectRK7CResRefRKi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckScript(__IntPtr __instance, __IntPtr pNWSObjectSpeaker, __IntPtr sActive, int* scriptParams);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog9RunScriptEP10CNWSObjectRK7CResRefRKi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RunScript(__IntPtr __instance, __IntPtr pNWSObjectSpeaker, __IntPtr sScript, int* scriptParams);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog13GetStartEntryEP10CNWSObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetStartEntry(__IntPtr __instance, __IntPtr pNWSObjectOwner);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog21GetStartEntryOneLinerEP10CNWSObjectR13CExoLocStringR7CResRefS5_R16ScriptParamsList", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStartEntryOneLiner(__IntPtr __instance, __IntPtr pNWSObjectOwner, __IntPtr sOneLiner, __IntPtr sSound, __IntPtr sScript, __IntPtr scriptParams);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog14SetDialogDelayEP10CNWSObject13CExoLocStringji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float SetDialogDelay(__IntPtr __instance, __IntPtr pNWSObjectOwner, global::NWN.LowLevel.CExoLocString.__Internal sLocText, uint nMinSeconds, int bEnableNPCTiming);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog15AddJournalEntryERK10CExoStringjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddJournalEntry(__IntPtr __instance, __IntPtr szPlotID, uint nState, uint nPlayerId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog15SendDialogEntryEP10CNWSObjectjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendDialogEntry(__IntPtr __instance, __IntPtr pNWSObjectOwner, uint nPlayerIdGUIOnly, uint iEntry, int bPlayHelloSound);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog17SendDialogRepliesEP10CNWSObjectj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendDialogReplies(__IntPtr __instance, __IntPtr pNWSObjectOwner, uint nPlayerIdGUIOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog11HandleReplyEjP10CNWSObjectjij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleReply(__IntPtr __instance, uint nPlayerID, __IntPtr pNWSObjectOwner, uint nReplyIndex, int bEscapeDialog, uint currentEntryIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog12RemovePlayerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemovePlayer(__IntPtr __instance, uint oidRemove);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog16IsPlayerInDialogEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsPlayerInDialog(__IntPtr __instance, uint oidPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CNWSDialog16LoadScriptParamsEP7CResGFFR16ScriptParamsListP10CResStructPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadScriptParams(__IntPtr __instance, __IntPtr pRes, __IntPtr paramsList, __IntPtr pStructure, sbyte* szFieldID);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSDialog> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSDialog>();

        protected bool __ownsNativeInstance;

        internal static CNWSDialog __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSDialog(native.ToPointer(), skipVTables);
        }

        internal static CNWSDialog __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSDialog)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSDialog __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWSDialog)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWSDialog __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSDialog(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSDialog.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSDialog(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSDialog(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWSDialog()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSDialog.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSDialog");
        }

        public CNWSDialog(global::NWN.LowLevel.CNWSDialog _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSDialog.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSDialog");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSDialog __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWSDialog.__Internal*) __Instance)->vptr_CNWSDialog = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ClearDialogOwnerInObject(uint oidObject)
        {
            __Internal.ClearDialogOwnerInObject(__Instance, oidObject);
        }

        public void Cleanup()
        {
            __Internal.Cleanup(__Instance);
        }

        public int LoadDialog(global::NWN.LowLevel.CResGFF pRes, int bLoadReplies)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.LoadDialog(__Instance, __arg0, bLoadReplies);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSObject GetSpeaker(global::NWN.LowLevel.CNWSObject pNWSObjectOwner, global::NWN.LowLevel.CExoString sSpeaker)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            if (ReferenceEquals(sSpeaker, null))
                throw new global::System.ArgumentNullException("sSpeaker", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sSpeaker.__Instance;
            var __ret = __Internal.GetSpeaker(__Instance, __arg0, __arg1);
            var __result0 = global::NWN.LowLevel.CNWSObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int CheckScript(global::NWN.LowLevel.CNWSObject pNWSObjectSpeaker, global::NWN.LowLevel.CResRef sActive, int scriptParams)
        {
            var __arg0 = pNWSObjectSpeaker is null ? __IntPtr.Zero : pNWSObjectSpeaker.__Instance;
            if (ReferenceEquals(sActive, null))
                throw new global::System.ArgumentNullException("sActive", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sActive.__Instance;
            var __arg2 = &scriptParams;
            var __ret = __Internal.CheckScript(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public void RunScript(global::NWN.LowLevel.CNWSObject pNWSObjectSpeaker, global::NWN.LowLevel.CResRef sScript, int scriptParams)
        {
            var __arg0 = pNWSObjectSpeaker is null ? __IntPtr.Zero : pNWSObjectSpeaker.__Instance;
            if (ReferenceEquals(sScript, null))
                throw new global::System.ArgumentNullException("sScript", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sScript.__Instance;
            var __arg2 = &scriptParams;
            __Internal.RunScript(__Instance, __arg0, __arg1, __arg2);
        }

        public uint GetStartEntry(global::NWN.LowLevel.CNWSObject pNWSObjectOwner)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            var __ret = __Internal.GetStartEntry(__Instance, __arg0);
            return __ret;
        }

        public int GetStartEntryOneLiner(global::NWN.LowLevel.CNWSObject pNWSObjectOwner, global::NWN.LowLevel.CExoLocString sOneLiner, global::NWN.LowLevel.CResRef sSound, global::NWN.LowLevel.CResRef sScript, global::NWN.LowLevel.ScriptParamsList scriptParams)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            if (ReferenceEquals(sOneLiner, null))
                throw new global::System.ArgumentNullException("sOneLiner", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sOneLiner.__Instance;
            if (ReferenceEquals(sSound, null))
                throw new global::System.ArgumentNullException("sSound", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sSound.__Instance;
            if (ReferenceEquals(sScript, null))
                throw new global::System.ArgumentNullException("sScript", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = sScript.__Instance;
            if (ReferenceEquals(scriptParams, null))
                throw new global::System.ArgumentNullException("scriptParams", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = scriptParams.__Instance;
            var __ret = __Internal.GetStartEntryOneLiner(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4);
            return __ret;
        }

        public float SetDialogDelay(global::NWN.LowLevel.CNWSObject pNWSObjectOwner, global::NWN.LowLevel.CExoLocString sLocText, uint nMinSeconds, int bEnableNPCTiming)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            if (ReferenceEquals(sLocText, null))
                throw new global::System.ArgumentNullException("sLocText", "Cannot be null because it is passed by value.");
            var __arg1 = sLocText.__Instance;
            var __ret = __Internal.SetDialogDelay(__Instance, __arg0, *(global::NWN.LowLevel.CExoLocString.__Internal*) __arg1, nMinSeconds, bEnableNPCTiming);
            return __ret;
        }

        public void AddJournalEntry(global::NWN.LowLevel.CExoString szPlotID, uint nState, uint nPlayerId)
        {
            if (ReferenceEquals(szPlotID, null))
                throw new global::System.ArgumentNullException("szPlotID", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = szPlotID.__Instance;
            __Internal.AddJournalEntry(__Instance, __arg0, nState, nPlayerId);
        }

        public int SendDialogEntry(global::NWN.LowLevel.CNWSObject pNWSObjectOwner, uint nPlayerIdGUIOnly, uint iEntry, int bPlayHelloSound)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            var __ret = __Internal.SendDialogEntry(__Instance, __arg0, nPlayerIdGUIOnly, iEntry, bPlayHelloSound);
            return __ret;
        }

        public int SendDialogReplies(global::NWN.LowLevel.CNWSObject pNWSObjectOwner, uint nPlayerIdGUIOnly)
        {
            var __arg0 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            var __ret = __Internal.SendDialogReplies(__Instance, __arg0, nPlayerIdGUIOnly);
            return __ret;
        }

        public int HandleReply(uint nPlayerID, global::NWN.LowLevel.CNWSObject pNWSObjectOwner, uint nReplyIndex, int bEscapeDialog, uint currentEntryIndex)
        {
            var __arg1 = pNWSObjectOwner is null ? __IntPtr.Zero : pNWSObjectOwner.__Instance;
            var __ret = __Internal.HandleReply(__Instance, nPlayerID, __arg1, nReplyIndex, bEscapeDialog, currentEntryIndex);
            return __ret;
        }

        public int RemovePlayer(uint oidRemove)
        {
            var __ret = __Internal.RemovePlayer(__Instance, oidRemove);
            return __ret;
        }

        public int IsPlayerInDialog(uint oidPlayer)
        {
            var __ret = __Internal.IsPlayerInDialog(__Instance, oidPlayer);
            return __ret;
        }

        public void LoadScriptParams(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.ScriptParamsList paramsList, global::NWN.LowLevel.CResStruct pStructure, sbyte* szFieldID)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            if (ReferenceEquals(paramsList, null))
                throw new global::System.ArgumentNullException("paramsList", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = paramsList.__Instance;
            var __arg2 = pStructure is null ? __IntPtr.Zero : pStructure.__Instance;
            __Internal.LoadScriptParams(__Instance, __arg0, __arg1, __arg2, szFieldID);
        }

        public uint MNEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEntries = value;
            }
        }

        public global::NWN.LowLevel.CNWSDialogEntry MPEntries
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSDialogEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pEntries, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pEntries = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNReplies
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReplies;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReplies = value;
            }
        }

        public global::NWN.LowLevel.CNWSDialogReply MPReplies
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSDialogReply.__GetOrCreateInstance(((__Internal*)__Instance)->m_pReplies, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pReplies = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNStartingEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStartingEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStartingEntries = value;
            }
        }

        public global::NWN.LowLevel.CNWSDialogLinkEntry MPStartingEntries
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSDialogLinkEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pStartingEntries, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pStartingEntries = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef MRefEndDialogNormal
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refEndDialogNormal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refEndDialogNormal = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef MRefEndDialogAbort
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refEndDialogAbort));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refEndDialogAbort = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSDialogPlayer> MLPlayers
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSDialogPlayer>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lPlayers));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lPlayers = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public int MBRepliesSent
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRepliesSent;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRepliesSent = value;
            }
        }

        public int MBEndOfDialog
        {
            get
            {
                return ((__Internal*)__Instance)->m_bEndOfDialog;
            }

            set
            {
                ((__Internal*)__Instance)->m_bEndOfDialog = value;
            }
        }

        public uint MCurrentEntryIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_currentEntryIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_currentEntryIndex = value;
            }
        }

        public uint MNReplyIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReplyIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReplyIndex = value;
            }
        }

        public byte MLastGender
        {
            get
            {
                return ((__Internal*)__Instance)->m_lastGender;
            }

            set
            {
                ((__Internal*)__Instance)->m_lastGender = value;
            }
        }

        public uint MOidLastObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastObject = value;
            }
        }

        public uint MOidDialogOwner
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidDialogOwner;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidDialogOwner = value;
            }
        }

        public global::NWN.LowLevel.CNWSDialogSpeaker MPSpeakerMap
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSDialogSpeaker.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSpeakerMap, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSpeakerMap = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNSpeakerMap
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpeakerMap;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpeakerMap = value;
            }
        }

        public int MBMultiPCDialogViewOnly
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMultiPCDialogViewOnly;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMultiPCDialogViewOnly = value;
            }
        }

        public int MBPrivate
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPrivate;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPrivate = value;
            }
        }

        public uint MOidLastEntrySpeaker
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastEntrySpeaker;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastEntrySpeaker = value;
            }
        }

        public uint MOidLastReplySpeaker
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastReplySpeaker;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastReplySpeaker = value;
            }
        }

        public int MBDisableCameraZoom
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDisableCameraZoom;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDisableCameraZoom = value;
            }
        }

        #region Virtual table interop

        // virtual ~CNWSDialog()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSDialog.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
