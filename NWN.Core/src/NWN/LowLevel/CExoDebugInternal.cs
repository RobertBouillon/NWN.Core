// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoDebugInternal : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 64)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_bFilesOpen;

            [FieldOffset(8)]
            internal __IntPtr m_pLogFile;

            [FieldOffset(16)]
            internal __IntPtr m_pErrorFile;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sExecutableName;

            [FieldOffset(40)]
            internal int m_nMaxLogSize;

            [FieldOffset(44)]
            internal int m_nCurrentLogSize;

            [FieldOffset(48)]
            internal int m_nCurrentErrorSize;

            [FieldOffset(52)]
            internal int m_nCurrentLogFileNumber;

            [FieldOffset(56)]
            internal int m_nCurrentErrorFileNumber;

            [FieldOffset(60)]
            internal int m_bRotateLogFile;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternalC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternalC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternalD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal6AssertEiPKcS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Assert(__IntPtr __instance, int nLineNumber, [MarshalAs(UnmanagedType.LPUTF8Str)] string sFileName, [MarshalAs(UnmanagedType.LPUTF8Str)] string sComment);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal13CloseLogFilesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseLogFiles(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal14FlushErrorFileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlushErrorFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal12FlushLogFileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FlushLogFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal12OpenLogFilesE10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenLogFiles(__IntPtr __instance, __IntPtr sExecutableName, int nMaxLogSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal7WarningEiPKcS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Warning(__IntPtr __instance, int nLineNumber, [MarshalAs(UnmanagedType.LPUTF8Str)] string sFileName, [MarshalAs(UnmanagedType.LPUTF8Str)] string sComment);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal16WriteToErrorFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteToErrorFile(__IntPtr __instance, __IntPtr sLogString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal14WriteToLogFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteToLogFile(__IntPtr __instance, __IntPtr sLogString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal19GetCurrentTimestampER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetCurrentTimestamp(__IntPtr __instance, __IntPtr sTimestamp);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CExoDebugInternal15CreateDirectoryE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CreateDirectory(__IntPtr __instance, __IntPtr sDirectory);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoDebugInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoDebugInternal>();

        protected bool __ownsNativeInstance;

        internal static CExoDebugInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoDebugInternal(native.ToPointer(), skipVTables);
        }

        internal static CExoDebugInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoDebugInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoDebugInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoDebugInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoDebugInternal.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoDebugInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoDebugInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoDebugInternal()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoDebugInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoDebugInternal(global::NWN.LowLevel.CExoDebugInternal _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoDebugInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoDebugInternal __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Assert(int nLineNumber, string sFileName, string sComment)
        {
            __Internal.Assert(__Instance, nLineNumber, sFileName, sComment);
        }

        public void CloseLogFiles()
        {
            __Internal.CloseLogFiles(__Instance);
        }

        public void FlushErrorFile()
        {
            __Internal.FlushErrorFile(__Instance);
        }

        public void FlushLogFile()
        {
            __Internal.FlushLogFile(__Instance);
        }

        public void OpenLogFiles(global::NWN.LowLevel.CExoString sExecutableName, int nMaxLogSize)
        {
            if (ReferenceEquals(sExecutableName, null))
                throw new global::System.ArgumentNullException("sExecutableName", "Cannot be null because it is passed by value.");
            var __arg0 = sExecutableName.__Instance;
            __Internal.OpenLogFiles(__Instance, __arg0, nMaxLogSize);
        }

        public void Warning(int nLineNumber, string sFileName, string sComment)
        {
            __Internal.Warning(__Instance, nLineNumber, sFileName, sComment);
        }

        public void WriteToErrorFile(global::NWN.LowLevel.CExoString sLogString)
        {
            if (ReferenceEquals(sLogString, null))
                throw new global::System.ArgumentNullException("sLogString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sLogString.__Instance;
            __Internal.WriteToErrorFile(__Instance, __arg0);
        }

        public void WriteToLogFile(global::NWN.LowLevel.CExoString sLogString)
        {
            if (ReferenceEquals(sLogString, null))
                throw new global::System.ArgumentNullException("sLogString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sLogString.__Instance;
            __Internal.WriteToLogFile(__Instance, __arg0);
        }

        public void GetCurrentTimestamp(global::NWN.LowLevel.CExoString sTimestamp)
        {
            if (ReferenceEquals(sTimestamp, null))
                throw new global::System.ArgumentNullException("sTimestamp", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sTimestamp.__Instance;
            __Internal.GetCurrentTimestamp(__Instance, __arg0);
        }

        public int CreateDirectory(global::NWN.LowLevel.CExoString sDirectory)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is passed by value.");
            var __arg0 = sDirectory.__Instance;
            var __ret = __Internal.CreateDirectory(__Instance, __arg0);
            return __ret;
        }

        public int MBFilesOpen
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFilesOpen;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFilesOpen = value;
            }
        }

        public global::NWN.LowLevel.CExoFile MPLogFile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoFile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLogFile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLogFile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoFile MPErrorFile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoFile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pErrorFile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pErrorFile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSExecutableName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sExecutableName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sExecutableName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNMaxLogSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxLogSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxLogSize = value;
            }
        }

        public int MNCurrentLogSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLogSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLogSize = value;
            }
        }

        public int MNCurrentErrorSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentErrorSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentErrorSize = value;
            }
        }

        public int MNCurrentLogFileNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLogFileNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLogFileNumber = value;
            }
        }

        public int MNCurrentErrorFileNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentErrorFileNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentErrorFileNumber = value;
            }
        }

        public int MBRotateLogFile
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRotateLogFile;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRotateLogFile = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
