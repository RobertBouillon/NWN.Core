// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWTile : global::NWN.LowLevel.CCallbackHandlerBase, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 48)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWTile;

            [FieldOffset(8)]
            internal global::NWN.LowLevel.Vector.__Internal m_vModelPosition;

            [FieldOffset(20)]
            internal int m_nID;

            [FieldOffset(24)]
            internal int m_nHeight;

            [FieldOffset(28)]
            internal int m_nGridX;

            [FieldOffset(32)]
            internal int m_nGridY;

            [FieldOffset(36)]
            internal int m_nOrientation;

            [FieldOffset(40)]
            internal byte m_nMainLight1Color;

            [FieldOffset(41)]
            internal byte m_nMainLight2Color;

            [FieldOffset(42)]
            internal byte m_nSourceLight1Color;

            [FieldOffset(43)]
            internal byte m_nSourceLight2Color;

            [FieldOffset(44)]
            internal byte m_nReplaceTexture;

            [FieldOffset(45)]
            internal byte m_nAnimLoop1;

            [FieldOffset(46)]
            internal byte m_nAnimLoop2;

            [FieldOffset(47)]
            internal byte m_nAnimLoop3;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTileC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTileC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile11GetLocationEPiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetLocation(__IntPtr __instance, int* pX, int* pY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile5SetIDEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetID(__IntPtr __instance, int nID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile11SetPositionEiiif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPosition(__IntPtr __instance, int nX, int nY, int nHeight, float fHeightInc);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile14SetOrientationEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetOrientation(__IntPtr __instance, int nOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile25RotateCanonicalToRealTileEffPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RotateCanonicalToRealTile(__IntPtr __instance, float fX, float fY, float* fNewX, float* fNewY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile25RotateRealToCanonicalTileEffPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RotateRealToCanonicalTile(__IntPtr __instance, float fX, float fY, float* fNewX, float* fNewY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile21RotateCanonicalToRealEffPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RotateCanonicalToReal(__IntPtr __instance, float fX, float fY, float* fNewX, float* fNewY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile21RotateRealToCanonicalEffPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RotateRealToCanonical(__IntPtr __instance, float fX, float fY, float* fNewX, float* fNewY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile17GetMainLightColorEPhS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMainLightColor(__IntPtr __instance, byte* pMainLight1Color, byte* pMainLight2Color);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile19GetSourceLightColorEPhS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSourceLightColor(__IntPtr __instance, byte* pSourceLight1Color, byte* pSourceLight2Color);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile11GetAnimLoopEPhS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetAnimLoop(__IntPtr __instance, byte* pAnimLoop1, byte* pAnimLoop2, byte* pAnimLoop3);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile17SetMainLightColorEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMainLightColor(__IntPtr __instance, byte nMainLight1Color, byte nMainLight2Color);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile19SetSourceLightColorEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSourceLightColor(__IntPtr __instance, byte nSourceLight1Color, byte nSourceLight2Color);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile17SetReplaceTextureEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetReplaceTexture(__IntPtr __instance, byte nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWTile11SetAnimLoopEhhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAnimLoop(__IntPtr __instance, byte nAnimLoop1, byte nAnimLoop2, byte nAnimLoop3);
        }

        internal static new CNWTile __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWTile(native.ToPointer(), skipVTables);
        }

        internal static new CNWTile __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWTile)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWTile __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWTile)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWTile __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWTile(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWTile.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWTile(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWTile(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWTile()
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTile");
        }

        public CNWTile(global::NWN.LowLevel.CNWTile _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTile");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.ICCallbackHandlerBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWTile.__Internal*) __Instance)->vptr_CNWTile = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void GetLocation(ref int pX, ref int pY)
        {
            fixed (int* __pX0 = &pX)
            {
                var __arg0 = __pX0;
                fixed (int* __pY1 = &pY)
                {
                    var __arg1 = __pY1;
                    __Internal.GetLocation(__Instance, __arg0, __arg1);
                }
            }
        }

        public void SetID(int nID)
        {
            __Internal.SetID(__Instance, nID);
        }

        public void SetPosition(int nX, int nY, int nHeight, float fHeightInc)
        {
            __Internal.SetPosition(__Instance, nX, nY, nHeight, fHeightInc);
        }

        public void SetOrientation(int nOrientation)
        {
            __Internal.SetOrientation(__Instance, nOrientation);
        }

        public void RotateCanonicalToRealTile(float fX, float fY, ref float fNewX, ref float fNewY)
        {
            fixed (float* __fNewX2 = &fNewX)
            {
                var __arg2 = __fNewX2;
                fixed (float* __fNewY3 = &fNewY)
                {
                    var __arg3 = __fNewY3;
                    __Internal.RotateCanonicalToRealTile(__Instance, fX, fY, __arg2, __arg3);
                }
            }
        }

        public void RotateRealToCanonicalTile(float fX, float fY, ref float fNewX, ref float fNewY)
        {
            fixed (float* __fNewX2 = &fNewX)
            {
                var __arg2 = __fNewX2;
                fixed (float* __fNewY3 = &fNewY)
                {
                    var __arg3 = __fNewY3;
                    __Internal.RotateRealToCanonicalTile(__Instance, fX, fY, __arg2, __arg3);
                }
            }
        }

        public void RotateCanonicalToReal(float fX, float fY, ref float fNewX, ref float fNewY)
        {
            fixed (float* __fNewX2 = &fNewX)
            {
                var __arg2 = __fNewX2;
                fixed (float* __fNewY3 = &fNewY)
                {
                    var __arg3 = __fNewY3;
                    __Internal.RotateCanonicalToReal(__Instance, fX, fY, __arg2, __arg3);
                }
            }
        }

        public void RotateRealToCanonical(float fX, float fY, ref float fNewX, ref float fNewY)
        {
            fixed (float* __fNewX2 = &fNewX)
            {
                var __arg2 = __fNewX2;
                fixed (float* __fNewY3 = &fNewY)
                {
                    var __arg3 = __fNewY3;
                    __Internal.RotateRealToCanonical(__Instance, fX, fY, __arg2, __arg3);
                }
            }
        }

        public void GetMainLightColor(byte* pMainLight1Color, byte* pMainLight2Color)
        {
            __Internal.GetMainLightColor(__Instance, pMainLight1Color, pMainLight2Color);
        }

        public void GetSourceLightColor(byte* pSourceLight1Color, byte* pSourceLight2Color)
        {
            __Internal.GetSourceLightColor(__Instance, pSourceLight1Color, pSourceLight2Color);
        }

        public void GetAnimLoop(byte* pAnimLoop1, byte* pAnimLoop2, byte* pAnimLoop3)
        {
            __Internal.GetAnimLoop(__Instance, pAnimLoop1, pAnimLoop2, pAnimLoop3);
        }

        public void SetMainLightColor(byte nMainLight1Color, byte nMainLight2Color)
        {
            __Internal.SetMainLightColor(__Instance, nMainLight1Color, nMainLight2Color);
        }

        public void SetSourceLightColor(byte nSourceLight1Color, byte nSourceLight2Color)
        {
            __Internal.SetSourceLightColor(__Instance, nSourceLight1Color, nSourceLight2Color);
        }

        public void SetReplaceTexture(byte nValue)
        {
            __Internal.SetReplaceTexture(__Instance, nValue);
        }

        public void SetAnimLoop(byte nAnimLoop1, byte nAnimLoop2, byte nAnimLoop3)
        {
            __Internal.SetAnimLoop(__Instance, nAnimLoop1, nAnimLoop2, nAnimLoop3);
        }

        public global::NWN.LowLevel.Vector MVModelPosition
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vModelPosition));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vModelPosition = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MNID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nID = value;
            }
        }

        public int MNHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHeight = value;
            }
        }

        public int MNGridX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridX = value;
            }
        }

        public int MNGridY
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGridY;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGridY = value;
            }
        }

        public int MNOrientation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOrientation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOrientation = value;
            }
        }

        public byte MNMainLight1Color
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMainLight1Color;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMainLight1Color = value;
            }
        }

        public byte MNMainLight2Color
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMainLight2Color;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMainLight2Color = value;
            }
        }

        public byte MNSourceLight1Color
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSourceLight1Color;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSourceLight1Color = value;
            }
        }

        public byte MNSourceLight2Color
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSourceLight2Color;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSourceLight2Color = value;
            }
        }

        public byte MNReplaceTexture
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReplaceTexture;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReplaceTexture = value;
            }
        }

        public byte MNAnimLoop1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimLoop1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimLoop1 = value;
            }
        }

        public byte MNAnimLoop2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimLoop2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimLoop2 = value;
            }
        }

        public byte MNAnimLoop3
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimLoop3;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimLoop3 = value;
            }
        }

        #region Virtual table interop

        // virtual ~CNWTile()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWTile.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
