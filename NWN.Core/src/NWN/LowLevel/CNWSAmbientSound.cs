// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSAmbientSound : global::NWN.LowLevel.CNWAmbientSound, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWAmbientSound;

            [FieldOffset(8)]
            internal int m_bMusicPlaying;

            [FieldOffset(12)]
            internal int m_nMusicDelay;

            [FieldOffset(16)]
            internal int m_nMusicDayTrack;

            [FieldOffset(20)]
            internal int m_nMusicNightTrack;

            [FieldOffset(24)]
            internal int m_bBattlePlaying;

            [FieldOffset(28)]
            internal int m_nBattleTrack;

            [FieldOffset(32)]
            internal int m_bSoundPlaying;

            [FieldOffset(36)]
            internal int m_nSoundDayTrack;

            [FieldOffset(40)]
            internal int m_nSoundNightTrack;

            [FieldOffset(44)]
            internal byte m_nDayVolume;

            [FieldOffset(45)]
            internal byte m_nNightVolume;

            [FieldOffset(48)]
            internal uint m_nArea;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSoundC2Ej", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, uint nArea);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSoundC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound19SetAmbientDayVolumeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAmbientDayVolume(__IntPtr __instance, int nVolume);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound21SetAmbientNightVolumeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAmbientNightVolume(__IntPtr __instance, int nVolume);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound4LoadEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Load(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound4SaveEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Save(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound15PackIntoMessageEP11CNWSMessage", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PackIntoMessage(__IntPtr __instance, __IntPtr pMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CNWSAmbientSound16GetPlayersInAreaEP13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayersInArea(__IntPtr __instance, __IntPtr pList);
        }

        internal static new CNWSAmbientSound __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSAmbientSound(native.ToPointer(), skipVTables);
        }

        internal static new CNWSAmbientSound __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSAmbientSound)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CNWSAmbientSound __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWSAmbientSound)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWSAmbientSound __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSAmbientSound(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSAmbientSound.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSAmbientSound(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSAmbientSound(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWSAmbientSound(uint nArea)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSAmbientSound.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, nArea);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSAmbientSound");
        }

        public CNWSAmbientSound(global::NWN.LowLevel.CNWSAmbientSound _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSAmbientSound.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSAmbientSound");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWAmbientSound __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWSAmbientSound.__Internal*) __Instance)->vptr_CNWAmbientSound = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 9);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public override void PlayMusic(int bPlay)
        {
            base.PlayMusic(bPlay);
        }

        public override void SetMusicDelay(int nDelay)
        {
            base.SetMusicDelay(nDelay);
        }

        public override void SetMusicDayTrack(int nTrack)
        {
            base.SetMusicDayTrack(nTrack);
        }

        public override void SetMusicNightTrack(int nTrack)
        {
            base.SetMusicNightTrack(nTrack);
        }

        public override void PlayBattleMusic(int bPlay)
        {
            base.PlayBattleMusic(bPlay);
        }

        public override void SetBattleMusicTrack(int nTrack)
        {
            base.SetBattleMusicTrack(nTrack);
        }

        public override void PlayAmbientSound(int bPlay)
        {
            base.PlayAmbientSound(bPlay);
        }

        public override void SetAmbientDayTrack(int nTrack)
        {
            base.SetAmbientDayTrack(nTrack);
        }

        public override void SetAmbientNightTrack(int nTrack)
        {
            base.SetAmbientNightTrack(nTrack);
        }

        public void SetAmbientDayVolume(int nVolume)
        {
            __Internal.SetAmbientDayVolume(__Instance, nVolume);
        }

        public void SetAmbientNightVolume(int nVolume)
        {
            __Internal.SetAmbientNightVolume(__Instance, nVolume);
        }

        public int Load(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.Load(__Instance, __arg0, __arg1);
            return __ret;
        }

        public void Save(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.Save(__Instance, __arg0, __arg1);
        }

        public void PackIntoMessage(global::NWN.LowLevel.CNWSMessage pMessage)
        {
            var __arg0 = pMessage is null ? __IntPtr.Zero : pMessage.__Instance;
            __Internal.PackIntoMessage(__Instance, __arg0);
        }

        public int GetPlayersInArea(global::NWN.LowLevel.CExoArrayList<uint> pList)
        {
            var __arg0 = pList is null ? __IntPtr.Zero : pList.__Instance;
            var __ret = __Internal.GetPlayersInArea(__Instance, __arg0);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CNWSAmbientSound(uint nArea)
        {
            return new global::NWN.LowLevel.CNWSAmbientSound(nArea);
        }

        public uint MNArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_nArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_nArea = value;
            }
        }

        #region Virtual table interop

        // void PlayMusic(BOOL bPlay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _PlayMusicDelegateInstance;

        private static void _PlayMusicDelegateHook(__IntPtr __instance, int bPlay)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.PlayMusic(bPlay);
        }

        // void SetMusicDelay(int32_t nDelay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetMusicDelayDelegateInstance;

        private static void _SetMusicDelayDelegateHook(__IntPtr __instance, int nDelay)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetMusicDelay(nDelay);
        }

        // void SetMusicDayTrack(int32_t nTrack)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetMusicDayTrackDelegateInstance;

        private static void _SetMusicDayTrackDelegateHook(__IntPtr __instance, int nTrack)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetMusicDayTrack(nTrack);
        }

        // void SetMusicNightTrack(int32_t nTrack)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetMusicNightTrackDelegateInstance;

        private static void _SetMusicNightTrackDelegateHook(__IntPtr __instance, int nTrack)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetMusicNightTrack(nTrack);
        }

        // void PlayBattleMusic(BOOL bPlay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _PlayBattleMusicDelegateInstance;

        private static void _PlayBattleMusicDelegateHook(__IntPtr __instance, int bPlay)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.PlayBattleMusic(bPlay);
        }

        // void SetBattleMusicTrack(int32_t nTrack)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetBattleMusicTrackDelegateInstance;

        private static void _SetBattleMusicTrackDelegateHook(__IntPtr __instance, int nTrack)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetBattleMusicTrack(nTrack);
        }

        // void PlayAmbientSound(BOOL bPlay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _PlayAmbientSoundDelegateInstance;

        private static void _PlayAmbientSoundDelegateHook(__IntPtr __instance, int bPlay)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.PlayAmbientSound(bPlay);
        }

        // void SetAmbientDayTrack(int32_t nTrack)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetAmbientDayTrackDelegateInstance;

        private static void _SetAmbientDayTrackDelegateHook(__IntPtr __instance, int nTrack)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetAmbientDayTrack(nTrack);
        }

        // void SetAmbientNightTrack(int32_t nTrack)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetAmbientNightTrackDelegateInstance;

        private static void _SetAmbientNightTrackDelegateHook(__IntPtr __instance, int nTrack)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.SetAmbientNightTrack(nTrack);
        }

        // virtual ~CNWSAmbientSound()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSAmbientSound.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[10];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _PlayMusicDelegateInstance += _PlayMusicDelegateHook;
                _SetMusicDelayDelegateInstance += _SetMusicDelayDelegateHook;
                _SetMusicDayTrackDelegateInstance += _SetMusicDayTrackDelegateHook;
                _SetMusicNightTrackDelegateInstance += _SetMusicNightTrackDelegateHook;
                _PlayBattleMusicDelegateInstance += _PlayBattleMusicDelegateHook;
                _SetBattleMusicTrackDelegateInstance += _SetBattleMusicTrackDelegateHook;
                _PlayAmbientSoundDelegateInstance += _PlayAmbientSoundDelegateHook;
                _SetAmbientDayTrackDelegateInstance += _SetAmbientDayTrackDelegateHook;
                _SetAmbientNightTrackDelegateInstance += _SetAmbientNightTrackDelegateHook;
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_PlayMusicDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetMusicDelayDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_SetMusicDayTrackDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_SetMusicNightTrackDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_PlayBattleMusicDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_SetBattleMusicTrackDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_PlayAmbientSoundDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_SetAmbientDayTrackDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_SetAmbientNightTrackDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 13);
                            ManagedVTablesDtorOnly[0][10] = Thunks[9];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 13);
                            ManagedVTables[0][0] = Thunks[0];
                            ManagedVTables[0][1] = Thunks[1];
                            ManagedVTables[0][2] = Thunks[2];
                            ManagedVTables[0][3] = Thunks[3];
                            ManagedVTables[0][4] = Thunks[4];
                            ManagedVTables[0][5] = Thunks[5];
                            ManagedVTables[0][6] = Thunks[6];
                            ManagedVTables[0][7] = Thunks[7];
                            ManagedVTables[0][8] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            VTables.Methods[0] = new Delegate[13];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
