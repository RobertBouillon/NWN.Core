// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CClientExoApp
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CClientExoApp> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CClientExoApp>();

        protected bool __ownsNativeInstance;

        internal static CClientExoApp __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CClientExoApp(native.ToPointer(), skipVTables);
        }

        internal static CClientExoApp __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CClientExoApp)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CClientExoApp __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CClientExoApp(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CClientExoApp(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CClientExoApp(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWReentrantServerStats
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWReentrantServerStats> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWReentrantServerStats>();

        protected bool __ownsNativeInstance;

        internal static CNWReentrantServerStats __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWReentrantServerStats(native.ToPointer(), skipVTables);
        }

        internal static CNWReentrantServerStats __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWReentrantServerStats)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWReentrantServerStats __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWReentrantServerStats(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWReentrantServerStats(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWReentrantServerStats(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CAppManager : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 96)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pClientExoApp;

            [FieldOffset(8)]
            internal __IntPtr m_pServerExoApp;

            [FieldOffset(16)]
            internal __IntPtr m_pNWTileSetManager;

            [FieldOffset(24)]
            internal __IntPtr m_pClientObjectTableManager;

            [FieldOffset(32)]
            internal __IntPtr m_pServerObjectTableManager;

            [FieldOffset(40)]
            internal __IntPtr m_pReentrantServerStats;

            [FieldOffset(48)]
            internal int m_bDungeonMasterEXERunning;

            [FieldOffset(52)]
            internal uint m_nApplicationId;

            [FieldOffset(56)]
            internal int m_bMultiplayerEnabled;

            [FieldOffset(60)]
            internal int m_bWasPaused;

            [FieldOffset(64)]
            internal int m_bDigitalDistributionModule;

            [FieldOffset(72)]
            internal __IntPtr m_pDDCipher;

            [FieldOffset(80)]
            internal uint m_nDDOffset;

            [FieldOffset(84)]
            internal uint m_nPlayerTimeout;

            [FieldOffset(88)]
            internal int m_bLogModelErrors;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManagerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManagerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManagerD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager21GetObjectTableManagerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetObjectTableManager(__IntPtr __instance, uint dwClientServer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager20DoSaveGameScreenShotER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DoSaveGameScreenShot(__IntPtr __instance, __IntPtr sFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager13ShowServerMemEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShowServerMem(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager12CreateServerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CreateServer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager13DestroyServerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyServer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager26DisplayScriptDebuggerPopupEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DisplayScriptDebuggerPopup(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager26DestroyScriptDebuggerPopupEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyScriptDebuggerPopup(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager20SetDDCipherForModuleE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetDDCipherForModule(__IntPtr __instance, __IntPtr moduleName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager19ReadProgressFromINIEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte ReadProgressFromINI(__IntPtr __instance, byte m_nCampaign);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager15ConnectToServerE10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ConnectToServer(__IntPtr __instance, __IntPtr sAddress, int bPasswordRequired);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager26GetDungeonMasterEXERunningEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDungeonMasterEXERunning(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager26SetDungeonMasterEXERunningEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDungeonMasterEXERunning(__IntPtr __instance, int bDM);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager27SpawnExternalScriptDebuggerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SpawnExternalScriptDebugger(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager26GetHostedModuleDescriptionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetHostedModuleDescription(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CAppManager37GetHostedPublicInternetAddressAndPortEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetHostedPublicInternetAddressAndPort(__IntPtr @return, __IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CAppManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CAppManager>();

        protected bool __ownsNativeInstance;

        internal static CAppManager __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CAppManager(native.ToPointer(), skipVTables);
        }

        internal static CAppManager __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CAppManager)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CAppManager __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CAppManager(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CAppManager(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CAppManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CAppManager()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CAppManager.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CAppManager(global::NWN.LowLevel.CAppManager _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CAppManager.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CAppManager.__Internal*) __Instance) = *((global::NWN.LowLevel.CAppManager.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CAppManager __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NWN.LowLevel.CObjectTableManager GetObjectTableManager(uint dwClientServer)
        {
            var __ret = __Internal.GetObjectTableManager(__Instance, dwClientServer);
            var __result0 = global::NWN.LowLevel.CObjectTableManager.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void DoSaveGameScreenShot(global::NWN.LowLevel.CExoString sFile)
        {
            if (ReferenceEquals(sFile, null))
                throw new global::System.ArgumentNullException("sFile", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFile.__Instance;
            __Internal.DoSaveGameScreenShot(__Instance, __arg0);
        }

        public void ShowServerMem()
        {
            __Internal.ShowServerMem(__Instance);
        }

        public void CreateServer()
        {
            __Internal.CreateServer(__Instance);
        }

        public void DestroyServer()
        {
            __Internal.DestroyServer(__Instance);
        }

        public void DisplayScriptDebuggerPopup()
        {
            __Internal.DisplayScriptDebuggerPopup(__Instance);
        }

        public void DestroyScriptDebuggerPopup()
        {
            __Internal.DestroyScriptDebuggerPopup(__Instance);
        }

        public int SetDDCipherForModule(global::NWN.LowLevel.CExoString moduleName)
        {
            if (ReferenceEquals(moduleName, null))
                throw new global::System.ArgumentNullException("moduleName", "Cannot be null because it is passed by value.");
            var __arg0 = moduleName.__Instance;
            var __ret = __Internal.SetDDCipherForModule(__Instance, __arg0);
            return __ret;
        }

        public byte ReadProgressFromINI(byte m_nCampaign)
        {
            var __ret = __Internal.ReadProgressFromINI(__Instance, m_nCampaign);
            return __ret;
        }

        public void ConnectToServer(global::NWN.LowLevel.CExoString sAddress, int bPasswordRequired)
        {
            if (ReferenceEquals(sAddress, null))
                throw new global::System.ArgumentNullException("sAddress", "Cannot be null because it is passed by value.");
            var __arg0 = sAddress.__Instance;
            __Internal.ConnectToServer(__Instance, __arg0, bPasswordRequired);
        }

        public global::NWN.LowLevel.CClientExoApp MPClientExoApp
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CClientExoApp.__GetOrCreateInstance(((__Internal*)__Instance)->m_pClientExoApp, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pClientExoApp = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CServerExoApp MPServerExoApp
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CServerExoApp.__GetOrCreateInstance(((__Internal*)__Instance)->m_pServerExoApp, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pServerExoApp = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWTileSetManager MPNWTileSetManager
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSetManager.__GetOrCreateInstance(((__Internal*)__Instance)->m_pNWTileSetManager, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pNWTileSetManager = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CObjectTableManager MPClientObjectTableManager
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CObjectTableManager.__GetOrCreateInstance(((__Internal*)__Instance)->m_pClientObjectTableManager, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pClientObjectTableManager = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CObjectTableManager MPServerObjectTableManager
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CObjectTableManager.__GetOrCreateInstance(((__Internal*)__Instance)->m_pServerObjectTableManager, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pServerObjectTableManager = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWReentrantServerStats MPReentrantServerStats
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWReentrantServerStats.__GetOrCreateInstance(((__Internal*)__Instance)->m_pReentrantServerStats, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pReentrantServerStats = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBDungeonMasterEXERunning
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDungeonMasterEXERunning;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDungeonMasterEXERunning = value;
            }
        }

        public uint MNApplicationId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nApplicationId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nApplicationId = value;
            }
        }

        public int MBMultiplayerEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMultiplayerEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMultiplayerEnabled = value;
            }
        }

        public int MBWasPaused
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWasPaused;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWasPaused = value;
            }
        }

        public int MBDigitalDistributionModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDigitalDistributionModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDigitalDistributionModule = value;
            }
        }

        public byte* MPDDCipher
        {
            get
            {
                return (byte*) ((__Internal*)__Instance)->m_pDDCipher;
            }

            set
            {
                ((__Internal*)__Instance)->m_pDDCipher = (__IntPtr) value;
            }
        }

        public uint MNDDOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDDOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDDOffset = value;
            }
        }

        public uint MNPlayerTimeout
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlayerTimeout;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlayerTimeout = value;
            }
        }

        public int MBLogModelErrors
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLogModelErrors;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLogModelErrors = value;
            }
        }

        public int DungeonMasterEXERunning
        {
            get
            {
                var __ret = __Internal.GetDungeonMasterEXERunning(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDungeonMasterEXERunning(__Instance, value);
            }
        }

        public int SpawnExternalScriptDebugger
        {
            get
            {
                var __ret = __Internal.SpawnExternalScriptDebugger(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoLocString HostedModuleDescription
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoLocString.__Internal();
                __Internal.GetHostedModuleDescription(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString HostedPublicInternetAddressAndPort
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetHostedPublicInternetAddressAndPort(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
