// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CWorldTimer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_bFixedSnapshotRate;

            [FieldOffset(4)]
            internal int m_nFixedSnapshotsPerSecond;

            [FieldOffset(8)]
            internal ulong m_nTimeSnapshot;

            [FieldOffset(16)]
            internal ulong m_nLastTimeSnapshot;

            [FieldOffset(24)]
            internal int m_bPaused;

            [FieldOffset(28)]
            internal uint m_nPausedCalendarDay;

            [FieldOffset(32)]
            internal uint m_nPausedTimeOfDay;

            [FieldOffset(36)]
            internal uint m_nCalendarDayAdjustment;

            [FieldOffset(40)]
            internal uint m_nTimeOfDayAdjustment;

            [FieldOffset(44)]
            internal byte m_nMinutesPerHour;

            [FieldOffset(48)]
            internal uint m_nMillisecondsPerDay;

            [FieldOffset(52)]
            internal uint m_nSecondsPerDay;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimerD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer15SetSnapshotTimeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSnapshotTime(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer20ConvertToCalendarDayEjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ConvertToCalendarDay(__IntPtr __instance, uint nYear, uint nMonth, uint nDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer18ConvertToTimeOfDayEjjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ConvertToTimeOfDay(__IntPtr __instance, uint nHour, uint nMinute, uint nSecond, uint nMillisecond);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer22ConvertFromCalendarDayEjPjS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ConvertFromCalendarDay(__IntPtr __instance, uint nCalendarDay, uint* nYear, uint* nMonth, uint* nDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer20ConvertFromTimeOfDayEjPjS0_S0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ConvertFromTimeOfDay(__IntPtr __instance, uint nTimeOfDay, uint* nHour, uint* nMinute, uint* nSecond, uint* nMillisecond);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer12SetWorldTimeEjjjjjjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetWorldTime(__IntPtr __instance, uint nYear, uint nMonth, uint nDay, uint nHour, uint nMinute, uint nSecond, uint nMillisecond, int bTakeSnapshot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer12SetWorldTimeEjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetWorldTime(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay, int bTakeSnapshot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer30GetTimeDifferenceFromWorldTimeEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetTimeDifferenceFromWorldTime(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer17GetTimeDifferenceEjjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetTimeDifference(__IntPtr __instance, uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer12GetWorldTimeEPjS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetWorldTime(__IntPtr __instance, uint* nCalendarDay, uint* nTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer13AddWorldTimesEjjjjPjS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AddWorldTimes(__IntPtr __instance, uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2, uint* nCalendarDayRes, uint* nTimeOfDayRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer18SubtractWorldTimesEjjjjPjS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint SubtractWorldTimes(__IntPtr __instance, uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2, uint* nCalendarDayRes, uint* nTimeOfDayRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer17CompareWorldTimesEjjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CompareWorldTimes(__IntPtr __instance, uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer15PauseWorldTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PauseWorldTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer17UnpauseWorldTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnpauseWorldTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer26TranslateWorldTimeToStringEjjR10CExoStringS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TranslateWorldTimeToString(__IntPtr @return, __IntPtr __instance, uint nCalendarDay, uint nTimeOfDay, __IntPtr sTranslatedDayString, __IntPtr sTranslatedMonthString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer20SetFixedSnapshotRateEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFixedSnapshotRate(__IntPtr __instance, int bActivate, int nSnapshotsPerSecond);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer25GetCalendarDayFromSecondsEf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetCalendarDayFromSeconds(__IntPtr __instance, float fSeconds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer23GetTimeOfDayFromSecondsEf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetTimeOfDayFromSeconds(__IntPtr __instance, float fSeconds);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer10ResetTimerEPS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetTimer(__IntPtr __instance, __IntPtr pTimer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer17SetMinutesPerHourEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMinutesPerHour(__IntPtr __instance, byte nMinutesPerHour);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer13AdvanceToTimeEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AdvanceToTime(__IntPtr __instance, int nHour, int nMinute, int nSecond, int nMillisecond);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer15GetSnapshotTimeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSnapshotTime(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer25GetSnapshotTimeDifferenceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong GetSnapshotTimeDifference(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer23GetWorldTimeCalendarDayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeCalendarDay(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer29GetWorldTimeCalendarDayStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetWorldTimeCalendarDayString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer21GetWorldTimeTimeOfDayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeTimeOfDay(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer27GetWorldTimeTimeOfDayStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetWorldTimeTimeOfDayString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer16GetWorldTimeYearEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeYear(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer17GetWorldTimeMonthEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeMonth(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer15GetWorldTimeDayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeDay(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer16GetWorldTimeHourEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeHour(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer18GetWorldTimeMinuteEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeMinute(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer18GetWorldTimeSecondEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeSecond(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CWorldTimer23GetWorldTimeMillisecondEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetWorldTimeMillisecond(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CWorldTimer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CWorldTimer>();

        protected bool __ownsNativeInstance;

        internal static CWorldTimer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CWorldTimer(native.ToPointer(), skipVTables);
        }

        internal static CWorldTimer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CWorldTimer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CWorldTimer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CWorldTimer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CWorldTimer(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CWorldTimer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CWorldTimer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CWorldTimer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CWorldTimer(global::NWN.LowLevel.CWorldTimer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CWorldTimer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CWorldTimer.__Internal*) __Instance) = *((global::NWN.LowLevel.CWorldTimer.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CWorldTimer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetSnapshotTime()
        {
            __Internal.SetSnapshotTime(__Instance);
        }

        public uint ConvertToCalendarDay(uint nYear, uint nMonth, uint nDay)
        {
            var __ret = __Internal.ConvertToCalendarDay(__Instance, nYear, nMonth, nDay);
            return __ret;
        }

        public uint ConvertToTimeOfDay(uint nHour, uint nMinute, uint nSecond, uint nMillisecond)
        {
            var __ret = __Internal.ConvertToTimeOfDay(__Instance, nHour, nMinute, nSecond, nMillisecond);
            return __ret;
        }

        public void ConvertFromCalendarDay(uint nCalendarDay, ref uint nYear, ref uint nMonth, ref uint nDay)
        {
            fixed (uint* __nYear1 = &nYear)
            {
                var __arg1 = __nYear1;
                fixed (uint* __nMonth2 = &nMonth)
                {
                    var __arg2 = __nMonth2;
                    fixed (uint* __nDay3 = &nDay)
                    {
                        var __arg3 = __nDay3;
                        __Internal.ConvertFromCalendarDay(__Instance, nCalendarDay, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public void ConvertFromTimeOfDay(uint nTimeOfDay, ref uint nHour, ref uint nMinute, ref uint nSecond, ref uint nMillisecond)
        {
            fixed (uint* __nHour1 = &nHour)
            {
                var __arg1 = __nHour1;
                fixed (uint* __nMinute2 = &nMinute)
                {
                    var __arg2 = __nMinute2;
                    fixed (uint* __nSecond3 = &nSecond)
                    {
                        var __arg3 = __nSecond3;
                        fixed (uint* __nMillisecond4 = &nMillisecond)
                        {
                            var __arg4 = __nMillisecond4;
                            __Internal.ConvertFromTimeOfDay(__Instance, nTimeOfDay, __arg1, __arg2, __arg3, __arg4);
                        }
                    }
                }
            }
        }

        public void SetWorldTime(uint nYear, uint nMonth, uint nDay, uint nHour, uint nMinute, uint nSecond, uint nMillisecond, int bTakeSnapshot)
        {
            __Internal.SetWorldTime(__Instance, nYear, nMonth, nDay, nHour, nMinute, nSecond, nMillisecond, bTakeSnapshot);
        }

        public void SetWorldTime(uint nCalendarDay, uint nTimeOfDay, int bTakeSnapshot)
        {
            __Internal.SetWorldTime(__Instance, nCalendarDay, nTimeOfDay, bTakeSnapshot);
        }

        public uint GetTimeDifferenceFromWorldTime(uint nCalendarDay, uint nTimeOfDay)
        {
            var __ret = __Internal.GetTimeDifferenceFromWorldTime(__Instance, nCalendarDay, nTimeOfDay);
            return __ret;
        }

        public ulong GetTimeDifference(uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2)
        {
            var __ret = __Internal.GetTimeDifference(__Instance, nCalendarDay1, nTimeOfDay1, nCalendarDay2, nTimeOfDay2);
            return __ret;
        }

        public void GetWorldTime(ref uint nCalendarDay, ref uint nTimeOfDay)
        {
            fixed (uint* __nCalendarDay0 = &nCalendarDay)
            {
                var __arg0 = __nCalendarDay0;
                fixed (uint* __nTimeOfDay1 = &nTimeOfDay)
                {
                    var __arg1 = __nTimeOfDay1;
                    __Internal.GetWorldTime(__Instance, __arg0, __arg1);
                }
            }
        }

        public uint AddWorldTimes(uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2, ref uint nCalendarDayRes, ref uint nTimeOfDayRes)
        {
            fixed (uint* __nCalendarDayRes4 = &nCalendarDayRes)
            {
                var __arg4 = __nCalendarDayRes4;
                fixed (uint* __nTimeOfDayRes5 = &nTimeOfDayRes)
                {
                    var __arg5 = __nTimeOfDayRes5;
                    var __ret = __Internal.AddWorldTimes(__Instance, nCalendarDay1, nTimeOfDay1, nCalendarDay2, nTimeOfDay2, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public uint SubtractWorldTimes(uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2, ref uint nCalendarDayRes, ref uint nTimeOfDayRes)
        {
            fixed (uint* __nCalendarDayRes4 = &nCalendarDayRes)
            {
                var __arg4 = __nCalendarDayRes4;
                fixed (uint* __nTimeOfDayRes5 = &nTimeOfDayRes)
                {
                    var __arg5 = __nTimeOfDayRes5;
                    var __ret = __Internal.SubtractWorldTimes(__Instance, nCalendarDay1, nTimeOfDay1, nCalendarDay2, nTimeOfDay2, __arg4, __arg5);
                    return __ret;
                }
            }
        }

        public int CompareWorldTimes(uint nCalendarDay1, uint nTimeOfDay1, uint nCalendarDay2, uint nTimeOfDay2)
        {
            var __ret = __Internal.CompareWorldTimes(__Instance, nCalendarDay1, nTimeOfDay1, nCalendarDay2, nTimeOfDay2);
            return __ret;
        }

        public void PauseWorldTimer()
        {
            __Internal.PauseWorldTimer(__Instance);
        }

        public void UnpauseWorldTimer()
        {
            __Internal.UnpauseWorldTimer(__Instance);
        }

        public global::NWN.LowLevel.CExoString TranslateWorldTimeToString(uint nCalendarDay, uint nTimeOfDay, global::NWN.LowLevel.CExoString sTranslatedDayString, global::NWN.LowLevel.CExoString sTranslatedMonthString)
        {
            if (ReferenceEquals(sTranslatedDayString, null))
                throw new global::System.ArgumentNullException("sTranslatedDayString", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sTranslatedDayString.__Instance;
            if (ReferenceEquals(sTranslatedMonthString, null))
                throw new global::System.ArgumentNullException("sTranslatedMonthString", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = sTranslatedMonthString.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.TranslateWorldTimeToString(new IntPtr(&__ret), __Instance, nCalendarDay, nTimeOfDay, __arg2, __arg3);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void SetFixedSnapshotRate(int bActivate, int nSnapshotsPerSecond)
        {
            __Internal.SetFixedSnapshotRate(__Instance, bActivate, nSnapshotsPerSecond);
        }

        public uint GetCalendarDayFromSeconds(float fSeconds)
        {
            var __ret = __Internal.GetCalendarDayFromSeconds(__Instance, fSeconds);
            return __ret;
        }

        public uint GetTimeOfDayFromSeconds(float fSeconds)
        {
            var __ret = __Internal.GetTimeOfDayFromSeconds(__Instance, fSeconds);
            return __ret;
        }

        public void ResetTimer(global::NWN.LowLevel.CWorldTimer pTimer)
        {
            var __arg0 = pTimer is null ? __IntPtr.Zero : pTimer.__Instance;
            __Internal.ResetTimer(__Instance, __arg0);
        }

        public void SetMinutesPerHour(byte nMinutesPerHour)
        {
            __Internal.SetMinutesPerHour(__Instance, nMinutesPerHour);
        }

        public void AdvanceToTime(int nHour, int nMinute, int nSecond, int nMillisecond)
        {
            __Internal.AdvanceToTime(__Instance, nHour, nMinute, nSecond, nMillisecond);
        }

        public int MBFixedSnapshotRate
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFixedSnapshotRate;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFixedSnapshotRate = value;
            }
        }

        public int MNFixedSnapshotsPerSecond
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFixedSnapshotsPerSecond;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFixedSnapshotsPerSecond = value;
            }
        }

        public ulong MNTimeSnapshot
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTimeSnapshot;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTimeSnapshot = value;
            }
        }

        public ulong MNLastTimeSnapshot
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastTimeSnapshot;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastTimeSnapshot = value;
            }
        }

        public int MBPaused
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPaused;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPaused = value;
            }
        }

        public uint MNPausedCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPausedCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPausedCalendarDay = value;
            }
        }

        public uint MNPausedTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPausedTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPausedTimeOfDay = value;
            }
        }

        public uint MNCalendarDayAdjustment
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCalendarDayAdjustment;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCalendarDayAdjustment = value;
            }
        }

        public uint MNTimeOfDayAdjustment
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTimeOfDayAdjustment;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTimeOfDayAdjustment = value;
            }
        }

        public byte MNMinutesPerHour
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinutesPerHour;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinutesPerHour = value;
            }
        }

        public uint MNMillisecondsPerDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMillisecondsPerDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMillisecondsPerDay = value;
            }
        }

        public uint MNSecondsPerDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSecondsPerDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSecondsPerDay = value;
            }
        }

        public ulong SnapshotTime
        {
            get
            {
                var __ret = __Internal.GetSnapshotTime(__Instance);
                return __ret;
            }
        }

        public ulong SnapshotTimeDifference
        {
            get
            {
                var __ret = __Internal.GetSnapshotTimeDifference(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeCalendarDay
        {
            get
            {
                var __ret = __Internal.GetWorldTimeCalendarDay(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString WorldTimeCalendarDayString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetWorldTimeCalendarDayString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public uint WorldTimeTimeOfDay
        {
            get
            {
                var __ret = __Internal.GetWorldTimeTimeOfDay(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString WorldTimeTimeOfDayString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetWorldTimeTimeOfDayString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public uint WorldTimeYear
        {
            get
            {
                var __ret = __Internal.GetWorldTimeYear(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeMonth
        {
            get
            {
                var __ret = __Internal.GetWorldTimeMonth(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeDay
        {
            get
            {
                var __ret = __Internal.GetWorldTimeDay(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeHour
        {
            get
            {
                var __ret = __Internal.GetWorldTimeHour(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeMinute
        {
            get
            {
                var __ret = __Internal.GetWorldTimeMinute(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeSecond
        {
            get
            {
                var __ret = __Internal.GetWorldTimeSecond(__Instance);
                return __ret;
            }
        }

        public uint WorldTimeMillisecond
        {
            get
            {
                var __ret = __Internal.GetWorldTimeMillisecond(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
