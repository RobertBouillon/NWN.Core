// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CItemRepository : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte m_nWidth;

            [FieldOffset(1)]
            internal byte m_nHeight;

            [FieldOffset(4)]
            internal uint m_nBoundary;

            [FieldOffset(8)]
            internal uint m_oidParent;

            [FieldOffset(12)]
            internal int m_bScalable;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_oidItems;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepositoryC2Ejhhji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, uint oidParent, byte nWidth, byte nHeight, uint nBoundary, int bScalable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepositoryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepositoryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository7AddItemEPP8CNWSItemhhii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddItem(__IntPtr __instance, __IntPtr pItem, byte x, byte y, int bAllowEncumbrance, int bMergeItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository13CalculatePageEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte CalculatePage(__IntPtr __instance, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository8CheckFitEP8CNWSItemhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckFit(__IntPtr __instance, __IntPtr pItem, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository17CheckItemOverlapsEP8CNWSItemS1_hh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckItemOverlaps(__IntPtr __instance, __IntPtr pSourceItem, __IntPtr pDroppingItem, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository9CheckItemEP8CNWSItemhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckItem(__IntPtr __instance, __IntPtr pItem, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository22FindItemWithBaseItemIdEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FindItemWithBaseItemId(__IntPtr __instance, uint nBaseItemId, int nTh);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository15FindItemWithTagEP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint FindItemWithTag(__IntPtr __instance, __IntPtr pTag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository12FindPositionEP8CNWSItemRhS2_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindPosition(__IntPtr __instance, __IntPtr pItem, byte* x, byte* y, int bOriginatingFromScript);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository8AddPanelEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPanel(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository10RemoveItemEP8CNWSItem", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveItem(__IntPtr __instance, __IntPtr pItem);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository8MoveItemEP8CNWSItemhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MoveItem(__IntPtr __instance, __IntPtr pItem, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository19GetItemInRepositoryEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetItemInRepository(__IntPtr __instance, __IntPtr pItem, int bCheckContainers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository19GetItemInRepositoryEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetItemInRepository(__IntPtr __instance, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository15ItemListGetItemEP18CExoLinkedListNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ItemListGetItem(__IntPtr __instance, __IntPtr pListPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository23ItemListGetItemObjectIDEP18CExoLinkedListNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ItemListGetItemObjectID(__IntPtr __instance, __IntPtr pListPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CItemRepository23CalculateContentsWeightEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CalculateContentsWeight(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CItemRepository> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CItemRepository>();

        protected bool __ownsNativeInstance;

        internal static CItemRepository __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CItemRepository(native.ToPointer(), skipVTables);
        }

        internal static CItemRepository __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CItemRepository)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CItemRepository __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CItemRepository(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CItemRepository(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CItemRepository(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CItemRepository(uint oidParent, byte nWidth, byte nHeight, uint nBoundary, int bScalable)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CItemRepository.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, oidParent, nWidth, nHeight, nBoundary, bScalable);
        }

        public CItemRepository(global::NWN.LowLevel.CItemRepository _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CItemRepository.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CItemRepository.__Internal*) __Instance) = *((global::NWN.LowLevel.CItemRepository.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CItemRepository __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AddItem(global::NWN.LowLevel.CNWSItem pItem, byte x, byte y, int bAllowEncumbrance, int bMergeItem)
        {
            var ____arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __ret = __Internal.AddItem(__Instance, __arg0, x, y, bAllowEncumbrance, bMergeItem);
            return __ret;
        }

        public byte CalculatePage(byte x, byte y)
        {
            var __ret = __Internal.CalculatePage(__Instance, x, y);
            return __ret;
        }

        public int CheckFit(global::NWN.LowLevel.CNWSItem pItem, byte x, byte y)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckFit(__Instance, __arg0, x, y);
            return __ret;
        }

        public int CheckItemOverlaps(global::NWN.LowLevel.CNWSItem pSourceItem, global::NWN.LowLevel.CNWSItem pDroppingItem, byte x, byte y)
        {
            var __arg0 = pSourceItem is null ? __IntPtr.Zero : pSourceItem.__Instance;
            var __arg1 = pDroppingItem is null ? __IntPtr.Zero : pDroppingItem.__Instance;
            var __ret = __Internal.CheckItemOverlaps(__Instance, __arg0, __arg1, x, y);
            return __ret;
        }

        public int CheckItem(global::NWN.LowLevel.CNWSItem pItem, byte x, byte y)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.CheckItem(__Instance, __arg0, x, y);
            return __ret;
        }

        public uint FindItemWithBaseItemId(uint nBaseItemId, int nTh)
        {
            var __ret = __Internal.FindItemWithBaseItemId(__Instance, nBaseItemId, nTh);
            return __ret;
        }

        public uint FindItemWithTag(global::NWN.LowLevel.CExoString pTag)
        {
            var __arg0 = pTag is null ? __IntPtr.Zero : pTag.__Instance;
            var __ret = __Internal.FindItemWithTag(__Instance, __arg0);
            return __ret;
        }

        public int FindPosition(global::NWN.LowLevel.CNWSItem pItem, byte* x, byte* y, int bOriginatingFromScript)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.FindPosition(__Instance, __arg0, x, y, bOriginatingFromScript);
            return __ret;
        }

        public int AddPanel()
        {
            var __ret = __Internal.AddPanel(__Instance);
            return __ret;
        }

        public int RemoveItem(global::NWN.LowLevel.CNWSItem pItem)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.RemoveItem(__Instance, __arg0);
            return __ret;
        }

        public int MoveItem(global::NWN.LowLevel.CNWSItem pItem, byte x, byte y)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.MoveItem(__Instance, __arg0, x, y);
            return __ret;
        }

        public int GetItemInRepository(global::NWN.LowLevel.CNWSItem pItem, int bCheckContainers)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.GetItemInRepository(__Instance, __arg0, bCheckContainers);
            return __ret;
        }

        public uint GetItemInRepository(byte x, byte y)
        {
            var __ret = __Internal.GetItemInRepository(__Instance, x, y);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSItem ItemListGetItem(global::NWN.LowLevel.CExoLinkedListNode pListPosition)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            var __ret = __Internal.ItemListGetItem(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public uint ItemListGetItemObjectID(global::NWN.LowLevel.CExoLinkedListNode pListPosition)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            var __ret = __Internal.ItemListGetItemObjectID(__Instance, __arg0);
            return __ret;
        }

        public int CalculateContentsWeight()
        {
            var __ret = __Internal.CalculateContentsWeight(__Instance);
            return __ret;
        }

        public byte MNWidth
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWidth;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWidth = value;
            }
        }

        public byte MNHeight
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHeight;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHeight = value;
            }
        }

        public uint MNBoundary
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBoundary;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBoundary = value;
            }
        }

        public uint MOidParent
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidParent;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidParent = value;
            }
        }

        public int MBScalable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bScalable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bScalable = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<uint> MOidItems
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_oidItems));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_oidItems = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
