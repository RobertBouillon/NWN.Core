// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    namespace AurList
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public unsafe partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr element;

            [FieldOffset(8)]
            internal int num;

            [FieldOffset(12)]
            internal int array_size;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeEC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctorc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeEC2ERS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctorc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, __IntPtr list);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeED2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtorc__S_AurList____S_CStringFieldIDType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE8allocateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Allocatec__S_AurList____S_CStringFieldIDType(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE7SetSizeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSizec__S_AurList____S_CStringFieldIDType(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE4PackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Packc__S_AurList____S_CStringFieldIDType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE3AddES0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Addc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE9AddUniqueES0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddUniquec__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE8ContainsES0_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Containsc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE6InsertES0_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insertc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0, int _1);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE7IndexOfES0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IndexOfc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE6RemoveES0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Removec__S_AurList____S_CStringFieldIDType(__IntPtr __instance, global::NWN.LowLevel.CStringFieldIDType.__Internal _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListI18CStringFieldIDTypeE8DelIndexEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DelIndexc__S_AurList____S_CStringFieldIDType(__IntPtr __instance, int i);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpEC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctorc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpEC2ERS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctorc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr list);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpED2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtorc__S_AurList_____S_CResStructLookUp(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE8allocateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Allocatec__S_AurList_____S_CResStructLookUp(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE7SetSizeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSizec__S_AurList_____S_CResStructLookUp(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE4PackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Packc__S_AurList_____S_CResStructLookUp(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE3AddES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Addc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE9AddUniqueES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddUniquec__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE8ContainsES1_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Containsc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE6InsertES1_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insertc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0, int _1);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE7IndexOfES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IndexOfc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE6RemoveES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Removec__S_AurList_____S_CResStructLookUp(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP16CResStructLookUpE8DelIndexEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DelIndexc__S_AurList_____S_CResStructLookUp(__IntPtr __instance, int i);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeEC2ERS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctorc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr list);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeED2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtorc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE8allocateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Allocate1c__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE7SetSizeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSize1c__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE4PackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Pack1c__S_AurList_____S_CStringFieldIDType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE3AddES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Addc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE9AddUniqueES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddUniquec__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE8ContainsES1_", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Containsc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE6InsertES1_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insertc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0, int _1);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE7IndexOfES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IndexOfc__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE6RemoveES1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Removec__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIP18CStringFieldIDTypeE8DelIndexEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DelIndex1c__S_AurList_____S_CStringFieldIDType(__IntPtr __instance, int i);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjEC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctorc__S_AurList__i(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjEC2ERS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctorc__S_AurList__i(__IntPtr __instance, __IntPtr list);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjED2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtorc__S_AurList__i(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE8allocateEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Allocatec__S_AurList__i(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE7SetSizeEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSizec__S_AurList__i(__IntPtr __instance, int s);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE4PackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Packc__S_AurList__i(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE3AddEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Addc__S_AurList__i(__IntPtr __instance, uint _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE9AddUniqueEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddUniquec__S_AurList__i(__IntPtr __instance, uint _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE8ContainsEj", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Containsc__S_AurList__i(__IntPtr __instance, uint _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE6InsertEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Insertc__S_AurList__i(__IntPtr __instance, uint _0, int _1);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE7IndexOfEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IndexOfc__S_AurList__i(__IntPtr __instance, uint _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE6RemoveEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Removec__S_AurList__i(__IntPtr __instance, uint _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7AurListIjE8DelIndexEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DelIndexc__S_AurList__i(__IntPtr __instance, int i);
        }
    }

    public unsafe partial class AurList<Type> : IDisposable
    {
        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.AurList<Type>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.AurList<Type>>();

        protected bool __ownsNativeInstance;

        internal static AurList<Type> __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new AurList<Type>(native.ToPointer(), skipVTables);
        }

        internal static AurList<Type> __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (AurList<Type>)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static AurList<Type> __CreateInstance(global::NWN.LowLevel.AurList.__Internal native, bool skipVTables = false)
        {
            return new AurList<Type>(native, skipVTables);
        }

        private static void* __CopyValue(global::NWN.LowLevel.AurList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
            global::NWN.LowLevel.AurList.__Internal.cctorc__S_AurList____S_CStringFieldIDType(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private AurList(global::NWN.LowLevel.AurList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected AurList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public AurList(int s)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::NWN.LowLevel.AurList.__Internal.ctorc__S_AurList____S_CStringFieldIDType(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::NWN.LowLevel.AurList.__Internal.ctorc__S_AurList_____S_CResStructLookUp(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                throw new MissingMethodException("Method AurList_Type_ ignored in specialization global::NWN.LowLevel.AurList<global::NWN.LowLevel.CStringFieldIDType>.");
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                global::NWN.LowLevel.AurList.__Internal.ctorc__S_AurList__i(__Instance, s);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public AurList(global::NWN.LowLevel.AurList<Type> list)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(list, null))
                    throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = list.__Instance;
                global::NWN.LowLevel.AurList.__Internal.cctorc__S_AurList____S_CStringFieldIDType(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(list, null))
                    throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = list.__Instance;
                global::NWN.LowLevel.AurList.__Internal.cctorc__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(list, null))
                    throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = list.__Instance;
                global::NWN.LowLevel.AurList.__Internal.cctorc__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.AurList.__Internal));
                __ownsNativeInstance = true;
                NativeToManagedMap[__Instance] = this;
                if (ReferenceEquals(list, null))
                    throw new global::System.ArgumentNullException("list", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = list.__Instance;
                global::NWN.LowLevel.AurList.__Internal.cctorc__S_AurList__i(__Instance, __arg0);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.AurList<Type> __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    global::NWN.LowLevel.AurList.__Internal.dtorc__S_AurList____S_CStringFieldIDType(__Instance);
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    global::NWN.LowLevel.AurList.__Internal.dtorc__S_AurList_____S_CResStructLookUp(__Instance);
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    global::NWN.LowLevel.AurList.__Internal.dtorc__S_AurList_____S_CStringFieldIDType(__Instance);
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    global::NWN.LowLevel.AurList.__Internal.dtorc__S_AurList__i(__Instance);
                    return;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Allocate(int s)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.Allocatec__S_AurList____S_CStringFieldIDType(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                global::NWN.LowLevel.AurList.__Internal.Allocatec__S_AurList_____S_CResStructLookUp(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.Allocate1c__S_AurList_____S_CStringFieldIDType(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                global::NWN.LowLevel.AurList.__Internal.Allocatec__S_AurList__i(__Instance, s);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void SetSize(int s)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.SetSizec__S_AurList____S_CStringFieldIDType(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                global::NWN.LowLevel.AurList.__Internal.SetSizec__S_AurList_____S_CResStructLookUp(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.SetSize1c__S_AurList_____S_CStringFieldIDType(__Instance, s);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                global::NWN.LowLevel.AurList.__Internal.SetSizec__S_AurList__i(__Instance, s);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void Pack()
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.Packc__S_AurList____S_CStringFieldIDType(__Instance);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                global::NWN.LowLevel.AurList.__Internal.Packc__S_AurList_____S_CResStructLookUp(__Instance);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.Pack1c__S_AurList_____S_CStringFieldIDType(__Instance);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                global::NWN.LowLevel.AurList.__Internal.Packc__S_AurList__i(__Instance);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void Add(Type _0)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Addc__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Addc__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Addc__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                global::NWN.LowLevel.AurList.__Internal.Addc__S_AurList__i(__Instance, __arg0);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void AddUnique(Type _0)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.AddUniquec__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.AddUniquec__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.AddUniquec__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                global::NWN.LowLevel.AurList.__Internal.AddUniquec__S_AurList__i(__Instance, __arg0);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public bool Contains(Type _0)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.Containsc__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.Containsc__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.Containsc__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                var __ret = global::NWN.LowLevel.AurList.__Internal.Containsc__S_AurList__i(__Instance, __arg0);
                return __ret;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void Insert(Type _0, int _1)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Insertc__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0, _1);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Insertc__S_AurList_____S_CResStructLookUp(__Instance, __arg0, _1);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Insertc__S_AurList_____S_CStringFieldIDType(__Instance, __arg0, _1);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                global::NWN.LowLevel.AurList.__Internal.Insertc__S_AurList__i(__Instance, __arg0, _1);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public int IndexOf(Type _0)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.IndexOfc__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.IndexOfc__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                var __ret = global::NWN.LowLevel.AurList.__Internal.IndexOfc__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return __ret;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                var __ret = global::NWN.LowLevel.AurList.__Internal.IndexOfc__S_AurList__i(__Instance, __arg0);
                return __ret;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void Remove(Type _0)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                if (ReferenceEquals(_0, null))
                    throw new global::System.ArgumentNullException("_0", "Cannot be null because it is passed by value.");
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Removec__S_AurList____S_CStringFieldIDType(__Instance, *(global::NWN.LowLevel.CStringFieldIDType.__Internal*) __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                var __arg0 = ((global::NWN.LowLevel.CResStructLookUp) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Removec__S_AurList_____S_CResStructLookUp(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                var __arg0 = ((global::NWN.LowLevel.CStringFieldIDType) (object) _0) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) _0).__Instance;
                global::NWN.LowLevel.AurList.__Internal.Removec__S_AurList_____S_CStringFieldIDType(__Instance, __arg0);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                var __arg0 = (uint) (object) _0;
                global::NWN.LowLevel.AurList.__Internal.Removec__S_AurList__i(__Instance, __arg0);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public void DelIndex(int i)
        {
            var __Type = typeof(Type);
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.DelIndexc__S_AurList____S_CStringFieldIDType(__Instance, i);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
            {
                global::NWN.LowLevel.AurList.__Internal.DelIndexc__S_AurList_____S_CResStructLookUp(__Instance, i);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
            {
                global::NWN.LowLevel.AurList.__Internal.DelIndex1c__S_AurList_____S_CStringFieldIDType(__Instance, i);
                return;
            }
            if (__Type.IsAssignableFrom(typeof(uint)))
            {
                global::NWN.LowLevel.AurList.__Internal.DelIndexc__S_AurList__i(__Instance, i);
                return;
            }
            throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
        }

        public static implicit operator global::NWN.LowLevel.AurList<Type>(int s)
        {
            return new global::NWN.LowLevel.AurList<Type>(s);
        }

        public Type Element
        {
            get
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    var __result0 = global::NWN.LowLevel.CStringFieldIDType.__GetOrCreateInstance(((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element, false);
                    return (Type) (object) (Type) (object) __result0;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    var __result0 = global::NWN.LowLevel.CResStructLookUp.__GetOrCreateInstance(((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element, false);
                    return (Type) (object) (Type) (object) __result0;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    var __result0 = global::NWN.LowLevel.CStringFieldIDType.__GetOrCreateInstance(((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element, false);
                    return (Type) (object) (Type) (object) __result0;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    return (Type) (object) ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }

            set
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element = ((global::NWN.LowLevel.CStringFieldIDType) (object) value) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) value).__Instance;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    var __value = ((global::NWN.LowLevel.CResStructLookUp) (object) value) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CResStructLookUp) (object) value).__Instance;
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element = new __IntPtr(&__value);
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    var __value = ((global::NWN.LowLevel.CStringFieldIDType) (object) value) is null ? __IntPtr.Zero : ((global::NWN.LowLevel.CStringFieldIDType) (object) value).__Instance;
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element = new __IntPtr(&__value);
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    var __value0 = (uint) (object) value;
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->element = (__IntPtr) (object) __value0;
                    return;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }
        }

        public int Num
        {
            get
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }

            set
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->num = value;
                    return;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }
        }

        public int ArraySize
        {
            get
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    return ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }

            set
            {
                var __Type = typeof(Type);
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CResStructLookUp)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(global::NWN.LowLevel.CStringFieldIDType)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size = value;
                    return;
                }
                if (__Type.IsAssignableFrom(typeof(uint)))
                {
                    ((global::NWN.LowLevel.AurList.__Internal*)__Instance)->array_size = value;
                    return;
                }
                throw new ArgumentOutOfRangeException("Type", string.Join(", ", new[] { typeof(Type).FullName }), "global::NWN.LowLevel.AurList<Type> maps a C++ template class and therefore it only supports a limited set of types and their subclasses: <global::NWN.LowLevel.CStringFieldIDType>, <global::NWN.LowLevel.CResStructLookUp>, <global::NWN.LowLevel.CStringFieldIDType>, <uint>.");
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
