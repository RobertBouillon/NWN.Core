// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSPlaceable : global::NWN.LowLevel.CNWSObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1488)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CGameObject;

            [FieldOffset(8)]
            internal uint m_idSelf;

            [FieldOffset(12)]
            internal byte m_nObjectType;

            [FieldOffset(16)]
            internal __IntPtr m_pNwnxData;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sForGCC;

            [FieldOffset(40)]
            internal ushort m_nGroupID;

            [FieldOffset(42)]
            internal ushort m_nLastGroupID;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTag;

            [FieldOffset(64)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sTemplate;

            [FieldOffset(80)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cPortrait;

            [FieldOffset(112)]
            internal ushort m_nPortraitId;

            [FieldOffset(120)]
            internal __IntPtr m_pDialog;

            [FieldOffset(128)]
            internal uint m_nDialogDelayCalendar;

            [FieldOffset(132)]
            internal uint m_nDialogDelayTimeOfDay;

            [FieldOffset(136)]
            internal int m_bDialogStored;

            [FieldOffset(140)]
            internal uint m_nDialogStoredEntry;

            [FieldOffset(144)]
            internal int m_bDialogPaused;

            [FieldOffset(148)]
            internal uint m_oidDialogOwner;

            [FieldOffset(152)]
            internal int m_nDialogAnimation;

            [FieldOffset(156)]
            internal int m_nAILevel;

            [FieldOffset(160)]
            internal int m_bLock;

            [FieldOffset(168)]
            internal __IntPtr m_pAIPosList;

            [FieldOffset(176)]
            internal ushort m_nCurrentAction;

            [FieldOffset(180)]
            internal uint m_oidCurrentActionTarget;

            [FieldOffset(184)]
            internal __IntPtr m_pAnimation;

            [FieldOffset(192)]
            internal uint m_oidArea;

            [FieldOffset(196)]
            internal global::NWN.LowLevel.Vector.__Internal m_vPosition;

            [FieldOffset(208)]
            internal global::NWN.LowLevel.Vector.__Internal m_vOrientation;

            [FieldOffset(220)]
            internal uint m_nLastUpdateCalendarDay;

            [FieldOffset(224)]
            internal uint m_nLastUpdateTimeOfDay;

            [FieldOffset(228)]
            internal uint m_nStartActionCalendarDay;

            [FieldOffset(232)]
            internal uint m_nStartActionTimeOfDay;

            [FieldOffset(236)]
            internal uint m_nLastAnimationCalendarDay;

            [FieldOffset(240)]
            internal uint m_nLastAnimationTimeOfDay;

            [FieldOffset(244)]
            internal uint m_nAIUpdateDifference;

            [FieldOffset(248)]
            internal int m_nAnimation;

            [FieldOffset(252)]
            internal float m_fAnimSpeed;

            [FieldOffset(256)]
            internal int m_nCurrentHitPoints;

            [FieldOffset(260)]
            internal int m_nBaseHitPoints;

            [FieldOffset(264)]
            internal int m_nTemporaryHitPoints;

            [FieldOffset(268)]
            internal int m_bAbleToModifyActionQueue;

            [FieldOffset(272)]
            internal int m_bDestroyable;

            [FieldOffset(276)]
            internal int m_bRaiseable;

            [FieldOffset(280)]
            internal int m_bSelectableWhenDead;

            [FieldOffset(284)]
            internal int m_bPlotObject;

            [FieldOffset(288)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lQueuedActions;

            [FieldOffset(296)]
            internal global::NWN.LowLevel.CNWSScriptVarTable.__Internal m_ScriptVars;

            [FieldOffset(360)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_appliedEffects;

            [FieldOffset(376)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstLoopingVisualEffects;

            [FieldOffset(392)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstEffectTargets;

            [FieldOffset(408)]
            internal int m_bPendingEffectRemoval;

            [FieldOffset(412)]
            internal uint m_nSavingThrowSpellId;

            [FieldOffset(416)]
            internal int m_nCustomScriptEventId;

            [FieldOffset(420)]
            internal uint m_oidKiller;

            [FieldOffset(424)]
            internal uint m_oidLastHostileActor;

            [FieldOffset(428)]
            internal uint m_oidLastAttacker;

            [FieldOffset(432)]
            internal uint m_oidLastDamager;

            [FieldOffset(436)]
            internal uint m_oidLastDisturbed;

            [FieldOffset(440)]
            internal __IntPtr m_pLastDamageList;

            [FieldOffset(448)]
            internal ushort m_nLastAttackType;

            [FieldOffset(450)]
            internal byte m_nLastAttackMode;

            [FieldOffset(452)]
            internal uint m_oidLastWeaponAttackedWith;

            [FieldOffset(456)]
            internal uint m_oidInventoryDisturbItem;

            [FieldOffset(460)]
            internal int m_nInventoryDisturbType;

            [FieldOffset(464)]
            internal uint m_oidLastSpeaker;

            [FieldOffset(468)]
            internal int m_bPrivateConversation;

            [FieldOffset(472)]
            internal int m_nConversationPlayHello;

            [FieldOffset(480)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sLastConversationResref;

            [FieldOffset(496)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aListenExpressions;

            [FieldOffset(512)]
            internal int m_nMatchedPos;

            [FieldOffset(516)]
            internal int m_bListening;

            [FieldOffset(520)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_aExpressionStrings;

            [FieldOffset(536)]
            internal __IntPtr m_nDamageImmunity;

            [FieldOffset(544)]
            internal global::NWN.LowLevel.Vector.__Internal m_vLastSpellTarget;

            [FieldOffset(556)]
            internal uint m_oidLastSpellTarget;

            [FieldOffset(560)]
            internal uint m_nLastSpellId;

            [FieldOffset(564)]
            internal byte m_nLastDomainLevel;

            [FieldOffset(568)]
            internal uint m_nLastSpellProjectileTime;

            [FieldOffset(572)]
            internal int m_bLastSpellCast;

            [FieldOffset(576)]
            internal int m_bLastSpellCastSpontaneous;

            [FieldOffset(580)]
            internal byte m_nLastSpellCastMulticlass;

            [FieldOffset(581)]
            internal byte m_nLastSpellCastMetaType;

            [FieldOffset(584)]
            internal uint m_oidLastSpellCastAtMeCaster;

            [FieldOffset(588)]
            internal uint m_nLastSpellCastAtMe;

            [FieldOffset(592)]
            internal int m_bLastSpellCastAtMeHarmful;

            [FieldOffset(596)]
            internal ushort m_nLastSpellCastFeat;

            [FieldOffset(600)]
            internal __IntPtr m_pExecutingAIAction;

            [FieldOffset(608)]
            internal ushort m_nEffectArrayIndex;

            [FieldOffset(612)]
            internal int m_bApplyingPostProcessEffects;

            [FieldOffset(616)]
            internal int m_bOpenDoorAnimationPlayed;

            [FieldOffset(620)]
            internal global::NWN.LowLevel.Vector.__Internal m_vHiliteColor;

            [FieldOffset(632)]
            internal int m_nMouseCursor;

            [FieldOffset(640)]
            internal global::NWN.LowLevel.CNWSTransition.__Internal m_pTransition;

            [FieldOffset(664)]
            internal global::Std.SharedPtr.__Internal m_sqlite_db;

            [FieldOffset(680)]
            internal global::NWN.LowLevel.ObjectVisualTransformData.__Internal m_pVisualTransformData;

            [FieldOffset(720)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lMaterialShaderParameters;

            [FieldOffset(736)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lTextureReplaceInfo;

            [FieldOffset(752)]
            internal global::NWN.LowLevel.CNWSUUID.__Internal m_pUUID;

            [FieldOffset(784)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sLocName;

            [FieldOffset(800)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDisplayName;

            [FieldOffset(816)]
            internal int m_nUpdateDisplayNameSeq;

            [FieldOffset(820)]
            internal ushort m_nAppearance;

            [FieldOffset(824)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sDescription;

            [FieldOffset(840)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDescriptionOverride;

            [FieldOffset(856)]
            internal int m_nFactionId;

            [FieldOffset(860)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cDialog;

            [FieldOffset(892)]
            internal byte m_nType;

            [FieldOffset(896)]
            internal int m_bGroundPile;

            [FieldOffset(900)]
            internal uint m_oidSittingCreature;

            [FieldOffset(904)]
            internal byte m_nHardness;

            [FieldOffset(908)]
            internal float m_fBearing;

            [FieldOffset(912)]
            internal int m_bLocked;

            [FieldOffset(920)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sKeyName;

            [FieldOffset(936)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sKeyRequiredFeedbackMessage;

            [FieldOffset(952)]
            internal int m_bKeyRequired;

            [FieldOffset(956)]
            internal int m_bAutoRemoveKey;

            [FieldOffset(960)]
            internal byte m_nOpenLockDC;

            [FieldOffset(961)]
            internal byte m_nCloseLockDC;

            [FieldOffset(964)]
            internal uint m_oidTrapCreator;

            [FieldOffset(968)]
            internal byte m_nTrapDetectionDC;

            [FieldOffset(972)]
            internal int m_bTrapFlag;

            [FieldOffset(976)]
            internal byte m_nDisarmDC;

            [FieldOffset(980)]
            internal int m_bDisarmable;

            [FieldOffset(984)]
            internal int m_bDetectable;

            [FieldOffset(988)]
            internal int m_bOneShot;

            [FieldOffset(992)]
            internal int m_bRecoverable;

            [FieldOffset(996)]
            internal int m_bFlagged;

            [FieldOffset(1000)]
            internal byte m_nBaseType;

            [FieldOffset(1004)]
            internal int m_bTrapIsActive;

            [FieldOffset(1008)]
            internal int m_nTrapFaction;

            [FieldOffset(1016)]
            internal fixed byte m_sScripts[256];

            [FieldOffset(1272)]
            internal byte m_nFortSave;

            [FieldOffset(1273)]
            internal byte m_nWillSave;

            [FieldOffset(1274)]
            internal byte m_nReflexSave;

            [FieldOffset(1280)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_poidCreatures;

            [FieldOffset(1296)]
            internal int m_bHasInventory;

            [FieldOffset(1300)]
            internal int m_bUseable;

            [FieldOffset(1304)]
            internal int m_bPickable;

            [FieldOffset(1308)]
            internal int m_bLockable;

            [FieldOffset(1312)]
            internal int m_bDieWhenEmpty;

            [FieldOffset(1316)]
            internal uint m_nOpenCount;

            [FieldOffset(1320)]
            internal int m_nStaticObjectPosition;

            [FieldOffset(1324)]
            internal uint m_oidLootCreature;

            [FieldOffset(1328)]
            internal int m_bIsBodyBag;

            [FieldOffset(1332)]
            internal uint m_nLastHeartbeatScriptCalendarDay;

            [FieldOffset(1336)]
            internal uint m_nLastHeartbeatScriptTimeOfDay;

            [FieldOffset(1340)]
            internal uint m_oidLastOpened;

            [FieldOffset(1344)]
            internal uint m_oidLastClosed;

            [FieldOffset(1348)]
            internal uint m_oidLastUser;

            [FieldOffset(1352)]
            internal uint m_oidLastDefaultClickedBy;

            [FieldOffset(1356)]
            internal uint m_oidLastTriggered;

            [FieldOffset(1360)]
            internal uint m_oidLastDisarmed;

            [FieldOffset(1364)]
            internal uint m_oidLastLocked;

            [FieldOffset(1368)]
            internal uint m_oidLastUnlocked;

            [FieldOffset(1376)]
            internal __IntPtr m_pcItemRepository;

            [FieldOffset(1384)]
            internal ushort m_nRepositoryArrayIndex;

            [FieldOffset(1386)]
            internal ushort m_nItemContainerArrayIndex;

            [FieldOffset(1388)]
            internal uint m_oidCurrentItemContainer;

            [FieldOffset(1392)]
            internal fixed byte m_pvActionPoints[24];

            [FieldOffset(1416)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cTemplateResRef;

            [FieldOffset(1448)]
            internal global::NWN.LowLevel.CExoString.__Internal m_szPortalInfo;

            [FieldOffset(1464)]
            internal uint m_nEffectSpellId;

            [FieldOffset(1468)]
            internal int m_bLightIsOn;

            [FieldOffset(1472)]
            internal int m_bLightStateChange;

            [FieldOffset(1476)]
            internal byte m_nBodyBag;

            [FieldOffset(1480)]
            internal int m_bStaticObject;

            [FieldOffset(1484)]
            internal int m_bNeverMakeIntoStaticObject;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceableC2Ej", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, uint oidId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceableC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable9AddToAreaEP8CNWSAreafffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToArea(__IntPtr __instance, __IntPtr pArea, float fX, float fY, float fZ, int bRunScripts);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable14RemoveFromAreaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromArea(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable14SetOrientationE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetOrientation(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable13LoadPlaceableEP7CResGFFP10CResStructP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPlaceable(__IntPtr __instance, __IntPtr pRes, __IntPtr cPlaceableStruct, __IntPtr pTag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable16LoadFromTemplateE7CResRefP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadFromTemplate(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, __IntPtr pTag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable11LoadBodyBagEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadBodyBag(__IntPtr __instance, ushort nAppearance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable13SavePlaceableEP7CResGFFP10CResStructi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SavePlaceable(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct, int bSaveOIDs);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable11PostProcessEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PostProcess(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable11AcquireItemEPP8CNWSItemjhhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AcquireItem(__IntPtr __instance, __IntPtr pItem, uint oidPossessor, byte x, byte y, int bDisplayFeedback);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable10RemoveItemEP8CNWSItemi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveItem(__IntPtr __instance, __IntPtr pItem, int bSetPossessor);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable22AcquireItemsFromObjectEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AcquireItemsFromObject(__IntPtr __instance, uint oidObject, int bAcquireDroppablesOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable13OpenInventoryEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OpenInventory(__IntPtr __instance, uint oidOpener);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable14CloseInventoryEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CloseInventory(__IntPtr __instance, uint oidCloser, int bUpdatePlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable17DropItemsIntoAreaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DropItemsIntoArea(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable21GetNearestActionPointERK6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal GetNearestActionPoint(__IntPtr __instance, __IntPtr vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable19AddCastSpellActionsEji6Vectorjih", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddCastSpellActions(__IntPtr __instance, uint nSpellId, int nMetaType, global::NWN.LowLevel.Vector.__Internal vTargetLocation, uint oidTarget, int bFake, byte nProjectilePathType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable17AIActionCastSpellEP20CNWSObjectActionNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint AIActionCastSpell(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable12GetItemCountEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetItemCount(__IntPtr __instance, int bDroppableOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable27ClosePlaceableForAllPlayersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClosePlaceableForAllPlayers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable21CalculateActionPointsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CalculateActionPoints(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable12GetLightIsOnEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetLightIsOn(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable12SetLightIsOnEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetLightIsOn(__IntPtr __instance, int b);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN13CNWSPlaceable20GetBodyBagAppearanceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetBodyBagAppearance(__IntPtr __instance);
        }

        internal static new CNWSPlaceable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSPlaceable(native.ToPointer(), skipVTables);
        }

        internal static new CNWSPlaceable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSPlaceable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static new CNWSPlaceable __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWSPlaceable)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWSPlaceable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSPlaceable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSPlaceable.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSPlaceable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSPlaceable(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWSPlaceable(uint oidId)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSPlaceable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, oidId);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSPlaceable");
        }

        public CNWSPlaceable(global::NWN.LowLevel.CNWSPlaceable _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSPlaceable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWSPlaceable");
        }

        public void AddToArea(global::NWN.LowLevel.CNWSArea pArea, float fX, float fY, float fZ, int bRunScripts)
        {
            var __arg0 = pArea is null ? __IntPtr.Zero : pArea.__Instance;
            __Internal.AddToArea(__Instance, __arg0, fX, fY, fZ, bRunScripts);
        }

        public void RemoveFromArea()
        {
            __Internal.RemoveFromArea(__Instance);
        }

        public void SetOrientation(global::NWN.LowLevel.Vector vOrientation)
        {
            if (ReferenceEquals(vOrientation, null))
                throw new global::System.ArgumentNullException("vOrientation", "Cannot be null because it is passed by value.");
            var __arg0 = vOrientation.__Instance;
            __Internal.SetOrientation(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
        }

        public override void AIUpdate()
        {
            base.AIUpdate();
        }

        public override void DoDamage(int nDamage)
        {
            base.DoDamage(nDamage);
        }

        public override void EventHandler(uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay)
        {
            base.EventHandler(nEventId, nCallerObjectId, pScript, nCalendarDay, nTimeOfDay);
        }

        public int LoadPlaceable(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct cPlaceableStruct, global::NWN.LowLevel.CExoString pTag)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = cPlaceableStruct is null ? __IntPtr.Zero : cPlaceableStruct.__Instance;
            var __arg2 = pTag is null ? __IntPtr.Zero : pTag.__Instance;
            var __ret = __Internal.LoadPlaceable(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int LoadFromTemplate(global::NWN.LowLevel.CResRef cResRef, global::NWN.LowLevel.CExoString pTag)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            var __arg1 = pTag is null ? __IntPtr.Zero : pTag.__Instance;
            var __ret = __Internal.LoadFromTemplate(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, __arg1);
            return __ret;
        }

        public int LoadBodyBag(ushort nAppearance)
        {
            var __ret = __Internal.LoadBodyBag(__Instance, nAppearance);
            return __ret;
        }

        public int SavePlaceable(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct, int bSaveOIDs)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SavePlaceable(__Instance, __arg0, __arg1, bSaveOIDs);
            return __ret;
        }

        public void PostProcess()
        {
            __Internal.PostProcess(__Instance);
        }

        public int AcquireItem(global::NWN.LowLevel.CNWSItem pItem, uint oidPossessor, byte x, byte y, int bDisplayFeedback)
        {
            var ____arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            var __ret = __Internal.AcquireItem(__Instance, __arg0, oidPossessor, x, y, bDisplayFeedback);
            return __ret;
        }

        public int RemoveItem(global::NWN.LowLevel.CNWSItem pItem, int bSetPossessor)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            var __ret = __Internal.RemoveItem(__Instance, __arg0, bSetPossessor);
            return __ret;
        }

        public uint AcquireItemsFromObject(uint oidObject, int bAcquireDroppablesOnly)
        {
            var __ret = __Internal.AcquireItemsFromObject(__Instance, oidObject, bAcquireDroppablesOnly);
            return __ret;
        }

        public void OpenInventory(uint oidOpener)
        {
            __Internal.OpenInventory(__Instance, oidOpener);
        }

        public void CloseInventory(uint oidCloser, int bUpdatePlayer)
        {
            __Internal.CloseInventory(__Instance, oidCloser, bUpdatePlayer);
        }

        public void DropItemsIntoArea()
        {
            __Internal.DropItemsIntoArea(__Instance);
        }

        public global::NWN.LowLevel.Vector GetNearestActionPoint(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.GetNearestActionPoint(__Instance, __arg0);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public int AddCastSpellActions(uint nSpellId, int nMetaType, global::NWN.LowLevel.Vector vTargetLocation, uint oidTarget, int bFake, byte nProjectilePathType)
        {
            if (ReferenceEquals(vTargetLocation, null))
                throw new global::System.ArgumentNullException("vTargetLocation", "Cannot be null because it is passed by value.");
            var __arg2 = vTargetLocation.__Instance;
            var __ret = __Internal.AddCastSpellActions(__Instance, nSpellId, nMetaType, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, oidTarget, bFake, nProjectilePathType);
            return __ret;
        }

        public uint AIActionCastSpell(global::NWN.LowLevel.CNWSObjectActionNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.AIActionCastSpell(__Instance, __arg0);
            return __ret;
        }

        public uint GetItemCount(int bDroppableOnly)
        {
            var __ret = __Internal.GetItemCount(__Instance, bDroppableOnly);
            return __ret;
        }

        public void ClosePlaceableForAllPlayers()
        {
            __Internal.ClosePlaceableForAllPlayers(__Instance);
        }

        public void CalculateActionPoints()
        {
            __Internal.CalculateActionPoints(__Instance);
        }

        public static implicit operator global::NWN.LowLevel.CNWSPlaceable(uint oidId)
        {
            return new global::NWN.LowLevel.CNWSPlaceable(oidId);
        }

        public global::NWN.LowLevel.CExoLocString MSLocName
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLocName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLocName = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSDisplayName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDisplayName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDisplayName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNUpdateDisplayNameSeq
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq = value;
            }
        }

        public ushort MNAppearance
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAppearance;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAppearance = value;
            }
        }

        public global::NWN.LowLevel.CExoLocString MSDescription
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDescription));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDescription = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSDescriptionOverride
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDescriptionOverride));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDescriptionOverride = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNFactionId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFactionId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFactionId = value;
            }
        }

        public global::NWN.LowLevel.CResRef MCDialog
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cDialog));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cDialog = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public byte MNType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nType = value;
            }
        }

        public int MBGroundPile
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGroundPile;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGroundPile = value;
            }
        }

        public uint MOidSittingCreature
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidSittingCreature;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidSittingCreature = value;
            }
        }

        public byte MNHardness
        {
            get
            {
                return ((__Internal*)__Instance)->m_nHardness;
            }

            set
            {
                ((__Internal*)__Instance)->m_nHardness = value;
            }
        }

        public float MFBearing
        {
            get
            {
                return ((__Internal*)__Instance)->m_fBearing;
            }

            set
            {
                ((__Internal*)__Instance)->m_fBearing = value;
            }
        }

        public int MBLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLocked = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSKeyName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sKeyName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sKeyName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSKeyRequiredFeedbackMessage
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sKeyRequiredFeedbackMessage));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sKeyRequiredFeedbackMessage = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBKeyRequired
        {
            get
            {
                return ((__Internal*)__Instance)->m_bKeyRequired;
            }

            set
            {
                ((__Internal*)__Instance)->m_bKeyRequired = value;
            }
        }

        public int MBAutoRemoveKey
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAutoRemoveKey;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAutoRemoveKey = value;
            }
        }

        public byte MNOpenLockDC
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOpenLockDC;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOpenLockDC = value;
            }
        }

        public byte MNCloseLockDC
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCloseLockDC;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCloseLockDC = value;
            }
        }

        public uint MOidTrapCreator
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidTrapCreator;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidTrapCreator = value;
            }
        }

        public byte MNTrapDetectionDC
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrapDetectionDC;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrapDetectionDC = value;
            }
        }

        public int MBTrapFlag
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTrapFlag;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTrapFlag = value;
            }
        }

        public byte MNDisarmDC
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDisarmDC;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDisarmDC = value;
            }
        }

        public int MBDisarmable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDisarmable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDisarmable = value;
            }
        }

        public int MBDetectable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDetectable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDetectable = value;
            }
        }

        public int MBOneShot
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOneShot;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOneShot = value;
            }
        }

        public int MBRecoverable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRecoverable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRecoverable = value;
            }
        }

        public int MBFlagged
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFlagged;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFlagged = value;
            }
        }

        public byte MNBaseType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBaseType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBaseType = value;
            }
        }

        public int MBTrapIsActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTrapIsActive;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTrapIsActive = value;
            }
        }

        public int MNTrapFaction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrapFaction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrapFaction = value;
            }
        }

        public global::NWN.LowLevel.CExoString[] MSScripts
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_sScripts != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[16];
                    for (int i = 0; i < 16; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 16)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 16; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_sScripts[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public byte MNFortSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFortSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFortSave = value;
            }
        }

        public byte MNWillSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWillSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWillSave = value;
            }
        }

        public byte MNReflexSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nReflexSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nReflexSave = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MPoidCreatures
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_poidCreatures));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_poidCreatures = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MBHasInventory
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHasInventory;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHasInventory = value;
            }
        }

        public int MBUseable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bUseable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bUseable = value;
            }
        }

        public int MBPickable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPickable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPickable = value;
            }
        }

        public int MBLockable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLockable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLockable = value;
            }
        }

        public int MBDieWhenEmpty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDieWhenEmpty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDieWhenEmpty = value;
            }
        }

        public uint MNOpenCount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOpenCount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOpenCount = value;
            }
        }

        public int MNStaticObjectPosition
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStaticObjectPosition;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStaticObjectPosition = value;
            }
        }

        public uint MOidLootCreature
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLootCreature;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLootCreature = value;
            }
        }

        public int MBIsBodyBag
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsBodyBag;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsBodyBag = value;
            }
        }

        public uint MNLastHeartbeatScriptCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptCalendarDay = value;
            }
        }

        public uint MNLastHeartbeatScriptTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastHeartbeatScriptTimeOfDay = value;
            }
        }

        public uint MOidLastOpened
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastOpened;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastOpened = value;
            }
        }

        public uint MOidLastClosed
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastClosed;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastClosed = value;
            }
        }

        public uint MOidLastUser
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastUser;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastUser = value;
            }
        }

        public uint MOidLastDefaultClickedBy
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastDefaultClickedBy;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastDefaultClickedBy = value;
            }
        }

        public uint MOidLastTriggered
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastTriggered;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastTriggered = value;
            }
        }

        public uint MOidLastDisarmed
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastDisarmed;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastDisarmed = value;
            }
        }

        public uint MOidLastLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastLocked = value;
            }
        }

        public uint MOidLastUnlocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLastUnlocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLastUnlocked = value;
            }
        }

        public global::NWN.LowLevel.CItemRepository MPcItemRepository
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CItemRepository.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcItemRepository, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcItemRepository = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNRepositoryArrayIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRepositoryArrayIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRepositoryArrayIndex = value;
            }
        }

        public ushort MNItemContainerArrayIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nItemContainerArrayIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nItemContainerArrayIndex = value;
            }
        }

        public uint MOidCurrentItemContainer
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidCurrentItemContainer;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidCurrentItemContainer = value;
            }
        }

        public global::NWN.LowLevel.Vector[] MPvActionPoints
        {
            get
            {
                global::NWN.LowLevel.Vector[] __value = null;
                if (((__Internal*)__Instance)->m_pvActionPoints != null)
                {
                    __value = new global::NWN.LowLevel.Vector[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::NWN.LowLevel.Vector.__CreateInstance(*((global::NWN.LowLevel.Vector.__Internal*)&(((__Internal*)__Instance)->m_pvActionPoints[i * sizeof(global::NWN.LowLevel.Vector.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        *(global::NWN.LowLevel.Vector.__Internal*) &((__Internal*)__Instance)->m_pvActionPoints[i * sizeof(global::NWN.LowLevel.Vector.__Internal)] = *(global::NWN.LowLevel.Vector.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CResRef MCTemplateResRef
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cTemplateResRef));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cTemplateResRef = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSzPortalInfo
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_szPortalInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_szPortalInfo = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNEffectSpellId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEffectSpellId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEffectSpellId = value;
            }
        }

        public int MBLightIsOn
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLightIsOn;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLightIsOn = value;
            }
        }

        public int MBLightStateChange
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLightStateChange;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLightStateChange = value;
            }
        }

        public byte MNBodyBag
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBodyBag;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBodyBag = value;
            }
        }

        public int MBStaticObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_bStaticObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_bStaticObject = value;
            }
        }

        public int MBNeverMakeIntoStaticObject
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNeverMakeIntoStaticObject;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNeverMakeIntoStaticObject = value;
            }
        }

        public override global::NWN.LowLevel.CNWSPlaceable AsNWSPlaceable
        {
            get
            {
                return base.AsNWSPlaceable;
            }
        }

        public int LightIsOn
        {
            get
            {
                var __ret = __Internal.GetLightIsOn(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetLightIsOn(__Instance, value);
            }
        }

        public ushort BodyBagAppearance
        {
            get
            {
                var __ret = __Internal.GetBodyBagAppearance(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // ~CNWSPlaceable()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void SetId(OBJECT_ID oidNew)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(__IntPtr __instance, uint oidNew)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.SetId(oidNew);
        }

        // void ResetUpdateTimes(uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint _ResetUpdateTimesDelegateInstance;

        private static void _ResetUpdateTimesDelegateHook(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.ResetUpdateTimes(nCalendarDay, nTimeOfDay);
        }

        // CNWCObject * AsNWCObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCObjectDelegateInstance;

        private static __IntPtr _AsNWCObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSObject * AsNWSObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSObjectDelegateInstance;

        private static __IntPtr _AsNWSObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSObject;
            return __ret is null ? __IntPtr.Zero : __ret.__PointerToCNWSObject;
        }

        // CNWCDoor * AsNWCDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCDoorDelegateInstance;

        private static __IntPtr _AsNWCDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSDoor * AsNWSDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSDoorDelegateInstance;

        private static __IntPtr _AsNWSDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCModule * AsNWCModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCModuleDelegateInstance;

        private static __IntPtr _AsNWCModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSModule * AsNWSModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSModuleDelegateInstance;

        private static __IntPtr _AsNWSModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCArea * AsNWCArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaDelegateInstance;

        private static __IntPtr _AsNWCAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSArea * AsNWSArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaDelegateInstance;

        private static __IntPtr _AsNWSAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCCreature * AsNWCCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCCreatureDelegateInstance;

        private static __IntPtr _AsNWCCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSCreature * AsNWSCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSCreatureDelegateInstance;

        private static __IntPtr _AsNWSCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCItem * AsNWCItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCItemDelegateInstance;

        private static __IntPtr _AsNWCItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSItem * AsNWSItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSItemDelegateInstance;

        private static __IntPtr _AsNWSItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCTrigger * AsNWCTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCTriggerDelegateInstance;

        private static __IntPtr _AsNWCTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSTrigger * AsNWSTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSTriggerDelegateInstance;

        private static __IntPtr _AsNWSTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCProjectile * AsNWCProjectile()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCProjectileDelegateInstance;

        private static __IntPtr _AsNWCProjectileDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCProjectile;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlayerTURD * AsNWSPlayerTURD()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlayerTURDDelegateInstance;

        private static __IntPtr _AsNWSPlayerTURDDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSPlayerTURD;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlaceable * AsNWSPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlaceableDelegateInstance;

        private static __IntPtr _AsNWSPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCPlaceable * AsNWCPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCPlaceableDelegateInstance;

        private static __IntPtr _AsNWCPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSAreaOfEffectObject * AsNWSAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWSAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCAreaOfEffectObject * AsNWCAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWCAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSWaypoint * AsNWSWaypoint()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSWaypointDelegateInstance;

        private static __IntPtr _AsNWSWaypointDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSWaypoint;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSEncounter * AsNWSEncounter()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSEncounterDelegateInstance;

        private static __IntPtr _AsNWSEncounterDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSEncounter;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCStore * AsNWCStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCStoreDelegateInstance;

        private static __IntPtr _AsNWCStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSStore * AsNWSStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSStoreDelegateInstance;

        private static __IntPtr _AsNWSStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSSoundObject * AsNWSSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSSoundObjectDelegateInstance;

        private static __IntPtr _AsNWSSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWSSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCSoundObject * AsNWCSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCSoundObjectDelegateInstance;

        private static __IntPtr _AsNWCSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.AsNWCSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // void AIUpdate()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _AIUpdateDelegateInstance;

        private static void _AIUpdateDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.AIUpdate();
        }

        // BOOL ClearAction(CNWSObjectActionNode * pNode, BOOL bIsTopmostAction)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int _ClearActionDelegateInstance;

        private static int _ClearActionDelegateHook(__IntPtr __instance, __IntPtr pNode, int bIsTopmostAction)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSObjectActionNode.__GetOrCreateInstance(pNode, false);
            return __target.ClearAction(__result0, bIsTopmostAction);
        }

        // void EventHandler(uint32_t nEventId, OBJECT_ID nCallerObjectId, void * pScript, uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint___IntPtr_uint_uint _EventHandlerDelegateInstance;

        private static void _EventHandlerDelegateHook(__IntPtr __instance, uint nEventId, uint nCallerObjectId, __IntPtr pScript, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.EventHandler(nEventId, nCallerObjectId, pScript, nCalendarDay, nTimeOfDay);
        }

        // void SetAnimation(int32_t nAnimation)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _SetAnimationDelegateInstance;

        private static void _SetAnimationDelegateHook(__IntPtr __instance, int nAnimation)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.SetAnimation(nAnimation);
        }

        // CResRef GetDialogResref()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetDialogResrefDelegateInstance;

        private static void _GetDialogResrefDelegateHook(__IntPtr @return, __IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.DialogResref;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CResRef.__Internal*) @return = *(global::NWN.LowLevel.CResRef.__Internal*) __ret.__Instance;
        }

        // BOOL GetDialogInterruptable()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetDialogInterruptableDelegateInstance;

        private static int _GetDialogInterruptableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.DialogInterruptable;
        }

        // uint8_t GetGender()
        private static global::NWN.LowLevel.Delegates.Func_byte___IntPtr _GetGenderDelegateInstance;

        private static byte _GetGenderDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.Gender;
        }

        // CExoLocString & GetFirstName()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetFirstNameDelegateInstance;

        private static __IntPtr _GetFirstNameDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.FirstName;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // CExoLocString & GetLastName()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _GetLastNameDelegateInstance;

        private static __IntPtr _GetLastNameDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.LastName;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is a C++ reference (&).");
            return __ret.__Instance;
        }

        // int16_t GetMaxHitPoints(BOOL bIncludeToughness = true)
        private static global::NWN.LowLevel.Delegates.Func_short___IntPtr_int _GetMaxHitPointsDelegateInstance;

        private static short _GetMaxHitPointsDelegateHook(__IntPtr __instance, int bIncludeToughness)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.GetMaxHitPoints(bIncludeToughness);
        }

        // int16_t GetCurrentHitPoints(BOOL bExcludeTemporaryHits = false)
        private static global::NWN.LowLevel.Delegates.Func_short___IntPtr_int _GetCurrentHitPointsDelegateInstance;

        private static short _GetCurrentHitPointsDelegateHook(__IntPtr __instance, int bExcludeTemporaryHits)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.GetCurrentHitPoints(bExcludeTemporaryHits);
        }

        // void DoDamage(int32_t nDamage)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int _DoDamageDelegateInstance;

        private static void _DoDamageDelegateHook(__IntPtr __instance, int nDamage)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.DoDamage(nDamage);
        }

        // int32_t DoDamageReduction(CNWSCreature * pDamager, int32_t nDamage, uint8_t nDamagePower, BOOL bSimulation, BOOL bCombatDamage)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_byte_int_int _DoDamageReductionDelegateInstance;

        private static int _DoDamageReductionDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, byte nDamagePower, int bSimulation, int bCombatDamage)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageReduction(__result0, nDamage, nDamagePower, bSimulation, bCombatDamage);
        }

        // int32_t DoDamageResistance(CNWSCreature * pDamager, int32_t nDamage, uint16_t nFlags, BOOL bSimulation, BOOL bCombatDamage, BOOL bBaseWeaponDamage = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_ushort_int_int_int _DoDamageResistanceDelegateInstance;

        private static int _DoDamageResistanceDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, ushort nFlags, int bSimulation, int bCombatDamage, int bBaseWeaponDamage)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageResistance(__result0, nDamage, nFlags, bSimulation, bCombatDamage, bBaseWeaponDamage);
        }

        // int32_t GetMaximumDamageResistanceVsDamageFlag(uint16_t nDamageFlag, int32_t * nBestIndex)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_ushort_intPtr _GetMaximumDamageResistanceVsDamageFlagDelegateInstance;

        private static int _GetMaximumDamageResistanceVsDamageFlagDelegateHook(__IntPtr __instance, ushort nDamageFlag, int* nBestIndex)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.GetMaximumDamageResistanceVsDamageFlag(nDamageFlag, ref *nBestIndex);
        }

        // int32_t DoDamageImmunity(CNWSCreature * pDamager, int32_t nDamage, uint16_t nFlags, BOOL bSimulation, BOOL bCombatDamage)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr_int_ushort_int_int _DoDamageImmunityDelegateInstance;

        private static int _DoDamageImmunityDelegateHook(__IntPtr __instance, __IntPtr pDamager, int nDamage, ushort nFlags, int bSimulation, int bCombatDamage)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(pDamager, false);
            return __target.DoDamageImmunity(__result0, nDamage, nFlags, bSimulation, bCombatDamage);
        }

        // char GetDamageImmunity(uint8_t nType)
        private static global::NWN.LowLevel.Delegates.Func_sbyte___IntPtr_byte _GetDamageImmunityDelegateInstance;

        private static sbyte _GetDamageImmunityDelegateHook(__IntPtr __instance, byte nType)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.GetDamageImmunity(nType);
        }

        // char GetDamageImmunityByFlags(uint16_t nFlags)
        private static global::NWN.LowLevel.Delegates.Func_sbyte___IntPtr_ushort _GetDamageImmunityByFlagsDelegateInstance;

        private static sbyte _GetDamageImmunityByFlagsDelegateHook(__IntPtr __instance, ushort nFlags)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.GetDamageImmunityByFlags(nFlags);
        }

        // uint32_t GetEffectSpellId()
        private static global::NWN.LowLevel.Delegates.Func_uint___IntPtr _GetEffectSpellIdDelegateInstance;

        private static uint _GetEffectSpellIdDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.EffectSpellId;
        }

        // void SetEffectSpellId(uint32_t n)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetEffectSpellIdDelegateInstance;

        private static void _SetEffectSpellIdDelegateHook(__IntPtr __instance, uint n)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.EffectSpellId = n;
        }

        // void SetLockOrientationToObject(OBJECT_ID oidLockOnObj)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetLockOrientationToObjectDelegateInstance;

        private static void _SetLockOrientationToObjectDelegateHook(__IntPtr __instance, uint oidLockOnObj)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.LockOrientationToObject = oidLockOnObj;
        }

        // OBJECT_ID GetLockOrientationToObject()
        private static global::NWN.LowLevel.Delegates.Func_uint___IntPtr _GetLockOrientationToObjectDelegateInstance;

        private static uint _GetLockOrientationToObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.LockOrientationToObject;
        }

        // CResRef GetPortrait()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _GetPortraitDelegateInstance;

        private static void _GetPortraitDelegateHook(__IntPtr @return, __IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __ret = __target.Portrait;
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CResRef.__Internal*) @return = *(global::NWN.LowLevel.CResRef.__Internal*) __ret.__Instance;
        }

        // void SetPortrait(CResRef cPortrait)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_NWN_LowLevel_CResRef___Internal _SetPortraitDelegateInstance;

        private static void _SetPortraitDelegateHook(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cPortrait)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.Portrait = global::NWN.LowLevel.CResRef.__CreateInstance(cPortrait);
        }

        // uint16_t GetPortraitId()
        private static global::NWN.LowLevel.Delegates.Func_ushort___IntPtr _GetPortraitIdDelegateInstance;

        private static ushort _GetPortraitIdDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.PortraitId;
        }

        // void SetPortraitId(uint16_t nPortraitId)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_ushort _SetPortraitIdDelegateInstance;

        private static void _SetPortraitIdDelegateHook(__IntPtr __instance, ushort nPortraitId)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.PortraitId = nPortraitId;
        }

        // void BroadcastFloatyData(CNWCCMessageData * pMessageData)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _BroadcastFloatyDataDelegateInstance;

        private static void _BroadcastFloatyDataDelegateHook(__IntPtr __instance, __IntPtr pMessageData)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWCCMessageData.__GetOrCreateInstance(pMessageData, false);
            __target.BroadcastFloatyData(__result0);
        }

        // void BroadcastFloatyDataSTRREF(STRREF nStrRef)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _BroadcastFloatyDataSTRREFDelegateInstance;

        private static void _BroadcastFloatyDataSTRREFDelegateHook(__IntPtr __instance, uint nStrRef)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.BroadcastFloatyDataSTRREF(nStrRef);
        }

        // bool GetCanCarrySqlDatabase()
        private static global::NWN.LowLevel.Delegates.Func_bool___IntPtr _GetCanCarrySqlDatabaseDelegateInstance;

        private static bool _GetCanCarrySqlDatabaseDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            return __target.CanCarrySqlDatabase;
        }

        // void UpdateEffectPtrs()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _UpdateEffectPtrsDelegateInstance;

        private static void _UpdateEffectPtrsDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            __target.UpdateEffectPtrs();
        }

        // void UpdateAttributesOnEffect(CGameEffect * e, BOOL bLoadingGame = false)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int _UpdateAttributesOnEffectDelegateInstance;

        private static void _UpdateAttributesOnEffectDelegateHook(__IntPtr __instance, __IntPtr e, int bLoadingGame)
        {
            var __target = global::NWN.LowLevel.CNWSPlaceable.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(e, false);
            __target.UpdateAttributesOnEffect(__result0, bLoadingGame);
        }

        internal static new class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[60];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _ResetUpdateTimesDelegateInstance += _ResetUpdateTimesDelegateHook;
                _AsNWCObjectDelegateInstance += _AsNWCObjectDelegateHook;
                _AsNWSObjectDelegateInstance += _AsNWSObjectDelegateHook;
                _AsNWCDoorDelegateInstance += _AsNWCDoorDelegateHook;
                _AsNWSDoorDelegateInstance += _AsNWSDoorDelegateHook;
                _AsNWCModuleDelegateInstance += _AsNWCModuleDelegateHook;
                _AsNWSModuleDelegateInstance += _AsNWSModuleDelegateHook;
                _AsNWCAreaDelegateInstance += _AsNWCAreaDelegateHook;
                _AsNWSAreaDelegateInstance += _AsNWSAreaDelegateHook;
                _AsNWCCreatureDelegateInstance += _AsNWCCreatureDelegateHook;
                _AsNWSCreatureDelegateInstance += _AsNWSCreatureDelegateHook;
                _AsNWCItemDelegateInstance += _AsNWCItemDelegateHook;
                _AsNWSItemDelegateInstance += _AsNWSItemDelegateHook;
                _AsNWCTriggerDelegateInstance += _AsNWCTriggerDelegateHook;
                _AsNWSTriggerDelegateInstance += _AsNWSTriggerDelegateHook;
                _AsNWCProjectileDelegateInstance += _AsNWCProjectileDelegateHook;
                _AsNWSPlayerTURDDelegateInstance += _AsNWSPlayerTURDDelegateHook;
                _AsNWSPlaceableDelegateInstance += _AsNWSPlaceableDelegateHook;
                _AsNWCPlaceableDelegateInstance += _AsNWCPlaceableDelegateHook;
                _AsNWSAreaOfEffectObjectDelegateInstance += _AsNWSAreaOfEffectObjectDelegateHook;
                _AsNWCAreaOfEffectObjectDelegateInstance += _AsNWCAreaOfEffectObjectDelegateHook;
                _AsNWSWaypointDelegateInstance += _AsNWSWaypointDelegateHook;
                _AsNWSEncounterDelegateInstance += _AsNWSEncounterDelegateHook;
                _AsNWCStoreDelegateInstance += _AsNWCStoreDelegateHook;
                _AsNWSStoreDelegateInstance += _AsNWSStoreDelegateHook;
                _AsNWSSoundObjectDelegateInstance += _AsNWSSoundObjectDelegateHook;
                _AsNWCSoundObjectDelegateInstance += _AsNWCSoundObjectDelegateHook;
                _AIUpdateDelegateInstance += _AIUpdateDelegateHook;
                _ClearActionDelegateInstance += _ClearActionDelegateHook;
                _EventHandlerDelegateInstance += _EventHandlerDelegateHook;
                _SetAnimationDelegateInstance += _SetAnimationDelegateHook;
                _GetDialogResrefDelegateInstance += _GetDialogResrefDelegateHook;
                _GetDialogInterruptableDelegateInstance += _GetDialogInterruptableDelegateHook;
                _GetGenderDelegateInstance += _GetGenderDelegateHook;
                _GetFirstNameDelegateInstance += _GetFirstNameDelegateHook;
                _GetLastNameDelegateInstance += _GetLastNameDelegateHook;
                _GetMaxHitPointsDelegateInstance += _GetMaxHitPointsDelegateHook;
                _GetCurrentHitPointsDelegateInstance += _GetCurrentHitPointsDelegateHook;
                _DoDamageDelegateInstance += _DoDamageDelegateHook;
                _DoDamageReductionDelegateInstance += _DoDamageReductionDelegateHook;
                _DoDamageResistanceDelegateInstance += _DoDamageResistanceDelegateHook;
                _GetMaximumDamageResistanceVsDamageFlagDelegateInstance += _GetMaximumDamageResistanceVsDamageFlagDelegateHook;
                _DoDamageImmunityDelegateInstance += _DoDamageImmunityDelegateHook;
                _GetDamageImmunityDelegateInstance += _GetDamageImmunityDelegateHook;
                _GetDamageImmunityByFlagsDelegateInstance += _GetDamageImmunityByFlagsDelegateHook;
                _GetEffectSpellIdDelegateInstance += _GetEffectSpellIdDelegateHook;
                _SetEffectSpellIdDelegateInstance += _SetEffectSpellIdDelegateHook;
                _SetLockOrientationToObjectDelegateInstance += _SetLockOrientationToObjectDelegateHook;
                _GetLockOrientationToObjectDelegateInstance += _GetLockOrientationToObjectDelegateHook;
                _GetPortraitDelegateInstance += _GetPortraitDelegateHook;
                _SetPortraitDelegateInstance += _SetPortraitDelegateHook;
                _GetPortraitIdDelegateInstance += _GetPortraitIdDelegateHook;
                _SetPortraitIdDelegateInstance += _SetPortraitIdDelegateHook;
                _BroadcastFloatyDataDelegateInstance += _BroadcastFloatyDataDelegateHook;
                _BroadcastFloatyDataSTRREFDelegateInstance += _BroadcastFloatyDataSTRREFDelegateHook;
                _GetCanCarrySqlDatabaseDelegateInstance += _GetCanCarrySqlDatabaseDelegateHook;
                _UpdateEffectPtrsDelegateInstance += _UpdateEffectPtrsDelegateHook;
                _UpdateAttributesOnEffectDelegateInstance += _UpdateAttributesOnEffectDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetUpdateTimesDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AsNWCObjectDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AsNWSObjectDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_AsNWCDoorDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_AsNWSDoorDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AsNWCModuleDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AsNWSModuleDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_AsNWCCreatureDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_AsNWSCreatureDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AsNWCItemDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_AsNWSItemDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_AsNWCTriggerDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_AsNWSTriggerDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_AsNWCProjectileDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlayerTURDDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlaceableDelegateInstance);
                Thunks[20] = Marshal.GetFunctionPointerForDelegate(_AsNWCPlaceableDelegateInstance);
                Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaOfEffectObjectDelegateInstance);
                Thunks[22] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaOfEffectObjectDelegateInstance);
                Thunks[23] = Marshal.GetFunctionPointerForDelegate(_AsNWSWaypointDelegateInstance);
                Thunks[24] = Marshal.GetFunctionPointerForDelegate(_AsNWSEncounterDelegateInstance);
                Thunks[25] = Marshal.GetFunctionPointerForDelegate(_AsNWCStoreDelegateInstance);
                Thunks[26] = Marshal.GetFunctionPointerForDelegate(_AsNWSStoreDelegateInstance);
                Thunks[27] = Marshal.GetFunctionPointerForDelegate(_AsNWSSoundObjectDelegateInstance);
                Thunks[28] = Marshal.GetFunctionPointerForDelegate(_AsNWCSoundObjectDelegateInstance);
                Thunks[29] = Marshal.GetFunctionPointerForDelegate(_AIUpdateDelegateInstance);
                Thunks[30] = Marshal.GetFunctionPointerForDelegate(_ClearActionDelegateInstance);
                Thunks[31] = Marshal.GetFunctionPointerForDelegate(_EventHandlerDelegateInstance);
                Thunks[32] = Marshal.GetFunctionPointerForDelegate(_SetAnimationDelegateInstance);
                Thunks[33] = Marshal.GetFunctionPointerForDelegate(_GetDialogResrefDelegateInstance);
                Thunks[34] = Marshal.GetFunctionPointerForDelegate(_GetDialogInterruptableDelegateInstance);
                Thunks[35] = Marshal.GetFunctionPointerForDelegate(_GetGenderDelegateInstance);
                Thunks[36] = Marshal.GetFunctionPointerForDelegate(_GetFirstNameDelegateInstance);
                Thunks[37] = Marshal.GetFunctionPointerForDelegate(_GetLastNameDelegateInstance);
                Thunks[38] = Marshal.GetFunctionPointerForDelegate(_GetMaxHitPointsDelegateInstance);
                Thunks[39] = Marshal.GetFunctionPointerForDelegate(_GetCurrentHitPointsDelegateInstance);
                Thunks[40] = Marshal.GetFunctionPointerForDelegate(_DoDamageDelegateInstance);
                Thunks[41] = Marshal.GetFunctionPointerForDelegate(_DoDamageReductionDelegateInstance);
                Thunks[42] = Marshal.GetFunctionPointerForDelegate(_DoDamageResistanceDelegateInstance);
                Thunks[43] = Marshal.GetFunctionPointerForDelegate(_GetMaximumDamageResistanceVsDamageFlagDelegateInstance);
                Thunks[44] = Marshal.GetFunctionPointerForDelegate(_DoDamageImmunityDelegateInstance);
                Thunks[45] = Marshal.GetFunctionPointerForDelegate(_GetDamageImmunityDelegateInstance);
                Thunks[46] = Marshal.GetFunctionPointerForDelegate(_GetDamageImmunityByFlagsDelegateInstance);
                Thunks[47] = Marshal.GetFunctionPointerForDelegate(_GetEffectSpellIdDelegateInstance);
                Thunks[48] = Marshal.GetFunctionPointerForDelegate(_SetEffectSpellIdDelegateInstance);
                Thunks[49] = Marshal.GetFunctionPointerForDelegate(_SetLockOrientationToObjectDelegateInstance);
                Thunks[50] = Marshal.GetFunctionPointerForDelegate(_GetLockOrientationToObjectDelegateInstance);
                Thunks[51] = Marshal.GetFunctionPointerForDelegate(_GetPortraitDelegateInstance);
                Thunks[52] = Marshal.GetFunctionPointerForDelegate(_SetPortraitDelegateInstance);
                Thunks[53] = Marshal.GetFunctionPointerForDelegate(_GetPortraitIdDelegateInstance);
                Thunks[54] = Marshal.GetFunctionPointerForDelegate(_SetPortraitIdDelegateInstance);
                Thunks[55] = Marshal.GetFunctionPointerForDelegate(_BroadcastFloatyDataDelegateInstance);
                Thunks[56] = Marshal.GetFunctionPointerForDelegate(_BroadcastFloatyDataSTRREFDelegateInstance);
                Thunks[57] = Marshal.GetFunctionPointerForDelegate(_GetCanCarrySqlDatabaseDelegateInstance);
                Thunks[58] = Marshal.GetFunctionPointerForDelegate(_UpdateEffectPtrsDelegateInstance);
                Thunks[59] = Marshal.GetFunctionPointerForDelegate(_UpdateAttributesOnEffectDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 63);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 63);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            ManagedVTables[0][9] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            ManagedVTables[0][11] = Thunks[10];
                            ManagedVTables[0][12] = Thunks[11];
                            ManagedVTables[0][13] = Thunks[12];
                            ManagedVTables[0][14] = Thunks[13];
                            ManagedVTables[0][15] = Thunks[14];
                            ManagedVTables[0][16] = Thunks[15];
                            ManagedVTables[0][17] = Thunks[16];
                            ManagedVTables[0][18] = Thunks[17];
                            ManagedVTables[0][19] = Thunks[18];
                            ManagedVTables[0][20] = Thunks[19];
                            ManagedVTables[0][21] = Thunks[20];
                            ManagedVTables[0][22] = Thunks[21];
                            ManagedVTables[0][23] = Thunks[22];
                            ManagedVTables[0][24] = Thunks[23];
                            ManagedVTables[0][25] = Thunks[24];
                            ManagedVTables[0][26] = Thunks[25];
                            ManagedVTables[0][27] = Thunks[26];
                            ManagedVTables[0][28] = Thunks[27];
                            ManagedVTables[0][29] = Thunks[28];
                            ManagedVTables[0][30] = Thunks[29];
                            ManagedVTables[0][31] = Thunks[30];
                            ManagedVTables[0][32] = Thunks[31];
                            ManagedVTables[0][33] = Thunks[32];
                            ManagedVTables[0][34] = Thunks[33];
                            ManagedVTables[0][35] = Thunks[34];
                            ManagedVTables[0][36] = Thunks[35];
                            ManagedVTables[0][37] = Thunks[36];
                            ManagedVTables[0][38] = Thunks[37];
                            ManagedVTables[0][39] = Thunks[38];
                            ManagedVTables[0][40] = Thunks[39];
                            ManagedVTables[0][41] = Thunks[40];
                            ManagedVTables[0][42] = Thunks[41];
                            ManagedVTables[0][43] = Thunks[42];
                            ManagedVTables[0][44] = Thunks[43];
                            ManagedVTables[0][45] = Thunks[44];
                            ManagedVTables[0][46] = Thunks[45];
                            ManagedVTables[0][47] = Thunks[46];
                            ManagedVTables[0][48] = Thunks[47];
                            ManagedVTables[0][49] = Thunks[48];
                            ManagedVTables[0][50] = Thunks[49];
                            ManagedVTables[0][51] = Thunks[50];
                            ManagedVTables[0][52] = Thunks[51];
                            ManagedVTables[0][53] = Thunks[52];
                            ManagedVTables[0][54] = Thunks[53];
                            ManagedVTables[0][55] = Thunks[54];
                            ManagedVTables[0][56] = Thunks[55];
                            ManagedVTables[0][57] = Thunks[56];
                            ManagedVTables[0][58] = Thunks[57];
                            ManagedVTables[0][59] = Thunks[58];
                            ManagedVTables[0][60] = Thunks[59];
                            VTables.Methods[0] = new Delegate[63];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        internal override CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal override void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
