// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWFeat : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 128)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nNameStrref;

            [FieldOffset(4)]
            internal int m_nDescriptionStrref;

            [FieldOffset(8)]
            internal int m_nTalentCategory;

            [FieldOffset(12)]
            internal int m_nTalentMaxCR;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cIcon;

            [FieldOffset(48)]
            internal int m_bGainMultiple;

            [FieldOffset(52)]
            internal int m_bAllClassesCanUse;

            [FieldOffset(56)]
            internal int m_bTargetSelf;

            [FieldOffset(60)]
            internal int m_bHostileFeat;

            [FieldOffset(64)]
            internal byte m_nMinAttackBonus;

            [FieldOffset(65)]
            internal byte m_nMinSTR;

            [FieldOffset(66)]
            internal byte m_nMinDEX;

            [FieldOffset(67)]
            internal byte m_nMinINT;

            [FieldOffset(68)]
            internal byte m_nMinWIS;

            [FieldOffset(69)]
            internal byte m_nMinCON;

            [FieldOffset(70)]
            internal byte m_nMinCHA;

            [FieldOffset(71)]
            internal byte m_nMinSpellLevel;

            [FieldOffset(72)]
            internal fixed ushort m_lstPrereqFeats[2];

            [FieldOffset(76)]
            internal fixed ushort m_lstOrPrereqFeats[5];

            [FieldOffset(86)]
            internal ushort m_nRequiredSkill;

            [FieldOffset(88)]
            internal ushort m_nMinRequiredSkillRank;

            [FieldOffset(90)]
            internal ushort m_nRequiredSkill2;

            [FieldOffset(92)]
            internal ushort m_nMinRequiredSkillRank2;

            [FieldOffset(96)]
            internal int m_nSuccessor;

            [FieldOffset(100)]
            internal sbyte m_nMasterFeat;

            [FieldOffset(101)]
            internal byte m_nMinLevel;

            [FieldOffset(102)]
            internal byte m_nMaxLevel;

            [FieldOffset(103)]
            internal byte m_nMinLevelClass;

            [FieldOffset(104)]
            internal byte m_nMinFortSave;

            [FieldOffset(108)]
            internal int m_nSpellId;

            [FieldOffset(112)]
            internal byte m_nUsesPerDay;

            [FieldOffset(116)]
            internal int m_bValidFeat;

            [FieldOffset(120)]
            internal int m_bRequiresEpic;

            [FieldOffset(124)]
            internal int m_bRequiresAction;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWFeatC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWFeatC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWFeatD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWFeat11GetNameTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetNameText(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7CNWFeat18GetDescriptionTextEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetDescriptionText(__IntPtr @return, __IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWFeat> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWFeat>();

        protected bool __ownsNativeInstance;

        internal static CNWFeat __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWFeat(native.ToPointer(), skipVTables);
        }

        internal static CNWFeat __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWFeat)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWFeat __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWFeat(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWFeat(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWFeat(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWFeat()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWFeat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWFeat(global::NWN.LowLevel.CNWFeat _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWFeat.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CNWFeat.__Internal*) __Instance) = *((global::NWN.LowLevel.CNWFeat.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWFeat __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int MNNameStrref
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNameStrref;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNameStrref = value;
            }
        }

        public int MNDescriptionStrref
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDescriptionStrref;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDescriptionStrref = value;
            }
        }

        public int MNTalentCategory
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTalentCategory;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTalentCategory = value;
            }
        }

        public int MNTalentMaxCR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTalentMaxCR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTalentMaxCR = value;
            }
        }

        public global::NWN.LowLevel.CResRef MCIcon
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cIcon));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cIcon = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public int MBGainMultiple
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGainMultiple;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGainMultiple = value;
            }
        }

        public int MBAllClassesCanUse
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllClassesCanUse;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllClassesCanUse = value;
            }
        }

        public int MBTargetSelf
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTargetSelf;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTargetSelf = value;
            }
        }

        public int MBHostileFeat
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHostileFeat;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHostileFeat = value;
            }
        }

        public byte MNMinAttackBonus
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinAttackBonus;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinAttackBonus = value;
            }
        }

        public byte MNMinSTR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinSTR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinSTR = value;
            }
        }

        public byte MNMinDEX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinDEX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinDEX = value;
            }
        }

        public byte MNMinINT
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinINT;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinINT = value;
            }
        }

        public byte MNMinWIS
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinWIS;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinWIS = value;
            }
        }

        public byte MNMinCON
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinCON;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinCON = value;
            }
        }

        public byte MNMinCHA
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinCHA;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinCHA = value;
            }
        }

        public byte MNMinSpellLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinSpellLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinSpellLevel = value;
            }
        }

        public ushort[] MLstPrereqFeats
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<ushort>(((__Internal*)__Instance)->m_lstPrereqFeats, 2);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_lstPrereqFeats[i] = value[i];
                }
            }
        }

        public ushort[] MLstOrPrereqFeats
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<ushort>(((__Internal*)__Instance)->m_lstOrPrereqFeats, 5);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((__Internal*)__Instance)->m_lstOrPrereqFeats[i] = value[i];
                }
            }
        }

        public ushort MNRequiredSkill
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRequiredSkill;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRequiredSkill = value;
            }
        }

        public ushort MNMinRequiredSkillRank
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinRequiredSkillRank;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinRequiredSkillRank = value;
            }
        }

        public ushort MNRequiredSkill2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRequiredSkill2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRequiredSkill2 = value;
            }
        }

        public ushort MNMinRequiredSkillRank2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinRequiredSkillRank2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinRequiredSkillRank2 = value;
            }
        }

        public int MNSuccessor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSuccessor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSuccessor = value;
            }
        }

        public sbyte MNMasterFeat
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMasterFeat;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMasterFeat = value;
            }
        }

        public byte MNMinLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinLevel = value;
            }
        }

        public byte MNMaxLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxLevel = value;
            }
        }

        public byte MNMinLevelClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinLevelClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinLevelClass = value;
            }
        }

        public byte MNMinFortSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMinFortSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMinFortSave = value;
            }
        }

        public int MNSpellId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpellId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpellId = value;
            }
        }

        public byte MNUsesPerDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUsesPerDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUsesPerDay = value;
            }
        }

        public int MBValidFeat
        {
            get
            {
                return ((__Internal*)__Instance)->m_bValidFeat;
            }

            set
            {
                ((__Internal*)__Instance)->m_bValidFeat = value;
            }
        }

        public int MBRequiresEpic
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRequiresEpic;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRequiresEpic = value;
            }
        }

        public int MBRequiresAction
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRequiresAction;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRequiresAction = value;
            }
        }

        public global::NWN.LowLevel.CExoString NameText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetNameText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString DescriptionText
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetDescriptionText(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
