// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CScriptCompiler : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 15632)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nKeyWords;

            [FieldOffset(8)]
            internal __IntPtr m_pcKeyWords;

            [FieldOffset(16)]
            internal int m_nParseTreeNodeBlockEmptyNodes;

            [FieldOffset(24)]
            internal __IntPtr m_pCurrentParseTreeNodeBlock;

            [FieldOffset(32)]
            internal __IntPtr m_pParseTreeNodeBlockHead;

            [FieldOffset(40)]
            internal __IntPtr m_pParseTreeNodeBlockTail;

            [FieldOffset(48)]
            internal __IntPtr m_ppsParseTreeFileNames;

            [FieldOffset(56)]
            internal int m_nNextParseTreeFileName;

            [FieldOffset(60)]
            internal int m_nCurrentParseTreeFileName;

            [FieldOffset(64)]
            internal int m_nCurrentLineNumber;

            [FieldOffset(68)]
            internal int m_nCurrentLineNumberFileReference;

            [FieldOffset(72)]
            internal int m_nCurrentLineNumberReferences;

            [FieldOffset(76)]
            internal int m_nCurrentLineNumberBinaryStartInstruction;

            [FieldOffset(80)]
            internal int m_nCurrentLineNumberBinaryEndInstruction;

            [FieldOffset(84)]
            internal int m_nTableFileNames;

            [FieldOffset(88)]
            internal fixed byte m_psTableFileNames[2048];

            [FieldOffset(2136)]
            internal int m_nLineNumberEntries;

            [FieldOffset(2140)]
            internal int m_nFinalLineNumberEntries;

            [FieldOffset(2144)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionFileReference;

            [FieldOffset(2160)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionLineNumber;

            [FieldOffset(2176)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionBinaryStart;

            [FieldOffset(2192)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionBinaryEnd;

            [FieldOffset(2208)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionBinaryFinal;

            [FieldOffset(2224)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnTableInstructionBinarySortedOrder;

            [FieldOffset(2240)]
            internal int m_nSymbolTableVariables;

            [FieldOffset(2244)]
            internal int m_nFinalSymbolTableVariables;

            [FieldOffset(2248)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableVarType;

            [FieldOffset(2264)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_psSymbolTableVarName;

            [FieldOffset(2280)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_psSymbolTableVarStructureName;

            [FieldOffset(2296)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableVarStackLoc;

            [FieldOffset(2312)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableVarBegin;

            [FieldOffset(2328)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableVarEnd;

            [FieldOffset(2344)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableBinaryFinal;

            [FieldOffset(2360)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pnSymbolTableBinarySortedOrder;

            [FieldOffset(2376)]
            internal int m_nDebugStatus;

            [FieldOffset(2380)]
            internal int m_bCompileConditionalFile;

            [FieldOffset(2384)]
            internal int m_bOldCompileConditionalFile;

            [FieldOffset(2388)]
            internal int m_bCompileConditionalOrMain;

            [FieldOffset(2392)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sLanguageSource;

            [FieldOffset(2408)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sOutputAlias;

            [FieldOffset(2424)]
            internal int m_nLines;

            [FieldOffset(2428)]
            internal int m_nCharacterOnLine;

            [FieldOffset(2432)]
            internal __IntPtr m_pnHashString;

            [FieldOffset(2440)]
            internal __IntPtr m_pIdentifierHashTable;

            [FieldOffset(2448)]
            internal int m_nTokenStatus;

            [FieldOffset(2452)]
            internal int m_nTokenCharacters;

            [FieldOffset(2456)]
            internal fixed sbyte m_pchToken[512];

            [FieldOffset(2968)]
            internal __IntPtr m_pSRStack;

            [FieldOffset(2976)]
            internal int m_nSRStackEntries;

            [FieldOffset(2980)]
            internal int m_nSRStackStates;

            [FieldOffset(2984)]
            internal int m_bCompileIdentifierList;

            [FieldOffset(2988)]
            internal int m_bCompileIdentifierConstants;

            [FieldOffset(2992)]
            internal int m_nIdentifierListState;

            [FieldOffset(2996)]
            internal int m_nIdentifierListVector;

            [FieldOffset(3000)]
            internal int m_nIdentifierListEngineStructure;

            [FieldOffset(3004)]
            internal int m_nIdentifierListReturnType;

            [FieldOffset(3008)]
            internal __IntPtr m_pcIdentifierList;

            [FieldOffset(3016)]
            internal int m_nOccupiedIdentifiers;

            [FieldOffset(3020)]
            internal int m_nMaxPredefinedIdentifierId;

            [FieldOffset(3024)]
            internal int m_nPredefinedIdentifierOrder;

            [FieldOffset(3028)]
            internal int m_nCompileFileLevel;

            [FieldOffset(3032)]
            internal fixed byte m_pcIncludeFileStack[1408];

            [FieldOffset(4440)]
            internal int m_nVarStackRecursionLevel;

            [FieldOffset(4448)]
            internal __IntPtr m_pcVarStackList;

            [FieldOffset(4456)]
            internal int m_nOccupiedVariables;

            [FieldOffset(4460)]
            internal int m_nVarStackVariableType;

            [FieldOffset(4464)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sVarStackVariableTypeName;

            [FieldOffset(4480)]
            internal __IntPtr m_pcStructList;

            [FieldOffset(4488)]
            internal __IntPtr m_pcStructFieldList;

            [FieldOffset(4496)]
            internal int m_nMaxStructures;

            [FieldOffset(4500)]
            internal int m_nMaxStructureFields;

            [FieldOffset(4504)]
            internal int m_nStructureDefinition;

            [FieldOffset(4508)]
            internal int m_nStructureDefinitionFieldStart;

            [FieldOffset(4512)]
            internal int m_bGlobalVariableDefinition;

            [FieldOffset(4516)]
            internal int m_nGlobalVariables;

            [FieldOffset(4520)]
            internal int m_nGlobalVariableSize;

            [FieldOffset(4528)]
            internal __IntPtr m_pGlobalVariableParseTree;

            [FieldOffset(4536)]
            internal int m_bConstantVariableDefinition;

            [FieldOffset(4540)]
            internal int m_nLoopIdentifier;

            [FieldOffset(4544)]
            internal int m_nLoopStackDepth;

            [FieldOffset(4548)]
            internal int m_nSwitchLevel;

            [FieldOffset(4552)]
            internal int m_nSwitchIdentifier;

            [FieldOffset(4556)]
            internal int m_nSwitchStackDepth;

            [FieldOffset(4560)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sUndefinedIdentifier;

            [FieldOffset(4576)]
            internal int m_bSwitchLabelDefault;

            [FieldOffset(4580)]
            internal int m_nSwitchLabelNumber;

            [FieldOffset(4584)]
            internal int m_nSwitchLabelArraySize;

            [FieldOffset(4592)]
            internal __IntPtr m_pnSwitchLabelStatements;

            [FieldOffset(4600)]
            internal int m_nNumEngineDefinedStructures;

            [FieldOffset(4608)]
            internal __IntPtr m_pbEngineDefinedStructureValid;

            [FieldOffset(4616)]
            internal __IntPtr m_psEngineDefinedStructureName;

            [FieldOffset(4624)]
            internal int m_bAssignmentToVariable;

            [FieldOffset(4628)]
            internal int m_bInStructurePart;

            [FieldOffset(4632)]
            internal int m_bFunctionImp;

            [FieldOffset(4640)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sFunctionImpName;

            [FieldOffset(4656)]
            internal int m_nFunctionImpReturnType;

            [FieldOffset(4664)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sFunctionImpReturnStructureName;

            [FieldOffset(4680)]
            internal int m_nFunctionImpAbortStackPointer;

            [FieldOffset(4684)]
            internal int m_nStackCurrentDepth;

            [FieldOffset(4688)]
            internal fixed sbyte m_pchStackTypes[8192];

            [FieldOffset(12880)]
            internal int m_nRunTimeIntegers;

            [FieldOffset(12884)]
            internal int m_nRunTimeFloats;

            [FieldOffset(12888)]
            internal int m_nRunTimeStrings;

            [FieldOffset(12892)]
            internal int m_nRunTimeObjects;

            [FieldOffset(12896)]
            internal int m_nRunTimeActions;

            [FieldOffset(12900)]
            internal int m_nSymbolQueryListSize;

            [FieldOffset(12904)]
            internal int m_nSymbolQueryList;

            [FieldOffset(12912)]
            internal __IntPtr m_pSymbolQueryList;

            [FieldOffset(12920)]
            internal int m_nSymbolLabelListSize;

            [FieldOffset(12924)]
            internal int m_nSymbolLabelList;

            [FieldOffset(12928)]
            internal __IntPtr m_pSymbolLabelList;

            [FieldOffset(12936)]
            internal fixed int m_pSymbolLabelStartEntry[512];

            [FieldOffset(14984)]
            internal int m_nDebugSymbolicOutput;

            [FieldOffset(14988)]
            internal int m_nGenerateDebuggerOutput;

            [FieldOffset(14992)]
            internal int m_bAutomaticCleanUpAfterCompiles;

            [FieldOffset(14996)]
            internal int m_bOptimizeBinarySpace;

            [FieldOffset(15000)]
            internal int m_nTotalCompileNodes;

            [FieldOffset(15004)]
            internal int m_bCompilingConditional;

            [FieldOffset(15008)]
            internal __IntPtr m_pchOutputCode;

            [FieldOffset(15016)]
            internal int m_nOutputCodeSize;

            [FieldOffset(15020)]
            internal int m_nOutputCodeLength;

            [FieldOffset(15024)]
            internal int m_nBinaryCodeLength;

            [FieldOffset(15032)]
            internal __IntPtr m_pchResolvedOutputBuffer;

            [FieldOffset(15040)]
            internal int m_nResolvedOutputBufferSize;

            [FieldOffset(15048)]
            internal __IntPtr m_pchDebuggerCode;

            [FieldOffset(15056)]
            internal int m_nDebuggerCodeSize;

            [FieldOffset(15060)]
            internal int m_nDebuggerCodeLength;

            [FieldOffset(15064)]
            internal fixed sbyte m_pchActionParameters[32];

            [FieldOffset(15096)]
            internal fixed byte m_pchActionParameterStructureNames[512];

            [FieldOffset(15608)]
            internal int m_nFinalBinarySize;

            [FieldOffset(15616)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCapturedError;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompilerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompilerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompilerD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler26SetIdentifierSpecificationERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetIdentifierSpecification(__IntPtr __instance, __IntPtr sLanguageSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler14SetOutputAliasERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetOutputAlias(__IntPtr __instance, __IntPtr sAlias);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20SetCompileDebugLevelEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCompileDebugLevel(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24SetCompileSymbolicOutputEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCompileSymbolicOutput(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25SetGenerateDebuggerOutputEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGenerateDebuggerOutput(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27SetOptimizeBinaryCodeLengthEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetOptimizeBinaryCodeLength(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler32SetAutomaticCleanUpAfterCompilesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAutomaticCleanUpAfterCompiles(__IntPtr __instance, int bValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20CleanUpAfterCompilesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanUpAfterCompiles(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25SetCompileConditionalFileEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCompileConditionalFile(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27SetCompileConditionalOrMainEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCompileConditionalOrMain(__IntPtr __instance, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler11CompileFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CompileFile(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18CompileScriptChunkERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CompileScriptChunk(__IntPtr __instance, __IntPtr sScriptChunk, int bWrapIntoMain);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24CompileScriptConditionalERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CompileScriptConditional(__IntPtr __instance, __IntPtr sScriptConditional);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21GetCompiledScriptCodeEPPcPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCompiledScriptCode(__IntPtr __instance, sbyte** pnCode, int* nCodeSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ClearCompiledScriptCodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearCompiledScriptCode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler33Test_CompileAllScriptsInDirectoryER10CExoStringS1_S1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TestCompileAllScriptsInDirectory(__IntPtr __instance, __IntPtr sSourceDirectoryAlias, __IntPtr sTargetDirectoryAlias, __IntPtr sIdentifierFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler29Test_CompareDirectoryContentsER10CExoStringS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestCompareDirectoryContents(__IntPtr __instance, __IntPtr sSourceDirectoryAlias, __IntPtr sTargetDirectoryAlias);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25Test_CompareFileInclusionER10CExoStringS1_P14CExoStringListt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestCompareFileInclusion(__IntPtr __instance, __IntPtr sTargetAlias, __IntPtr sBaseAlias, __IntPtr plFileNames, ushort nResType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler8ShutDownEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutDown(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler10HashStringERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint HashString(__IntPtr __instance, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler10HashStringEPKc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint HashString(__IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler30InitializePreDefinedStructuresEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializePreDefinedStructures(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21InitializeIncludeFileEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeIncludeFile(__IntPtr __instance, int nCompileFileLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ShutdownIncludeFileEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutdownIncludeFile(__IntPtr __instance, int nCompileFileLevel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler15TokenInitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TokenInitialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler11PushSRStackEiiiP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PushSRStack(__IntPtr __instance, int nState, int nRule, int nTerm, __IntPtr pCurrentTree);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler10PopSRStackEPiS0_S0_PP20CScriptParseTreeNodeS3_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PopSRStack(__IntPtr __instance, int* nState, int* nRule, int* nTerm, __IntPtr pCurrentTree, __IntPtr pReturnTree);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ModifySRStackReturnTreeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ModifySRStackReturnTree(__IntPtr __instance, __IntPtr pReturnTree);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler17GenerateParseTreeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateParseTree(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25ParseFloatFromTokenStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ParseFloatFromTokenString(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21ParseCharacterNumericEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterNumeric(__IntPtr __instance, int ch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20ParseCharacterPeriodEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterPeriod(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseCharacterSlashEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterSlash(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler22ParseCharacterAsteriskEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterAsterisk(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ParseCharacterAmpersandEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterAmpersand(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25ParseCharacterVerticalBarEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterVerticalBar(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler22ParseCharacterAlphabetEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterAlphabet(__IntPtr __instance, int ch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20ParseStringCharacterEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseStringCharacter(__IntPtr __instance, int ch, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27ParseCharacterQuotationMarkEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterQuotationMark(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20ParseCharacterHyphenEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterHyphen(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ParseCharacterLeftBraceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterLeftBrace(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24ParseCharacterRightBraceEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterRightBrace(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25ParseCharacterLeftBracketEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterLeftBracket(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler26ParseCharacterRightBracketEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterRightBracket(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler31ParseCharacterLeftSquareBracketEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterLeftSquareBracket(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler32ParseCharacterRightSquareBracketEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterRightSquareBracket(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ParseCharacterLeftAngleEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterLeftAngle(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24ParseCharacterRightAngleEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterRightAngle(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler30ParseCharacterExclamationPointEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterExclamationPoint(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ParseCharacterEqualSignEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterEqualSign(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler22ParseCharacterPlusSignEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterPlusSign(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25ParseCharacterPercentSignEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterPercentSign(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23ParseCharacterSemicolonEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterSemicolon(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseCharacterCommaEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterComma(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseCharacterCaratEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterCarat(__IntPtr __instance, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseCharacterTildeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterTilde(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler22ParseCharacterEllipsisEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterEllipsis(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler26ParseCharacterQuestionMarkEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterQuestionMark(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseCharacterColonEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCharacterColon(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler26ParseCommentedOutCharacterEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseCommentedOutCharacter(__IntPtr __instance, int ch);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18ParseNextCharacterEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseNextCharacter(__IntPtr __instance, int ch, int chNext);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21PrintParseSourceErrorEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PrintParseSourceError(__IntPtr __instance, int nParseCharacterError);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler11ParseSourceEPci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseSource(__IntPtr __instance, sbyte* pScript, int nScriptLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler11OutputErrorEiP10CExoStringiRKS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OutputError(__IntPtr __instance, int nError, __IntPtr psFileName, int nLineNumber, __IntPtr sErrorText);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24DuplicateScriptParseTreeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr DuplicateScriptParseTree(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25CreateScriptParseTreeNodeEiP20CScriptParseTreeNodeS1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CreateScriptParseTreeNode(__IntPtr __instance, int nNodeOperation, __IntPtr pNodeLeft, __IntPtr pNodeRight);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler17CheckForBadLValueEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckForBadLValue(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25DeleteScriptParseTreeNodeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteScriptParseTreeNode(__IntPtr __instance, __IntPtr pParseTreeNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19OutputWalkTreeErrorEiP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OutputWalkTreeError(__IntPtr __instance, int nError, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20PreVisitGenerateCodeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PreVisitGenerateCode(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19InVisitGenerateCodeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InVisitGenerateCode(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21PostVisitGenerateCodeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PostVisitGenerateCode(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler34StartLineNumberAtBinaryInstructionEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartLineNumberAtBinaryInstruction(__IntPtr __instance, int nFileReference, int nLineNumber, int nBinaryInstruction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler32EndLineNumberAtBinaryInstructionEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EndLineNumberAtBinaryInstruction(__IntPtr __instance, int nFileReference, int nLineNumber, int nBinaryInstruction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27ResolveDebuggingInformationEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveDebuggingInformation(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler40ResolveDebuggingInformationForIdentifierEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResolveDebuggingInformationForIdentifier(__IntPtr __instance, int nIdentifier);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18DeleteCompileStackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteCompileStack(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler15DeleteParseTreeEiP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteParseTree(__IntPtr __instance, int bStack, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler13WalkParseTreeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WalkParseTree(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19InitializeFinalCodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeFinalCode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler17FinalizeFinalCodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FinalizeFinalCode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler30GenerateFinalCodeFromParseTreeE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateFinalCodeFromParseTree(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20WriteFinalCodeToFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteFinalCodeToFile(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler32GenerateDebuggerTypeAbbreviationEi10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GenerateDebuggerTypeAbbreviation(__IntPtr @return, __IntPtr __instance, int nType, __IntPtr sStructureName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25WriteDebuggerOutputToFileE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteDebuggerOutputToFile(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler14HashManagerAddEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint HashManagerAdd(__IntPtr __instance, uint nType, uint nTypeIndice);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler17HashManagerDeleteEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint HashManagerDelete(__IntPtr __instance, uint nType, uint nTypeIndice);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18GetHashEntryByNameEPKc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetHashEntryByName(__IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string psIdentifierName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler29PrintParseIdentifierFileErrorEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PrintParseIdentifierFileError(__IntPtr __instance, int nParseCharacterError);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ParseIdentifierFileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ParseIdentifierFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler22GenerateIdentifierListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateIdentifierList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24AddUserDefinedIdentifierEP20CScriptParseTreeNodei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddUserDefinedIdentifier(__IntPtr __instance, __IntPtr pFunctionDeclaration, int bFunctionImplementation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27ClearUserDefinedIdentifiersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearUserDefinedIdentifiers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler17GetStructureFieldERK10CExoStringS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStructureField(__IntPtr __instance, __IntPtr sStructureName, __IntPtr sFieldName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler16GetStructureSizeERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetStructureSize(__IntPtr __instance, __IntPtr sStructureName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19GetIdentifierByNameERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIdentifierByName(__IntPtr __instance, __IntPtr sIdentifierName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23AddToGlobalVariableListEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddToGlobalVariableList(__IntPtr __instance, __IntPtr pGlobalVariableNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25InitializeSwitchLabelListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeSwitchLabelList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27TraverseTreeForSwitchLabelsEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TraverseTreeForSwitchLabels(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20ClearSwitchLabelListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearSwitchLabelList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler27GenerateCodeForSwitchLabelsEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateCodeForSwitchLabels(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler40GenerateIdentifiersFromConstantVariablesEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateIdentifiersFromConstantVariables(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18PrintBinaryAddressEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PrintBinaryAddress(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler33FoundReturnStatementOnAllBranchesEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FoundReturnStatementOnAllBranches(__IntPtr __instance, __IntPtr pNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler18AddVariableToStackEiP10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddVariableToStack(__IntPtr __instance, int nVariableType, __IntPtr psVariableTypeName, int bGenerateCode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19AddStructureToStackERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddStructureToStack(__IntPtr __instance, __IntPtr sStructureName, int bGenerateCode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler24AddToSymbolTableVarStackEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToSymbolTableVarStack(__IntPtr __instance, int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler29RemoveFromSymbolTableVarStackEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromSymbolTableVarStack(__IntPtr __instance, int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler33GetFunctionNameFromSymbolSubTypesEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetFunctionNameFromSymbolSubTypes(__IntPtr @return, __IntPtr __instance, int nSubType1, int nSubType2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20AddSymbolToQueryListEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddSymbolToQueryList(__IntPtr __instance, int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20AddSymbolToLabelListEiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddSymbolToLabelList(__IntPtr __instance, int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19ClearAllSymbolListsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAllSymbolLists(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler20CleanUpDuringCompileEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CleanUpDuringCompile(__IntPtr __instance, int nReturnValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19CleanUpAfterCompileEiP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CleanUpAfterCompile(__IntPtr __instance, int nReturnValue, __IntPtr pReturnTree);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler13InstallLoaderEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int InstallLoader(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler32InsertGlobalVariablesInParseTreeEP20CScriptParseTreeNode", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr InsertGlobalVariablesInParseTree(__IntPtr __instance, __IntPtr pOldTree);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21OutputIdentifierErrorERK10CExoStringii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OutputIdentifierError(__IntPtr __instance, __IntPtr sFunctionName, int nError, int nFileStackDrop);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler28ValidateLocationOfIdentifierERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ValidateLocationOfIdentifier(__IntPtr __instance, __IntPtr sFunctionName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler23DetermineLocationOfCodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DetermineLocationOfCode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19WriteResolvedOutputEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteResolvedOutput(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler11HandleTokenEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleToken(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler19TestIdentifierTokenEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestIdentifierToken(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler21HandleIdentifierTokenEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleIdentifierToken(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler25GetNewScriptParseTreeNodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetNewScriptParseTreeNode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CScriptCompiler13ResolveLabelsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ResolveLabels(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CScriptCompiler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CScriptCompiler>();

        protected bool __ownsNativeInstance;

        internal static CScriptCompiler __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CScriptCompiler(native.ToPointer(), skipVTables);
        }

        internal static CScriptCompiler __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CScriptCompiler)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CScriptCompiler __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CScriptCompiler(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CScriptCompiler.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CScriptCompiler(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CScriptCompiler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CScriptCompiler()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CScriptCompiler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CScriptCompiler(global::NWN.LowLevel.CScriptCompiler _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CScriptCompiler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CScriptCompiler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetIdentifierSpecification(global::NWN.LowLevel.CExoString sLanguageSource)
        {
            if (ReferenceEquals(sLanguageSource, null))
                throw new global::System.ArgumentNullException("sLanguageSource", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sLanguageSource.__Instance;
            __Internal.SetIdentifierSpecification(__Instance, __arg0);
        }

        public void SetOutputAlias(global::NWN.LowLevel.CExoString sAlias)
        {
            if (ReferenceEquals(sAlias, null))
                throw new global::System.ArgumentNullException("sAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sAlias.__Instance;
            __Internal.SetOutputAlias(__Instance, __arg0);
        }

        public void SetCompileDebugLevel(int nValue)
        {
            __Internal.SetCompileDebugLevel(__Instance, nValue);
        }

        public void SetCompileSymbolicOutput(int nValue)
        {
            __Internal.SetCompileSymbolicOutput(__Instance, nValue);
        }

        public void SetGenerateDebuggerOutput(int nValue)
        {
            __Internal.SetGenerateDebuggerOutput(__Instance, nValue);
        }

        public void SetOptimizeBinaryCodeLength(int nValue)
        {
            __Internal.SetOptimizeBinaryCodeLength(__Instance, nValue);
        }

        public void SetAutomaticCleanUpAfterCompiles(int bValue)
        {
            __Internal.SetAutomaticCleanUpAfterCompiles(__Instance, bValue);
        }

        public void CleanUpAfterCompiles()
        {
            __Internal.CleanUpAfterCompiles(__Instance);
        }

        public void SetCompileConditionalFile(int nValue)
        {
            __Internal.SetCompileConditionalFile(__Instance, nValue);
        }

        public void SetCompileConditionalOrMain(int nValue)
        {
            __Internal.SetCompileConditionalOrMain(__Instance, nValue);
        }

        public int CompileFile(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.CompileFile(__Instance, __arg0);
            return __ret;
        }

        public int CompileScriptChunk(global::NWN.LowLevel.CExoString sScriptChunk, int bWrapIntoMain)
        {
            if (ReferenceEquals(sScriptChunk, null))
                throw new global::System.ArgumentNullException("sScriptChunk", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sScriptChunk.__Instance;
            var __ret = __Internal.CompileScriptChunk(__Instance, __arg0, bWrapIntoMain);
            return __ret;
        }

        public int CompileScriptConditional(global::NWN.LowLevel.CExoString sScriptConditional)
        {
            if (ReferenceEquals(sScriptConditional, null))
                throw new global::System.ArgumentNullException("sScriptConditional", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sScriptConditional.__Instance;
            var __ret = __Internal.CompileScriptConditional(__Instance, __arg0);
            return __ret;
        }

        public int GetCompiledScriptCode(sbyte** pnCode, ref int nCodeSize)
        {
            fixed (int* __nCodeSize1 = &nCodeSize)
            {
                var __arg1 = __nCodeSize1;
                var __ret = __Internal.GetCompiledScriptCode(__Instance, pnCode, __arg1);
                return __ret;
            }
        }

        public void ClearCompiledScriptCode()
        {
            __Internal.ClearCompiledScriptCode(__Instance);
        }

        public void TestCompileAllScriptsInDirectory(global::NWN.LowLevel.CExoString sSourceDirectoryAlias, global::NWN.LowLevel.CExoString sTargetDirectoryAlias, global::NWN.LowLevel.CExoString sIdentifierFile)
        {
            if (ReferenceEquals(sSourceDirectoryAlias, null))
                throw new global::System.ArgumentNullException("sSourceDirectoryAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sSourceDirectoryAlias.__Instance;
            if (ReferenceEquals(sTargetDirectoryAlias, null))
                throw new global::System.ArgumentNullException("sTargetDirectoryAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sTargetDirectoryAlias.__Instance;
            if (ReferenceEquals(sIdentifierFile, null))
                throw new global::System.ArgumentNullException("sIdentifierFile", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sIdentifierFile.__Instance;
            __Internal.TestCompileAllScriptsInDirectory(__Instance, __arg0, __arg1, __arg2);
        }

        public int TestCompareDirectoryContents(global::NWN.LowLevel.CExoString sSourceDirectoryAlias, global::NWN.LowLevel.CExoString sTargetDirectoryAlias)
        {
            if (ReferenceEquals(sSourceDirectoryAlias, null))
                throw new global::System.ArgumentNullException("sSourceDirectoryAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sSourceDirectoryAlias.__Instance;
            if (ReferenceEquals(sTargetDirectoryAlias, null))
                throw new global::System.ArgumentNullException("sTargetDirectoryAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sTargetDirectoryAlias.__Instance;
            var __ret = __Internal.TestCompareDirectoryContents(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int TestCompareFileInclusion(global::NWN.LowLevel.CExoString sTargetAlias, global::NWN.LowLevel.CExoString sBaseAlias, global::NWN.LowLevel.CExoStringList plFileNames, ushort nResType)
        {
            if (ReferenceEquals(sTargetAlias, null))
                throw new global::System.ArgumentNullException("sTargetAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sTargetAlias.__Instance;
            if (ReferenceEquals(sBaseAlias, null))
                throw new global::System.ArgumentNullException("sBaseAlias", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sBaseAlias.__Instance;
            var __arg2 = plFileNames is null ? __IntPtr.Zero : plFileNames.__Instance;
            var __ret = __Internal.TestCompareFileInclusion(__Instance, __arg0, __arg1, __arg2, nResType);
            return __ret;
        }

        public void Initialize()
        {
            __Internal.Initialize(__Instance);
        }

        public void ShutDown()
        {
            __Internal.ShutDown(__Instance);
        }

        public uint HashString(global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sString.__Instance;
            var __ret = __Internal.HashString(__Instance, __arg0);
            return __ret;
        }

        public uint HashString(string pString)
        {
            var __ret = __Internal.HashString(__Instance, pString);
            return __ret;
        }

        public void InitializePreDefinedStructures()
        {
            __Internal.InitializePreDefinedStructures(__Instance);
        }

        public void InitializeIncludeFile(int nCompileFileLevel)
        {
            __Internal.InitializeIncludeFile(__Instance, nCompileFileLevel);
        }

        public void ShutdownIncludeFile(int nCompileFileLevel)
        {
            __Internal.ShutdownIncludeFile(__Instance, nCompileFileLevel);
        }

        public void TokenInitialize()
        {
            __Internal.TokenInitialize(__Instance);
        }

        public void PushSRStack(int nState, int nRule, int nTerm, global::NWN.LowLevel.CScriptParseTreeNode pCurrentTree)
        {
            var __arg3 = pCurrentTree is null ? __IntPtr.Zero : pCurrentTree.__Instance;
            __Internal.PushSRStack(__Instance, nState, nRule, nTerm, __arg3);
        }

        public int PopSRStack(ref int nState, ref int nRule, ref int nTerm, global::NWN.LowLevel.CScriptParseTreeNode pCurrentTree, global::NWN.LowLevel.CScriptParseTreeNode pReturnTree)
        {
            fixed (int* __nState0 = &nState)
            {
                var __arg0 = __nState0;
                fixed (int* __nRule1 = &nRule)
                {
                    var __arg1 = __nRule1;
                    fixed (int* __nTerm2 = &nTerm)
                    {
                        var __arg2 = __nTerm2;
                        var ____arg3 = pCurrentTree is null ? __IntPtr.Zero : pCurrentTree.__Instance;
                        var __arg3 = new __IntPtr(&____arg3);
                        var ____arg4 = pReturnTree is null ? __IntPtr.Zero : pReturnTree.__Instance;
                        var __arg4 = new __IntPtr(&____arg4);
                        var __ret = __Internal.PopSRStack(__Instance, __arg0, __arg1, __arg2, __arg3, __arg4);
                        return __ret;
                    }
                }
            }
        }

        public void ModifySRStackReturnTree(global::NWN.LowLevel.CScriptParseTreeNode pReturnTree)
        {
            var __arg0 = pReturnTree is null ? __IntPtr.Zero : pReturnTree.__Instance;
            __Internal.ModifySRStackReturnTree(__Instance, __arg0);
        }

        public int GenerateParseTree()
        {
            var __ret = __Internal.GenerateParseTree(__Instance);
            return __ret;
        }

        public float ParseFloatFromTokenString()
        {
            var __ret = __Internal.ParseFloatFromTokenString(__Instance);
            return __ret;
        }

        public int ParseCharacterNumeric(int ch)
        {
            var __ret = __Internal.ParseCharacterNumeric(__Instance, ch);
            return __ret;
        }

        public int ParseCharacterPeriod()
        {
            var __ret = __Internal.ParseCharacterPeriod(__Instance);
            return __ret;
        }

        public int ParseCharacterSlash(int chNext)
        {
            var __ret = __Internal.ParseCharacterSlash(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterAsterisk(int chNext)
        {
            var __ret = __Internal.ParseCharacterAsterisk(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterAmpersand(int chNext)
        {
            var __ret = __Internal.ParseCharacterAmpersand(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterVerticalBar(int chNext)
        {
            var __ret = __Internal.ParseCharacterVerticalBar(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterAlphabet(int ch)
        {
            var __ret = __Internal.ParseCharacterAlphabet(__Instance, ch);
            return __ret;
        }

        public int ParseStringCharacter(int ch, int chNext)
        {
            var __ret = __Internal.ParseStringCharacter(__Instance, ch, chNext);
            return __ret;
        }

        public int ParseCharacterQuotationMark()
        {
            var __ret = __Internal.ParseCharacterQuotationMark(__Instance);
            return __ret;
        }

        public int ParseCharacterHyphen(int chNext)
        {
            var __ret = __Internal.ParseCharacterHyphen(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterLeftBrace()
        {
            var __ret = __Internal.ParseCharacterLeftBrace(__Instance);
            return __ret;
        }

        public int ParseCharacterRightBrace()
        {
            var __ret = __Internal.ParseCharacterRightBrace(__Instance);
            return __ret;
        }

        public int ParseCharacterLeftBracket()
        {
            var __ret = __Internal.ParseCharacterLeftBracket(__Instance);
            return __ret;
        }

        public int ParseCharacterRightBracket()
        {
            var __ret = __Internal.ParseCharacterRightBracket(__Instance);
            return __ret;
        }

        public int ParseCharacterLeftSquareBracket()
        {
            var __ret = __Internal.ParseCharacterLeftSquareBracket(__Instance);
            return __ret;
        }

        public int ParseCharacterRightSquareBracket()
        {
            var __ret = __Internal.ParseCharacterRightSquareBracket(__Instance);
            return __ret;
        }

        public int ParseCharacterLeftAngle(int chNext)
        {
            var __ret = __Internal.ParseCharacterLeftAngle(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterRightAngle(int chNext)
        {
            var __ret = __Internal.ParseCharacterRightAngle(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterExclamationPoint(int chNext)
        {
            var __ret = __Internal.ParseCharacterExclamationPoint(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterEqualSign(int chNext)
        {
            var __ret = __Internal.ParseCharacterEqualSign(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterPlusSign(int chNext)
        {
            var __ret = __Internal.ParseCharacterPlusSign(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterPercentSign(int chNext)
        {
            var __ret = __Internal.ParseCharacterPercentSign(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterSemicolon()
        {
            var __ret = __Internal.ParseCharacterSemicolon(__Instance);
            return __ret;
        }

        public int ParseCharacterComma()
        {
            var __ret = __Internal.ParseCharacterComma(__Instance);
            return __ret;
        }

        public int ParseCharacterCarat(int chNext)
        {
            var __ret = __Internal.ParseCharacterCarat(__Instance, chNext);
            return __ret;
        }

        public int ParseCharacterTilde()
        {
            var __ret = __Internal.ParseCharacterTilde(__Instance);
            return __ret;
        }

        public int ParseCharacterEllipsis()
        {
            var __ret = __Internal.ParseCharacterEllipsis(__Instance);
            return __ret;
        }

        public int ParseCharacterQuestionMark()
        {
            var __ret = __Internal.ParseCharacterQuestionMark(__Instance);
            return __ret;
        }

        public int ParseCharacterColon()
        {
            var __ret = __Internal.ParseCharacterColon(__Instance);
            return __ret;
        }

        public int ParseCommentedOutCharacter(int ch)
        {
            var __ret = __Internal.ParseCommentedOutCharacter(__Instance, ch);
            return __ret;
        }

        public int ParseNextCharacter(int ch, int chNext)
        {
            var __ret = __Internal.ParseNextCharacter(__Instance, ch, chNext);
            return __ret;
        }

        public int PrintParseSourceError(int nParseCharacterError)
        {
            var __ret = __Internal.PrintParseSourceError(__Instance, nParseCharacterError);
            return __ret;
        }

        public int ParseSource(sbyte* pScript, int nScriptLength)
        {
            var __ret = __Internal.ParseSource(__Instance, pScript, nScriptLength);
            return __ret;
        }

        public int OutputError(int nError, global::NWN.LowLevel.CExoString psFileName, int nLineNumber, global::NWN.LowLevel.CExoString sErrorText)
        {
            var __arg1 = psFileName is null ? __IntPtr.Zero : psFileName.__Instance;
            if (ReferenceEquals(sErrorText, null))
                throw new global::System.ArgumentNullException("sErrorText", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = sErrorText.__Instance;
            var __ret = __Internal.OutputError(__Instance, nError, __arg1, nLineNumber, __arg3);
            return __ret;
        }

        public global::NWN.LowLevel.CScriptParseTreeNode DuplicateScriptParseTree(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.DuplicateScriptParseTree(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CScriptParseTreeNode.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CScriptParseTreeNode CreateScriptParseTreeNode(int nNodeOperation, global::NWN.LowLevel.CScriptParseTreeNode pNodeLeft, global::NWN.LowLevel.CScriptParseTreeNode pNodeRight)
        {
            var __arg1 = pNodeLeft is null ? __IntPtr.Zero : pNodeLeft.__Instance;
            var __arg2 = pNodeRight is null ? __IntPtr.Zero : pNodeRight.__Instance;
            var __ret = __Internal.CreateScriptParseTreeNode(__Instance, nNodeOperation, __arg1, __arg2);
            var __result0 = global::NWN.LowLevel.CScriptParseTreeNode.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int CheckForBadLValue(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.CheckForBadLValue(__Instance, __arg0);
            return __ret;
        }

        public void DeleteScriptParseTreeNode(global::NWN.LowLevel.CScriptParseTreeNode pParseTreeNode)
        {
            var __arg0 = pParseTreeNode is null ? __IntPtr.Zero : pParseTreeNode.__Instance;
            __Internal.DeleteScriptParseTreeNode(__Instance, __arg0);
        }

        public int OutputWalkTreeError(int nError, global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg1 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.OutputWalkTreeError(__Instance, nError, __arg1);
            return __ret;
        }

        public int PreVisitGenerateCode(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.PreVisitGenerateCode(__Instance, __arg0);
            return __ret;
        }

        public int InVisitGenerateCode(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.InVisitGenerateCode(__Instance, __arg0);
            return __ret;
        }

        public int PostVisitGenerateCode(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.PostVisitGenerateCode(__Instance, __arg0);
            return __ret;
        }

        public void StartLineNumberAtBinaryInstruction(int nFileReference, int nLineNumber, int nBinaryInstruction)
        {
            __Internal.StartLineNumberAtBinaryInstruction(__Instance, nFileReference, nLineNumber, nBinaryInstruction);
        }

        public void EndLineNumberAtBinaryInstruction(int nFileReference, int nLineNumber, int nBinaryInstruction)
        {
            __Internal.EndLineNumberAtBinaryInstruction(__Instance, nFileReference, nLineNumber, nBinaryInstruction);
        }

        public void ResolveDebuggingInformation()
        {
            __Internal.ResolveDebuggingInformation(__Instance);
        }

        public void ResolveDebuggingInformationForIdentifier(int nIdentifier)
        {
            __Internal.ResolveDebuggingInformationForIdentifier(__Instance, nIdentifier);
        }

        public void DeleteCompileStack()
        {
            __Internal.DeleteCompileStack(__Instance);
        }

        public void DeleteParseTree(int bStack, global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg1 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            __Internal.DeleteParseTree(__Instance, bStack, __arg1);
        }

        public int WalkParseTree(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.WalkParseTree(__Instance, __arg0);
            return __ret;
        }

        public void InitializeFinalCode()
        {
            __Internal.InitializeFinalCode(__Instance);
        }

        public void FinalizeFinalCode()
        {
            __Internal.FinalizeFinalCode(__Instance);
        }

        public int GenerateFinalCodeFromParseTree(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is passed by value.");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.GenerateFinalCodeFromParseTree(__Instance, __arg0);
            return __ret;
        }

        public int WriteFinalCodeToFile(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.WriteFinalCodeToFile(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString GenerateDebuggerTypeAbbreviation(int nType, global::NWN.LowLevel.CExoString sStructureName)
        {
            if (ReferenceEquals(sStructureName, null))
                throw new global::System.ArgumentNullException("sStructureName", "Cannot be null because it is passed by value.");
            var __arg1 = sStructureName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GenerateDebuggerTypeAbbreviation(new IntPtr(&__ret), __Instance, nType, __arg1);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int WriteDebuggerOutputToFile(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is passed by value.");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.WriteDebuggerOutputToFile(__Instance, __arg0);
            return __ret;
        }

        public uint HashManagerAdd(uint nType, uint nTypeIndice)
        {
            var __ret = __Internal.HashManagerAdd(__Instance, nType, nTypeIndice);
            return __ret;
        }

        public uint HashManagerDelete(uint nType, uint nTypeIndice)
        {
            var __ret = __Internal.HashManagerDelete(__Instance, nType, nTypeIndice);
            return __ret;
        }

        public int GetHashEntryByName(string psIdentifierName)
        {
            var __ret = __Internal.GetHashEntryByName(__Instance, psIdentifierName);
            return __ret;
        }

        public int PrintParseIdentifierFileError(int nParseCharacterError)
        {
            var __ret = __Internal.PrintParseIdentifierFileError(__Instance, nParseCharacterError);
            return __ret;
        }

        public int ParseIdentifierFile()
        {
            var __ret = __Internal.ParseIdentifierFile(__Instance);
            return __ret;
        }

        public int GenerateIdentifierList()
        {
            var __ret = __Internal.GenerateIdentifierList(__Instance);
            return __ret;
        }

        public int AddUserDefinedIdentifier(global::NWN.LowLevel.CScriptParseTreeNode pFunctionDeclaration, int bFunctionImplementation)
        {
            var __arg0 = pFunctionDeclaration is null ? __IntPtr.Zero : pFunctionDeclaration.__Instance;
            var __ret = __Internal.AddUserDefinedIdentifier(__Instance, __arg0, bFunctionImplementation);
            return __ret;
        }

        public void ClearUserDefinedIdentifiers()
        {
            __Internal.ClearUserDefinedIdentifiers(__Instance);
        }

        public int GetStructureField(global::NWN.LowLevel.CExoString sStructureName, global::NWN.LowLevel.CExoString sFieldName)
        {
            if (ReferenceEquals(sStructureName, null))
                throw new global::System.ArgumentNullException("sStructureName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sStructureName.__Instance;
            if (ReferenceEquals(sFieldName, null))
                throw new global::System.ArgumentNullException("sFieldName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sFieldName.__Instance;
            var __ret = __Internal.GetStructureField(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int GetStructureSize(global::NWN.LowLevel.CExoString sStructureName)
        {
            if (ReferenceEquals(sStructureName, null))
                throw new global::System.ArgumentNullException("sStructureName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sStructureName.__Instance;
            var __ret = __Internal.GetStructureSize(__Instance, __arg0);
            return __ret;
        }

        public int GetIdentifierByName(global::NWN.LowLevel.CExoString sIdentifierName)
        {
            if (ReferenceEquals(sIdentifierName, null))
                throw new global::System.ArgumentNullException("sIdentifierName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sIdentifierName.__Instance;
            var __ret = __Internal.GetIdentifierByName(__Instance, __arg0);
            return __ret;
        }

        public int AddToGlobalVariableList(global::NWN.LowLevel.CScriptParseTreeNode pGlobalVariableNode)
        {
            var __arg0 = pGlobalVariableNode is null ? __IntPtr.Zero : pGlobalVariableNode.__Instance;
            var __ret = __Internal.AddToGlobalVariableList(__Instance, __arg0);
            return __ret;
        }

        public void InitializeSwitchLabelList()
        {
            __Internal.InitializeSwitchLabelList(__Instance);
        }

        public int TraverseTreeForSwitchLabels(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.TraverseTreeForSwitchLabels(__Instance, __arg0);
            return __ret;
        }

        public void ClearSwitchLabelList()
        {
            __Internal.ClearSwitchLabelList(__Instance);
        }

        public int GenerateCodeForSwitchLabels(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.GenerateCodeForSwitchLabels(__Instance, __arg0);
            return __ret;
        }

        public int GenerateIdentifiersFromConstantVariables(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.GenerateIdentifiersFromConstantVariables(__Instance, __arg0);
            return __ret;
        }

        public void PrintBinaryAddress()
        {
            __Internal.PrintBinaryAddress(__Instance);
        }

        public int FoundReturnStatementOnAllBranches(global::NWN.LowLevel.CScriptParseTreeNode pNode)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            var __ret = __Internal.FoundReturnStatementOnAllBranches(__Instance, __arg0);
            return __ret;
        }

        public void AddVariableToStack(int nVariableType, global::NWN.LowLevel.CExoString psVariableTypeName, int bGenerateCode)
        {
            var __arg1 = psVariableTypeName is null ? __IntPtr.Zero : psVariableTypeName.__Instance;
            __Internal.AddVariableToStack(__Instance, nVariableType, __arg1, bGenerateCode);
        }

        public void AddStructureToStack(global::NWN.LowLevel.CExoString sStructureName, int bGenerateCode)
        {
            if (ReferenceEquals(sStructureName, null))
                throw new global::System.ArgumentNullException("sStructureName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sStructureName.__Instance;
            __Internal.AddStructureToStack(__Instance, __arg0, bGenerateCode);
        }

        public void AddToSymbolTableVarStack(int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize)
        {
            __Internal.AddToSymbolTableVarStack(__Instance, nOccupiedIdentifier, nStackCurrentDepth, nGlobalVariableSize);
        }

        public void RemoveFromSymbolTableVarStack(int nOccupiedIdentifier, int nStackCurrentDepth, int nGlobalVariableSize)
        {
            __Internal.RemoveFromSymbolTableVarStack(__Instance, nOccupiedIdentifier, nStackCurrentDepth, nGlobalVariableSize);
        }

        public global::NWN.LowLevel.CExoString GetFunctionNameFromSymbolSubTypes(int nSubType1, int nSubType2)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetFunctionNameFromSymbolSubTypes(new IntPtr(&__ret), __Instance, nSubType1, nSubType2);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int AddSymbolToQueryList(int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2)
        {
            var __ret = __Internal.AddSymbolToQueryList(__Instance, nLocationPointer, nSymbolType, nSymbolSubType1, nSymbolSubType2);
            return __ret;
        }

        public int AddSymbolToLabelList(int nLocationPointer, int nSymbolType, int nSymbolSubType1, int nSymbolSubType2)
        {
            var __ret = __Internal.AddSymbolToLabelList(__Instance, nLocationPointer, nSymbolType, nSymbolSubType1, nSymbolSubType2);
            return __ret;
        }

        public void ClearAllSymbolLists()
        {
            __Internal.ClearAllSymbolLists(__Instance);
        }

        public int CleanUpDuringCompile(int nReturnValue)
        {
            var __ret = __Internal.CleanUpDuringCompile(__Instance, nReturnValue);
            return __ret;
        }

        public int CleanUpAfterCompile(int nReturnValue, global::NWN.LowLevel.CScriptParseTreeNode pReturnTree)
        {
            var __arg1 = pReturnTree is null ? __IntPtr.Zero : pReturnTree.__Instance;
            var __ret = __Internal.CleanUpAfterCompile(__Instance, nReturnValue, __arg1);
            return __ret;
        }

        public int InstallLoader()
        {
            var __ret = __Internal.InstallLoader(__Instance);
            return __ret;
        }

        public global::NWN.LowLevel.CScriptParseTreeNode InsertGlobalVariablesInParseTree(global::NWN.LowLevel.CScriptParseTreeNode pOldTree)
        {
            var __arg0 = pOldTree is null ? __IntPtr.Zero : pOldTree.__Instance;
            var __ret = __Internal.InsertGlobalVariablesInParseTree(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CScriptParseTreeNode.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int OutputIdentifierError(global::NWN.LowLevel.CExoString sFunctionName, int nError, int nFileStackDrop)
        {
            if (ReferenceEquals(sFunctionName, null))
                throw new global::System.ArgumentNullException("sFunctionName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFunctionName.__Instance;
            var __ret = __Internal.OutputIdentifierError(__Instance, __arg0, nError, nFileStackDrop);
            return __ret;
        }

        public int ValidateLocationOfIdentifier(global::NWN.LowLevel.CExoString sFunctionName)
        {
            if (ReferenceEquals(sFunctionName, null))
                throw new global::System.ArgumentNullException("sFunctionName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFunctionName.__Instance;
            var __ret = __Internal.ValidateLocationOfIdentifier(__Instance, __arg0);
            return __ret;
        }

        public int DetermineLocationOfCode()
        {
            var __ret = __Internal.DetermineLocationOfCode(__Instance);
            return __ret;
        }

        public int WriteResolvedOutput()
        {
            var __ret = __Internal.WriteResolvedOutput(__Instance);
            return __ret;
        }

        public int MNKeyWords
        {
            get
            {
                return ((__Internal*)__Instance)->m_nKeyWords;
            }

            set
            {
                ((__Internal*)__Instance)->m_nKeyWords = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerKeyWordEntry MPcKeyWords
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerKeyWordEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcKeyWords, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcKeyWords = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNParseTreeNodeBlockEmptyNodes
        {
            get
            {
                return ((__Internal*)__Instance)->m_nParseTreeNodeBlockEmptyNodes;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParseTreeNodeBlockEmptyNodes = value;
            }
        }

        public global::NWN.LowLevel.CScriptParseTreeNodeBlock MPCurrentParseTreeNodeBlock
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptParseTreeNodeBlock.__GetOrCreateInstance(((__Internal*)__Instance)->m_pCurrentParseTreeNodeBlock, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pCurrentParseTreeNodeBlock = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptParseTreeNodeBlock MPParseTreeNodeBlockHead
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptParseTreeNodeBlock.__GetOrCreateInstance(((__Internal*)__Instance)->m_pParseTreeNodeBlockHead, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pParseTreeNodeBlockHead = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptParseTreeNodeBlock MPParseTreeNodeBlockTail
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptParseTreeNodeBlock.__GetOrCreateInstance(((__Internal*)__Instance)->m_pParseTreeNodeBlockTail, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pParseTreeNodeBlockTail = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPpsParseTreeFileNames
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_ppsParseTreeFileNames, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_ppsParseTreeFileNames = new __IntPtr(&__value);
            }
        }

        public int MNNextParseTreeFileName
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNextParseTreeFileName;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNextParseTreeFileName = value;
            }
        }

        public int MNCurrentParseTreeFileName
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentParseTreeFileName;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentParseTreeFileName = value;
            }
        }

        public int MNCurrentLineNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLineNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLineNumber = value;
            }
        }

        public int MNCurrentLineNumberFileReference
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLineNumberFileReference;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLineNumberFileReference = value;
            }
        }

        public int MNCurrentLineNumberReferences
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLineNumberReferences;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLineNumberReferences = value;
            }
        }

        public int MNCurrentLineNumberBinaryStartInstruction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLineNumberBinaryStartInstruction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLineNumberBinaryStartInstruction = value;
            }
        }

        public int MNCurrentLineNumberBinaryEndInstruction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentLineNumberBinaryEndInstruction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentLineNumberBinaryEndInstruction = value;
            }
        }

        public int MNTableFileNames
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTableFileNames;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTableFileNames = value;
            }
        }

        public global::NWN.LowLevel.CExoString[] MPsTableFileNames
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_psTableFileNames != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[128];
                    for (int i = 0; i < 128; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_psTableFileNames[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 128)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 128; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_psTableFileNames[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public int MNLineNumberEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLineNumberEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLineNumberEntries = value;
            }
        }

        public int MNFinalLineNumberEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFinalLineNumberEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFinalLineNumberEntries = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionFileReference
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionFileReference));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionFileReference = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionLineNumber
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionLineNumber));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionLineNumber = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionBinaryStart
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionBinaryStart));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionBinaryStart = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionBinaryEnd
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionBinaryEnd));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionBinaryEnd = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionBinaryFinal
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionBinaryFinal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionBinaryFinal = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnTableInstructionBinarySortedOrder
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnTableInstructionBinarySortedOrder));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnTableInstructionBinarySortedOrder = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MNSymbolTableVariables
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSymbolTableVariables;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSymbolTableVariables = value;
            }
        }

        public int MNFinalSymbolTableVariables
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFinalSymbolTableVariables;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFinalSymbolTableVariables = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableVarType
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableVarType));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableVarType = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> MPsSymbolTableVarName
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_psSymbolTableVarName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_psSymbolTableVarName = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> MPsSymbolTableVarStructureName
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_psSymbolTableVarStructureName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_psSymbolTableVarStructureName = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableVarStackLoc
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableVarStackLoc));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableVarStackLoc = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableVarBegin
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableVarBegin));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableVarBegin = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableVarEnd
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableVarEnd));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableVarEnd = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableBinaryFinal
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableBinaryFinal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableBinaryFinal = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<int> MPnSymbolTableBinarySortedOrder
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<int>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pnSymbolTableBinarySortedOrder));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pnSymbolTableBinarySortedOrder = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MNDebugStatus
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugStatus;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugStatus = value;
            }
        }

        public int MBCompileConditionalFile
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCompileConditionalFile;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCompileConditionalFile = value;
            }
        }

        public int MBOldCompileConditionalFile
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOldCompileConditionalFile;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOldCompileConditionalFile = value;
            }
        }

        public int MBCompileConditionalOrMain
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCompileConditionalOrMain;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCompileConditionalOrMain = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSLanguageSource
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLanguageSource));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLanguageSource = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSOutputAlias
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sOutputAlias));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sOutputAlias = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNLines
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLines;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLines = value;
            }
        }

        public int MNCharacterOnLine
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCharacterOnLine;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCharacterOnLine = value;
            }
        }

        public int* MPnHashString
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnHashString;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnHashString = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerIdentifierHashTableEntry MPIdentifierHashTable
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerIdentifierHashTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pIdentifierHashTable, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pIdentifierHashTable = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNTokenStatus
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTokenStatus;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTokenStatus = value;
            }
        }

        public int MNTokenCharacters
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTokenCharacters;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTokenCharacters = value;
            }
        }

        public sbyte[] MPchToken
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_pchToken, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->m_pchToken[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CScriptCompilerStackEntry MPSRStack
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerStackEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSRStack, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSRStack = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNSRStackEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSRStackEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSRStackEntries = value;
            }
        }

        public int MNSRStackStates
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSRStackStates;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSRStackStates = value;
            }
        }

        public int MBCompileIdentifierList
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCompileIdentifierList;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCompileIdentifierList = value;
            }
        }

        public int MBCompileIdentifierConstants
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCompileIdentifierConstants;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCompileIdentifierConstants = value;
            }
        }

        public int MNIdentifierListState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierListState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierListState = value;
            }
        }

        public int MNIdentifierListVector
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierListVector;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierListVector = value;
            }
        }

        public int MNIdentifierListEngineStructure
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierListEngineStructure;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierListEngineStructure = value;
            }
        }

        public int MNIdentifierListReturnType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIdentifierListReturnType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIdentifierListReturnType = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerIdListEntry MPcIdentifierList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerIdListEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcIdentifierList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcIdentifierList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNOccupiedIdentifiers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOccupiedIdentifiers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOccupiedIdentifiers = value;
            }
        }

        public int MNMaxPredefinedIdentifierId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxPredefinedIdentifierId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxPredefinedIdentifierId = value;
            }
        }

        public int MNPredefinedIdentifierOrder
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPredefinedIdentifierOrder;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPredefinedIdentifierOrder = value;
            }
        }

        public int MNCompileFileLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCompileFileLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCompileFileLevel = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry[] MPcIncludeFileStack
        {
            get
            {
                global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry[] __value = null;
                if (((__Internal*)__Instance)->m_pcIncludeFileStack != null)
                {
                    __value = new global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry[16];
                    for (int i = 0; i < 16; i++)
                        __value[i] = global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__CreateInstance(*((global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__Internal*)&(((__Internal*)__Instance)->m_pcIncludeFileStack[i * sizeof(global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 16)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 16; i++)
                        *(global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__Internal*) &((__Internal*)__Instance)->m_pcIncludeFileStack[i * sizeof(global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__Internal)] = *(global::NWN.LowLevel.CScriptCompilerIncludeFileStackEntry.__Internal*)value[i].__Instance;
                }
            }
        }

        public int MNVarStackRecursionLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVarStackRecursionLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVarStackRecursionLevel = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerVarStackEntry MPcVarStackList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerVarStackEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcVarStackList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcVarStackList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNOccupiedVariables
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOccupiedVariables;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOccupiedVariables = value;
            }
        }

        public int MNVarStackVariableType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVarStackVariableType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVarStackVariableType = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSVarStackVariableTypeName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sVarStackVariableTypeName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sVarStackVariableTypeName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerStructureEntry MPcStructList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerStructureEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcStructList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcStructList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerStructureFieldEntry MPcStructFieldList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerStructureFieldEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcStructFieldList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcStructFieldList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNMaxStructures
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxStructures;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxStructures = value;
            }
        }

        public int MNMaxStructureFields
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxStructureFields;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxStructureFields = value;
            }
        }

        public int MNStructureDefinition
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStructureDefinition;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStructureDefinition = value;
            }
        }

        public int MNStructureDefinitionFieldStart
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStructureDefinitionFieldStart;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStructureDefinitionFieldStart = value;
            }
        }

        public int MBGlobalVariableDefinition
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGlobalVariableDefinition;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGlobalVariableDefinition = value;
            }
        }

        public int MNGlobalVariables
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGlobalVariables;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGlobalVariables = value;
            }
        }

        public int MNGlobalVariableSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGlobalVariableSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGlobalVariableSize = value;
            }
        }

        public global::NWN.LowLevel.CScriptParseTreeNode MPGlobalVariableParseTree
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptParseTreeNode.__GetOrCreateInstance(((__Internal*)__Instance)->m_pGlobalVariableParseTree, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pGlobalVariableParseTree = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBConstantVariableDefinition
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConstantVariableDefinition;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConstantVariableDefinition = value;
            }
        }

        public int MNLoopIdentifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLoopIdentifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLoopIdentifier = value;
            }
        }

        public int MNLoopStackDepth
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLoopStackDepth;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLoopStackDepth = value;
            }
        }

        public int MNSwitchLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSwitchLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSwitchLevel = value;
            }
        }

        public int MNSwitchIdentifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSwitchIdentifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSwitchIdentifier = value;
            }
        }

        public int MNSwitchStackDepth
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSwitchStackDepth;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSwitchStackDepth = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSUndefinedIdentifier
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sUndefinedIdentifier));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sUndefinedIdentifier = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBSwitchLabelDefault
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSwitchLabelDefault;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSwitchLabelDefault = value;
            }
        }

        public int MNSwitchLabelNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSwitchLabelNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSwitchLabelNumber = value;
            }
        }

        public int MNSwitchLabelArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSwitchLabelArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSwitchLabelArraySize = value;
            }
        }

        public int* MPnSwitchLabelStatements
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnSwitchLabelStatements;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnSwitchLabelStatements = (__IntPtr) value;
            }
        }

        public int MNNumEngineDefinedStructures
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumEngineDefinedStructures;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumEngineDefinedStructures = value;
            }
        }

        public int* MPbEngineDefinedStructureValid
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pbEngineDefinedStructureValid;
            }

            set
            {
                ((__Internal*)__Instance)->m_pbEngineDefinedStructureValid = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoString MPsEngineDefinedStructureName
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_psEngineDefinedStructureName, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_psEngineDefinedStructureName = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBAssignmentToVariable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAssignmentToVariable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAssignmentToVariable = value;
            }
        }

        public int MBInStructurePart
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInStructurePart;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInStructurePart = value;
            }
        }

        public int MBFunctionImp
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFunctionImp;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFunctionImp = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSFunctionImpName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sFunctionImpName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sFunctionImpName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNFunctionImpReturnType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFunctionImpReturnType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFunctionImpReturnType = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSFunctionImpReturnStructureName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sFunctionImpReturnStructureName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sFunctionImpReturnStructureName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNFunctionImpAbortStackPointer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFunctionImpAbortStackPointer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFunctionImpAbortStackPointer = value;
            }
        }

        public int MNStackCurrentDepth
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStackCurrentDepth;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStackCurrentDepth = value;
            }
        }

        public sbyte[] MPchStackTypes
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_pchStackTypes, 8192);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 8192; i++)
                        ((__Internal*)__Instance)->m_pchStackTypes[i] = value[i];
                }
            }
        }

        public int MNRunTimeIntegers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRunTimeIntegers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRunTimeIntegers = value;
            }
        }

        public int MNRunTimeFloats
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRunTimeFloats;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRunTimeFloats = value;
            }
        }

        public int MNRunTimeStrings
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRunTimeStrings;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRunTimeStrings = value;
            }
        }

        public int MNRunTimeObjects
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRunTimeObjects;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRunTimeObjects = value;
            }
        }

        public int MNRunTimeActions
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRunTimeActions;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRunTimeActions = value;
            }
        }

        public int MNSymbolQueryListSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSymbolQueryListSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSymbolQueryListSize = value;
            }
        }

        public int MNSymbolQueryList
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSymbolQueryList;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSymbolQueryList = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerSymbolTableEntry MPSymbolQueryList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerSymbolTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSymbolQueryList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSymbolQueryList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNSymbolLabelListSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSymbolLabelListSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSymbolLabelListSize = value;
            }
        }

        public int MNSymbolLabelList
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSymbolLabelList;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSymbolLabelList = value;
            }
        }

        public global::NWN.LowLevel.CScriptCompilerSymbolTableEntry MPSymbolLabelList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CScriptCompilerSymbolTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSymbolLabelList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSymbolLabelList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int[] MPSymbolLabelStartEntry
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_pSymbolLabelStartEntry, 512);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((__Internal*)__Instance)->m_pSymbolLabelStartEntry[i] = value[i];
                }
            }
        }

        public int MNDebugSymbolicOutput
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebugSymbolicOutput;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebugSymbolicOutput = value;
            }
        }

        public int MNGenerateDebuggerOutput
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGenerateDebuggerOutput;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGenerateDebuggerOutput = value;
            }
        }

        public int MBAutomaticCleanUpAfterCompiles
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAutomaticCleanUpAfterCompiles;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAutomaticCleanUpAfterCompiles = value;
            }
        }

        public int MBOptimizeBinarySpace
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOptimizeBinarySpace;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOptimizeBinarySpace = value;
            }
        }

        public int MNTotalCompileNodes
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalCompileNodes;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalCompileNodes = value;
            }
        }

        public int MBCompilingConditional
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCompilingConditional;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCompilingConditional = value;
            }
        }

        public sbyte* MPchOutputCode
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pchOutputCode;
            }

            set
            {
                ((__Internal*)__Instance)->m_pchOutputCode = (__IntPtr) value;
            }
        }

        public int MNOutputCodeSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOutputCodeSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOutputCodeSize = value;
            }
        }

        public int MNOutputCodeLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOutputCodeLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOutputCodeLength = value;
            }
        }

        public int MNBinaryCodeLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBinaryCodeLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBinaryCodeLength = value;
            }
        }

        public sbyte* MPchResolvedOutputBuffer
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pchResolvedOutputBuffer;
            }

            set
            {
                ((__Internal*)__Instance)->m_pchResolvedOutputBuffer = (__IntPtr) value;
            }
        }

        public int MNResolvedOutputBufferSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nResolvedOutputBufferSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nResolvedOutputBufferSize = value;
            }
        }

        public sbyte* MPchDebuggerCode
        {
            get
            {
                return (sbyte*) ((__Internal*)__Instance)->m_pchDebuggerCode;
            }

            set
            {
                ((__Internal*)__Instance)->m_pchDebuggerCode = (__IntPtr) value;
            }
        }

        public int MNDebuggerCodeSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebuggerCodeSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebuggerCodeSize = value;
            }
        }

        public int MNDebuggerCodeLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDebuggerCodeLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDebuggerCodeLength = value;
            }
        }

        public sbyte[] MPchActionParameters
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_pchActionParameters, 32);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 32; i++)
                        ((__Internal*)__Instance)->m_pchActionParameters[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CExoString[] MPchActionParameterStructureNames
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_pchActionParameterStructureNames != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[32];
                    for (int i = 0; i < 32; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_pchActionParameterStructureNames[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 32)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 32; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_pchActionParameterStructureNames[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public int MNFinalBinarySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFinalBinarySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFinalBinarySize = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSCapturedError
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCapturedError));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCapturedError = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int HandleToken
        {
            get
            {
                var __ret = __Internal.HandleToken(__Instance);
                return __ret;
            }
        }

        public int TestIdentifierToken
        {
            get
            {
                var __ret = __Internal.TestIdentifierToken(__Instance);
                return __ret;
            }
        }

        public int HandleIdentifierToken
        {
            get
            {
                var __ret = __Internal.HandleIdentifierToken(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CScriptParseTreeNode NewScriptParseTreeNode
        {
            get
            {
                var __ret = __Internal.GetNewScriptParseTreeNode(__Instance);
                var __result0 = global::NWN.LowLevel.CScriptParseTreeNode.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int ResolveLabels
        {
            get
            {
                var __ret = __Internal.ResolveLabels(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
