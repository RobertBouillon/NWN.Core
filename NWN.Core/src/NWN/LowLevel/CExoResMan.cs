// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoResMan : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 152)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal long m_nTotalPhysicalMemory;

            [FieldOffset(8)]
            internal long m_nTotalAvailableMemory;

            [FieldOffset(16)]
            internal long m_nAvailableMemory;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pKeyTables;

            [FieldOffset(40)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstToBeFreed;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstAsyncResQueue;

            [FieldOffset(56)]
            internal __IntPtr m_pCurrentAsyncRes;

            [FieldOffset(64)]
            internal __IntPtr m_pAsyncFile;

            [FieldOffset(72)]
            internal int m_bAsyncSuspended;

            [FieldOffset(76)]
            internal uint m_nTotalDemands;

            [FieldOffset(80)]
            internal uint m_nTotalCacheHits;

            [FieldOffset(84)]
            internal uint m_nTotalOldReleases;

            [FieldOffset(88)]
            internal uint m_nTotalNewReleases;

            [FieldOffset(92)]
            internal uint m_nTotalLookupFailures;

            [FieldOffset(96)]
            internal byte m_bLogLookupFailures;

            [FieldOffset(97)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cLastFailedLookup;

            [FieldOffset(130)]
            internal ushort m_nLastFailedLookupType;

            [FieldOffset(132)]
            internal int m_bOverrideAll;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.CNWSync.__Internal m_pNWSync;

            [FieldOffset(144)]
            internal __IntPtr m_pResourceOverrideMap;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResManC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResManC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResManD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan22SetupDefaultSearchPathEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetupDefaultSearchPath(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan27AddEncapsulatedResourceFileERK10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEncapsulatedResourceFile(__IntPtr __instance, __IntPtr sName, uint nPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan20AddResourceImageFileERK10CExoStringPhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddResourceImageFile(__IntPtr __instance, __IntPtr sName, byte* pCipher, uint nPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan20AddFixedKeyTableFileERK10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddFixedKeyTableFile(__IntPtr __instance, __IntPtr sName, uint nPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan20AddResourceDirectoryERK10CExoStringji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddResourceDirectory(__IntPtr __instance, __IntPtr sName, uint nPriority, int bDetectChanges);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan11AddManifestERK10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddManifest(__IntPtr __instance, __IntPtr manifestHash, uint nPriority);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan7DumpAllEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DumpAll(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan13DumpAllOfTypeEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DumpAllOfType(__IntPtr __instance, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16FreeResourceDataEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void FreeResourceData(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan6ExistsERK7CResReftPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Exists(__IntPtr __instance, __IntPtr cResRef, ushort nType, uint* pTableType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan30GetEncapsulatedFileDescriptionERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetEncapsulatedFileDescription(__IntPtr @return, __IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan12GetResObjectERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetResObject(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan12GetResOfTypeEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetResOfType(__IntPtr __instance, ushort nType, int bERFOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan12GetResOfTypeEtP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetResOfType(__IntPtr __instance, ushort nType, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan8GetResIDERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.RESID.__Internal GetResID(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16ReleaseResObjectEP4CResb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReleaseResObject(__IntPtr __instance, __IntPtr pRes, bool bDontCache);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan30RemoveEncapsulatedResourceFileERK10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveEncapsulatedResourceFile(__IntPtr __instance, __IntPtr sName, int bEmitWarningOnFailure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23RemoveResourceImageFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveResourceImageFile(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23RemoveFixedKeyTableFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveFixedKeyTableFile(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23RemoveResourceDirectoryERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveResourceDirectory(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14RemoveManifestERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveManifest(__IntPtr __instance, __IntPtr sManifestHash);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan15ResumeServicingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResumeServicing(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan12SetResObjectERK7CResReftP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetResObject(__IntPtr __instance, __IntPtr cResRef, ushort nType, __IntPtr pNewRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan22SetTotalResourceMemoryEl", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetTotalResourceMemory(__IntPtr __instance, long totalAvailableMemory);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16SuspendServicingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SuspendServicing(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan6UpdateEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Update(__IntPtr __instance, uint nTimeSlice);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan30UpdateEncapsulatedResourceFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateEncapsulatedResourceFile(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23UpdateFixedKeyTableFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateFixedKeyTableFile(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23UpdateResourceDirectoryERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateResourceDirectory(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14UpdateManifestERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateManifest(__IntPtr __instance, __IntPtr sManifestHash);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan18GetResTypeFromFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetResTypeFromFile(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan17GetResRefFromFileER7CResRefRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetResRefFromFile(__IntPtr __instance, __IntPtr cResRef, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan11GetKeyEntryERK7CResReftPP12CExoKeyTablePP14CKeyTableEntryb", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetKeyEntry(__IntPtr __instance, __IntPtr cResRef, ushort nType, __IntPtr pNewTable, __IntPtr pNewKey, bool bLogFailure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan13CancelRequestEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CancelRequest(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan6DemandEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Demand(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan4DumpEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Dump(__IntPtr __instance, __IntPtr pRes, int bRemove);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan7ReleaseEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Release(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan7RequestEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Request(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan7ReadRawEP4CResiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadRaw(__IntPtr __instance, __IntPtr pRes, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan12GetNewResRefERK7CResReftRS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNewResRef(__IntPtr __instance, __IntPtr cResRef, ushort nType, __IntPtr cTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan15CreateDirectoryE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CreateDirectory(__IntPtr __instance, __IntPtr sDirectory);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan13NukeDirectoryE10CExoStringii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NukeDirectory(__IntPtr __instance, __IntPtr sDirectory, int bDeleteAllFiles, int bDeleteAllSubDirectories);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14CleanDirectoryE10CExoStringii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CleanDirectory(__IntPtr __instance, __IntPtr sDirectory, int bDeleteSubDirectories, int bCleanSubDirectories);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan10RemoveFileERK10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveFile(__IntPtr __instance, __IntPtr sFile, ushort nResType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16GetFreeDiskSpaceERK10CExoStringPm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFreeDiskSpace(__IntPtr __instance, __IntPtr sDirectory, ulong* pSpaceAvailable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan13GetTableCountEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTableCount(__IntPtr __instance, __IntPtr pRes, int bCountStatic);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan15GetIsStaticTypeEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsStaticType(__IntPtr __instance, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23RemoveFromToBeFreedListEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromToBeFreedList(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan11AddKeyTableEjRK10CExoStringjPhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddKeyTable(__IntPtr __instance, uint nPriority, __IntPtr sName, uint nTableType, byte* pCipher, int bDetectChanges);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14RemoveKeyTableERK10CExoStringji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveKeyTable(__IntPtr __instance, __IntPtr sName, uint nTableType, int bEmitWarningOnFailure);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16CountKeyTablesOfEiRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ulong CountKeyTablesOf(__IntPtr __instance, int type, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan11AddOverrideERK7CResRefS2_t", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddOverride(__IntPtr __instance, __IntPtr oldname, __IntPtr newname, ushort restype);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14RemoveOverrideERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveOverride(__IntPtr __instance, __IntPtr name, ushort restype);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14ClearOverridesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearOverrides(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan13WipeDirectoryE10CExoStringiiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WipeDirectory(__IntPtr __instance, __IntPtr sDirectory, int bDeleteAllFiles, int bRemoveDirectory, int bDeleteAllSubDirectoryFiles, int bDeleteAllSubDirectories);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan4FreeEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Free(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan8GetTableEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTable(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan6MallocEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Malloc(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan20ServiceFromDirectoryEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromDirectory(__IntPtr __instance, __IntPtr pRes, int bAsync);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23ServiceFromEncapsulatedEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromEncapsulated(__IntPtr __instance, __IntPtr pRes, int bAsync);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan18ServiceFromResFileEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromResFile(__IntPtr __instance, __IntPtr pRes, int bAsync);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan16ServiceFromImageEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromImage(__IntPtr __instance, __IntPtr pRes, int bAsync);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan19ServiceFromManifestEP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromManifest(__IntPtr __instance, __IntPtr pRes, int bAsync);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan14UpdateKeyTableERK10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateKeyTable(__IntPtr __instance, __IntPtr sName, uint nTableType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan23ServiceFromDirectoryRawEP4CResiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromDirectoryRaw(__IntPtr __instance, __IntPtr pRes, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan26ServiceFromEncapsulatedRawEP4CResiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromEncapsulatedRaw(__IntPtr __instance, __IntPtr pRes, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan21ServiceFromResFileRawEP4CResiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromResFileRaw(__IntPtr __instance, __IntPtr pRes, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan19ServiceFromImageRawEP4CResiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceFromImageRaw(__IntPtr __instance, __IntPtr pRes, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan11GetOverrideERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetOverride(__IntPtr @return, __IntPtr __instance, __IntPtr name, ushort restype);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan22GetTotalPhysicalMemoryEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern long GetTotalPhysicalMemory(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan22ServiceCurrentAsyncResEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServiceCurrentAsyncRes(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN10CExoResMan9FreeChunkEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FreeChunk(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoResMan> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoResMan>();

        protected bool __ownsNativeInstance;

        internal static CExoResMan __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoResMan(native.ToPointer(), skipVTables);
        }

        internal static CExoResMan __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoResMan)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoResMan __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoResMan(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoResMan.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoResMan(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoResMan(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoResMan()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoResMan.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoResMan(global::NWN.LowLevel.CExoResMan _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoResMan.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoResMan __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetupDefaultSearchPath()
        {
            __Internal.SetupDefaultSearchPath(__Instance);
        }

        public int AddEncapsulatedResourceFile(global::NWN.LowLevel.CExoString sName, uint nPriority)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.AddEncapsulatedResourceFile(__Instance, __arg0, nPriority);
            return __ret;
        }

        public int AddResourceImageFile(global::NWN.LowLevel.CExoString sName, byte* pCipher, uint nPriority)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.AddResourceImageFile(__Instance, __arg0, pCipher, nPriority);
            return __ret;
        }

        public int AddFixedKeyTableFile(global::NWN.LowLevel.CExoString sName, uint nPriority)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.AddFixedKeyTableFile(__Instance, __arg0, nPriority);
            return __ret;
        }

        public int AddResourceDirectory(global::NWN.LowLevel.CExoString sName, uint nPriority, int bDetectChanges)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.AddResourceDirectory(__Instance, __arg0, nPriority, bDetectChanges);
            return __ret;
        }

        public int AddManifest(global::NWN.LowLevel.CExoString manifestHash, uint nPriority)
        {
            if (ReferenceEquals(manifestHash, null))
                throw new global::System.ArgumentNullException("manifestHash", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = manifestHash.__Instance;
            var __ret = __Internal.AddManifest(__Instance, __arg0, nPriority);
            return __ret;
        }

        public void DumpAll()
        {
            __Internal.DumpAll(__Instance);
        }

        public void DumpAllOfType(ushort nType)
        {
            __Internal.DumpAllOfType(__Instance, nType);
        }

        public void FreeResourceData(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            __Internal.FreeResourceData(__Instance, __arg0);
        }

        public int Exists(global::NWN.LowLevel.CResRef cResRef, ushort nType, ref uint pTableType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            fixed (uint* __pTableType2 = &pTableType)
            {
                var __arg2 = __pTableType2;
                var __ret = __Internal.Exists(__Instance, __arg0, nType, __arg2);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoLocString GetEncapsulatedFileDescription(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = new global::NWN.LowLevel.CExoLocString.__Internal();
            __Internal.GetEncapsulatedFileDescription(new IntPtr(&__ret), __Instance, __arg0);
            return global::NWN.LowLevel.CExoLocString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CRes GetResObject(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.GetResObject(__Instance, __arg0, nType);
            var __result0 = global::NWN.LowLevel.CRes.__GetOrCreateInstance(__ret, true);
            return __result0;
        }

        public global::NWN.LowLevel.CExoStringList GetResOfType(ushort nType, int bERFOnly)
        {
            var __ret = __Internal.GetResOfType(__Instance, nType, bERFOnly);
            var __result0 = global::NWN.LowLevel.CExoStringList.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CExoStringList GetResOfType(ushort nType, global::NWN.LowLevel.CRes pRes)
        {
            var __arg1 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.GetResOfType(__Instance, nType, __arg1);
            var __result0 = global::NWN.LowLevel.CExoStringList.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.RESID GetResID(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.GetResID(__Instance, __arg0, nType);
            return global::NWN.LowLevel.RESID.__CreateInstance(__ret);
        }

        public int ReleaseResObject(global::NWN.LowLevel.CRes pRes, bool bDontCache)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ReleaseResObject(__Instance, __arg0, bDontCache);
            return __ret;
        }

        public int RemoveEncapsulatedResourceFile(global::NWN.LowLevel.CExoString sName, int bEmitWarningOnFailure)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.RemoveEncapsulatedResourceFile(__Instance, __arg0, bEmitWarningOnFailure);
            return __ret;
        }

        public int RemoveResourceImageFile(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.RemoveResourceImageFile(__Instance, __arg0);
            return __ret;
        }

        public int RemoveFixedKeyTableFile(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.RemoveFixedKeyTableFile(__Instance, __arg0);
            return __ret;
        }

        public int RemoveResourceDirectory(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.RemoveResourceDirectory(__Instance, __arg0);
            return __ret;
        }

        public int RemoveManifest(global::NWN.LowLevel.CExoString sManifestHash)
        {
            if (ReferenceEquals(sManifestHash, null))
                throw new global::System.ArgumentNullException("sManifestHash", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sManifestHash.__Instance;
            var __ret = __Internal.RemoveManifest(__Instance, __arg0);
            return __ret;
        }

        public void ResumeServicing()
        {
            __Internal.ResumeServicing(__Instance);
        }

        public void SetResObject(global::NWN.LowLevel.CResRef cResRef, ushort nType, global::NWN.LowLevel.CRes pNewRes)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __arg2 = pNewRes is null ? __IntPtr.Zero : pNewRes.__Instance;
            __Internal.SetResObject(__Instance, __arg0, nType, __arg2);
        }

        public int SetTotalResourceMemory(long totalAvailableMemory)
        {
            var __ret = __Internal.SetTotalResourceMemory(__Instance, totalAvailableMemory);
            return __ret;
        }

        public void SuspendServicing()
        {
            __Internal.SuspendServicing(__Instance);
        }

        public void Update(uint nTimeSlice)
        {
            __Internal.Update(__Instance, nTimeSlice);
        }

        public int UpdateEncapsulatedResourceFile(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.UpdateEncapsulatedResourceFile(__Instance, __arg0);
            return __ret;
        }

        public int UpdateFixedKeyTableFile(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.UpdateFixedKeyTableFile(__Instance, __arg0);
            return __ret;
        }

        public int UpdateResourceDirectory(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.UpdateResourceDirectory(__Instance, __arg0);
            return __ret;
        }

        public int UpdateManifest(global::NWN.LowLevel.CExoString sManifestHash)
        {
            if (ReferenceEquals(sManifestHash, null))
                throw new global::System.ArgumentNullException("sManifestHash", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sManifestHash.__Instance;
            var __ret = __Internal.UpdateManifest(__Instance, __arg0);
            return __ret;
        }

        public ushort GetResTypeFromFile(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.GetResTypeFromFile(__Instance, __arg0);
            return __ret;
        }

        public void GetResRefFromFile(global::NWN.LowLevel.CResRef cResRef, global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            __Internal.GetResRefFromFile(__Instance, __arg0, __arg1);
        }

        public int GetKeyEntry(global::NWN.LowLevel.CResRef cResRef, ushort nType, global::NWN.LowLevel.CExoKeyTable pNewTable, global::NWN.LowLevel.CKeyTableEntry pNewKey, bool bLogFailure)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var ____arg2 = pNewTable is null ? __IntPtr.Zero : pNewTable.__Instance;
            var __arg2 = new __IntPtr(&____arg2);
            var ____arg3 = pNewKey is null ? __IntPtr.Zero : pNewKey.__Instance;
            var __arg3 = new __IntPtr(&____arg3);
            var __ret = __Internal.GetKeyEntry(__Instance, __arg0, nType, __arg2, __arg3, bLogFailure);
            return __ret;
        }

        public int CancelRequest(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.CancelRequest(__Instance, __arg0);
            return __ret;
        }

        public __IntPtr Demand(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.Demand(__Instance, __arg0);
            return __ret;
        }

        public void Dump(global::NWN.LowLevel.CRes pRes, int bRemove)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            __Internal.Dump(__Instance, __arg0, bRemove);
        }

        public int Release(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.Release(__Instance, __arg0);
            return __ret;
        }

        public int Request(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.Request(__Instance, __arg0);
            return __ret;
        }

        public int ReadRaw(global::NWN.LowLevel.CRes pRes, int nSize, sbyte* pBuffer)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ReadRaw(__Instance, __arg0, nSize, pBuffer);
            return __ret;
        }

        public int GetNewResRef(global::NWN.LowLevel.CResRef cResRef, ushort nType, global::NWN.LowLevel.CResRef cTarget)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            if (ReferenceEquals(cTarget, null))
                throw new global::System.ArgumentNullException("cTarget", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = cTarget.__Instance;
            var __ret = __Internal.GetNewResRef(__Instance, __arg0, nType, __arg2);
            return __ret;
        }

        public int CreateDirectory(global::NWN.LowLevel.CExoString sDirectory)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is passed by value.");
            var __arg0 = sDirectory.__Instance;
            var __ret = __Internal.CreateDirectory(__Instance, __arg0);
            return __ret;
        }

        public int NukeDirectory(global::NWN.LowLevel.CExoString sDirectory, int bDeleteAllFiles, int bDeleteAllSubDirectories)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is passed by value.");
            var __arg0 = sDirectory.__Instance;
            var __ret = __Internal.NukeDirectory(__Instance, __arg0, bDeleteAllFiles, bDeleteAllSubDirectories);
            return __ret;
        }

        public int CleanDirectory(global::NWN.LowLevel.CExoString sDirectory, int bDeleteSubDirectories, int bCleanSubDirectories)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is passed by value.");
            var __arg0 = sDirectory.__Instance;
            var __ret = __Internal.CleanDirectory(__Instance, __arg0, bDeleteSubDirectories, bCleanSubDirectories);
            return __ret;
        }

        public int RemoveFile(global::NWN.LowLevel.CExoString sFile, ushort nResType)
        {
            if (ReferenceEquals(sFile, null))
                throw new global::System.ArgumentNullException("sFile", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFile.__Instance;
            var __ret = __Internal.RemoveFile(__Instance, __arg0, nResType);
            return __ret;
        }

        public int GetFreeDiskSpace(global::NWN.LowLevel.CExoString sDirectory, ref ulong pSpaceAvailable)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sDirectory.__Instance;
            fixed (ulong* __pSpaceAvailable1 = &pSpaceAvailable)
            {
                var __arg1 = __pSpaceAvailable1;
                var __ret = __Internal.GetFreeDiskSpace(__Instance, __arg0, __arg1);
                return __ret;
            }
        }

        public int GetTableCount(global::NWN.LowLevel.CRes pRes, int bCountStatic)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.GetTableCount(__Instance, __arg0, bCountStatic);
            return __ret;
        }

        public int GetIsStaticType(ushort nType)
        {
            var __ret = __Internal.GetIsStaticType(__Instance, nType);
            return __ret;
        }

        public void RemoveFromToBeFreedList(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            __Internal.RemoveFromToBeFreedList(__Instance, __arg0);
        }

        public int AddKeyTable(uint nPriority, global::NWN.LowLevel.CExoString sName, uint nTableType, byte* pCipher, int bDetectChanges)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            var __ret = __Internal.AddKeyTable(__Instance, nPriority, __arg1, nTableType, pCipher, bDetectChanges);
            return __ret;
        }

        public int RemoveKeyTable(global::NWN.LowLevel.CExoString sName, uint nTableType, int bEmitWarningOnFailure)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.RemoveKeyTable(__Instance, __arg0, nTableType, bEmitWarningOnFailure);
            return __ret;
        }

        public ulong CountKeyTablesOf(int type, global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            var __ret = __Internal.CountKeyTablesOf(__Instance, type, __arg1);
            return __ret;
        }

        public void AddOverride(global::NWN.LowLevel.CResRef oldname, global::NWN.LowLevel.CResRef newname, ushort restype)
        {
            if (ReferenceEquals(oldname, null))
                throw new global::System.ArgumentNullException("oldname", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = oldname.__Instance;
            if (ReferenceEquals(newname, null))
                throw new global::System.ArgumentNullException("newname", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = newname.__Instance;
            __Internal.AddOverride(__Instance, __arg0, __arg1, restype);
        }

        public void RemoveOverride(global::NWN.LowLevel.CResRef name, ushort restype)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = name.__Instance;
            __Internal.RemoveOverride(__Instance, __arg0, restype);
        }

        public void ClearOverrides()
        {
            __Internal.ClearOverrides(__Instance);
        }

        public int WipeDirectory(global::NWN.LowLevel.CExoString sDirectory, int bDeleteAllFiles, int bRemoveDirectory, int bDeleteAllSubDirectoryFiles, int bDeleteAllSubDirectories)
        {
            if (ReferenceEquals(sDirectory, null))
                throw new global::System.ArgumentNullException("sDirectory", "Cannot be null because it is passed by value.");
            var __arg0 = sDirectory.__Instance;
            var __ret = __Internal.WipeDirectory(__Instance, __arg0, bDeleteAllFiles, bRemoveDirectory, bDeleteAllSubDirectoryFiles, bDeleteAllSubDirectories);
            return __ret;
        }

        public int Free(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.Free(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CExoKeyTable GetTable(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.GetTable(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CExoKeyTable.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int Malloc(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.Malloc(__Instance, __arg0);
            return __ret;
        }

        public int ServiceFromDirectory(global::NWN.LowLevel.CRes pRes, int bAsync)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromDirectory(__Instance, __arg0, bAsync);
            return __ret;
        }

        public int ServiceFromEncapsulated(global::NWN.LowLevel.CRes pRes, int bAsync)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromEncapsulated(__Instance, __arg0, bAsync);
            return __ret;
        }

        public int ServiceFromResFile(global::NWN.LowLevel.CRes pRes, int bAsync)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromResFile(__Instance, __arg0, bAsync);
            return __ret;
        }

        public int ServiceFromImage(global::NWN.LowLevel.CRes pRes, int bAsync)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromImage(__Instance, __arg0, bAsync);
            return __ret;
        }

        public int ServiceFromManifest(global::NWN.LowLevel.CRes pRes, int bAsync)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromManifest(__Instance, __arg0, bAsync);
            return __ret;
        }

        public int UpdateKeyTable(global::NWN.LowLevel.CExoString sName, uint nTableType)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.UpdateKeyTable(__Instance, __arg0, nTableType);
            return __ret;
        }

        public int ServiceFromDirectoryRaw(global::NWN.LowLevel.CRes pRes, int nSize, sbyte* pBuffer)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromDirectoryRaw(__Instance, __arg0, nSize, pBuffer);
            return __ret;
        }

        public int ServiceFromEncapsulatedRaw(global::NWN.LowLevel.CRes pRes, int nSize, sbyte* pBuffer)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromEncapsulatedRaw(__Instance, __arg0, nSize, pBuffer);
            return __ret;
        }

        public int ServiceFromResFileRaw(global::NWN.LowLevel.CRes pRes, int nSize, sbyte* pBuffer)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromResFileRaw(__Instance, __arg0, nSize, pBuffer);
            return __ret;
        }

        public int ServiceFromImageRaw(global::NWN.LowLevel.CRes pRes, int nSize, sbyte* pBuffer)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.ServiceFromImageRaw(__Instance, __arg0, nSize, pBuffer);
            return __ret;
        }

        public global::NWN.LowLevel.CResRef GetOverride(global::NWN.LowLevel.CResRef name, ushort restype)
        {
            if (ReferenceEquals(name, null))
                throw new global::System.ArgumentNullException("name", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = name.__Instance;
            var __ret = new global::NWN.LowLevel.CResRef.__Internal();
            __Internal.GetOverride(new IntPtr(&__ret), __Instance, __arg0, restype);
            return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
        }

        public long MNTotalPhysicalMemory
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalPhysicalMemory;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalPhysicalMemory = value;
            }
        }

        public long MNTotalAvailableMemory
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalAvailableMemory;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalAvailableMemory = value;
            }
        }

        public long MNAvailableMemory
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAvailableMemory;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAvailableMemory = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoKeyTable> MPKeyTables
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoKeyTable>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pKeyTables));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pKeyTables = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CRes> MLstToBeFreed
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CRes>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstToBeFreed));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstToBeFreed = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CRes> MLstAsyncResQueue
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CRes>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstAsyncResQueue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstAsyncResQueue = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CRes MPCurrentAsyncRes
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CRes.__GetOrCreateInstance(((__Internal*)__Instance)->m_pCurrentAsyncRes, true);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pCurrentAsyncRes = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoFile MPAsyncFile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoFile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pAsyncFile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pAsyncFile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBAsyncSuspended
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAsyncSuspended;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAsyncSuspended = value;
            }
        }

        public uint MNTotalDemands
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalDemands;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalDemands = value;
            }
        }

        public uint MNTotalCacheHits
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalCacheHits;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalCacheHits = value;
            }
        }

        public uint MNTotalOldReleases
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalOldReleases;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalOldReleases = value;
            }
        }

        public uint MNTotalNewReleases
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalNewReleases;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalNewReleases = value;
            }
        }

        public uint MNTotalLookupFailures
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalLookupFailures;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalLookupFailures = value;
            }
        }

        public bool MBLogLookupFailures
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLogLookupFailures != 0;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLogLookupFailures = (byte) (value ? 1 : 0);
            }
        }

        public global::NWN.LowLevel.CResRef MCLastFailedLookup
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cLastFailedLookup));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cLastFailedLookup = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public ushort MNLastFailedLookupType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastFailedLookupType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastFailedLookupType = value;
            }
        }

        public int MBOverrideAll
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOverrideAll;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOverrideAll = value;
            }
        }

        public global::NWN.LowLevel.CNWSync MPNWSync
        {
            get
            {
                return global::NWN.LowLevel.CNWSync.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pNWSync));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pNWSync = *(global::NWN.LowLevel.CNWSync.__Internal*) value.__Instance;
            }
        }

        public __IntPtr MPResourceOverrideMap
        {
            get
            {
                return ((__Internal*)__Instance)->m_pResourceOverrideMap;
            }

            set
            {
                ((__Internal*)__Instance)->m_pResourceOverrideMap = (__IntPtr) value;
            }
        }

        public long TotalPhysicalMemory
        {
            get
            {
                var __ret = __Internal.GetTotalPhysicalMemory(__Instance);
                return __ret;
            }
        }

        public int ServiceCurrentAsyncRes
        {
            get
            {
                var __ret = __Internal.ServiceCurrentAsyncRes(__Instance);
                return __ret;
            }
        }

        public int FreeChunk
        {
            get
            {
                var __ret = __Internal.FreeChunk(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
