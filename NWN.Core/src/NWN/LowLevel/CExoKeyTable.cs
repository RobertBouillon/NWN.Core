// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoKeyTable : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 120)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_bLoaded;

            [FieldOffset(4)]
            internal int m_bExcludeFromSearches;

            [FieldOffset(8)]
            internal uint m_nTableEntries;

            [FieldOffset(16)]
            internal __IntPtr m_pEntries;

            [FieldOffset(24)]
            internal uint m_nSearchs;

            [FieldOffset(28)]
            internal uint m_nWorstSearch;

            [FieldOffset(32)]
            internal uint m_nTableType;

            [FieldOffset(40)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sName;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDirectory;

            [FieldOffset(72)]
            internal uint m_nTableID;

            [FieldOffset(76)]
            internal uint m_nNumPackedFiles;

            [FieldOffset(80)]
            internal __IntPtr m_pExoPackedFile;

            [FieldOffset(88)]
            internal int m_bIsOverride;

            [FieldOffset(92)]
            internal int m_bAllowDynamicReload;

            [FieldOffset(96)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sResolvedAliasCache;

            [FieldOffset(112)]
            internal long m_nLastModified;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTableC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTableC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTableD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable20AddDirectoryContentsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddDirectoryContents(__IntPtr __instance, int bPopulateTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable23AddEncapsulatedContentsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEncapsulatedContents(__IntPtr __instance, int bPopulateTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable24AddResourceImageContentsEiPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddResourceImageContents(__IntPtr __instance, int bPopulateTable, byte* pCipher);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable19AddManifestContentsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddManifestContents(__IntPtr __instance, int bPopulateTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable6AddKeyERK7CResReft5RESIDi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AddKey(__IntPtr __instance, __IntPtr cNewResRef, ushort nType, global::NWN.LowLevel.RESID.__Internal nNewResID, int bPopulateEntry);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable19AddKeyTableContentsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddKeyTableContents(__IntPtr __instance, int bPopulateTable);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13AllocateTableEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr AllocateTable(__IntPtr __instance, uint nTableEntries, int bKeepInMemory);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13BuildNewTableEjRK10CExoStringjiPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int BuildNewTable(__IntPtr __instance, uint nTableType, __IntPtr sName, uint nTableID, int bPopulateTable, byte* pCipher);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable15DeleteTableListEP14CExoLinkedListI13CKeyTableInfoE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DeleteTableList(__IntPtr __instance, __IntPtr lKeyTables);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable12DestroyTableEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DestroyTable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable7FindKeyERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FindKey(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable7FindKeyEP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr FindKey(__IntPtr __instance, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13GetKeysOfTypeEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetKeysOfType(__IntPtr __instance, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable6GetResERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetRes(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable8GetResIDERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.RESID.__Internal GetResID(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13GetTableEntryEjR7CResRefRt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTableEntry(__IntPtr __instance, uint nIndex, __IntPtr cResRef, ushort* nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13GetTableIndexERjRK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTableIndex(__IntPtr __instance, uint* nIndex, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable4HashERK7CResReft", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint Hash(__IntPtr __instance, __IntPtr cResRef, ushort nType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13LocateBifFileERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LocateBifFile(__IntPtr __instance, __IntPtr sFileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable12RebuildTableEPh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RebuildTable(__IntPtr __instance, byte* pCipher);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable13GetEntryCountEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetEntryCount(__IntPtr __instance, int bCountStatic);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable21SetAllowDynamicReloadEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetAllowDynamicReload(__IntPtr __instance, int v);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable21DropContentsFromCacheEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DropContentsFromCache(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN12CExoKeyTable30CheckForModificationsInStorageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckForModificationsInStorage(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoKeyTable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoKeyTable>();

        protected bool __ownsNativeInstance;

        internal static CExoKeyTable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoKeyTable(native.ToPointer(), skipVTables);
        }

        internal static CExoKeyTable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoKeyTable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoKeyTable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoKeyTable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoKeyTable.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoKeyTable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoKeyTable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CExoKeyTable()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoKeyTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CExoKeyTable(global::NWN.LowLevel.CExoKeyTable _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoKeyTable.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoKeyTable __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AddDirectoryContents(int bPopulateTable)
        {
            var __ret = __Internal.AddDirectoryContents(__Instance, bPopulateTable);
            return __ret;
        }

        public int AddEncapsulatedContents(int bPopulateTable)
        {
            var __ret = __Internal.AddEncapsulatedContents(__Instance, bPopulateTable);
            return __ret;
        }

        public int AddResourceImageContents(int bPopulateTable, byte* pCipher)
        {
            var __ret = __Internal.AddResourceImageContents(__Instance, bPopulateTable, pCipher);
            return __ret;
        }

        public int AddManifestContents(int bPopulateTable)
        {
            var __ret = __Internal.AddManifestContents(__Instance, bPopulateTable);
            return __ret;
        }

        public global::NWN.LowLevel.CKeyTableEntry AddKey(global::NWN.LowLevel.CResRef cNewResRef, ushort nType, global::NWN.LowLevel.RESID nNewResID, int bPopulateEntry)
        {
            if (ReferenceEquals(cNewResRef, null))
                throw new global::System.ArgumentNullException("cNewResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cNewResRef.__Instance;
            if (ReferenceEquals(nNewResID, null))
                throw new global::System.ArgumentNullException("nNewResID", "Cannot be null because it is passed by value.");
            var __arg2 = nNewResID.__Instance;
            var __ret = __Internal.AddKey(__Instance, __arg0, nType, *(global::NWN.LowLevel.RESID.__Internal*) __arg2, bPopulateEntry);
            var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int AddKeyTableContents(int bPopulateTable)
        {
            var __ret = __Internal.AddKeyTableContents(__Instance, bPopulateTable);
            return __ret;
        }

        public global::NWN.LowLevel.CKeyTableEntry AllocateTable(uint nTableEntries, int bKeepInMemory)
        {
            var __ret = __Internal.AllocateTable(__Instance, nTableEntries, bKeepInMemory);
            var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int BuildNewTable(uint nTableType, global::NWN.LowLevel.CExoString sName, uint nTableID, int bPopulateTable, byte* pCipher)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sName.__Instance;
            var __ret = __Internal.BuildNewTable(__Instance, nTableType, __arg1, nTableID, bPopulateTable, pCipher);
            return __ret;
        }

        public void DeleteTableList(global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CKeyTableInfo> lKeyTables)
        {
            var __arg0 = lKeyTables is null ? __IntPtr.Zero : lKeyTables.__Instance;
            __Internal.DeleteTableList(__Instance, __arg0);
        }

        public void DestroyTable()
        {
            __Internal.DestroyTable(__Instance);
        }

        public global::NWN.LowLevel.CKeyTableEntry FindKey(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.FindKey(__Instance, __arg0, nType);
            var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CKeyTableEntry FindKey(global::NWN.LowLevel.CRes pRes)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.FindKey(__Instance, __arg0);
            var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CExoStringList GetKeysOfType(ushort nType)
        {
            var __ret = __Internal.GetKeysOfType(__Instance, nType);
            var __result0 = global::NWN.LowLevel.CExoStringList.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CRes GetRes(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.GetRes(__Instance, __arg0, nType);
            var __result0 = global::NWN.LowLevel.CRes.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.RESID GetResID(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.GetResID(__Instance, __arg0, nType);
            return global::NWN.LowLevel.RESID.__CreateInstance(__ret);
        }

        public int GetTableEntry(uint nIndex, global::NWN.LowLevel.CResRef cResRef, ref ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = cResRef.__Instance;
            fixed (ushort* __nType2 = &nType)
            {
                var __arg2 = __nType2;
                var __ret = __Internal.GetTableEntry(__Instance, nIndex, __arg1, __arg2);
                return __ret;
            }
        }

        public int GetTableIndex(ref uint nIndex, global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            fixed (uint* __nIndex0 = &nIndex)
            {
                var __arg0 = __nIndex0;
                if (ReferenceEquals(cResRef, null))
                    throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
                var __arg1 = cResRef.__Instance;
                var __ret = __Internal.GetTableIndex(__Instance, __arg0, __arg1, nType);
                return __ret;
            }
        }

        public uint Hash(global::NWN.LowLevel.CResRef cResRef, ushort nType)
        {
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = cResRef.__Instance;
            var __ret = __Internal.Hash(__Instance, __arg0, nType);
            return __ret;
        }

        public int LocateBifFile(global::NWN.LowLevel.CExoString sFileName)
        {
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            var __ret = __Internal.LocateBifFile(__Instance, __arg0);
            return __ret;
        }

        public void RebuildTable(byte* pCipher)
        {
            __Internal.RebuildTable(__Instance, pCipher);
        }

        public int GetEntryCount(int bCountStatic)
        {
            var __ret = __Internal.GetEntryCount(__Instance, bCountStatic);
            return __ret;
        }

        public void SetAllowDynamicReload(int v)
        {
            __Internal.SetAllowDynamicReload(__Instance, v);
        }

        public void DropContentsFromCache()
        {
            __Internal.DropContentsFromCache(__Instance);
        }

        public int CheckForModificationsInStorage()
        {
            var __ret = __Internal.CheckForModificationsInStorage(__Instance);
            return __ret;
        }

        public int MBLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLoaded;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLoaded = value;
            }
        }

        public int MBExcludeFromSearches
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExcludeFromSearches;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExcludeFromSearches = value;
            }
        }

        public uint MNTableEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTableEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTableEntries = value;
            }
        }

        public global::NWN.LowLevel.CKeyTableEntry MPEntries
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pEntries, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pEntries = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNSearchs
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSearchs;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSearchs = value;
            }
        }

        public uint MNWorstSearch
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWorstSearch;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWorstSearch = value;
            }
        }

        public uint MNTableType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTableType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTableType = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSDirectory
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDirectory));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDirectory = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public uint MNTableID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTableID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTableID = value;
            }
        }

        public uint MNNumPackedFiles
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumPackedFiles;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumPackedFiles = value;
            }
        }

        public global::NWN.LowLevel.CExoPackedFile MPExoPackedFile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoPackedFile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pExoPackedFile, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_pExoPackedFile = new __IntPtr(&__value);
            }
        }

        public int MBIsOverride
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsOverride;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsOverride = value;
            }
        }

        public int MBAllowDynamicReload
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllowDynamicReload;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllowDynamicReload = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSResolvedAliasCache
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sResolvedAliasCache));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sResolvedAliasCache = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public long MNLastModified
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLastModified;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLastModified = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
