// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CExoInputInternal
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoInputInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoInputInternal>();

        protected bool __ownsNativeInstance;

        internal static CExoInputInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoInputInternal(native.ToPointer(), skipVTables);
        }

        internal static CExoInputInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoInputInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoInputInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoInputInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoInputInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoInputInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CExoInput : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CExoInput;

            [FieldOffset(8)]
            internal __IntPtr m_pcExoInputInternal;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInputC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInputC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput8AddEventEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddEvent(__IntPtr __instance, __IntPtr pEvent);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput8AddEventEijjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddEvent(__IntPtr __instance, int nInputDevice, uint nInputDeviceElement, uint nValue, uint nTimeStamp);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput17AddInputEventDescE10CExoStringjiiiij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddInputEventDesc(__IntPtr __instance, __IntPtr label, uint id, int inputDeviceType, int activeInputMode, int inputClass, int inputDevice, uint inputElement);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput22ClearAllInputEventDescEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAllInputEventDesc(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput11ClearEventsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearEvents(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput16DumpEventsToFileE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DumpEventsToFile(__IntPtr __instance, __IntPtr fileName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput16DumpEventsToFileEP8CExoFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DumpEventsToFile_1(__IntPtr __instance, __IntPtr file);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput16WriteEventToFileEjiP8CExoFile", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteEventToFile(__IntPtr __instance, uint nProcessTime, int nEvent, __IntPtr file);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput9GetEventsERiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetEvents(__IntPtr __instance, int* numberEvents, int activeInputMode, int inputClass);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput15GetButtonStatesERiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetButtonStates(__IntPtr __instance, int* numberEvents, int activeInputMode, int inputClass);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput14KeyboardModeOnEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void KeyboardModeOn(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput15KeyboardModeOffEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void KeyboardModeOff(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput14CheckModalKeysEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckModalKeys(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput27SetCaptureKeyboardScanCodesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCaptureKeyboardScanCodes(__IntPtr __instance, int bCaptureKeyboardScanCodes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput14ResetModalKeysEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ResetModalKeys(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput11SetMousePosEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMousePos(__IntPtr __instance, int nX, int nY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput12SetMouseModeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetMouseMode(__IntPtr __instance, byte nMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput15IsRemappableKeyEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsRemappableKey(__IntPtr __instance, byte nKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput9GetActiveEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetActive(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput9SetActiveEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetActive(__IntPtr __instance, int Active);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput15GetKeyboardModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetKeyboardMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput12GetModalKeysEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int* GetModalKeys(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput18GetNumberJoysticksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetNumberJoysticks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput16IsJoystickActiveEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsJoystickActive(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput31GetLastCapturedKeyboardScanCodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetLastCapturedKeyboardScanCode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CExoInput12GetMouseModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetMouseMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK9CExoInput36GetMilliSecondsSinceLastUserActivityEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetMilliSecondsSinceLastUserActivity(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoInput> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoInput>();

        protected bool __ownsNativeInstance;

        internal static CExoInput __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoInput(native.ToPointer(), skipVTables);
        }

        internal static CExoInput __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoInput)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoInput __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CExoInput)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CExoInput __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoInput(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CExoInput.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CExoInput(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoInput(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CExoInput()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoInput.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CExoInput");
        }

        public CExoInput(global::NWN.LowLevel.CExoInput _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CExoInput.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CExoInput");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CExoInput __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CExoInput.__Internal*) __Instance)->vptr_CExoInput = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void Configure()
        {
            var ___ConfigureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 2);
            ___ConfigureDelegate(__Instance);
        }

        public int AddEvent(__IntPtr pEvent)
        {
            var __ret = __Internal.AddEvent(__Instance, pEvent);
            return __ret;
        }

        public void AddEvent(int nInputDevice, uint nInputDeviceElement, uint nValue, uint nTimeStamp)
        {
            __Internal.AddEvent(__Instance, nInputDevice, nInputDeviceElement, nValue, nTimeStamp);
        }

        public void AddInputEventDesc(global::NWN.LowLevel.CExoString label, uint id, int inputDeviceType, int activeInputMode, int inputClass, int inputDevice, uint inputElement)
        {
            if (ReferenceEquals(label, null))
                throw new global::System.ArgumentNullException("label", "Cannot be null because it is passed by value.");
            var __arg0 = label.__Instance;
            __Internal.AddInputEventDesc(__Instance, __arg0, id, inputDeviceType, activeInputMode, inputClass, inputDevice, inputElement);
        }

        public void ClearAllInputEventDesc()
        {
            __Internal.ClearAllInputEventDesc(__Instance);
        }

        public void ClearEvents()
        {
            __Internal.ClearEvents(__Instance);
        }

        public void DumpEventsToFile(global::NWN.LowLevel.CExoString fileName)
        {
            if (ReferenceEquals(fileName, null))
                throw new global::System.ArgumentNullException("fileName", "Cannot be null because it is passed by value.");
            var __arg0 = fileName.__Instance;
            __Internal.DumpEventsToFile(__Instance, __arg0);
        }

        public void DumpEventsToFile(global::NWN.LowLevel.CExoFile file)
        {
            var __arg0 = file is null ? __IntPtr.Zero : file.__Instance;
            __Internal.DumpEventsToFile_1(__Instance, __arg0);
        }

        public void WriteEventToFile(uint nProcessTime, int nEvent, global::NWN.LowLevel.CExoFile file)
        {
            var __arg2 = file is null ? __IntPtr.Zero : file.__Instance;
            __Internal.WriteEventToFile(__Instance, nProcessTime, nEvent, __arg2);
        }

        public global::NWN.LowLevel.CExoInputEvent GetEvents(ref int numberEvents, int activeInputMode, int inputClass)
        {
            fixed (int* __numberEvents0 = &numberEvents)
            {
                var __arg0 = __numberEvents0;
                var __ret = __Internal.GetEvents(__Instance, __arg0, activeInputMode, inputClass);
                var __result0 = global::NWN.LowLevel.CExoInputEvent.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CExoInputEvent GetButtonStates(ref int numberEvents, int activeInputMode, int inputClass)
        {
            fixed (int* __numberEvents0 = &numberEvents)
            {
                var __arg0 = __numberEvents0;
                var __ret = __Internal.GetButtonStates(__Instance, __arg0, activeInputMode, inputClass);
                var __result0 = global::NWN.LowLevel.CExoInputEvent.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public void KeyboardModeOn()
        {
            __Internal.KeyboardModeOn(__Instance);
        }

        public void KeyboardModeOff()
        {
            __Internal.KeyboardModeOff(__Instance);
        }

        public void CheckModalKeys()
        {
            __Internal.CheckModalKeys(__Instance);
        }

        public void SetCaptureKeyboardScanCodes(int bCaptureKeyboardScanCodes)
        {
            __Internal.SetCaptureKeyboardScanCodes(__Instance, bCaptureKeyboardScanCodes);
        }

        public void ResetModalKeys()
        {
            __Internal.ResetModalKeys(__Instance);
        }

        public void SetMousePos(int nX, int nY)
        {
            __Internal.SetMousePos(__Instance, nX, nY);
        }

        public int SetMouseMode(byte nMode)
        {
            var __ret = __Internal.SetMouseMode(__Instance, nMode);
            return __ret;
        }

        public int IsRemappableKey(byte nKey)
        {
            var __ret = __Internal.IsRemappableKey(__Instance, nKey);
            return __ret;
        }

        public global::NWN.LowLevel.CExoInputInternal MPcExoInputInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoInputInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcExoInputInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcExoInputInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int Active
        {
            get
            {
                var __ret = __Internal.GetActive(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetActive(__Instance, value);
            }
        }

        public int KeyboardMode
        {
            get
            {
                var __ret = __Internal.GetKeyboardMode(__Instance);
                return __ret;
            }
        }

        public int* ModalKeys
        {
            get
            {
                var __ret = __Internal.GetModalKeys(__Instance);
                return __ret;
            }
        }

        public byte NumberJoysticks
        {
            get
            {
                var __ret = __Internal.GetNumberJoysticks(__Instance);
                return __ret;
            }
        }

        public int IsJoystickActive
        {
            get
            {
                var __ret = __Internal.IsJoystickActive(__Instance);
                return __ret;
            }
        }

        public ushort LastCapturedKeyboardScanCode
        {
            get
            {
                var __ret = __Internal.GetLastCapturedKeyboardScanCode(__Instance);
                return __ret;
            }
        }

        public byte MouseMode
        {
            get
            {
                var __ret = __Internal.GetMouseMode(__Instance);
                return __ret;
            }
        }

        public uint MilliSecondsSinceLastUserActivity
        {
            get
            {
                var __ret = __Internal.GetMilliSecondsSinceLastUserActivity(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CExoInput()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CExoInput.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void Configure()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _ConfigureDelegateInstance;

        private static void _ConfigureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CExoInput.__GetInstance(__instance);
            __target.Configure();
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[2];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _ConfigureDelegateInstance += _ConfigureDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_ConfigureDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 5);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            VTables.Methods[0] = new Delegate[5];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
