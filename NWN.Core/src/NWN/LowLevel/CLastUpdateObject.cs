// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CLastUpdateObject : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 616)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CNWSPlayerLUOAppearanceInfo.__Internal m_cAppearance;

            [FieldOffset(144)]
            internal int m_bActive;

            [FieldOffset(148)]
            internal byte m_nObjectType;

            [FieldOffset(150)]
            internal ushort m_nSoundSet;

            [FieldOffset(152)]
            internal int m_nFootstepType;

            [FieldOffset(156)]
            internal uint m_nId;

            [FieldOffset(160)]
            internal global::NWN.LowLevel.Vector.__Internal m_vPosition;

            [FieldOffset(172)]
            internal uint m_oidArea;

            [FieldOffset(176)]
            internal global::NWN.LowLevel.Vector.__Internal m_vOrientation;

            [FieldOffset(188)]
            internal int m_nAnimation;

            [FieldOffset(192)]
            internal float m_fAnimSpeed;

            [FieldOffset(196)]
            internal byte m_nWalkAnimation;

            [FieldOffset(200)]
            internal global::NWN.LowLevel.Vector.__Internal m_vWalkTo;

            [FieldOffset(212)]
            internal byte m_nPlayerPathNumber;

            [FieldOffset(213)]
            internal byte m_nWalkedPathCutVerify;

            [FieldOffset(214)]
            internal ushort m_nAIState;

            [FieldOffset(216)]
            internal byte m_nAIStateAction;

            [FieldOffset(218)]
            internal ushort m_nAIStateActivities;

            [FieldOffset(220)]
            internal int m_bCombatState;

            [FieldOffset(224)]
            internal uint m_oidAIStateActee;

            [FieldOffset(228)]
            internal uint m_oidLockOnTarget;

            [FieldOffset(232)]
            internal uint m_oidAttackTarget;

            [FieldOffset(236)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cPortrait;

            [FieldOffset(268)]
            internal ushort m_nPortraitId;

            [FieldOffset(272)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sLocFirstName;

            [FieldOffset(288)]
            internal global::NWN.LowLevel.CExoLocString.__Internal m_sLocLastName;

            [FieldOffset(304)]
            internal float m_fWalkRate;

            [FieldOffset(308)]
            internal float m_fRunRate;

            [FieldOffset(312)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstLoopingVisualEffects;

            [FieldOffset(328)]
            internal ushort m_nAssociateState;

            [FieldOffset(330)]
            internal byte m_nDamageLevel;

            [FieldOffset(331)]
            internal byte m_nDomain1;

            [FieldOffset(332)]
            internal byte m_nDomain2;

            [FieldOffset(333)]
            internal byte m_nSchool;

            [FieldOffset(334)]
            internal short m_nCurrentHitPoints;

            [FieldOffset(336)]
            internal short m_nBaseHitPoints;

            [FieldOffset(338)]
            internal short m_nTemporaryHitPoints;

            [FieldOffset(340)]
            internal short m_nMaxHitPoints;

            [FieldOffset(344)]
            internal int m_bFreeWill;

            [FieldOffset(348)]
            internal int m_bPartyLeader;

            [FieldOffset(352)]
            internal int m_bSingletonParty;

            [FieldOffset(356)]
            internal int m_bInvitedToParty;

            [FieldOffset(360)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_poidCreatureList;

            [FieldOffset(376)]
            internal int m_bTrapped;

            [FieldOffset(380)]
            internal int m_bFlagged;

            [FieldOffset(384)]
            internal int m_nTrapFaction;

            [FieldOffset(388)]
            internal int m_bLocked;

            [FieldOffset(392)]
            internal int m_bLockable;

            [FieldOffset(396)]
            internal int m_bRecoverable;

            [FieldOffset(400)]
            internal int m_bClickable;

            [FieldOffset(404)]
            internal byte m_nAIStateReaction;

            [FieldOffset(408)]
            internal uint m_oidMaster;

            [FieldOffset(412)]
            internal ushort m_nAssociateType;

            [FieldOffset(416)]
            internal int m_bSummonedAnimalCompanion;

            [FieldOffset(420)]
            internal int m_bSummonedFamiliar;

            [FieldOffset(424)]
            internal int m_bObjectSeen;

            [FieldOffset(428)]
            internal int m_bObjectHeard;

            [FieldOffset(432)]
            internal int m_bObjectInvisible;

            [FieldOffset(436)]
            internal ushort m_nRace;

            [FieldOffset(440)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sSubRace;

            [FieldOffset(456)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDeity;

            [FieldOffset(472)]
            internal byte m_nGender;

            [FieldOffset(473)]
            internal fixed byte m_nClass[3];

            [FieldOffset(476)]
            internal fixed byte m_nLevel[3];

            [FieldOffset(480)]
            internal short m_nAlignmentLawChaos;

            [FieldOffset(482)]
            internal short m_nAlignmentGoodEvil;

            [FieldOffset(484)]
            internal int m_bSelectableWhenDead;

            [FieldOffset(488)]
            internal int m_bLootable;

            [FieldOffset(492)]
            internal int m_bPC;

            [FieldOffset(496)]
            internal byte m_nAbilityBaseSTR;

            [FieldOffset(497)]
            internal byte m_nAbilityBaseDEX;

            [FieldOffset(498)]
            internal byte m_nAbilityBaseCON;

            [FieldOffset(499)]
            internal byte m_nAbilityBaseINT;

            [FieldOffset(500)]
            internal byte m_nAbilityBaseWIS;

            [FieldOffset(501)]
            internal byte m_nAbilityBaseCHA;

            [FieldOffset(502)]
            internal byte m_nAbilityFinalSTR;

            [FieldOffset(503)]
            internal byte m_nAbilityFinalDEX;

            [FieldOffset(504)]
            internal byte m_nAbilityFinalCON;

            [FieldOffset(505)]
            internal byte m_nAbilityFinalINT;

            [FieldOffset(506)]
            internal byte m_nAbilityFinalWIS;

            [FieldOffset(507)]
            internal byte m_nAbilityFinalCHA;

            [FieldOffset(508)]
            internal global::NWN.LowLevel.ObjectVisualTransformData.__Internal m_pObjectVisualTransformData;

            [FieldOffset(552)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lMaterialShaderParameters;

            [FieldOffset(568)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lTextureReplaceInfo;

            [FieldOffset(584)]
            internal global::NWN.LowLevel.Vector.__Internal m_vHiliteColor;

            [FieldOffset(596)]
            internal int m_nMouseCursor;

            [FieldOffset(600)]
            internal int m_nUpdateDisplayNameSeq;

            [FieldOffset(604)]
            internal int m_nUpdateHiddenSeq;

            [FieldOffset(608)]
            internal __IntPtr m_pQuickbarButton;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CLastUpdateObjectC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CLastUpdateObjectC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CLastUpdateObjectD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CLastUpdateObject18InitializeQuickbarEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeQuickbar(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CLastUpdateObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CLastUpdateObject>();

        protected bool __ownsNativeInstance;

        internal static CLastUpdateObject __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CLastUpdateObject(native.ToPointer(), skipVTables);
        }

        internal static CLastUpdateObject __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CLastUpdateObject)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CLastUpdateObject __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CLastUpdateObject(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CLastUpdateObject.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CLastUpdateObject(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CLastUpdateObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CLastUpdateObject()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CLastUpdateObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CLastUpdateObject(global::NWN.LowLevel.CLastUpdateObject _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CLastUpdateObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CLastUpdateObject __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void InitializeQuickbar()
        {
            __Internal.InitializeQuickbar(__Instance);
        }

        public global::NWN.LowLevel.CNWSPlayerLUOAppearanceInfo MCAppearance
        {
            get
            {
                return global::NWN.LowLevel.CNWSPlayerLUOAppearanceInfo.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cAppearance));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cAppearance = *(global::NWN.LowLevel.CNWSPlayerLUOAppearanceInfo.__Internal*) value.__Instance;
            }
        }

        public int MBActive
        {
            get
            {
                return ((__Internal*)__Instance)->m_bActive;
            }

            set
            {
                ((__Internal*)__Instance)->m_bActive = value;
            }
        }

        public byte MNObjectType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nObjectType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nObjectType = value;
            }
        }

        public ushort MNSoundSet
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSoundSet;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSoundSet = value;
            }
        }

        public int MNFootstepType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nFootstepType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nFootstepType = value;
            }
        }

        public uint MNId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nId = value;
            }
        }

        public global::NWN.LowLevel.Vector MVPosition
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vPosition));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vPosition = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public uint MOidArea
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidArea;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidArea = value;
            }
        }

        public global::NWN.LowLevel.Vector MVOrientation
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vOrientation));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vOrientation = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MNAnimation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAnimation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAnimation = value;
            }
        }

        public float MFAnimSpeed
        {
            get
            {
                return ((__Internal*)__Instance)->m_fAnimSpeed;
            }

            set
            {
                ((__Internal*)__Instance)->m_fAnimSpeed = value;
            }
        }

        public byte MNWalkAnimation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWalkAnimation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWalkAnimation = value;
            }
        }

        public global::NWN.LowLevel.Vector MVWalkTo
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vWalkTo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vWalkTo = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public byte MNPlayerPathNumber
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlayerPathNumber;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlayerPathNumber = value;
            }
        }

        public byte MNWalkedPathCutVerify
        {
            get
            {
                return ((__Internal*)__Instance)->m_nWalkedPathCutVerify;
            }

            set
            {
                ((__Internal*)__Instance)->m_nWalkedPathCutVerify = value;
            }
        }

        public ushort MNAIState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIState = value;
            }
        }

        public byte MNAIStateAction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIStateAction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIStateAction = value;
            }
        }

        public ushort MNAIStateActivities
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIStateActivities;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIStateActivities = value;
            }
        }

        public int MBCombatState
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCombatState;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCombatState = value;
            }
        }

        public uint MOidAIStateActee
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAIStateActee;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAIStateActee = value;
            }
        }

        public uint MOidLockOnTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLockOnTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLockOnTarget = value;
            }
        }

        public uint MOidAttackTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAttackTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAttackTarget = value;
            }
        }

        public global::NWN.LowLevel.CResRef MCPortrait
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cPortrait));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cPortrait = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public ushort MNPortraitId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPortraitId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPortraitId = value;
            }
        }

        public global::NWN.LowLevel.CExoLocString MSLocFirstName
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLocFirstName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLocFirstName = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLocString MSLocLastName
        {
            get
            {
                return global::NWN.LowLevel.CExoLocString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLocLastName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLocLastName = *(global::NWN.LowLevel.CExoLocString.__Internal*) value.__Instance;
            }
        }

        public float MFWalkRate
        {
            get
            {
                return ((__Internal*)__Instance)->m_fWalkRate;
            }

            set
            {
                ((__Internal*)__Instance)->m_fWalkRate = value;
            }
        }

        public float MFRunRate
        {
            get
            {
                return ((__Internal*)__Instance)->m_fRunRate;
            }

            set
            {
                ((__Internal*)__Instance)->m_fRunRate = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CLoopingVisualEffect> MLstLoopingVisualEffects
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CLoopingVisualEffect>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstLoopingVisualEffects));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstLoopingVisualEffects = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public ushort MNAssociateState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAssociateState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAssociateState = value;
            }
        }

        public byte MNDamageLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDamageLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDamageLevel = value;
            }
        }

        public byte MNDomain1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDomain1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDomain1 = value;
            }
        }

        public byte MNDomain2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDomain2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDomain2 = value;
            }
        }

        public byte MNSchool
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSchool;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSchool = value;
            }
        }

        public short MNCurrentHitPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentHitPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentHitPoints = value;
            }
        }

        public short MNBaseHitPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBaseHitPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBaseHitPoints = value;
            }
        }

        public short MNTemporaryHitPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTemporaryHitPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTemporaryHitPoints = value;
            }
        }

        public short MNMaxHitPoints
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxHitPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxHitPoints = value;
            }
        }

        public int MBFreeWill
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFreeWill;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFreeWill = value;
            }
        }

        public int MBPartyLeader
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPartyLeader;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPartyLeader = value;
            }
        }

        public int MBSingletonParty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSingletonParty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSingletonParty = value;
            }
        }

        public int MBInvitedToParty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInvitedToParty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInvitedToParty = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MPoidCreatureList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_poidCreatureList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_poidCreatureList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MBTrapped
        {
            get
            {
                return ((__Internal*)__Instance)->m_bTrapped;
            }

            set
            {
                ((__Internal*)__Instance)->m_bTrapped = value;
            }
        }

        public int MBFlagged
        {
            get
            {
                return ((__Internal*)__Instance)->m_bFlagged;
            }

            set
            {
                ((__Internal*)__Instance)->m_bFlagged = value;
            }
        }

        public int MNTrapFaction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrapFaction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrapFaction = value;
            }
        }

        public int MBLocked
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLocked;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLocked = value;
            }
        }

        public int MBLockable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLockable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLockable = value;
            }
        }

        public int MBRecoverable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRecoverable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRecoverable = value;
            }
        }

        public int MBClickable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClickable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClickable = value;
            }
        }

        public byte MNAIStateReaction
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAIStateReaction;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAIStateReaction = value;
            }
        }

        public uint MOidMaster
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidMaster;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidMaster = value;
            }
        }

        public ushort MNAssociateType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAssociateType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAssociateType = value;
            }
        }

        public int MBSummonedAnimalCompanion
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSummonedAnimalCompanion;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSummonedAnimalCompanion = value;
            }
        }

        public int MBSummonedFamiliar
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSummonedFamiliar;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSummonedFamiliar = value;
            }
        }

        public int MBObjectSeen
        {
            get
            {
                return ((__Internal*)__Instance)->m_bObjectSeen;
            }

            set
            {
                ((__Internal*)__Instance)->m_bObjectSeen = value;
            }
        }

        public int MBObjectHeard
        {
            get
            {
                return ((__Internal*)__Instance)->m_bObjectHeard;
            }

            set
            {
                ((__Internal*)__Instance)->m_bObjectHeard = value;
            }
        }

        public int MBObjectInvisible
        {
            get
            {
                return ((__Internal*)__Instance)->m_bObjectInvisible;
            }

            set
            {
                ((__Internal*)__Instance)->m_bObjectInvisible = value;
            }
        }

        public ushort MNRace
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRace;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRace = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSSubRace
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSubRace));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSubRace = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSDeity
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDeity));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDeity = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public byte MNGender
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGender;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGender = value;
            }
        }

        public byte[] MNClass
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nClass, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_nClass[i] = value[i];
                }
            }
        }

        public byte[] MNLevel
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nLevel, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_nLevel[i] = value[i];
                }
            }
        }

        public short MNAlignmentLawChaos
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAlignmentLawChaos;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAlignmentLawChaos = value;
            }
        }

        public short MNAlignmentGoodEvil
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAlignmentGoodEvil;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAlignmentGoodEvil = value;
            }
        }

        public int MBSelectableWhenDead
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSelectableWhenDead;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSelectableWhenDead = value;
            }
        }

        public int MBLootable
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLootable;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLootable = value;
            }
        }

        public int MBPC
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPC;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPC = value;
            }
        }

        public byte MNAbilityBaseSTR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseSTR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseSTR = value;
            }
        }

        public byte MNAbilityBaseDEX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseDEX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseDEX = value;
            }
        }

        public byte MNAbilityBaseCON
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseCON;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseCON = value;
            }
        }

        public byte MNAbilityBaseINT
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseINT;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseINT = value;
            }
        }

        public byte MNAbilityBaseWIS
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseWIS;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseWIS = value;
            }
        }

        public byte MNAbilityBaseCHA
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityBaseCHA;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityBaseCHA = value;
            }
        }

        public byte MNAbilityFinalSTR
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalSTR;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalSTR = value;
            }
        }

        public byte MNAbilityFinalDEX
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalDEX;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalDEX = value;
            }
        }

        public byte MNAbilityFinalCON
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalCON;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalCON = value;
            }
        }

        public byte MNAbilityFinalINT
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalINT;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalINT = value;
            }
        }

        public byte MNAbilityFinalWIS
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalWIS;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalWIS = value;
            }
        }

        public byte MNAbilityFinalCHA
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAbilityFinalCHA;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAbilityFinalCHA = value;
            }
        }

        public global::NWN.LowLevel.ObjectVisualTransformData MPObjectVisualTransformData
        {
            get
            {
                return global::NWN.LowLevel.ObjectVisualTransformData.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pObjectVisualTransformData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pObjectVisualTransformData = *(global::NWN.LowLevel.ObjectVisualTransformData.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.MaterialShaderParam> MLMaterialShaderParameters
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.MaterialShaderParam>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lMaterialShaderParameters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lMaterialShaderParameters = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.TextureReplaceInfo> MLTextureReplaceInfo
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.TextureReplaceInfo>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lTextureReplaceInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lTextureReplaceInfo = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.Vector MVHiliteColor
        {
            get
            {
                return global::NWN.LowLevel.Vector.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_vHiliteColor));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_vHiliteColor = *(global::NWN.LowLevel.Vector.__Internal*) value.__Instance;
            }
        }

        public int MNMouseCursor
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMouseCursor;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMouseCursor = value;
            }
        }

        public int MNUpdateDisplayNameSeq
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUpdateDisplayNameSeq = value;
            }
        }

        public int MNUpdateHiddenSeq
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUpdateHiddenSeq;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUpdateHiddenSeq = value;
            }
        }

        public global::NWN.LowLevel.CNWSPlayerLUOQuickbarItemButton MPQuickbarButton
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSPlayerLUOQuickbarItemButton.__GetOrCreateInstance(((__Internal*)__Instance)->m_pQuickbarButton, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pQuickbarButton = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
