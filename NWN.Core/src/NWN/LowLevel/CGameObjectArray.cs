// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CGameObjectArray : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 40)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pArray;

            [FieldOffset(8)]
            internal fixed uint m_nNextObjectArrayID[2];

            [FieldOffset(16)]
            internal fixed uint m_nNextCharArrayID[2];

            [FieldOffset(24)]
            internal uint m_nLogGameObjectCache;

            [FieldOffset(28)]
            internal uint m_nGameObjectCache;

            [FieldOffset(32)]
            internal int m_bClientMode;

            [FieldOffset(36)]
            internal uint m_nArraySize;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArrayC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, int clientMode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArrayC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArrayD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray23AddCharacterObjectAtPosEjP11CGameObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte AddCharacterObjectAtPos(__IntPtr __instance, uint ID, __IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray14AddObjectAtPosEjP11CGameObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte AddObjectAtPos(__IntPtr __instance, uint ID, __IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray17AddExternalObjectERjP11CGameObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte AddExternalObject(__IntPtr __instance, uint* ID, __IntPtr ptr, int CharacterObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray17AddInternalObjectERjP11CGameObjecti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte AddInternalObject(__IntPtr __instance, uint* ID, __IntPtr ptr, int CharacterObject);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray5CleanEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Clean(__IntPtr __instance, ushort nList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray6DeleteEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte Delete(__IntPtr __instance, uint ID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray6DeleteEjPP11CGameObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte Delete(__IntPtr __instance, uint ID, __IntPtr ptr);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN16CGameObjectArray13GetGameObjectEjPP11CGameObject", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetGameObject(__IntPtr __instance, uint ID, __IntPtr ptr);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameObjectArray> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameObjectArray>();

        protected bool __ownsNativeInstance;

        internal static CGameObjectArray __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CGameObjectArray(native.ToPointer(), skipVTables);
        }

        internal static CGameObjectArray __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CGameObjectArray)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CGameObjectArray __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CGameObjectArray(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGameObjectArray(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGameObjectArray(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CGameObjectArray(int clientMode)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameObjectArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, clientMode);
        }

        public CGameObjectArray(global::NWN.LowLevel.CGameObjectArray _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameObjectArray.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CGameObjectArray.__Internal*) __Instance) = *((global::NWN.LowLevel.CGameObjectArray.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CGameObjectArray __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public byte AddCharacterObjectAtPos(uint ID, global::NWN.LowLevel.CGameObject ptr)
        {
            var __arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
            var __ret = __Internal.AddCharacterObjectAtPos(__Instance, ID, __arg1);
            return __ret;
        }

        public byte AddObjectAtPos(uint ID, global::NWN.LowLevel.CGameObject ptr)
        {
            var __arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
            var __ret = __Internal.AddObjectAtPos(__Instance, ID, __arg1);
            return __ret;
        }

        public byte AddExternalObject(ref uint ID, global::NWN.LowLevel.CGameObject ptr, int CharacterObject)
        {
            fixed (uint* __ID0 = &ID)
            {
                var __arg0 = __ID0;
                var __arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
                var __ret = __Internal.AddExternalObject(__Instance, __arg0, __arg1, CharacterObject);
                return __ret;
            }
        }

        public byte AddInternalObject(ref uint ID, global::NWN.LowLevel.CGameObject ptr, int CharacterObject)
        {
            fixed (uint* __ID0 = &ID)
            {
                var __arg0 = __ID0;
                var __arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
                var __ret = __Internal.AddInternalObject(__Instance, __arg0, __arg1, CharacterObject);
                return __ret;
            }
        }

        public void Clean(ushort nList)
        {
            __Internal.Clean(__Instance, nList);
        }

        public byte Delete(uint ID)
        {
            var __ret = __Internal.Delete(__Instance, ID);
            return __ret;
        }

        public byte Delete(uint ID, global::NWN.LowLevel.CGameObject ptr)
        {
            var ____arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var __ret = __Internal.Delete(__Instance, ID, __arg1);
            return __ret;
        }

        public byte GetGameObject(uint ID, global::NWN.LowLevel.CGameObject ptr)
        {
            var ____arg1 = ptr is null ? __IntPtr.Zero : ptr.__Instance;
            var __arg1 = new __IntPtr(&____arg1);
            var __ret = __Internal.GetGameObject(__Instance, ID, __arg1);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CGameObjectArray(int clientMode)
        {
            return new global::NWN.LowLevel.CGameObjectArray(clientMode);
        }

        public global::NWN.LowLevel.CGameObjectArrayNode MPArray
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CGameObjectArrayNode.__GetOrCreateInstance(((__Internal*)__Instance)->m_pArray, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_pArray = new __IntPtr(&__value);
            }
        }

        public uint[] MNNextObjectArrayID
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nNextObjectArrayID, 2);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_nNextObjectArrayID[i] = value[i];
                }
            }
        }

        public uint[] MNNextCharArrayID
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_nNextCharArrayID, 2);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((__Internal*)__Instance)->m_nNextCharArrayID[i] = value[i];
                }
            }
        }

        public uint MNLogGameObjectCache
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLogGameObjectCache;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLogGameObjectCache = value;
            }
        }

        public uint MNGameObjectCache
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGameObjectCache;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGameObjectCache = value;
            }
        }

        public int MBClientMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_bClientMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_bClientMode = value;
            }
        }

        public uint MNArraySize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nArraySize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nArraySize = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
