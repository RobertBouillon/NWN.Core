// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNetLayerPlayerInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 216)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_bPlayerInUse;

            [FieldOffset(8)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sPlayerName;

            [FieldOffset(24)]
            internal int m_nPlayerLanguage;

            [FieldOffset(28)]
            internal uint m_nSlidingWindowId;

            [FieldOffset(32)]
            internal int m_bPlayerPrivileges;

            [FieldOffset(36)]
            internal int m_bGameMasterPrivileges;

            [FieldOffset(40)]
            internal int m_bGameMasterIsPlayerLogin;

            [FieldOffset(44)]
            internal int m_bServerAdminPrivileges;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoString.__Internal m_szMstServerChallenge;

            [FieldOffset(64)]
            internal ulong m_nMstServerTimeout;

            [FieldOffset(72)]
            internal ulong m_nMstServerTimeStamp;

            [FieldOffset(80)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sGamePasswordChallenge;

            [FieldOffset(96)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCDKeyChallenge;

            [FieldOffset(112)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sMstPasswordChallenge;

            [FieldOffset(128)]
            internal byte m_nConnectionType;

            [FieldOffset(132)]
            internal int m_bIsPrimaryPlayer;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstKeys;

            [FieldOffset(152)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sMstPasswordResponse;

            [FieldOffset(168)]
            internal int m_bCDKeyAuthorized;

            [FieldOffset(172)]
            internal int m_bMstPasswordAuthorized;

            [FieldOffset(176)]
            internal ushort m_nExpansionPacks;

            [FieldOffset(184)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sPSID;

            [FieldOffset(200)]
            internal byte m_nPlatformId;

            [FieldOffset(204)]
            internal int m_nBuildVersion;

            [FieldOffset(208)]
            internal int m_nPatchRevision;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfoC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfoD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo13StartMstTimerEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartMstTimer(__IntPtr __instance, ulong nTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo14UpdateMstTimerEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateMstTimer(__IntPtr __instance, ulong nTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo8AddCDKeyERK10CExoStringS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCDKey(__IntPtr __instance, __IntPtr sPublic, __IntPtr sResponse);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo13AllKeysAuthedERj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AllKeysAuthed(__IntPtr __instance, uint* nExpansionPacks);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN19CNetLayerPlayerInfo8SetCDKeyEiRK10CExoStringS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCDKey(__IntPtr __instance, int nIndex, __IntPtr sPublic, __IntPtr sResponse);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK19CNetLayerPlayerInfo14SatisfiesBuildEii", CallingConvention = __CallingConvention.Cdecl)]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SatisfiesBuild(__IntPtr __instance, int nBuild, int nRevision);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerPlayerInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerPlayerInfo>();

        protected bool __ownsNativeInstance;

        internal static CNetLayerPlayerInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNetLayerPlayerInfo(native.ToPointer(), skipVTables);
        }

        internal static CNetLayerPlayerInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNetLayerPlayerInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNetLayerPlayerInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNetLayerPlayerInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNetLayerPlayerInfo.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNetLayerPlayerInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNetLayerPlayerInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNetLayerPlayerInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayerPlayerInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNetLayerPlayerInfo(global::NWN.LowLevel.CNetLayerPlayerInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayerPlayerInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNetLayerPlayerInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Initialize()
        {
            __Internal.Initialize(__Instance);
        }

        public void StartMstTimer(ulong nTime)
        {
            __Internal.StartMstTimer(__Instance, nTime);
        }

        public int UpdateMstTimer(ulong nTime)
        {
            var __ret = __Internal.UpdateMstTimer(__Instance, nTime);
            return __ret;
        }

        public void AddCDKey(global::NWN.LowLevel.CExoString sPublic, global::NWN.LowLevel.CExoString sResponse)
        {
            if (ReferenceEquals(sPublic, null))
                throw new global::System.ArgumentNullException("sPublic", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sPublic.__Instance;
            if (ReferenceEquals(sResponse, null))
                throw new global::System.ArgumentNullException("sResponse", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sResponse.__Instance;
            __Internal.AddCDKey(__Instance, __arg0, __arg1);
        }

        public int AllKeysAuthed(ref uint nExpansionPacks)
        {
            fixed (uint* __nExpansionPacks0 = &nExpansionPacks)
            {
                var __arg0 = __nExpansionPacks0;
                var __ret = __Internal.AllKeysAuthed(__Instance, __arg0);
                return __ret;
            }
        }

        public void SetCDKey(int nIndex, global::NWN.LowLevel.CExoString sPublic, global::NWN.LowLevel.CExoString sResponse)
        {
            if (ReferenceEquals(sPublic, null))
                throw new global::System.ArgumentNullException("sPublic", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sPublic.__Instance;
            if (ReferenceEquals(sResponse, null))
                throw new global::System.ArgumentNullException("sResponse", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sResponse.__Instance;
            __Internal.SetCDKey(__Instance, nIndex, __arg1, __arg2);
        }

        public bool SatisfiesBuild(int nBuild, int nRevision)
        {
            var __ret = __Internal.SatisfiesBuild(__Instance, nBuild, nRevision);
            return __ret;
        }

        public int MBPlayerInUse
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPlayerInUse;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPlayerInUse = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSPlayerName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sPlayerName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sPlayerName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNPlayerLanguage
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlayerLanguage;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlayerLanguage = value;
            }
        }

        public uint MNSlidingWindowId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSlidingWindowId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSlidingWindowId = value;
            }
        }

        public int MBPlayerPrivileges
        {
            get
            {
                return ((__Internal*)__Instance)->m_bPlayerPrivileges;
            }

            set
            {
                ((__Internal*)__Instance)->m_bPlayerPrivileges = value;
            }
        }

        public int MBGameMasterPrivileges
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGameMasterPrivileges;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGameMasterPrivileges = value;
            }
        }

        public int MBGameMasterIsPlayerLogin
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGameMasterIsPlayerLogin;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGameMasterIsPlayerLogin = value;
            }
        }

        public int MBServerAdminPrivileges
        {
            get
            {
                return ((__Internal*)__Instance)->m_bServerAdminPrivileges;
            }

            set
            {
                ((__Internal*)__Instance)->m_bServerAdminPrivileges = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSzMstServerChallenge
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_szMstServerChallenge));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_szMstServerChallenge = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public ulong MNMstServerTimeout
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMstServerTimeout;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMstServerTimeout = value;
            }
        }

        public ulong MNMstServerTimeStamp
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMstServerTimeStamp;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMstServerTimeStamp = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSGamePasswordChallenge
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sGamePasswordChallenge));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sGamePasswordChallenge = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCDKeyChallenge
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCDKeyChallenge));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCDKeyChallenge = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSMstPasswordChallenge
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sMstPasswordChallenge));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sMstPasswordChallenge = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public byte MNConnectionType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nConnectionType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nConnectionType = value;
            }
        }

        public int MBIsPrimaryPlayer
        {
            get
            {
                return ((__Internal*)__Instance)->m_bIsPrimaryPlayer;
            }

            set
            {
                ((__Internal*)__Instance)->m_bIsPrimaryPlayer = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNetLayerPlayerCDKeyInfo> MLstKeys
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CNetLayerPlayerCDKeyInfo>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstKeys));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstKeys = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSMstPasswordResponse
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sMstPasswordResponse));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sMstPasswordResponse = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBCDKeyAuthorized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCDKeyAuthorized;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCDKeyAuthorized = value;
            }
        }

        public int MBMstPasswordAuthorized
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMstPasswordAuthorized;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMstPasswordAuthorized = value;
            }
        }

        public ushort MNExpansionPacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nExpansionPacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nExpansionPacks = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSPSID
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sPSID));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sPSID = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public byte MNPlatformId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPlatformId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPlatformId = value;
            }
        }

        public int MNBuildVersion
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBuildVersion;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBuildVersion = value;
            }
        }

        public int MNPatchRevision
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPatchRevision;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPatchRevision = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
