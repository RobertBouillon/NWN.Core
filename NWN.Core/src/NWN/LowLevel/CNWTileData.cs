// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWTileData : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 224)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CNWTileData;

            [FieldOffset(8)]
            internal __IntPtr m_pMethodStringList;

            [FieldOffset(16)]
            internal __IntPtr m_pSurfaceMesh;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refModel;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CResRef.__Internal m_refMapIcon;

            [FieldOffset(88)]
            internal byte m_nNumDoors;

            [FieldOffset(96)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCornerTopLeft;

            [FieldOffset(112)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCornerTopRight;

            [FieldOffset(128)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCornerBottomLeft;

            [FieldOffset(144)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCornerBottomRight;

            [FieldOffset(160)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sEdgeTop;

            [FieldOffset(176)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sEdgeBottom;

            [FieldOffset(192)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sEdgeLeft;

            [FieldOffset(208)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sEdgeRight;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileDataC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileDataC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData23AddPropertyMethodStringEj10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPropertyMethodString(__IntPtr __instance, uint nProperty, __IntPtr sMethodString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData27GetPropertyMethodStringListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPropertyMethodStringList(__IntPtr __instance, uint nProperty);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData13SetCornerTypeEh10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCornerType(__IntPtr __instance, byte nCorner, __IntPtr sType, int bHeight);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData13GetCornerTypeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetCornerType(__IntPtr @return, __IntPtr __instance, byte nCorner);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData11SetEdgeTypeEh10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetEdgeType(__IntPtr __instance, byte nEdge, __IntPtr sType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData11GetEdgeTypeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetEdgeType(__IntPtr @return, __IntPtr __instance, byte nEdge);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData14GetModelResRefEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetModelResRef(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData14SetModelResRefE7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetModelResRef(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal refModel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData10GetMapIconEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetMapIcon(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CNWTileData10SetMapIconE7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMapIcon(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal refMapIcon);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileData>();

        protected bool __ownsNativeInstance;

        internal static CNWTileData __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWTileData(native.ToPointer(), skipVTables);
        }

        internal static CNWTileData __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWTileData)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWTileData __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWTileData)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWTileData __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWTileData(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWTileData.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWTileData(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWTileData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWTileData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTileData");
        }

        public CNWTileData(global::NWN.LowLevel.CNWTileData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTileData");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWTileData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWTileData.__Internal*) __Instance)->vptr_CNWTileData = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int AddPropertyMethodString(uint nProperty, global::NWN.LowLevel.CExoString sMethodString)
        {
            if (ReferenceEquals(sMethodString, null))
                throw new global::System.ArgumentNullException("sMethodString", "Cannot be null because it is passed by value.");
            var __arg1 = sMethodString.__Instance;
            var __ret = __Internal.AddPropertyMethodString(__Instance, nProperty, __arg1);
            return __ret;
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CExoString> GetPropertyMethodStringList(uint nProperty)
        {
            var __ret = __Internal.GetPropertyMethodStringList(__Instance, nProperty);
            var __result0 = global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CExoString>.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void SetCornerType(byte nCorner, global::NWN.LowLevel.CExoString sType, int bHeight)
        {
            if (ReferenceEquals(sType, null))
                throw new global::System.ArgumentNullException("sType", "Cannot be null because it is passed by value.");
            var __arg1 = sType.__Instance;
            __Internal.SetCornerType(__Instance, nCorner, __arg1, bHeight);
        }

        public global::NWN.LowLevel.CExoString GetCornerType(byte nCorner)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetCornerType(new IntPtr(&__ret), __Instance, nCorner);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void SetEdgeType(byte nEdge, global::NWN.LowLevel.CExoString sType)
        {
            if (ReferenceEquals(sType, null))
                throw new global::System.ArgumentNullException("sType", "Cannot be null because it is passed by value.");
            var __arg1 = sType.__Instance;
            __Internal.SetEdgeType(__Instance, nEdge, __arg1);
        }

        public global::NWN.LowLevel.CExoString GetEdgeType(byte nEdge)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetEdgeType(new IntPtr(&__ret), __Instance, nEdge);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CExoString> MPMethodStringList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CExoString>.__GetOrCreateInstance(((__Internal*)__Instance)->m_pMethodStringList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pMethodStringList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWTileSurfaceMesh MPSurfaceMesh
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSurfaceMesh.__GetOrCreateInstance(((__Internal*)__Instance)->m_pSurfaceMesh, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pSurfaceMesh = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef MRefModel
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refModel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refModel = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef MRefMapIcon
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_refMapIcon));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_refMapIcon = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public byte MNNumDoors
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumDoors;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumDoors = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSCornerTopLeft
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCornerTopLeft));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCornerTopLeft = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCornerTopRight
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCornerTopRight));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCornerTopRight = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCornerBottomLeft
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCornerBottomLeft));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCornerBottomLeft = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCornerBottomRight
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCornerBottomRight));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCornerBottomRight = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSEdgeTop
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sEdgeTop));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sEdgeTop = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSEdgeBottom
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sEdgeBottom));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sEdgeBottom = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSEdgeLeft
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sEdgeLeft));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sEdgeLeft = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSEdgeRight
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sEdgeRight));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sEdgeRight = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResRef ModelResRef
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CResRef.__Internal();
                __Internal.GetModelResRef(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                var __arg0 = value.__Instance;
                __Internal.SetModelResRef(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0);
            }
        }

        public global::NWN.LowLevel.CResRef MapIcon
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CResRef.__Internal();
                __Internal.GetMapIcon(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                var __arg0 = value.__Instance;
                __Internal.SetMapIcon(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0);
            }
        }

        #region Virtual table interop

        // virtual ~CNWTileData()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWTileData.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
