// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CRes : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CRes;

            [FieldOffset(8)]
            internal ushort m_nDemands;

            [FieldOffset(10)]
            internal ushort m_nRequests;

            [FieldOffset(12)]
            internal global::NWN.LowLevel.RESID.__Internal m_nID;

            [FieldOffset(28)]
            internal uint m_status;

            [FieldOffset(32)]
            internal __IntPtr m_pResource;

            [FieldOffset(40)]
            internal __IntPtr m_pKeyEntry;

            [FieldOffset(48)]
            internal uint m_nSize;

            [FieldOffset(52)]
            internal uint m_nRefs;

            [FieldOffset(56)]
            internal int m_bAllocHeaderData;

            [FieldOffset(60)]
            internal int m_bAllocTrailingData;

            [FieldOffset(64)]
            internal __IntPtr m_pos;

            [FieldOffset(72)]
            internal int m_bAllowCaching;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CResC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CResC2E5RESID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, global::NWN.LowLevel.RESID.__Internal nNewID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CResC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes7ReadRawEiPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ReadRaw(__IntPtr __instance, int nSize, sbyte* pBuffer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes4DumpEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Dump(__IntPtr __instance, int bRemove);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes13CancelRequestEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CancelRequest(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes6DemandEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr Demand(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes7GetDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes10GetDemandsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDemands(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes11GetRequestsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRequests(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes5GetIDEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.RESID.__Internal GetID(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes5SetIDE5RESID", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetID(__IntPtr __instance, global::NWN.LowLevel.RESID.__Internal nNewID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes7GetSizeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes7ReleaseEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Release(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4CRes7RequestEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Request(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CRes> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CRes>();

        protected bool __ownsNativeInstance;

        internal static CRes __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CRes(native.ToPointer(), skipVTables);
        }

        internal static CRes __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CRes)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CRes __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CRes)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CRes __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CRes(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CRes.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CRes(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CRes(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CRes()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CRes.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CRes");
        }

        public CRes(global::NWN.LowLevel.RESID nNewID)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CRes.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(nNewID, null))
                throw new global::System.ArgumentNullException("nNewID", "Cannot be null because it is passed by value.");
            var __arg0 = nNewID.__Instance;
            __Internal.ctor(__Instance, *(global::NWN.LowLevel.RESID.__Internal*) __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CRes");
        }

        public CRes(global::NWN.LowLevel.CRes _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CRes.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CRes");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CRes __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CRes.__Internal*) __Instance)->vptr_CRes = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ReadRaw(int nSize, sbyte* pBuffer)
        {
            var __ret = __Internal.ReadRaw(__Instance, nSize, pBuffer);
            return __ret;
        }

        public void Dump(int bRemove)
        {
            __Internal.Dump(__Instance, bRemove);
        }

        public virtual int OnResourceFreed()
        {
            var ___OnResourceFreedDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr>(0, 4);
            var __ret = ___OnResourceFreedDelegate(__Instance);
            return __ret;
        }

        public virtual int OnResourceServiced()
        {
            var ___OnResourceServicedDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr>(0, 5);
            var __ret = ___OnResourceServicedDelegate(__Instance);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CRes(global::NWN.LowLevel.RESID nNewID)
        {
            return new global::NWN.LowLevel.CRes(nNewID);
        }

        public ushort MNDemands
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDemands;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDemands = value;
            }
        }

        public ushort MNRequests
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRequests;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRequests = value;
            }
        }

        public global::NWN.LowLevel.RESID MNID
        {
            get
            {
                return global::NWN.LowLevel.RESID.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nID));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nID = *(global::NWN.LowLevel.RESID.__Internal*) value.__Instance;
            }
        }

        public uint MStatus
        {
            get
            {
                return ((__Internal*)__Instance)->m_status;
            }

            set
            {
                ((__Internal*)__Instance)->m_status = value;
            }
        }

        public __IntPtr MPResource
        {
            get
            {
                return ((__Internal*)__Instance)->m_pResource;
            }

            set
            {
                ((__Internal*)__Instance)->m_pResource = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CKeyTableEntry MPKeyEntry
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CKeyTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pKeyEntry, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pKeyEntry = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSize = value;
            }
        }

        public uint MNRefs
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRefs;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRefs = value;
            }
        }

        public int MBAllocHeaderData
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllocHeaderData;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllocHeaderData = value;
            }
        }

        public int MBAllocTrailingData
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllocTrailingData;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllocTrailingData = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedListNode MPos
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoLinkedListNode.__GetOrCreateInstance(((__Internal*)__Instance)->m_pos, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pos = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBAllowCaching
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAllowCaching;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAllowCaching = value;
            }
        }

        public int CancelRequest
        {
            get
            {
                var __ret = __Internal.CancelRequest(__Instance);
                return __ret;
            }
        }

        public __IntPtr Demand
        {
            get
            {
                var __ret = __Internal.Demand(__Instance);
                return __ret;
            }
        }

        public __IntPtr Data
        {
            get
            {
                var __ret = __Internal.GetData(__Instance);
                return __ret;
            }
        }

        public int Demands
        {
            get
            {
                var __ret = __Internal.GetDemands(__Instance);
                return __ret;
            }
        }

        public virtual int FixedResourceSize
        {
            get
            {
                var ___GetFixedResourceSizeDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr>(0, 2);
                var __ret = ___GetFixedResourceSizeDelegate(__Instance);
                return __ret;
            }
        }

        public virtual int FixedResourceDataOffset
        {
            get
            {
                var ___GetFixedResourceDataOffsetDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr>(0, 3);
                var __ret = ___GetFixedResourceDataOffsetDelegate(__Instance);
                return __ret;
            }
        }

        public int Requests
        {
            get
            {
                var __ret = __Internal.GetRequests(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.RESID ID
        {
            get
            {
                var __ret = __Internal.GetID(__Instance);
                return global::NWN.LowLevel.RESID.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                var __arg0 = value.__Instance;
                __Internal.SetID(__Instance, *(global::NWN.LowLevel.RESID.__Internal*) __arg0);
            }
        }

        public int Size
        {
            get
            {
                var __ret = __Internal.GetSize(__Instance);
                return __ret;
            }
        }

        public int Release
        {
            get
            {
                var __ret = __Internal.Release(__Instance);
                return __ret;
            }
        }

        public int Request
        {
            get
            {
                var __ret = __Internal.Request(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CRes()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CRes.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // int32_t GetFixedResourceSize()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetFixedResourceSizeDelegateInstance;

        private static int _GetFixedResourceSizeDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CRes.__GetInstance(__instance);
            return __target.FixedResourceSize;
        }

        // int32_t GetFixedResourceDataOffset()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _GetFixedResourceDataOffsetDelegateInstance;

        private static int _GetFixedResourceDataOffsetDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CRes.__GetInstance(__instance);
            return __target.FixedResourceDataOffset;
        }

        // BOOL OnResourceFreed()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _OnResourceFreedDelegateInstance;

        private static int _OnResourceFreedDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CRes.__GetInstance(__instance);
            return __target.OnResourceFreed();
        }

        // BOOL OnResourceServiced()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _OnResourceServicedDelegateInstance;

        private static int _OnResourceServicedDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CRes.__GetInstance(__instance);
            return __target.OnResourceServiced();
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[5];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _GetFixedResourceSizeDelegateInstance += _GetFixedResourceSizeDelegateHook;
                _GetFixedResourceDataOffsetDelegateInstance += _GetFixedResourceDataOffsetDelegateHook;
                _OnResourceFreedDelegateInstance += _OnResourceFreedDelegateHook;
                _OnResourceServicedDelegateInstance += _OnResourceServicedDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_GetFixedResourceSizeDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_GetFixedResourceDataOffsetDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnResourceFreedDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_OnResourceServicedDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 8);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            VTables.Methods[0] = new Delegate[8];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
