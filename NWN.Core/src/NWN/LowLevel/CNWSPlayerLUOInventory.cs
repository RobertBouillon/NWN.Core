// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSPlayerLUOInventory : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 200)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed uint m_oidInventorySlots[18];

            [FieldOffset(72)]
            internal fixed int m_nStackSizes[18];

            [FieldOffset(144)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_pOldRepositoryItems;

            [FieldOffset(152)]
            internal uint m_oidContainer;

            [FieldOffset(160)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_pOldContainerItems;

            [FieldOffset(168)]
            internal byte m_nOldContainerNumPages;

            [FieldOffset(176)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_pOldBarterItems;

            [FieldOffset(184)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_pOldStoreItems;

            [FieldOffset(192)]
            internal byte m_nOldStoreNumPages;

            [FieldOffset(193)]
            internal byte m_nOldStoreCurrentPanel;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventoryC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventoryC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventoryD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory10ClearSlotsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearSlots(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory15ClearRepositoryEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearRepository(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory14ClearContainerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearContainer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory11ClearBarterEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearBarter(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory10ClearStoreEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearStore(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory16ItemListSetStartERP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListSetStart(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory14ItemListSetEndERP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListSetEnd(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory15ItemListGetItemEP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ItemListGetItem(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory23ItemListGetItemObjectIDEP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ItemListGetItemObjectID(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory21ItemListGetUpdateItemEP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr ItemListGetUpdateItem(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory15ItemListGetNextERP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListGetNext(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory15ItemListGetPrevERP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListGetPrev(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory14ItemListRemoveEP18CExoLinkedListNodeh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListRemove(__IntPtr __instance, __IntPtr pListPosition, byte nItemList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory15ItemListAddHeadEjhhhjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ItemListAddHead(__IntPtr __instance, uint nID, byte nItemList, byte xPos, byte yPos, uint nStackSize, uint nCost);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN22CNWSPlayerLUOInventory17ItemListGetNumberEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ItemListGetNumber(__IntPtr __instance, byte nItemList);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSPlayerLUOInventory> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSPlayerLUOInventory>();

        protected bool __ownsNativeInstance;

        internal static CNWSPlayerLUOInventory __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSPlayerLUOInventory(native.ToPointer(), skipVTables);
        }

        internal static CNWSPlayerLUOInventory __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSPlayerLUOInventory)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSPlayerLUOInventory __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSPlayerLUOInventory(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWSPlayerLUOInventory(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSPlayerLUOInventory(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSPlayerLUOInventory()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSPlayerLUOInventory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWSPlayerLUOInventory(global::NWN.LowLevel.CNWSPlayerLUOInventory _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSPlayerLUOInventory.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CNWSPlayerLUOInventory.__Internal*) __Instance) = *((global::NWN.LowLevel.CNWSPlayerLUOInventory.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSPlayerLUOInventory __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ClearSlots()
        {
            __Internal.ClearSlots(__Instance);
        }

        public void ClearRepository()
        {
            __Internal.ClearRepository(__Instance);
        }

        public void ClearContainer()
        {
            __Internal.ClearContainer(__Instance);
        }

        public void ClearBarter()
        {
            __Internal.ClearBarter(__Instance);
        }

        public void ClearStore()
        {
            __Internal.ClearStore(__Instance);
        }

        public void ItemListSetStart(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            if (ReferenceEquals(pListPosition, null))
                throw new global::System.ArgumentNullException("pListPosition", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = pListPosition.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            __Internal.ItemListSetStart(__Instance, __arg0, nItemList);
        }

        public void ItemListSetEnd(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            if (ReferenceEquals(pListPosition, null))
                throw new global::System.ArgumentNullException("pListPosition", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = pListPosition.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            __Internal.ItemListSetEnd(__Instance, __arg0, nItemList);
        }

        public global::NWN.LowLevel.CNWSItem ItemListGetItem(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            var __ret = __Internal.ItemListGetItem(__Instance, __arg0, nItemList);
            var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public uint ItemListGetItemObjectID(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            var __ret = __Internal.ItemListGetItemObjectID(__Instance, __arg0, nItemList);
            return __ret;
        }

        public global::NWN.LowLevel.CNWSPlayerLUOInventoryItem ItemListGetUpdateItem(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            var __ret = __Internal.ItemListGetUpdateItem(__Instance, __arg0, nItemList);
            var __result0 = global::NWN.LowLevel.CNWSPlayerLUOInventoryItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void ItemListGetNext(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            if (ReferenceEquals(pListPosition, null))
                throw new global::System.ArgumentNullException("pListPosition", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = pListPosition.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            __Internal.ItemListGetNext(__Instance, __arg0, nItemList);
        }

        public void ItemListGetPrev(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            if (ReferenceEquals(pListPosition, null))
                throw new global::System.ArgumentNullException("pListPosition", "Cannot be null because it is a C++ reference (&).");
            var ____arg0 = pListPosition.__Instance;
            var __arg0 = new __IntPtr(&____arg0);
            __Internal.ItemListGetPrev(__Instance, __arg0, nItemList);
        }

        public void ItemListRemove(global::NWN.LowLevel.CExoLinkedListNode pListPosition, byte nItemList)
        {
            var __arg0 = pListPosition is null ? __IntPtr.Zero : pListPosition.__Instance;
            __Internal.ItemListRemove(__Instance, __arg0, nItemList);
        }

        public void ItemListAddHead(uint nID, byte nItemList, byte xPos, byte yPos, uint nStackSize, uint nCost)
        {
            __Internal.ItemListAddHead(__Instance, nID, nItemList, xPos, yPos, nStackSize, nCost);
        }

        public uint ItemListGetNumber(byte nItemList)
        {
            var __ret = __Internal.ItemListGetNumber(__Instance, nItemList);
            return __ret;
        }

        public uint[] MOidInventorySlots
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_oidInventorySlots, 18);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 18; i++)
                        ((__Internal*)__Instance)->m_oidInventorySlots[i] = value[i];
                }
            }
        }

        public int[] MNStackSizes
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_nStackSizes, 18);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 18; i++)
                        ((__Internal*)__Instance)->m_nStackSizes[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem> MPOldRepositoryItems
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pOldRepositoryItems));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pOldRepositoryItems = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public uint MOidContainer
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidContainer;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidContainer = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem> MPOldContainerItems
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pOldContainerItems));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pOldContainerItems = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public byte MNOldContainerNumPages
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOldContainerNumPages;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOldContainerNumPages = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem> MPOldBarterItems
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pOldBarterItems));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pOldBarterItems = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem> MPOldStoreItems
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CNWSPlayerLUOInventoryItem>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pOldStoreItems));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pOldStoreItems = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public byte MNOldStoreNumPages
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOldStoreNumPages;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOldStoreNumPages = value;
            }
        }

        public byte MNOldStoreCurrentPanel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOldStoreCurrentPanel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOldStoreCurrentPanel = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
