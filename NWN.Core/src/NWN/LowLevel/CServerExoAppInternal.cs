// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CCampaignDB
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCampaignDB> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCampaignDB>();

        protected bool __ownsNativeInstance;

        internal static CCampaignDB __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CCampaignDB(native.ToPointer(), skipVTables);
        }

        internal static CCampaignDB __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CCampaignDB)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CCampaignDB __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CCampaignDB(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CCampaignDB(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCampaignDB(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CConnectionLib
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CConnectionLib> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CConnectionLib>();

        protected bool __ownsNativeInstance;

        internal static CConnectionLib __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CConnectionLib(native.ToPointer(), skipVTables);
        }

        internal static CConnectionLib __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CConnectionLib)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CConnectionLib __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CConnectionLib(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CConnectionLib(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CConnectionLib(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CServerExoAppInternal : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 66144)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte ScratchMessageBuffer[65536];

            [FieldOffset(65536)]
            internal int m_bMultiplayerEnabled;

            [FieldOffset(65540)]
            internal int m_bGameSpyEnabled;

            [FieldOffset(65544)]
            internal int m_bCDResponseReceived;

            [FieldOffset(65552)]
            internal __IntPtr m_pServerInfo;

            [FieldOffset(65560)]
            internal short m_nServerMode;

            [FieldOffset(65568)]
            internal __IntPtr m_pVirtualMachineCommandImplementer;

            [FieldOffset(65576)]
            internal __IntPtr m_pMessage;

            [FieldOffset(65584)]
            internal int m_bForceUpdate;

            [FieldOffset(65592)]
            internal __IntPtr m_pPendingAuthorization;

            [FieldOffset(65600)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstClientDisconnectPending;

            [FieldOffset(65616)]
            internal ulong m_nShutdownTimer;

            [FieldOffset(65624)]
            internal ulong m_nShutdownTimeStamp;

            [FieldOffset(65632)]
            internal ulong m_nShutdownMaxTimeLocalLogins;

            [FieldOffset(65640)]
            internal int m_bReloadModuleWhenEmpty;

            [FieldOffset(65648)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sLastModuleLoadedFilename;

            [FieldOffset(65664)]
            internal int m_bLastModuleLoadedWasSaveGame;

            [FieldOffset(65668)]
            internal int m_bConnectionLoopFirstRun;

            [FieldOffset(65672)]
            internal __IntPtr m_pNetLayer;

            [FieldOffset(65680)]
            internal __IntPtr m_pServerAIMaster;

            [FieldOffset(65688)]
            internal __IntPtr m_pWorldTimer;

            [FieldOffset(65696)]
            internal __IntPtr m_pTimestopTimer;

            [FieldOffset(65704)]
            internal __IntPtr m_pPauseTimer;

            [FieldOffset(65712)]
            internal __IntPtr m_pFactionManager;

            [FieldOffset(65720)]
            internal __IntPtr m_pConnectionLib;

            [FieldOffset(65728)]
            internal __IntPtr m_pCampaignDB;

            [FieldOffset(65736)]
            internal __IntPtr m_pGameObjArray;

            [FieldOffset(65744)]
            internal uint m_oidModule;

            [FieldOffset(65752)]
            internal __IntPtr m_pNWSPlayerList;

            [FieldOffset(65760)]
            internal __IntPtr m_pNWSSysAdminList;

            [FieldOffset(65768)]
            internal __IntPtr m_pPlaceMeshManager;

            [FieldOffset(65776)]
            internal int m_bDebugMode;

            [FieldOffset(65784)]
            internal __IntPtr m_lstPauseExclusionList;

            [FieldOffset(65792)]
            internal __IntPtr m_lstTimestopExclusionList;

            [FieldOffset(65800)]
            internal byte m_nPauseState;

            [FieldOffset(65804)]
            internal int m_bDoingStartNewModule;

            [FieldOffset(65808)]
            internal int m_bMoveToModulePending;

            [FieldOffset(65816)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sMoveToModuleString;

            [FieldOffset(65832)]
            internal int m_bEndGamePending;

            [FieldOffset(65840)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sEndGameMovie;

            [FieldOffset(65856)]
            internal int m_bLoadingModule;

            [FieldOffset(65860)]
            internal int m_bImportingChar;

            [FieldOffset(65864)]
            internal int m_bAutoSavePending;

            [FieldOffset(65868)]
            internal int m_bDisableAutoSave;

            [FieldOffset(65872)]
            internal int m_bExportCharacterPending;

            [FieldOffset(65880)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_exportPlayerCharacterRequests;

            [FieldOffset(65896)]
            internal int m_bNeedSinglePlayerCharacter;

            [FieldOffset(65900)]
            internal uint m_nEstimatedSaveSize;

            [FieldOffset(65904)]
            internal ulong m_nLogHeartbeatTimer;

            [FieldOffset(65912)]
            internal ulong m_nLogHeartbeatTimeStamp;

            [FieldOffset(65920)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_nCharListRequests;

            [FieldOffset(65936)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstBannedListIP;

            [FieldOffset(65952)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstBannedListCDKey;

            [FieldOffset(65968)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_lstBannedListPlayerName;

            [FieldOffset(65984)]
            internal __IntPtr m_pOldServerVault2DA;

            [FieldOffset(65992)]
            internal __IntPtr m_pKnownServerNames2DA;

            [FieldOffset(66000)]
            internal ushort m_nBannedListsTimeStampSecond;

            [FieldOffset(66002)]
            internal ushort m_nBannedListsTimeStampMinute;

            [FieldOffset(66004)]
            internal ushort m_nBannedListsTimeStampHour;

            [FieldOffset(66008)]
            internal uint m_nBannedListsTimeStamp;

            [FieldOffset(66016)]
            internal __IntPtr m_posPCObject;

            [FieldOffset(66024)]
            internal ulong m_nAutoSaveTimer;

            [FieldOffset(66032)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_acSubNetProfiles;

            [FieldOffset(66048)]
            internal ulong m_nTotalSubNetSent;

            [FieldOffset(66056)]
            internal ulong m_nTotalSubNetRecv;

            [FieldOffset(66064)]
            internal ulong m_nServerStartupTime;

            [FieldOffset(66072)]
            internal int m_nEnableSubNetProfiling;

            [FieldOffset(66076)]
            internal int m_bHeartBeatLoggingEnabled;

            [FieldOffset(66080)]
            internal int m_bCreatureDeathLoggingEnabled;

            [FieldOffset(66084)]
            internal uint m_nClientsRequiredToDisableCPUSleep;

            [FieldOffset(66088)]
            internal int m_bStickyCombatModesEnabled;

            [FieldOffset(66092)]
            internal int m_AttackBonusLimit;

            [FieldOffset(66096)]
            internal int m_DamageBonusLimit;

            [FieldOffset(66100)]
            internal int m_SavingThrowBonusLimit;

            [FieldOffset(66104)]
            internal int m_AbilityBonusLimit;

            [FieldOffset(66108)]
            internal int m_AbilityPenaltyLimit;

            [FieldOffset(66112)]
            internal int m_SkillBonusLimit;

            [FieldOffset(66116)]
            internal int m_AttackBonusLimitModule;

            [FieldOffset(66120)]
            internal int m_DamageBonusLimitModule;

            [FieldOffset(66124)]
            internal int m_SavingThrowBonusLimitModule;

            [FieldOffset(66128)]
            internal int m_AbilityBonusLimitModule;

            [FieldOffset(66132)]
            internal int m_AbilityPenaltyLimitModule;

            [FieldOffset(66136)]
            internal int m_SkillBonusLimitModule;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternalC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternalC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternalD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal10InitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Initialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13StartServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal12StopServicesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StopServices(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16ShutdownNetLayerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutdownNetLayer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15RestartNetLayerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RestartNetLayer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal12UninitializeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Uninitialize(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19AdmitNetworkAddressEj10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AdmitNetworkAddress(__IntPtr __instance, uint nProtocol, __IntPtr sAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15AdmitPlayerNameE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AdmitPlayerName(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13HandleMessageEjPhji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HandleMessage(__IntPtr __instance, uint nPlayerId, byte* pData, uint dwSize, int bRawMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20SetNetworkAddressBanEj10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetNetworkAddressBan(__IntPtr __instance, uint nProtocol, __IntPtr sAddress, int bBanAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16PlayerListChangeEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PlayerListChange(__IntPtr __instance, uint nPlayerId, int bEnter, int bPrimaryPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25ContinueMessageProcessingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ContinueMessageProcessing(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17RemovePCFromWorldEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePCFromWorld(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal8ShutdownEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Shutdown(__IntPtr __instance, int bWarnLocals, int bFromMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19ValidatePlayerLoginEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ValidatePlayerLogin(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal10OnCDChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnCDChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal6OnExitEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnExit(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal11OnGainFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnGainFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal11OnLostFocusEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnLostFocus(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13OnVideoChangeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void OnVideoChange(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal14GetActiveTimerEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetActiveTimer(__IntPtr __instance, uint oid);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19SetGameSpyReportingEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGameSpyReporting(__IntPtr __instance, int bEnabled);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25GetClientObjectByObjectIdEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClientObjectByObjectId(__IntPtr __instance, uint nObjectId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25GetClientObjectByPlayerIdEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetClientObjectByPlayerId(__IntPtr __instance, uint nPlayerId, byte nClientType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23CopyModuleToCurrentGameER10CExoStringS1_t", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CopyModuleToCurrentGame(__IntPtr __instance, __IntPtr sOldFilename, __IntPtr sNewFilename, ushort nResType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal8LoadGameEjR10CExoStringS1_P10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadGame(__IntPtr __instance, uint nSlot, __IntPtr sSaveName, __IntPtr sModuleName, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20SetEstimatedSaveSizeERK10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetEstimatedSaveSize(__IntPtr __instance, __IntPtr sFile, ushort nResType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal14StartNewModuleER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartNewModule(__IntPtr __instance, __IntPtr sModuleName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal7EndGameERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndGame(__IntPtr __instance, __IntPtr sMovieName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29ValidateCreateServerCharacterEP10CNWSPlayerPvj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ValidateCreateServerCharacter(__IntPtr __instance, __IntPtr pPlayer, __IntPtr pCharData, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18LoadCharacterStartEhP10CNWSPlayer7CResRefPvj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCharacterStart(__IntPtr __instance, byte nType, __IntPtr pPlayer, global::NWN.LowLevel.CResRef.__Internal cResRef, __IntPtr pCharData, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19LoadCharacterFinishEP10CNWSPlayerii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCharacterFinish(__IntPtr __instance, __IntPtr pPlayer, int bUseSaveGameCharacter, int bUseStateDataInSaveGame);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17LoadPrimaryPlayerEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadPrimaryPlayer(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal12ExportPlayerEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExportPlayer(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21DealWithLoadGameErrorEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DealWithLoadGameError(__IntPtr __instance, uint nLoadErr);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20SetDDCipherForModuleE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetDDCipherForModule(__IntPtr __instance, __IntPtr moduleName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13GetGameObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetGameObject(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22GetStoreByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetStoreByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21GetItemByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetItemByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25GetCreatureByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetCreatureByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23GetModuleByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetModuleByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21GetAreaByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAreaByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24GetTriggerByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTriggerByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal26GetPlaceableByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlaceableByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21GetDoorByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetDoorByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29GetAreaOfEffectByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAreaOfEffectByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25GetWaypointByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetWaypointByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal26GetEncounterByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetEncounterByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal28GetSoundObjectByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSoundObjectByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25GetPlayerIDByGameObjectIDEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetPlayerIDByGameObjectID(__IntPtr __instance, uint nObjectID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17GetPlayerLanguageEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerLanguage(__IntPtr __instance, uint nPlayerID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20GetPlayerAddressDataEjPjPPhS2_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerAddressData(__IntPtr __instance, uint nConnectionId, uint* nProtocol, byte** pNetAddress1, byte** pNetAddress2, uint* nPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21GetExtendedServerInfoEP19CExtendedServerInfo", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetExtendedServerInfo(__IntPtr __instance, __IntPtr pInfo);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal28HandleGameSpyToServerMessageEiPvi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HandleGameSpyToServerMessage(__IntPtr __instance, int nKeyId, __IntPtr pOutBuf, int nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22UpdateClientsForObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateClientsForObject(__IntPtr __instance, uint oidObjectToUpdate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal26MarkUpdateClientsForObjectEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MarkUpdateClientsForObject(__IntPtr __instance, uint oidObjectToUpdate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal32UpdateClientGameObjectsForPlayerEP10CNWSPlayerim", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateClientGameObjectsForPlayer(__IntPtr __instance, __IntPtr pPlayer, int bForce, ulong nCurrentSystemTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal12UnloadModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UnloadModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal10LoadModuleE10CExoStringiP10CNWSPlayeri", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadModule(__IntPtr __instance, global::NWN.LowLevel.CExoString.__Internal moduleResRef, int bIsSaveGame, __IntPtr pPlayer, int sourceType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15GetModuleExistsERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetModuleExists(__IntPtr __instance, __IntPtr sModuleResRef);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal9RunModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RunModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23VomitServerOptionsToLogEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void VomitServerOptionsToLog(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16MovePlayerToAreaEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MovePlayerToArea(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23InitiateModuleForPlayerEPv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitiateModuleForPlayer(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17UpdateWindowTitleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateWindowTitle(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22AddItemAppearToScratchEP8CNWSItemPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddItemAppearToScratch(__IntPtr __instance, __IntPtr pItem, uint* scratchBufferPos);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18GetFactionOfObjectEjPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFactionOfObject(__IntPtr __instance, uint oObject, int* nFaction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18SendCharacterQueryEP10CNWSPlayer", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendCharacterQuery(__IntPtr __instance, __IntPtr pPlayer);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19SendStartStallEventEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendStartStallEvent(__IntPtr __instance, uint nStallEvent);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16TogglePauseStateEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void TogglePauseState(__IntPtr __instance, byte nState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13GetPauseStateEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPauseState(__IntPtr __instance, byte nState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13SetPauseStateEhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPauseState(__IntPtr __instance, byte nState, int bPause);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15ClearPauseStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearPauseState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18AddToExclusionListEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddToExclusionList(__IntPtr __instance, uint oidExclude, byte nList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23RemoveFromExclusionListEjh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveFromExclusionList(__IntPtr __instance, uint oidExclude, byte nList);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23IsOnActiveExclusionListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsOnActiveExclusionList(__IntPtr __instance, uint oidExclude);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29ReprocessExclusionListActionsEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReprocessExclusionListActions(__IntPtr __instance, byte nOldState);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24ResolvePlayerByFirstNameERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint ResolvePlayerByFirstName(__IntPtr __instance, __IntPtr sName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetDifficultyOptionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetDifficultyOption(__IntPtr __instance, int nOption);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18AddCharListRequestEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCharListRequest(__IntPtr __instance, uint nPlayerId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17IsOnExclusionListEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsOnExclusionList(__IntPtr __instance, uint oidToExamine);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17AddIPToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddIPToBannedList(__IntPtr __instance, __IntPtr sIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25AddPlayerNameToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddPlayerNameToBannedList(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20AddCDKeyToBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCDKeyToBannedList(__IntPtr __instance, __IntPtr sKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22RemoveIPFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveIPFromBannedList(__IntPtr __instance, __IntPtr sIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal30RemovePlayerNameFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemovePlayerNameFromBannedList(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal25RemoveCDKeyFromBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveCDKeyFromBannedList(__IntPtr __instance, __IntPtr sKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetIsIPOnBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsIPOnBannedList(__IntPtr __instance, __IntPtr sIP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal27GetIsPlayerNameOnBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsPlayerNameOnBannedList(__IntPtr __instance, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22GetIsCDKeyOnBannedListE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIsCDKeyOnBannedList(__IntPtr __instance, __IntPtr sKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29HandleOldServerVaultMigrationE10CExoStringS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void HandleOldServerVaultMigration(__IntPtr __instance, __IntPtr sClientCDKey, __IntPtr sLegacyCDKey, __IntPtr sPlayerName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29CheckStickyPlayerNameReservedE10CExoStringS0_S0_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckStickyPlayerNameReserved(__IntPtr __instance, __IntPtr sClientCDKey, __IntPtr sLegacyCDKey, __IntPtr sPlayerName, int nConnectionType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18StallEventSaveGameEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StallEventSaveGame(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19PushMessageOverWallEPhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PushMessageOverWall(__IntPtr __instance, byte* pData, uint nMsgLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19UnlockBiowareModuleEP10CNWSModule", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnlockBiowareModule(__IntPtr __instance, __IntPtr pModule);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal29CreateServerVaultLostAndFoundEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CreateServerVaultLostAndFound(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16StripColorTokensER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StripColorTokens(__IntPtr __instance, __IntPtr sInput);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24AddSubNetProfileSendSizeEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSubNetProfileSendSize(__IntPtr __instance, uint nPlayerID, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal32SendExitingStartNewModuleMessageEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendExitingStartNewModuleMessage(__IntPtr __instance, int bSuccess);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal26QuarantineInvalidCharacterEPvj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void QuarantineInvalidCharacter(__IntPtr __instance, __IntPtr pData, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23UpdateClientGameObjectsEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateClientGameObjects(__IntPtr __instance, int bForce);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18InitializeNetLayerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeNetLayer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24GetServerInfoFromIniFileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetServerInfoFromIniFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15ReadBannedListsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ReadBannedLists(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24WriteServerInfoToIniFileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void WriteServerInfoToIniFile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23AddPendingAuthorizationEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddPendingAuthorization(__IntPtr __instance, uint nPlayerID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal26RemovePendingAuthorizationEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemovePendingAuthorization(__IntPtr __instance, uint nPlayerID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21ConnectionLibMainLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ConnectionLibMainLoop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal28CheckMasterServerTranslationEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CheckMasterServerTranslation(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18StartShutdownTimerEmm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartShutdownTimer(__IntPtr __instance, ulong nTime, ulong nDelay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19UpdateShutdownTimerEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateShutdownTimer(__IntPtr __instance, ulong nTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal23UpdateLogHeartbeatTimerEm", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateLogHeartbeatTimer(__IntPtr __instance, ulong nTime);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16AddSubNetProfileEj10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSubNetProfile(__IntPtr __instance, uint nPlayerID, __IntPtr sPlayerName, __IntPtr sCDPublicKey);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19RemoveSubNetProfileEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveSubNetProfile(__IntPtr __instance, uint nPlayerID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24AddSubNetProfileRecvSizeEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSubNetProfileRecvSize(__IntPtr __instance, uint nPlayerID, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22ShutdownServerProfilesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutdownServerProfiles(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal8MainLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MainLoop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16ExportAllPlayersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ExportAllPlayers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal9GetModuleEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetModule(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal13GetModuleNameEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetModuleName(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal17GetModuleLanguageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetModuleLanguage(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetPlayerListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPlayerListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetBannedListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetBannedListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetPortalListStringEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPortalListString(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19GetActivePauseStateEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetActivePauseState(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal22GetActiveExclusionListEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetActiveExclusionList(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal35SendEnhancedHeartbeatToMasterServerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendEnhancedHeartbeatToMasterServer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20SendHeartbeatToRelayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendHeartbeatToRelay(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal18IsPlayerNameStickyEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsPlayerNameSticky(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal16GetFirstPCObjectEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetFirstPCObject(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal15GetNextPCObjectEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetNextPCObject(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal37GetHostedPublicInternetAddressAndPortEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetHostedPublicInternetAddressAndPort(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal21StorePlayerCharactersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StorePlayerCharacters(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal33SendEnteringStartNewModuleMessageEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendEnteringStartNewModuleMessage(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal19UpdateAutoSaveTimerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateAutoSaveTimer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal24Test_Unit_Script_CompileEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestUnitScriptCompile(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN21CServerExoAppInternal20Test_Unit_Script_RunEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestUnitScriptRun(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerExoAppInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerExoAppInternal>();

        protected bool __ownsNativeInstance;

        internal static CServerExoAppInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CServerExoAppInternal(native.ToPointer(), skipVTables);
        }

        internal static CServerExoAppInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CServerExoAppInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CServerExoAppInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CServerExoAppInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CServerExoAppInternal.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CServerExoAppInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CServerExoAppInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CServerExoAppInternal()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerExoAppInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CServerExoAppInternal(global::NWN.LowLevel.CServerExoAppInternal _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerExoAppInternal.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CServerExoAppInternal __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Initialize()
        {
            var __ret = __Internal.Initialize(__Instance);
            return __ret;
        }

        public void StartServices()
        {
            __Internal.StartServices(__Instance);
        }

        public void StopServices()
        {
            __Internal.StopServices(__Instance);
        }

        public void ShutdownNetLayer()
        {
            __Internal.ShutdownNetLayer(__Instance);
        }

        public void RestartNetLayer()
        {
            __Internal.RestartNetLayer(__Instance);
        }

        public void Uninitialize()
        {
            __Internal.Uninitialize(__Instance);
        }

        public int AdmitNetworkAddress(uint nProtocol, global::NWN.LowLevel.CExoString sAddress)
        {
            if (ReferenceEquals(sAddress, null))
                throw new global::System.ArgumentNullException("sAddress", "Cannot be null because it is passed by value.");
            var __arg1 = sAddress.__Instance;
            var __ret = __Internal.AdmitNetworkAddress(__Instance, nProtocol, __arg1);
            return __ret;
        }

        public int AdmitPlayerName(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            var __ret = __Internal.AdmitPlayerName(__Instance, __arg0);
            return __ret;
        }

        public int HandleMessage(uint nPlayerId, byte* pData, uint dwSize, int bRawMessage)
        {
            var __ret = __Internal.HandleMessage(__Instance, nPlayerId, pData, dwSize, bRawMessage);
            return __ret;
        }

        public int SetNetworkAddressBan(uint nProtocol, global::NWN.LowLevel.CExoString sAddress, int bBanAddress)
        {
            if (ReferenceEquals(sAddress, null))
                throw new global::System.ArgumentNullException("sAddress", "Cannot be null because it is passed by value.");
            var __arg1 = sAddress.__Instance;
            var __ret = __Internal.SetNetworkAddressBan(__Instance, nProtocol, __arg1, bBanAddress);
            return __ret;
        }

        public void PlayerListChange(uint nPlayerId, int bEnter, int bPrimaryPlayer)
        {
            __Internal.PlayerListChange(__Instance, nPlayerId, bEnter, bPrimaryPlayer);
        }

        public int ContinueMessageProcessing()
        {
            var __ret = __Internal.ContinueMessageProcessing(__Instance);
            return __ret;
        }

        public void RemovePCFromWorld(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            __Internal.RemovePCFromWorld(__Instance, __arg0);
        }

        public void Shutdown(int bWarnLocals, int bFromMessage)
        {
            __Internal.Shutdown(__Instance, bWarnLocals, bFromMessage);
        }

        public int ValidatePlayerLogin(__IntPtr pPlayer)
        {
            var __ret = __Internal.ValidatePlayerLogin(__Instance, pPlayer);
            return __ret;
        }

        public void OnCDChange()
        {
            __Internal.OnCDChange(__Instance);
        }

        public void OnExit()
        {
            __Internal.OnExit(__Instance);
        }

        public void OnGainFocus()
        {
            __Internal.OnGainFocus(__Instance);
        }

        public void OnLostFocus()
        {
            __Internal.OnLostFocus(__Instance);
        }

        public void OnVideoChange()
        {
            __Internal.OnVideoChange(__Instance);
        }

        public global::NWN.LowLevel.CWorldTimer GetActiveTimer(uint oid)
        {
            var __ret = __Internal.GetActiveTimer(__Instance, oid);
            var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void SetGameSpyReporting(int bEnabled)
        {
            __Internal.SetGameSpyReporting(__Instance, bEnabled);
        }

        public global::NWN.LowLevel.CNWSPlayer GetClientObjectByObjectId(uint nObjectId)
        {
            var __ret = __Internal.GetClientObjectByObjectId(__Instance, nObjectId);
            var __result0 = global::NWN.LowLevel.CNWSPlayer.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSClient GetClientObjectByPlayerId(uint nPlayerId, byte nClientType)
        {
            var __ret = __Internal.GetClientObjectByPlayerId(__Instance, nPlayerId, nClientType);
            var __result0 = global::NWN.LowLevel.CNWSClient.__GetOrCreateInstance(__ret, true);
            return __result0;
        }

        public int CopyModuleToCurrentGame(global::NWN.LowLevel.CExoString sOldFilename, global::NWN.LowLevel.CExoString sNewFilename, ushort nResType)
        {
            if (ReferenceEquals(sOldFilename, null))
                throw new global::System.ArgumentNullException("sOldFilename", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sOldFilename.__Instance;
            if (ReferenceEquals(sNewFilename, null))
                throw new global::System.ArgumentNullException("sNewFilename", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sNewFilename.__Instance;
            var __ret = __Internal.CopyModuleToCurrentGame(__Instance, __arg0, __arg1, nResType);
            return __ret;
        }

        public int LoadGame(uint nSlot, global::NWN.LowLevel.CExoString sSaveName, global::NWN.LowLevel.CExoString sModuleName, global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            if (ReferenceEquals(sSaveName, null))
                throw new global::System.ArgumentNullException("sSaveName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sSaveName.__Instance;
            if (ReferenceEquals(sModuleName, null))
                throw new global::System.ArgumentNullException("sModuleName", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = sModuleName.__Instance;
            var __arg3 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadGame(__Instance, nSlot, __arg1, __arg2, __arg3);
            return __ret;
        }

        public void SetEstimatedSaveSize(global::NWN.LowLevel.CExoString sFile, ushort nResType)
        {
            if (ReferenceEquals(sFile, null))
                throw new global::System.ArgumentNullException("sFile", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFile.__Instance;
            __Internal.SetEstimatedSaveSize(__Instance, __arg0, nResType);
        }

        public int StartNewModule(global::NWN.LowLevel.CExoString sModuleName)
        {
            if (ReferenceEquals(sModuleName, null))
                throw new global::System.ArgumentNullException("sModuleName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sModuleName.__Instance;
            var __ret = __Internal.StartNewModule(__Instance, __arg0);
            return __ret;
        }

        public int EndGame(global::NWN.LowLevel.CExoString sMovieName)
        {
            if (ReferenceEquals(sMovieName, null))
                throw new global::System.ArgumentNullException("sMovieName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sMovieName.__Instance;
            var __ret = __Internal.EndGame(__Instance, __arg0);
            return __ret;
        }

        public uint ValidateCreateServerCharacter(global::NWN.LowLevel.CNWSPlayer pPlayer, __IntPtr pCharData, uint nSize)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.ValidateCreateServerCharacter(__Instance, __arg0, pCharData, nSize);
            return __ret;
        }

        public int LoadCharacterStart(byte nType, global::NWN.LowLevel.CNWSPlayer pPlayer, global::NWN.LowLevel.CResRef cResRef, __IntPtr pCharData, uint nSize)
        {
            var __arg1 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg2 = cResRef.__Instance;
            var __ret = __Internal.LoadCharacterStart(__Instance, nType, __arg1, *(global::NWN.LowLevel.CResRef.__Internal*) __arg2, pCharData, nSize);
            return __ret;
        }

        public int LoadCharacterFinish(global::NWN.LowLevel.CNWSPlayer pPlayer, int bUseSaveGameCharacter, int bUseStateDataInSaveGame)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadCharacterFinish(__Instance, __arg0, bUseSaveGameCharacter, bUseStateDataInSaveGame);
            return __ret;
        }

        public int LoadPrimaryPlayer(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadPrimaryPlayer(__Instance, __arg0);
            return __ret;
        }

        public int ExportPlayer(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.ExportPlayer(__Instance, __arg0);
            return __ret;
        }

        public void DealWithLoadGameError(uint nLoadErr)
        {
            __Internal.DealWithLoadGameError(__Instance, nLoadErr);
        }

        public int SetDDCipherForModule(global::NWN.LowLevel.CExoString moduleName)
        {
            if (ReferenceEquals(moduleName, null))
                throw new global::System.ArgumentNullException("moduleName", "Cannot be null because it is passed by value.");
            var __arg0 = moduleName.__Instance;
            var __ret = __Internal.SetDDCipherForModule(__Instance, __arg0);
            return __ret;
        }

        public global::NWN.LowLevel.CGameObject GetGameObject(uint nObjectID)
        {
            var __ret = __Internal.GetGameObject(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CGameObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSStore GetStoreByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetStoreByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSStore.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSItem GetItemByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetItemByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSCreature GetCreatureByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetCreatureByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSModule GetModuleByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetModuleByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSArea GetAreaByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetAreaByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSArea.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSTrigger GetTriggerByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetTriggerByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSTrigger.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSPlaceable GetPlaceableByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetPlaceableByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSPlaceable.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSDoor GetDoorByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetDoorByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSDoor.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSAreaOfEffectObject GetAreaOfEffectByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetAreaOfEffectByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSWaypoint GetWaypointByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetWaypointByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSWaypoint.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSEncounter GetEncounterByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetEncounterByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSEncounter.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CNWSSoundObject GetSoundObjectByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetSoundObjectByGameObjectID(__Instance, nObjectID);
            var __result0 = global::NWN.LowLevel.CNWSSoundObject.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public uint GetPlayerIDByGameObjectID(uint nObjectID)
        {
            var __ret = __Internal.GetPlayerIDByGameObjectID(__Instance, nObjectID);
            return __ret;
        }

        public int GetPlayerLanguage(uint nPlayerID)
        {
            var __ret = __Internal.GetPlayerLanguage(__Instance, nPlayerID);
            return __ret;
        }

        public int GetPlayerAddressData(uint nConnectionId, ref uint nProtocol, byte** pNetAddress1, byte** pNetAddress2, ref uint nPort)
        {
            fixed (uint* __nProtocol1 = &nProtocol)
            {
                var __arg1 = __nProtocol1;
                fixed (uint* __nPort4 = &nPort)
                {
                    var __arg4 = __nPort4;
                    var __ret = __Internal.GetPlayerAddressData(__Instance, nConnectionId, __arg1, pNetAddress1, pNetAddress2, __arg4);
                    return __ret;
                }
            }
        }

        public void GetExtendedServerInfo(global::NWN.LowLevel.CExtendedServerInfo pInfo)
        {
            var __arg0 = pInfo is null ? __IntPtr.Zero : pInfo.__Instance;
            __Internal.GetExtendedServerInfo(__Instance, __arg0);
        }

        public void HandleGameSpyToServerMessage(int nKeyId, __IntPtr pOutBuf, int nIndex)
        {
            __Internal.HandleGameSpyToServerMessage(__Instance, nKeyId, pOutBuf, nIndex);
        }

        public void UpdateClientsForObject(uint oidObjectToUpdate)
        {
            __Internal.UpdateClientsForObject(__Instance, oidObjectToUpdate);
        }

        public void MarkUpdateClientsForObject(uint oidObjectToUpdate)
        {
            __Internal.MarkUpdateClientsForObject(__Instance, oidObjectToUpdate);
        }

        public void UpdateClientGameObjectsForPlayer(global::NWN.LowLevel.CNWSPlayer pPlayer, int bForce, ulong nCurrentSystemTime)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            __Internal.UpdateClientGameObjectsForPlayer(__Instance, __arg0, bForce, nCurrentSystemTime);
        }

        public int UnloadModule()
        {
            var __ret = __Internal.UnloadModule(__Instance);
            return __ret;
        }

        public int LoadModule(global::NWN.LowLevel.CExoString moduleResRef, int bIsSaveGame, global::NWN.LowLevel.CNWSPlayer pPlayer, int sourceType)
        {
            if (ReferenceEquals(moduleResRef, null))
                throw new global::System.ArgumentNullException("moduleResRef", "Cannot be null because it is passed by value.");
            var __arg0 = moduleResRef.__Instance;
            var __arg2 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.LoadModule(__Instance, *(global::NWN.LowLevel.CExoString.__Internal*) __arg0, bIsSaveGame, __arg2, sourceType);
            return __ret;
        }

        public int GetModuleExists(global::NWN.LowLevel.CExoString sModuleResRef)
        {
            if (ReferenceEquals(sModuleResRef, null))
                throw new global::System.ArgumentNullException("sModuleResRef", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sModuleResRef.__Instance;
            var __ret = __Internal.GetModuleExists(__Instance, __arg0);
            return __ret;
        }

        public int RunModule()
        {
            var __ret = __Internal.RunModule(__Instance);
            return __ret;
        }

        public void VomitServerOptionsToLog()
        {
            __Internal.VomitServerOptionsToLog(__Instance);
        }

        public void MovePlayerToArea(__IntPtr pPlayer)
        {
            __Internal.MovePlayerToArea(__Instance, pPlayer);
        }

        public void InitiateModuleForPlayer(__IntPtr pPlayer)
        {
            __Internal.InitiateModuleForPlayer(__Instance, pPlayer);
        }

        public void UpdateWindowTitle()
        {
            __Internal.UpdateWindowTitle(__Instance);
        }

        public void AddItemAppearToScratch(global::NWN.LowLevel.CNWSItem pItem, ref uint scratchBufferPos)
        {
            var __arg0 = pItem is null ? __IntPtr.Zero : pItem.__Instance;
            fixed (uint* __scratchBufferPos1 = &scratchBufferPos)
            {
                var __arg1 = __scratchBufferPos1;
                __Internal.AddItemAppearToScratch(__Instance, __arg0, __arg1);
            }
        }

        public int GetFactionOfObject(uint oObject, ref int nFaction)
        {
            fixed (int* __nFaction1 = &nFaction)
            {
                var __arg1 = __nFaction1;
                var __ret = __Internal.GetFactionOfObject(__Instance, oObject, __arg1);
                return __ret;
            }
        }

        public int SendCharacterQuery(global::NWN.LowLevel.CNWSPlayer pPlayer)
        {
            var __arg0 = pPlayer is null ? __IntPtr.Zero : pPlayer.__Instance;
            var __ret = __Internal.SendCharacterQuery(__Instance, __arg0);
            return __ret;
        }

        public int SendStartStallEvent(uint nStallEvent)
        {
            var __ret = __Internal.SendStartStallEvent(__Instance, nStallEvent);
            return __ret;
        }

        public void TogglePauseState(byte nState)
        {
            __Internal.TogglePauseState(__Instance, nState);
        }

        public int GetPauseState(byte nState)
        {
            var __ret = __Internal.GetPauseState(__Instance, nState);
            return __ret;
        }

        public void SetPauseState(byte nState, int bPause)
        {
            __Internal.SetPauseState(__Instance, nState, bPause);
        }

        public void ClearPauseState()
        {
            __Internal.ClearPauseState(__Instance);
        }

        public void AddToExclusionList(uint oidExclude, byte nList)
        {
            __Internal.AddToExclusionList(__Instance, oidExclude, nList);
        }

        public void RemoveFromExclusionList(uint oidExclude, byte nList)
        {
            __Internal.RemoveFromExclusionList(__Instance, oidExclude, nList);
        }

        public int IsOnActiveExclusionList(uint oidExclude)
        {
            var __ret = __Internal.IsOnActiveExclusionList(__Instance, oidExclude);
            return __ret;
        }

        public void ReprocessExclusionListActions(byte nOldState)
        {
            __Internal.ReprocessExclusionListActions(__Instance, nOldState);
        }

        public uint ResolvePlayerByFirstName(global::NWN.LowLevel.CExoString sName)
        {
            if (ReferenceEquals(sName, null))
                throw new global::System.ArgumentNullException("sName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sName.__Instance;
            var __ret = __Internal.ResolvePlayerByFirstName(__Instance, __arg0);
            return __ret;
        }

        public int GetDifficultyOption(int nOption)
        {
            var __ret = __Internal.GetDifficultyOption(__Instance, nOption);
            return __ret;
        }

        public void AddCharListRequest(uint nPlayerId)
        {
            __Internal.AddCharListRequest(__Instance, nPlayerId);
        }

        public int IsOnExclusionList(uint oidToExamine)
        {
            var __ret = __Internal.IsOnExclusionList(__Instance, oidToExamine);
            return __ret;
        }

        public void AddIPToBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            if (ReferenceEquals(sIP, null))
                throw new global::System.ArgumentNullException("sIP", "Cannot be null because it is passed by value.");
            var __arg0 = sIP.__Instance;
            __Internal.AddIPToBannedList(__Instance, __arg0);
        }

        public void AddPlayerNameToBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            __Internal.AddPlayerNameToBannedList(__Instance, __arg0);
        }

        public void AddCDKeyToBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            if (ReferenceEquals(sKey, null))
                throw new global::System.ArgumentNullException("sKey", "Cannot be null because it is passed by value.");
            var __arg0 = sKey.__Instance;
            __Internal.AddCDKeyToBannedList(__Instance, __arg0);
        }

        public void RemoveIPFromBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            if (ReferenceEquals(sIP, null))
                throw new global::System.ArgumentNullException("sIP", "Cannot be null because it is passed by value.");
            var __arg0 = sIP.__Instance;
            __Internal.RemoveIPFromBannedList(__Instance, __arg0);
        }

        public void RemovePlayerNameFromBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            __Internal.RemovePlayerNameFromBannedList(__Instance, __arg0);
        }

        public void RemoveCDKeyFromBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            if (ReferenceEquals(sKey, null))
                throw new global::System.ArgumentNullException("sKey", "Cannot be null because it is passed by value.");
            var __arg0 = sKey.__Instance;
            __Internal.RemoveCDKeyFromBannedList(__Instance, __arg0);
        }

        public int GetIsIPOnBannedList(global::NWN.LowLevel.CExoString sIP)
        {
            if (ReferenceEquals(sIP, null))
                throw new global::System.ArgumentNullException("sIP", "Cannot be null because it is passed by value.");
            var __arg0 = sIP.__Instance;
            var __ret = __Internal.GetIsIPOnBannedList(__Instance, __arg0);
            return __ret;
        }

        public int GetIsPlayerNameOnBannedList(global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerName.__Instance;
            var __ret = __Internal.GetIsPlayerNameOnBannedList(__Instance, __arg0);
            return __ret;
        }

        public int GetIsCDKeyOnBannedList(global::NWN.LowLevel.CExoString sKey)
        {
            if (ReferenceEquals(sKey, null))
                throw new global::System.ArgumentNullException("sKey", "Cannot be null because it is passed by value.");
            var __arg0 = sKey.__Instance;
            var __ret = __Internal.GetIsCDKeyOnBannedList(__Instance, __arg0);
            return __ret;
        }

        public void HandleOldServerVaultMigration(global::NWN.LowLevel.CExoString sClientCDKey, global::NWN.LowLevel.CExoString sLegacyCDKey, global::NWN.LowLevel.CExoString sPlayerName)
        {
            if (ReferenceEquals(sClientCDKey, null))
                throw new global::System.ArgumentNullException("sClientCDKey", "Cannot be null because it is passed by value.");
            var __arg0 = sClientCDKey.__Instance;
            if (ReferenceEquals(sLegacyCDKey, null))
                throw new global::System.ArgumentNullException("sLegacyCDKey", "Cannot be null because it is passed by value.");
            var __arg1 = sLegacyCDKey.__Instance;
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg2 = sPlayerName.__Instance;
            __Internal.HandleOldServerVaultMigration(__Instance, __arg0, __arg1, __arg2);
        }

        public int CheckStickyPlayerNameReserved(global::NWN.LowLevel.CExoString sClientCDKey, global::NWN.LowLevel.CExoString sLegacyCDKey, global::NWN.LowLevel.CExoString sPlayerName, int nConnectionType)
        {
            if (ReferenceEquals(sClientCDKey, null))
                throw new global::System.ArgumentNullException("sClientCDKey", "Cannot be null because it is passed by value.");
            var __arg0 = sClientCDKey.__Instance;
            if (ReferenceEquals(sLegacyCDKey, null))
                throw new global::System.ArgumentNullException("sLegacyCDKey", "Cannot be null because it is passed by value.");
            var __arg1 = sLegacyCDKey.__Instance;
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg2 = sPlayerName.__Instance;
            var __ret = __Internal.CheckStickyPlayerNameReserved(__Instance, __arg0, __arg1, __arg2, nConnectionType);
            return __ret;
        }

        public void StallEventSaveGame()
        {
            __Internal.StallEventSaveGame(__Instance);
        }

        public void PushMessageOverWall(byte* pData, uint nMsgLength)
        {
            __Internal.PushMessageOverWall(__Instance, pData, nMsgLength);
        }

        public void UnlockBiowareModule(global::NWN.LowLevel.CNWSModule pModule)
        {
            var __arg0 = pModule is null ? __IntPtr.Zero : pModule.__Instance;
            __Internal.UnlockBiowareModule(__Instance, __arg0);
        }

        public int CreateServerVaultLostAndFound()
        {
            var __ret = __Internal.CreateServerVaultLostAndFound(__Instance);
            return __ret;
        }

        public int StripColorTokens(global::NWN.LowLevel.CExoString sInput)
        {
            if (ReferenceEquals(sInput, null))
                throw new global::System.ArgumentNullException("sInput", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sInput.__Instance;
            var __ret = __Internal.StripColorTokens(__Instance, __arg0);
            return __ret;
        }

        public void AddSubNetProfileSendSize(uint nPlayerID, uint nSize)
        {
            __Internal.AddSubNetProfileSendSize(__Instance, nPlayerID, nSize);
        }

        public int SendExitingStartNewModuleMessage(int bSuccess)
        {
            var __ret = __Internal.SendExitingStartNewModuleMessage(__Instance, bSuccess);
            return __ret;
        }

        public void QuarantineInvalidCharacter(__IntPtr pData, uint nSize)
        {
            __Internal.QuarantineInvalidCharacter(__Instance, pData, nSize);
        }

        public void UpdateClientGameObjects(int bForce)
        {
            __Internal.UpdateClientGameObjects(__Instance, bForce);
        }

        public void InitializeNetLayer()
        {
            __Internal.InitializeNetLayer(__Instance);
        }

        public void GetServerInfoFromIniFile()
        {
            __Internal.GetServerInfoFromIniFile(__Instance);
        }

        public void ReadBannedLists()
        {
            __Internal.ReadBannedLists(__Instance);
        }

        public void WriteServerInfoToIniFile()
        {
            __Internal.WriteServerInfoToIniFile(__Instance);
        }

        public int AddPendingAuthorization(uint nPlayerID)
        {
            var __ret = __Internal.AddPendingAuthorization(__Instance, nPlayerID);
            return __ret;
        }

        public int RemovePendingAuthorization(uint nPlayerID)
        {
            var __ret = __Internal.RemovePendingAuthorization(__Instance, nPlayerID);
            return __ret;
        }

        public void ConnectionLibMainLoop()
        {
            __Internal.ConnectionLibMainLoop(__Instance);
        }

        public void CheckMasterServerTranslation()
        {
            __Internal.CheckMasterServerTranslation(__Instance);
        }

        public void StartShutdownTimer(ulong nTime, ulong nDelay)
        {
            __Internal.StartShutdownTimer(__Instance, nTime, nDelay);
        }

        public int UpdateShutdownTimer(ulong nTime)
        {
            var __ret = __Internal.UpdateShutdownTimer(__Instance, nTime);
            return __ret;
        }

        public int UpdateLogHeartbeatTimer(ulong nTime)
        {
            var __ret = __Internal.UpdateLogHeartbeatTimer(__Instance, nTime);
            return __ret;
        }

        public void AddSubNetProfile(uint nPlayerID, global::NWN.LowLevel.CExoString sPlayerName, global::NWN.LowLevel.CExoString sCDPublicKey)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is passed by value.");
            var __arg1 = sPlayerName.__Instance;
            if (ReferenceEquals(sCDPublicKey, null))
                throw new global::System.ArgumentNullException("sCDPublicKey", "Cannot be null because it is passed by value.");
            var __arg2 = sCDPublicKey.__Instance;
            __Internal.AddSubNetProfile(__Instance, nPlayerID, __arg1, __arg2);
        }

        public void RemoveSubNetProfile(uint nPlayerID)
        {
            __Internal.RemoveSubNetProfile(__Instance, nPlayerID);
        }

        public void AddSubNetProfileRecvSize(uint nPlayerID, uint nSize)
        {
            __Internal.AddSubNetProfileRecvSize(__Instance, nPlayerID, nSize);
        }

        public void ShutdownServerProfiles()
        {
            __Internal.ShutdownServerProfiles(__Instance);
        }

        public byte[] ScratchMessageBuffer
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->ScratchMessageBuffer, 65536);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 65536; i++)
                        ((__Internal*)__Instance)->ScratchMessageBuffer[i] = value[i];
                }
            }
        }

        public int MBMultiplayerEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMultiplayerEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMultiplayerEnabled = value;
            }
        }

        public int MBGameSpyEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bGameSpyEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bGameSpyEnabled = value;
            }
        }

        public int MBCDResponseReceived
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCDResponseReceived;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCDResponseReceived = value;
            }
        }

        public global::NWN.LowLevel.CServerInfo MPServerInfo
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CServerInfo.__GetOrCreateInstance(((__Internal*)__Instance)->m_pServerInfo, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pServerInfo = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public short MNServerMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nServerMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nServerMode = value;
            }
        }

        public global::NWN.LowLevel.CNWVirtualMachineCommands MPVirtualMachineCommandImplementer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWVirtualMachineCommands.__GetOrCreateInstance(((__Internal*)__Instance)->m_pVirtualMachineCommandImplementer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pVirtualMachineCommandImplementer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWSMessage MPMessage
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSMessage.__GetOrCreateInstance(((__Internal*)__Instance)->m_pMessage, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pMessage = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBForceUpdate
        {
            get
            {
                return ((__Internal*)__Instance)->m_bForceUpdate;
            }

            set
            {
                ((__Internal*)__Instance)->m_bForceUpdate = value;
            }
        }

        public uint* MPPendingAuthorization
        {
            get
            {
                return (uint*) ((__Internal*)__Instance)->m_pPendingAuthorization;
            }

            set
            {
                ((__Internal*)__Instance)->m_pPendingAuthorization = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MLstClientDisconnectPending
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstClientDisconnectPending));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstClientDisconnectPending = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public ulong MNShutdownTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nShutdownTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nShutdownTimer = value;
            }
        }

        public ulong MNShutdownTimeStamp
        {
            get
            {
                return ((__Internal*)__Instance)->m_nShutdownTimeStamp;
            }

            set
            {
                ((__Internal*)__Instance)->m_nShutdownTimeStamp = value;
            }
        }

        public ulong MNShutdownMaxTimeLocalLogins
        {
            get
            {
                return ((__Internal*)__Instance)->m_nShutdownMaxTimeLocalLogins;
            }

            set
            {
                ((__Internal*)__Instance)->m_nShutdownMaxTimeLocalLogins = value;
            }
        }

        public int MBReloadModuleWhenEmpty
        {
            get
            {
                return ((__Internal*)__Instance)->m_bReloadModuleWhenEmpty;
            }

            set
            {
                ((__Internal*)__Instance)->m_bReloadModuleWhenEmpty = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSLastModuleLoadedFilename
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLastModuleLoadedFilename));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLastModuleLoadedFilename = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBLastModuleLoadedWasSaveGame
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLastModuleLoadedWasSaveGame;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLastModuleLoadedWasSaveGame = value;
            }
        }

        public int MBConnectionLoopFirstRun
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConnectionLoopFirstRun;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConnectionLoopFirstRun = value;
            }
        }

        public global::NWN.LowLevel.CNetLayer MPNetLayer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNetLayer.__GetOrCreateInstance(((__Internal*)__Instance)->m_pNetLayer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pNetLayer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CServerAIMaster MPServerAIMaster
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CServerAIMaster.__GetOrCreateInstance(((__Internal*)__Instance)->m_pServerAIMaster, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pServerAIMaster = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CWorldTimer MPWorldTimer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(((__Internal*)__Instance)->m_pWorldTimer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pWorldTimer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CWorldTimer MPTimestopTimer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(((__Internal*)__Instance)->m_pTimestopTimer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pTimestopTimer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CWorldTimer MPPauseTimer
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CWorldTimer.__GetOrCreateInstance(((__Internal*)__Instance)->m_pPauseTimer, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pPauseTimer = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CFactionManager MPFactionManager
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CFactionManager.__GetOrCreateInstance(((__Internal*)__Instance)->m_pFactionManager, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pFactionManager = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CConnectionLib MPConnectionLib
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CConnectionLib.__GetOrCreateInstance(((__Internal*)__Instance)->m_pConnectionLib, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pConnectionLib = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CCampaignDB MPCampaignDB
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CCampaignDB.__GetOrCreateInstance(((__Internal*)__Instance)->m_pCampaignDB, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pCampaignDB = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CGameObjectArray MPGameObjArray
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CGameObjectArray.__GetOrCreateInstance(((__Internal*)__Instance)->m_pGameObjArray, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pGameObjArray = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MOidModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidModule = value;
            }
        }

        public global::NWN.LowLevel.CNWPlaceMeshManager MPPlaceMeshManager
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWPlaceMeshManager.__GetOrCreateInstance(((__Internal*)__Instance)->m_pPlaceMeshManager, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pPlaceMeshManager = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MBDebugMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDebugMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDebugMode = value;
            }
        }

        public global::NWN.LowLevel.AurList<uint> MLstPauseExclusionList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.AurList<uint>.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstPauseExclusionList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstPauseExclusionList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.AurList<uint> MLstTimestopExclusionList
        {
            get
            {
                var __result0 = global::NWN.LowLevel.AurList<uint>.__GetOrCreateInstance(((__Internal*)__Instance)->m_lstTimestopExclusionList, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_lstTimestopExclusionList = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public byte MNPauseState
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPauseState;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPauseState = value;
            }
        }

        public int MBDoingStartNewModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDoingStartNewModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDoingStartNewModule = value;
            }
        }

        public int MBMoveToModulePending
        {
            get
            {
                return ((__Internal*)__Instance)->m_bMoveToModulePending;
            }

            set
            {
                ((__Internal*)__Instance)->m_bMoveToModulePending = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSMoveToModuleString
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sMoveToModuleString));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sMoveToModuleString = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBEndGamePending
        {
            get
            {
                return ((__Internal*)__Instance)->m_bEndGamePending;
            }

            set
            {
                ((__Internal*)__Instance)->m_bEndGamePending = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSEndGameMovie
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sEndGameMovie));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sEndGameMovie = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MBLoadingModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLoadingModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLoadingModule = value;
            }
        }

        public int MBImportingChar
        {
            get
            {
                return ((__Internal*)__Instance)->m_bImportingChar;
            }

            set
            {
                ((__Internal*)__Instance)->m_bImportingChar = value;
            }
        }

        public int MBAutoSavePending
        {
            get
            {
                return ((__Internal*)__Instance)->m_bAutoSavePending;
            }

            set
            {
                ((__Internal*)__Instance)->m_bAutoSavePending = value;
            }
        }

        public int MBDisableAutoSave
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDisableAutoSave;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDisableAutoSave = value;
            }
        }

        public int MBExportCharacterPending
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExportCharacterPending;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExportCharacterPending = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MExportPlayerCharacterRequests
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_exportPlayerCharacterRequests));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_exportPlayerCharacterRequests = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public int MBNeedSinglePlayerCharacter
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNeedSinglePlayerCharacter;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNeedSinglePlayerCharacter = value;
            }
        }

        public uint MNEstimatedSaveSize
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEstimatedSaveSize;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEstimatedSaveSize = value;
            }
        }

        public ulong MNLogHeartbeatTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLogHeartbeatTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLogHeartbeatTimer = value;
            }
        }

        public ulong MNLogHeartbeatTimeStamp
        {
            get
            {
                return ((__Internal*)__Instance)->m_nLogHeartbeatTimeStamp;
            }

            set
            {
                ((__Internal*)__Instance)->m_nLogHeartbeatTimeStamp = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<uint> MNCharListRequests
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<uint>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nCharListRequests));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nCharListRequests = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> MLstBannedListIP
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstBannedListIP));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstBannedListIP = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> MLstBannedListCDKey
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstBannedListCDKey));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstBannedListCDKey = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString> MLstBannedListPlayerName
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CExoString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstBannedListPlayerName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstBannedListPlayerName = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.C2DA MPOldServerVault2DA
        {
            get
            {
                var __result0 = global::NWN.LowLevel.C2DA.__GetOrCreateInstance(((__Internal*)__Instance)->m_pOldServerVault2DA, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pOldServerVault2DA = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.C2DA MPKnownServerNames2DA
        {
            get
            {
                var __result0 = global::NWN.LowLevel.C2DA.__GetOrCreateInstance(((__Internal*)__Instance)->m_pKnownServerNames2DA, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pKnownServerNames2DA = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ushort MNBannedListsTimeStampSecond
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBannedListsTimeStampSecond;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBannedListsTimeStampSecond = value;
            }
        }

        public ushort MNBannedListsTimeStampMinute
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBannedListsTimeStampMinute;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBannedListsTimeStampMinute = value;
            }
        }

        public ushort MNBannedListsTimeStampHour
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBannedListsTimeStampHour;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBannedListsTimeStampHour = value;
            }
        }

        public uint MNBannedListsTimeStamp
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBannedListsTimeStamp;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBannedListsTimeStamp = value;
            }
        }

        public global::NWN.LowLevel.CExoLinkedListNode MPosPCObject
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoLinkedListNode.__GetOrCreateInstance(((__Internal*)__Instance)->m_posPCObject, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_posPCObject = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public ulong MNAutoSaveTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAutoSaveTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAutoSaveTimer = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.SSubNetProfile> MAcSubNetProfiles
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.SSubNetProfile>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_acSubNetProfiles));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_acSubNetProfiles = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public ulong MNTotalSubNetSent
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalSubNetSent;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalSubNetSent = value;
            }
        }

        public ulong MNTotalSubNetRecv
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTotalSubNetRecv;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTotalSubNetRecv = value;
            }
        }

        public ulong MNServerStartupTime
        {
            get
            {
                return ((__Internal*)__Instance)->m_nServerStartupTime;
            }

            set
            {
                ((__Internal*)__Instance)->m_nServerStartupTime = value;
            }
        }

        public int MNEnableSubNetProfiling
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEnableSubNetProfiling;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEnableSubNetProfiling = value;
            }
        }

        public int MBHeartBeatLoggingEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bHeartBeatLoggingEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bHeartBeatLoggingEnabled = value;
            }
        }

        public int MBCreatureDeathLoggingEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bCreatureDeathLoggingEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bCreatureDeathLoggingEnabled = value;
            }
        }

        public uint MNClientsRequiredToDisableCPUSleep
        {
            get
            {
                return ((__Internal*)__Instance)->m_nClientsRequiredToDisableCPUSleep;
            }

            set
            {
                ((__Internal*)__Instance)->m_nClientsRequiredToDisableCPUSleep = value;
            }
        }

        public int MBStickyCombatModesEnabled
        {
            get
            {
                return ((__Internal*)__Instance)->m_bStickyCombatModesEnabled;
            }

            set
            {
                ((__Internal*)__Instance)->m_bStickyCombatModesEnabled = value;
            }
        }

        public int MAttackBonusLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_AttackBonusLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_AttackBonusLimit = value;
            }
        }

        public int MDamageBonusLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_DamageBonusLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_DamageBonusLimit = value;
            }
        }

        public int MSavingThrowBonusLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_SavingThrowBonusLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_SavingThrowBonusLimit = value;
            }
        }

        public int MAbilityBonusLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_AbilityBonusLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_AbilityBonusLimit = value;
            }
        }

        public int MAbilityPenaltyLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_AbilityPenaltyLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_AbilityPenaltyLimit = value;
            }
        }

        public int MSkillBonusLimit
        {
            get
            {
                return ((__Internal*)__Instance)->m_SkillBonusLimit;
            }

            set
            {
                ((__Internal*)__Instance)->m_SkillBonusLimit = value;
            }
        }

        public int MAttackBonusLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_AttackBonusLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_AttackBonusLimitModule = value;
            }
        }

        public int MDamageBonusLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_DamageBonusLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_DamageBonusLimitModule = value;
            }
        }

        public int MSavingThrowBonusLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_SavingThrowBonusLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_SavingThrowBonusLimitModule = value;
            }
        }

        public int MAbilityBonusLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_AbilityBonusLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_AbilityBonusLimitModule = value;
            }
        }

        public int MAbilityPenaltyLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_AbilityPenaltyLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_AbilityPenaltyLimitModule = value;
            }
        }

        public int MSkillBonusLimitModule
        {
            get
            {
                return ((__Internal*)__Instance)->m_SkillBonusLimitModule;
            }

            set
            {
                ((__Internal*)__Instance)->m_SkillBonusLimitModule = value;
            }
        }

        public int MainLoop
        {
            get
            {
                var __ret = __Internal.MainLoop(__Instance);
                return __ret;
            }
        }

        public int ExportAllPlayers
        {
            get
            {
                var __ret = __Internal.ExportAllPlayers(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSModule Module
        {
            get
            {
                var __ret = __Internal.GetModule(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CExoString ModuleName
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetModuleName(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public int ModuleLanguage
        {
            get
            {
                var __ret = __Internal.GetModuleLanguage(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString PlayerListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetPlayerListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString BannedListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetBannedListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString PortalListString
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetPortalListString(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public byte ActivePauseState
        {
            get
            {
                var __ret = __Internal.GetActivePauseState(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.AurList<uint> ActiveExclusionList
        {
            get
            {
                var __ret = __Internal.GetActiveExclusionList(__Instance);
                var __result0 = global::NWN.LowLevel.AurList<uint>.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int SendEnhancedHeartbeatToMasterServer
        {
            get
            {
                var __ret = __Internal.SendEnhancedHeartbeatToMasterServer(__Instance);
                return __ret;
            }
        }

        public int SendHeartbeatToRelay
        {
            get
            {
                var __ret = __Internal.SendHeartbeatToRelay(__Instance);
                return __ret;
            }
        }

        public int IsPlayerNameSticky
        {
            get
            {
                var __ret = __Internal.IsPlayerNameSticky(__Instance);
                return __ret;
            }
        }

        public uint FirstPCObject
        {
            get
            {
                var __ret = __Internal.GetFirstPCObject(__Instance);
                return __ret;
            }
        }

        public uint NextPCObject
        {
            get
            {
                var __ret = __Internal.GetNextPCObject(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString HostedPublicInternetAddressAndPort
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetHostedPublicInternetAddressAndPort(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public int StorePlayerCharacters
        {
            get
            {
                var __ret = __Internal.StorePlayerCharacters(__Instance);
                return __ret;
            }
        }

        public int SendEnteringStartNewModuleMessage
        {
            get
            {
                var __ret = __Internal.SendEnteringStartNewModuleMessage(__Instance);
                return __ret;
            }
        }

        public int UpdateAutoSaveTimer
        {
            get
            {
                var __ret = __Internal.UpdateAutoSaveTimer(__Instance);
                return __ret;
            }
        }

        public int TestUnitScriptCompile
        {
            get
            {
                var __ret = __Internal.TestUnitScriptCompile(__Instance);
                return __ret;
            }
        }

        public int TestUnitScriptRun
        {
            get
            {
                var __ret = __Internal.TestUnitScriptRun(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
