// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWTileSurfaceMesh : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 536)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CResHelper;

            [FieldOffset(8)]
            internal int m_bAutoRequest;

            [FieldOffset(16)]
            internal __IntPtr m_pRes;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cResRef;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cWalkMesh;

            [FieldOffset(88)]
            internal byte m_nPathNode;

            [FieldOffset(92)]
            internal int m_nPathNodeOrientation;

            [FieldOffset(96)]
            internal byte m_nVisibilityNode;

            [FieldOffset(100)]
            internal int m_nVisibilityNodeOrientation;

            [FieldOffset(104)]
            internal byte m_nDoorVisNode;

            [FieldOffset(108)]
            internal int m_nDoorVisNodeOrientation;

            [FieldOffset(112)]
            internal int m_nTileConnectivity;

            [FieldOffset(116)]
            internal int m_nVertices;

            [FieldOffset(120)]
            internal int m_nVerticesLayer1;

            [FieldOffset(124)]
            internal int m_nVerticesLayer2;

            [FieldOffset(128)]
            internal int m_nVerticesLayer3;

            [FieldOffset(132)]
            internal int m_nTriangles;

            [FieldOffset(136)]
            internal int m_nTrianglesLayer1;

            [FieldOffset(140)]
            internal int m_nTrianglesLayer2;

            [FieldOffset(144)]
            internal int m_nTrianglesLayer3;

            [FieldOffset(152)]
            internal __IntPtr m_pnTriangles;

            [FieldOffset(160)]
            internal __IntPtr m_pnTrianglesLayer1;

            [FieldOffset(168)]
            internal __IntPtr m_pnTrianglesLayer2;

            [FieldOffset(176)]
            internal __IntPtr m_pnTrianglesLayer3;

            [FieldOffset(184)]
            internal __IntPtr m_pnTriangleMaterial;

            [FieldOffset(192)]
            internal __IntPtr m_pfTriangleDistances;

            [FieldOffset(200)]
            internal __IntPtr m_pvTriangleNormals;

            [FieldOffset(208)]
            internal __IntPtr m_pnTAdjacency;

            [FieldOffset(216)]
            internal __IntPtr m_pnTAdjacencyLayer1;

            [FieldOffset(224)]
            internal __IntPtr m_pnTAdjacencyLayer2;

            [FieldOffset(232)]
            internal __IntPtr m_pnTAdjacencyLayer3;

            [FieldOffset(240)]
            internal __IntPtr m_pfVertices;

            [FieldOffset(248)]
            internal __IntPtr m_pfVerticesLayer1;

            [FieldOffset(256)]
            internal __IntPtr m_pfVerticesLayer2;

            [FieldOffset(264)]
            internal __IntPtr m_pfVerticesLayer3;

            [FieldOffset(272)]
            internal int m_nDeniedVertices;

            [FieldOffset(280)]
            internal __IntPtr m_pfDeniedVertices;

            [FieldOffset(288)]
            internal int m_nDeniedTriangles;

            [FieldOffset(296)]
            internal __IntPtr m_pnDeniedTriangles;

            [FieldOffset(304)]
            internal __IntPtr m_pnDeniedTriangleMaterial;

            [FieldOffset(312)]
            internal __IntPtr m_pfDeniedTriangleDistances;

            [FieldOffset(320)]
            internal __IntPtr m_pvDeniedTriangleNormals;

            [FieldOffset(328)]
            internal __IntPtr m_pAABBTree;

            [FieldOffset(336)]
            internal float m_fGoalTargetX;

            [FieldOffset(340)]
            internal float m_fGoalMinX;

            [FieldOffset(344)]
            internal float m_fGoalMaxX;

            [FieldOffset(348)]
            internal float m_fGoalTargetY;

            [FieldOffset(352)]
            internal float m_fGoalMinY;

            [FieldOffset(356)]
            internal float m_fGoalMaxY;

            [FieldOffset(360)]
            internal int m_nGoalTargetTriangle;

            [FieldOffset(364)]
            internal float m_fGoalMaximumDistance;

            [FieldOffset(368)]
            internal int m_nIntraTileWPLength;

            [FieldOffset(376)]
            internal __IntPtr m_pfIntraTileWayPoints;

            [FieldOffset(384)]
            internal int m_nIntraTileTriangles;

            [FieldOffset(392)]
            internal __IntPtr m_pnIntraTileTriangle;

            [FieldOffset(400)]
            internal int m_nIntraTileUnits;

            [FieldOffset(404)]
            internal int m_nMaxIntraTileUnits;

            [FieldOffset(408)]
            internal float m_fMinEstimateToGoal;

            [FieldOffset(416)]
            internal __IntPtr m_pcIntraTileHashTable;

            [FieldOffset(424)]
            internal global::NWN.LowLevel.CNWTileSurfaceMeshLocalInfo.__Internal m_pcIntraTileGenSuccessorsLocalInfo;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMeshC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMeshC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh16ClearSubdivisionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearSubdivision(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh13CheckAABBNodeEiP26CNWTileSurfaceMeshAABBNodeRK6VectorRS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckAABBNode(__IntPtr __instance, int nDirectionHeuristic, __IntPtr pAABBNode, __IntPtr v0, __IntPtr v1_aor_impact);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh19CheckAABBNodeOneWayEiP26CNWTileSurfaceMeshAABBNodeRK6VectorRS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckAABBNodeOneWay(__IntPtr __instance, int nDirectionHeuristic, __IntPtr pAABBNode, __IntPtr v0, __IntPtr v1_aor_impact);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh26ClippedLineSegmentWalkableEP7CNWTileffffPfS2_S2_S2_S2_S2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClippedLineSegmentWalkable(__IntPtr __instance, __IntPtr pTile, float fStartX, float fStartY, float fEndX, float fEndY, float* fClipStartX, float* fClipStartY, float* fClipEndX, float* fClipEndY, float* fClipMinZ, float* fClipMaxZ);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh25ComputeClippedLineSegmentEP7CNWTileffffPfS2_S2_S2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ComputeClippedLineSegment(__IntPtr __instance, __IntPtr pTile, float fStartX, float fStartY, float fEndX, float fEndY, float* fClipStartX, float* fClipStartY, float* fClipEndX, float* fClipEndY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh13ComputeHeightE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float ComputeHeight(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh16ComputePathNodesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputePathNodes(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh24ComputeTriangleAdjacencyEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputeTriangleAdjacency(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh24EstimateDistanceToTargetEff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float EstimateDistanceToTarget(__IntPtr __instance, float fX, float fY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17FindClosestRegionEP7CNWTileffhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindClosestRegion(__IntPtr __instance, __IntPtr pTile, float fX, float fY, byte nPathNode, int nOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh21FindRegionViaTriangleEiiPiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindRegionViaTriangle(__IntPtr __instance, int nTriangle, int nRegionNodes, int* pnRegionTriangles, int* pbTriangleChecked);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh12FindTriangleEiiffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindTriangle(__IntPtr __instance, int nLevel, int nDepth, float fX, float fY, int nTriangle);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh25GenerateBestIntraTileExitEP7CNWTileP7CNWAreaP20CPathfindInformationff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GenerateBestIntraTileExit(__IntPtr __instance, __IntPtr pTile, __IntPtr pWalkGeometry, __IntPtr pSearchInformation, float fCurrentX, float fCurrentY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh7GetExitEiPfS0_Pi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetExit(__IntPtr __instance, int nExit, float* fX, float* fY, int* nRegion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh13GetExitNumberEff", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetExitNumber(__IntPtr __instance, float fX, float fY);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh15GetRegionCoordsEiPfS0_hi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRegionCoords(__IntPtr __instance, int nRegion, float* fX, float* fY, byte nPathNode, int nOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17GetRegionEntranceEffhi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRegionEntrance(__IntPtr __instance, float fX, float fY, byte nPathNode, int nOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh18GetSurfaceMaterialE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSurfaceMaterial(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vPosition);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh20GetTriangleAdjacencyEiiPiS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetTriangleAdjacency(__IntPtr __instance, int nLevel, int nTriangle, int* ta12, int* ta23, int* ta31);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh19GetTriangleCentroidEiPfS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetTriangleCentroid(__IntPtr __instance, int nTriangle, float* fX, float* fY, float* fZ);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh19GetTriangleVerticesEiiPiS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetTriangleVertices(__IntPtr __instance, int nLevel, int nTriangle, int* v1, int* v2, int* v3);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17GetVertexGeometryEiP6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetVertexGeometry(__IntPtr __instance, int nVertex, __IntPtr vVector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17GetVertexGeometryEiPfS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetVertexGeometry(__IntPtr __instance, int nVertex, float* vX, float* vY, float* vZ);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh25GetTopLevelVertexGeometryEiPfS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetTopLevelVertexGeometry(__IntPtr __instance, int nVertex, float* vX, float* vY, float* vZ);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh16ClearLineOfSightEi6VectorS0_PS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClearLineOfSight(__IntPtr __instance, int nDirectionHeuristic, global::NWN.LowLevel.Vector.__Internal vSource, global::NWN.LowLevel.Vector.__Internal vTarget, __IntPtr vImpact);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh22ClearLineOfSightOneWayEi6VectorS0_PS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ClearLineOfSightOneWay(__IntPtr __instance, int nDirectionHeuristic, global::NWN.LowLevel.Vector.__Internal vSource, global::NWN.LowLevel.Vector.__Internal vTarget, __IntPtr pImpact);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh10InitializeEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Initialize(__IntPtr __instance, int x, int y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh21IntersectLineSegmentsE6VectorS0_S0_S0_PS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntersectLineSegments(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal v1, global::NWN.LowLevel.Vector.__Internal v2, global::NWN.LowLevel.Vector.__Internal v3, global::NWN.LowLevel.Vector.__Internal v4, __IntPtr vIntersect);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh12IntraTileDFSEP7CNWTileP7CNWAreaP20CPathfindInformationififffffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntraTileDFS(__IntPtr __instance, __IntPtr pTile, __IntPtr pWalkGeometry, __IntPtr pSearchInformation, int level, float fDistanceTravelled, int nCurrentTriangle, float fX, float fY, float fStartX, float fStartY, float fPersonalSpace, int bUseAdjacencies);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh30IntraTileDFSGenerateSuccessorsEiP7CNWTileP7CNWAreaffiP20CPathfindInformationPP32CPathfindInfoIntraTileSuccessors", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntraTileDFSGenerateSuccessors(__IntPtr __instance, int bAdjacenciesOnly, __IntPtr pTile, __IntPtr pWalkGeometry, float fX, float fY, int nCurrentTriangle, __IntPtr pPathfindInfo, __IntPtr pSuccessors);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh23PrintAABBTreeToPrintLogEP26CNWTileSurfaceMeshAABBNodei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void PrintAABBTreeToPrintLog(__IntPtr __instance, __IntPtr pNode, int indentation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh19LoadDefaultWalkMeshEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadDefaultWalkMesh(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh12LoadWalkMeshEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadWalkMesh(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh18LoadWalkMeshStringEPPhPjS0_j", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadWalkMeshString(__IntPtr __instance, byte** pInput, uint* nInputSize, byte* pchBuffer, uint nBufferSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh20NoNonWalkPolysOnTileEfffffffi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int NoNonWalkPolysOnTile(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, int bTestSinglePoint);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17PlotIntraTilePathEP7CNWTileP7CNWAreaP20CPathfindInformationffffji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint PlotIntraTilePath(__IntPtr __instance, __IntPtr pTile, __IntPtr pWalkGeometry, __IntPtr pSearchInformation, float fCurrentIntraTileX, float fCurrentIntraTileY, float fInterTileStartX, float fInterTileStartY, uint nMaxTimeAllowed, int bAdjacenciesOnly);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh14RunSubdivisionEPiiPfiS0_S0_iS1_iS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RunSubdivision(__IntPtr __instance, int* pNewTriangles, int nNewTriangles, float* pNewVertices, int nNewVertices, int* pNewTAdjacency, int* pTriangles, int nTriangles, float* pVertices, int nVertices, int* pTAdjacency);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh9SubdivideEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Subdivide(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh25TestLineForWalkableOnAreaEffffffP20CPathfindInformationP7CNWTileP7CNWArea", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestLineForWalkableOnArea(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fClipMinZ, float fClipMaxZ, __IntPtr pPathfindInfo, __IntPtr pTile, __IntPtr pArea);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh25TestLineForWalkableOnTileEffffPfS0_P20CPathfindInformationP7CNWTilei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TestLineForWalkableOnTile(__IntPtr __instance, float fSourceX, float fSourceY, float fTargetX, float fTargetY, float* fClipMinZ, float* fClipMaxZ, __IntPtr pPathfindInfo, __IntPtr pTile, int bStayOnTile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh7PolyHitEPK6VectoriRS1_S3_S3_fPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PolyHit(__IntPtr __instance, __IntPtr vert, int n, __IntPtr v0, __IntPtr v1, __IntPtr nrml, float dist, __IntPtr impact);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh17IntersectCircle2dERK6VectorfS2_S2_RS0_S3_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IntersectCircle2d(__IntPtr __instance, __IntPtr vCenter, float fRadius, __IntPtr vLineVertex1, __IntPtr vLineVertex2, __IntPtr vIntersect1, __IntPtr vIntersect2, int bFindIntersections);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh12LocalToWorldE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal LocalToWorld(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh18NormalWorldToLocalE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal NormalWorldToLocal(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh18NormalLocalToWorldE6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal NormalLocalToWorld(__IntPtr __instance, global::NWN.LowLevel.Vector.__Internal vSource);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh24ConvertToTileOrientationEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte ConvertToTileOrientation(__IntPtr __instance, int nOrientation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh11GetPathNodeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetPathNode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh11SetPathNodeEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPathNode(__IntPtr __instance, byte nPathNode);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh22GetPathNodeOrientationEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPathNodeOrientation(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh13GetTotalExitsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetTotalExits(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh11GetWalkMeshEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetWalkMesh(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWTileSurfaceMesh11SetWalkMeshE7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetWalkMesh(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cWalkMesh);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileSurfaceMesh> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileSurfaceMesh>();

        protected bool __ownsNativeInstance;

        internal static CNWTileSurfaceMesh __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWTileSurfaceMesh(native.ToPointer(), skipVTables);
        }

        internal static CNWTileSurfaceMesh __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWTileSurfaceMesh)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWTileSurfaceMesh __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CNWTileSurfaceMesh)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CNWTileSurfaceMesh __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWTileSurfaceMesh(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWTileSurfaceMesh.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWTileSurfaceMesh(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWTileSurfaceMesh(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CNWTileSurfaceMesh()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileSurfaceMesh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTileSurfaceMesh");
        }

        public CNWTileSurfaceMesh(global::NWN.LowLevel.CNWTileSurfaceMesh _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileSurfaceMesh.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CNWTileSurfaceMesh");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWTileSurfaceMesh __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CNWTileSurfaceMesh.__Internal*) __Instance)->vptr_CResHelper = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void ClearSubdivision()
        {
            __Internal.ClearSubdivision(__Instance);
        }

        public int CheckAABBNode(int nDirectionHeuristic, global::NWN.LowLevel.CNWTileSurfaceMeshAABBNode pAABBNode, global::NWN.LowLevel.Vector v0, global::NWN.LowLevel.Vector v1_aor_impact)
        {
            var __arg1 = pAABBNode is null ? __IntPtr.Zero : pAABBNode.__Instance;
            if (ReferenceEquals(v0, null))
                throw new global::System.ArgumentNullException("v0", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = v0.__Instance;
            if (ReferenceEquals(v1_aor_impact, null))
                throw new global::System.ArgumentNullException("v1_aor_impact", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = v1_aor_impact.__Instance;
            var __ret = __Internal.CheckAABBNode(__Instance, nDirectionHeuristic, __arg1, __arg2, __arg3);
            return __ret;
        }

        public int CheckAABBNodeOneWay(int nDirectionHeuristic, global::NWN.LowLevel.CNWTileSurfaceMeshAABBNode pAABBNode, global::NWN.LowLevel.Vector v0, global::NWN.LowLevel.Vector v1_aor_impact)
        {
            var __arg1 = pAABBNode is null ? __IntPtr.Zero : pAABBNode.__Instance;
            if (ReferenceEquals(v0, null))
                throw new global::System.ArgumentNullException("v0", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = v0.__Instance;
            if (ReferenceEquals(v1_aor_impact, null))
                throw new global::System.ArgumentNullException("v1_aor_impact", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = v1_aor_impact.__Instance;
            var __ret = __Internal.CheckAABBNodeOneWay(__Instance, nDirectionHeuristic, __arg1, __arg2, __arg3);
            return __ret;
        }

        public int ClippedLineSegmentWalkable(global::NWN.LowLevel.CNWTile pTile, float fStartX, float fStartY, float fEndX, float fEndY, ref float fClipStartX, ref float fClipStartY, ref float fClipEndX, ref float fClipEndY, ref float fClipMinZ, ref float fClipMaxZ)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            fixed (float* __fClipStartX5 = &fClipStartX)
            {
                var __arg5 = __fClipStartX5;
                fixed (float* __fClipStartY6 = &fClipStartY)
                {
                    var __arg6 = __fClipStartY6;
                    fixed (float* __fClipEndX7 = &fClipEndX)
                    {
                        var __arg7 = __fClipEndX7;
                        fixed (float* __fClipEndY8 = &fClipEndY)
                        {
                            var __arg8 = __fClipEndY8;
                            fixed (float* __fClipMinZ9 = &fClipMinZ)
                            {
                                var __arg9 = __fClipMinZ9;
                                fixed (float* __fClipMaxZ10 = &fClipMaxZ)
                                {
                                    var __arg10 = __fClipMaxZ10;
                                    var __ret = __Internal.ClippedLineSegmentWalkable(__Instance, __arg0, fStartX, fStartY, fEndX, fEndY, __arg5, __arg6, __arg7, __arg8, __arg9, __arg10);
                                    return __ret;
                                }
                            }
                        }
                    }
                }
            }
        }

        public int ComputeClippedLineSegment(global::NWN.LowLevel.CNWTile pTile, float fStartX, float fStartY, float fEndX, float fEndY, ref float fClipStartX, ref float fClipStartY, ref float fClipEndX, ref float fClipEndY)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            fixed (float* __fClipStartX5 = &fClipStartX)
            {
                var __arg5 = __fClipStartX5;
                fixed (float* __fClipStartY6 = &fClipStartY)
                {
                    var __arg6 = __fClipStartY6;
                    fixed (float* __fClipEndX7 = &fClipEndX)
                    {
                        var __arg7 = __fClipEndX7;
                        fixed (float* __fClipEndY8 = &fClipEndY)
                        {
                            var __arg8 = __fClipEndY8;
                            var __ret = __Internal.ComputeClippedLineSegment(__Instance, __arg0, fStartX, fStartY, fEndX, fEndY, __arg5, __arg6, __arg7, __arg8);
                            return __ret;
                        }
                    }
                }
            }
        }

        public float ComputeHeight(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.ComputeHeight(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public void ComputePathNodes()
        {
            __Internal.ComputePathNodes(__Instance);
        }

        public void ComputeTriangleAdjacency()
        {
            __Internal.ComputeTriangleAdjacency(__Instance);
        }

        public float EstimateDistanceToTarget(float fX, float fY)
        {
            var __ret = __Internal.EstimateDistanceToTarget(__Instance, fX, fY);
            return __ret;
        }

        public int FindClosestRegion(global::NWN.LowLevel.CNWTile pTile, float fX, float fY, byte nPathNode, int nOrientation)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __ret = __Internal.FindClosestRegion(__Instance, __arg0, fX, fY, nPathNode, nOrientation);
            return __ret;
        }

        public int FindRegionViaTriangle(int nTriangle, int nRegionNodes, ref int pnRegionTriangles, ref int pbTriangleChecked)
        {
            fixed (int* __pnRegionTriangles2 = &pnRegionTriangles)
            {
                var __arg2 = __pnRegionTriangles2;
                fixed (int* __pbTriangleChecked3 = &pbTriangleChecked)
                {
                    var __arg3 = __pbTriangleChecked3;
                    var __ret = __Internal.FindRegionViaTriangle(__Instance, nTriangle, nRegionNodes, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public int FindTriangle(int nLevel, int nDepth, float fX, float fY, int nTriangle)
        {
            var __ret = __Internal.FindTriangle(__Instance, nLevel, nDepth, fX, fY, nTriangle);
            return __ret;
        }

        public int GenerateBestIntraTileExit(global::NWN.LowLevel.CNWTile pTile, global::NWN.LowLevel.CNWArea pWalkGeometry, global::NWN.LowLevel.CPathfindInformation pSearchInformation, float fCurrentX, float fCurrentY)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __arg1 = pWalkGeometry is null ? __IntPtr.Zero : pWalkGeometry.__Instance;
            var __arg2 = pSearchInformation is null ? __IntPtr.Zero : pSearchInformation.__Instance;
            var __ret = __Internal.GenerateBestIntraTileExit(__Instance, __arg0, __arg1, __arg2, fCurrentX, fCurrentY);
            return __ret;
        }

        public int GetExit(int nExit, ref float fX, ref float fY, ref int nRegion)
        {
            fixed (float* __fX1 = &fX)
            {
                var __arg1 = __fX1;
                fixed (float* __fY2 = &fY)
                {
                    var __arg2 = __fY2;
                    fixed (int* __nRegion3 = &nRegion)
                    {
                        var __arg3 = __nRegion3;
                        var __ret = __Internal.GetExit(__Instance, nExit, __arg1, __arg2, __arg3);
                        return __ret;
                    }
                }
            }
        }

        public int GetExitNumber(float fX, float fY)
        {
            var __ret = __Internal.GetExitNumber(__Instance, fX, fY);
            return __ret;
        }

        public int GetRegionCoords(int nRegion, ref float fX, ref float fY, byte nPathNode, int nOrientation)
        {
            fixed (float* __fX1 = &fX)
            {
                var __arg1 = __fX1;
                fixed (float* __fY2 = &fY)
                {
                    var __arg2 = __fY2;
                    var __ret = __Internal.GetRegionCoords(__Instance, nRegion, __arg1, __arg2, nPathNode, nOrientation);
                    return __ret;
                }
            }
        }

        public int GetRegionEntrance(float fX, float fY, byte nPathNode, int nOrientation)
        {
            var __ret = __Internal.GetRegionEntrance(__Instance, fX, fY, nPathNode, nOrientation);
            return __ret;
        }

        public int GetSurfaceMaterial(global::NWN.LowLevel.Vector vPosition)
        {
            if (ReferenceEquals(vPosition, null))
                throw new global::System.ArgumentNullException("vPosition", "Cannot be null because it is passed by value.");
            var __arg0 = vPosition.__Instance;
            var __ret = __Internal.GetSurfaceMaterial(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return __ret;
        }

        public void GetTriangleAdjacency(int nLevel, int nTriangle, ref int ta12, ref int ta23, ref int ta31)
        {
            fixed (int* __ta122 = &ta12)
            {
                var __arg2 = __ta122;
                fixed (int* __ta233 = &ta23)
                {
                    var __arg3 = __ta233;
                    fixed (int* __ta314 = &ta31)
                    {
                        var __arg4 = __ta314;
                        __Internal.GetTriangleAdjacency(__Instance, nLevel, nTriangle, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public void GetTriangleCentroid(int nTriangle, ref float fX, ref float fY, ref float fZ)
        {
            fixed (float* __fX1 = &fX)
            {
                var __arg1 = __fX1;
                fixed (float* __fY2 = &fY)
                {
                    var __arg2 = __fY2;
                    fixed (float* __fZ3 = &fZ)
                    {
                        var __arg3 = __fZ3;
                        __Internal.GetTriangleCentroid(__Instance, nTriangle, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public void GetTriangleVertices(int nLevel, int nTriangle, ref int v1, ref int v2, ref int v3)
        {
            fixed (int* __v12 = &v1)
            {
                var __arg2 = __v12;
                fixed (int* __v23 = &v2)
                {
                    var __arg3 = __v23;
                    fixed (int* __v34 = &v3)
                    {
                        var __arg4 = __v34;
                        __Internal.GetTriangleVertices(__Instance, nLevel, nTriangle, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public void GetVertexGeometry(int nVertex, global::NWN.LowLevel.Vector vVector)
        {
            var __arg1 = vVector is null ? __IntPtr.Zero : vVector.__Instance;
            __Internal.GetVertexGeometry(__Instance, nVertex, __arg1);
        }

        public void GetVertexGeometry(int nVertex, ref float vX, ref float vY, ref float vZ)
        {
            fixed (float* __vX1 = &vX)
            {
                var __arg1 = __vX1;
                fixed (float* __vY2 = &vY)
                {
                    var __arg2 = __vY2;
                    fixed (float* __vZ3 = &vZ)
                    {
                        var __arg3 = __vZ3;
                        __Internal.GetVertexGeometry(__Instance, nVertex, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public void GetTopLevelVertexGeometry(int nVertex, ref float vX, ref float vY, ref float vZ)
        {
            fixed (float* __vX1 = &vX)
            {
                var __arg1 = __vX1;
                fixed (float* __vY2 = &vY)
                {
                    var __arg2 = __vY2;
                    fixed (float* __vZ3 = &vZ)
                    {
                        var __arg3 = __vZ3;
                        __Internal.GetTopLevelVertexGeometry(__Instance, nVertex, __arg1, __arg2, __arg3);
                    }
                }
            }
        }

        public int ClearLineOfSight(int nDirectionHeuristic, global::NWN.LowLevel.Vector vSource, global::NWN.LowLevel.Vector vTarget, global::NWN.LowLevel.Vector vImpact)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg1 = vSource.__Instance;
            if (ReferenceEquals(vTarget, null))
                throw new global::System.ArgumentNullException("vTarget", "Cannot be null because it is passed by value.");
            var __arg2 = vTarget.__Instance;
            var __arg3 = vImpact is null ? __IntPtr.Zero : vImpact.__Instance;
            var __ret = __Internal.ClearLineOfSight(__Instance, nDirectionHeuristic, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, __arg3);
            return __ret;
        }

        public int ClearLineOfSightOneWay(int nDirectionHeuristic, global::NWN.LowLevel.Vector vSource, global::NWN.LowLevel.Vector vTarget, global::NWN.LowLevel.Vector pImpact)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg1 = vSource.__Instance;
            if (ReferenceEquals(vTarget, null))
                throw new global::System.ArgumentNullException("vTarget", "Cannot be null because it is passed by value.");
            var __arg2 = vTarget.__Instance;
            var __arg3 = pImpact is null ? __IntPtr.Zero : pImpact.__Instance;
            var __ret = __Internal.ClearLineOfSightOneWay(__Instance, nDirectionHeuristic, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, __arg3);
            return __ret;
        }

        public void Initialize(int x, int y)
        {
            __Internal.Initialize(__Instance, x, y);
        }

        public int IntersectLineSegments(global::NWN.LowLevel.Vector v1, global::NWN.LowLevel.Vector v2, global::NWN.LowLevel.Vector v3, global::NWN.LowLevel.Vector v4, global::NWN.LowLevel.Vector vIntersect)
        {
            if (ReferenceEquals(v1, null))
                throw new global::System.ArgumentNullException("v1", "Cannot be null because it is passed by value.");
            var __arg0 = v1.__Instance;
            if (ReferenceEquals(v2, null))
                throw new global::System.ArgumentNullException("v2", "Cannot be null because it is passed by value.");
            var __arg1 = v2.__Instance;
            if (ReferenceEquals(v3, null))
                throw new global::System.ArgumentNullException("v3", "Cannot be null because it is passed by value.");
            var __arg2 = v3.__Instance;
            if (ReferenceEquals(v4, null))
                throw new global::System.ArgumentNullException("v4", "Cannot be null because it is passed by value.");
            var __arg3 = v4.__Instance;
            var __arg4 = vIntersect is null ? __IntPtr.Zero : vIntersect.__Instance;
            var __ret = __Internal.IntersectLineSegments(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0, *(global::NWN.LowLevel.Vector.__Internal*) __arg1, *(global::NWN.LowLevel.Vector.__Internal*) __arg2, *(global::NWN.LowLevel.Vector.__Internal*) __arg3, __arg4);
            return __ret;
        }

        public int IntraTileDFS(global::NWN.LowLevel.CNWTile pTile, global::NWN.LowLevel.CNWArea pWalkGeometry, global::NWN.LowLevel.CPathfindInformation pSearchInformation, int level, float fDistanceTravelled, int nCurrentTriangle, float fX, float fY, float fStartX, float fStartY, float fPersonalSpace, int bUseAdjacencies)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __arg1 = pWalkGeometry is null ? __IntPtr.Zero : pWalkGeometry.__Instance;
            var __arg2 = pSearchInformation is null ? __IntPtr.Zero : pSearchInformation.__Instance;
            var __ret = __Internal.IntraTileDFS(__Instance, __arg0, __arg1, __arg2, level, fDistanceTravelled, nCurrentTriangle, fX, fY, fStartX, fStartY, fPersonalSpace, bUseAdjacencies);
            return __ret;
        }

        public int IntraTileDFSGenerateSuccessors(int bAdjacenciesOnly, global::NWN.LowLevel.CNWTile pTile, global::NWN.LowLevel.CNWArea pWalkGeometry, float fX, float fY, int nCurrentTriangle, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, global::NWN.LowLevel.CPathfindInfoIntraTileSuccessors pSuccessors)
        {
            var __arg1 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __arg2 = pWalkGeometry is null ? __IntPtr.Zero : pWalkGeometry.__Instance;
            var __arg6 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var ____arg7 = pSuccessors is null ? __IntPtr.Zero : pSuccessors.__Instance;
            var __arg7 = new __IntPtr(&____arg7);
            var __ret = __Internal.IntraTileDFSGenerateSuccessors(__Instance, bAdjacenciesOnly, __arg1, __arg2, fX, fY, nCurrentTriangle, __arg6, __arg7);
            return __ret;
        }

        public void PrintAABBTreeToPrintLog(global::NWN.LowLevel.CNWTileSurfaceMeshAABBNode pNode, int indentation)
        {
            var __arg0 = pNode is null ? __IntPtr.Zero : pNode.__Instance;
            __Internal.PrintAABBTreeToPrintLog(__Instance, __arg0, indentation);
        }

        public void LoadDefaultWalkMesh()
        {
            __Internal.LoadDefaultWalkMesh(__Instance);
        }

        public int LoadWalkMesh()
        {
            var __ret = __Internal.LoadWalkMesh(__Instance);
            return __ret;
        }

        public int LoadWalkMeshString(byte** pInput, ref uint nInputSize, byte* pchBuffer, uint nBufferSize)
        {
            fixed (uint* __nInputSize1 = &nInputSize)
            {
                var __arg1 = __nInputSize1;
                var __ret = __Internal.LoadWalkMeshString(__Instance, pInput, __arg1, pchBuffer, nBufferSize);
                return __ret;
            }
        }

        public int NoNonWalkPolysOnTile(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fMinZ, float fMaxZ, float fPersonalSpace, int bTestSinglePoint)
        {
            var __ret = __Internal.NoNonWalkPolysOnTile(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fMinZ, fMaxZ, fPersonalSpace, bTestSinglePoint);
            return __ret;
        }

        public uint PlotIntraTilePath(global::NWN.LowLevel.CNWTile pTile, global::NWN.LowLevel.CNWArea pWalkGeometry, global::NWN.LowLevel.CPathfindInformation pSearchInformation, float fCurrentIntraTileX, float fCurrentIntraTileY, float fInterTileStartX, float fInterTileStartY, uint nMaxTimeAllowed, int bAdjacenciesOnly)
        {
            var __arg0 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __arg1 = pWalkGeometry is null ? __IntPtr.Zero : pWalkGeometry.__Instance;
            var __arg2 = pSearchInformation is null ? __IntPtr.Zero : pSearchInformation.__Instance;
            var __ret = __Internal.PlotIntraTilePath(__Instance, __arg0, __arg1, __arg2, fCurrentIntraTileX, fCurrentIntraTileY, fInterTileStartX, fInterTileStartY, nMaxTimeAllowed, bAdjacenciesOnly);
            return __ret;
        }

        public void RunSubdivision(ref int pNewTriangles, int nNewTriangles, ref float pNewVertices, int nNewVertices, ref int pNewTAdjacency, ref int pTriangles, int nTriangles, ref float pVertices, int nVertices, ref int pTAdjacency)
        {
            fixed (int* __pNewTriangles0 = &pNewTriangles)
            {
                var __arg0 = __pNewTriangles0;
                fixed (float* __pNewVertices2 = &pNewVertices)
                {
                    var __arg2 = __pNewVertices2;
                    fixed (int* __pNewTAdjacency4 = &pNewTAdjacency)
                    {
                        var __arg4 = __pNewTAdjacency4;
                        fixed (int* __pTriangles5 = &pTriangles)
                        {
                            var __arg5 = __pTriangles5;
                            fixed (float* __pVertices7 = &pVertices)
                            {
                                var __arg7 = __pVertices7;
                                fixed (int* __pTAdjacency9 = &pTAdjacency)
                                {
                                    var __arg9 = __pTAdjacency9;
                                    __Internal.RunSubdivision(__Instance, __arg0, nNewTriangles, __arg2, nNewVertices, __arg4, __arg5, nTriangles, __arg7, nVertices, __arg9);
                                }
                            }
                        }
                    }
                }
            }
        }

        public void Subdivide()
        {
            __Internal.Subdivide(__Instance);
        }

        public int TestLineForWalkableOnArea(float fSourceX, float fSourceY, float fTargetX, float fTargetY, float fClipMinZ, float fClipMaxZ, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, global::NWN.LowLevel.CNWTile pTile, global::NWN.LowLevel.CNWArea pArea)
        {
            var __arg6 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
            var __arg7 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
            var __arg8 = pArea is null ? __IntPtr.Zero : pArea.__Instance;
            var __ret = __Internal.TestLineForWalkableOnArea(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, fClipMinZ, fClipMaxZ, __arg6, __arg7, __arg8);
            return __ret;
        }

        public int TestLineForWalkableOnTile(float fSourceX, float fSourceY, float fTargetX, float fTargetY, ref float fClipMinZ, ref float fClipMaxZ, global::NWN.LowLevel.CPathfindInformation pPathfindInfo, global::NWN.LowLevel.CNWTile pTile, int bStayOnTile)
        {
            fixed (float* __fClipMinZ4 = &fClipMinZ)
            {
                var __arg4 = __fClipMinZ4;
                fixed (float* __fClipMaxZ5 = &fClipMaxZ)
                {
                    var __arg5 = __fClipMaxZ5;
                    var __arg6 = pPathfindInfo is null ? __IntPtr.Zero : pPathfindInfo.__Instance;
                    var __arg7 = pTile is null ? __IntPtr.Zero : pTile.__Instance;
                    var __ret = __Internal.TestLineForWalkableOnTile(__Instance, fSourceX, fSourceY, fTargetX, fTargetY, __arg4, __arg5, __arg6, __arg7, bStayOnTile);
                    return __ret;
                }
            }
        }

        public int PolyHit(global::NWN.LowLevel.Vector vert, int n, global::NWN.LowLevel.Vector v0, global::NWN.LowLevel.Vector v1, global::NWN.LowLevel.Vector nrml, float dist, global::NWN.LowLevel.Vector impact)
        {
            var __arg0 = vert is null ? __IntPtr.Zero : vert.__Instance;
            if (ReferenceEquals(v0, null))
                throw new global::System.ArgumentNullException("v0", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = v0.__Instance;
            if (ReferenceEquals(v1, null))
                throw new global::System.ArgumentNullException("v1", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = v1.__Instance;
            if (ReferenceEquals(nrml, null))
                throw new global::System.ArgumentNullException("nrml", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = nrml.__Instance;
            var __arg6 = impact is null ? __IntPtr.Zero : impact.__Instance;
            var __ret = __Internal.PolyHit(__Instance, __arg0, n, __arg2, __arg3, __arg4, dist, __arg6);
            return __ret;
        }

        public int IntersectCircle2d(global::NWN.LowLevel.Vector vCenter, float fRadius, global::NWN.LowLevel.Vector vLineVertex1, global::NWN.LowLevel.Vector vLineVertex2, global::NWN.LowLevel.Vector vIntersect1, global::NWN.LowLevel.Vector vIntersect2, int bFindIntersections)
        {
            if (ReferenceEquals(vCenter, null))
                throw new global::System.ArgumentNullException("vCenter", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = vCenter.__Instance;
            if (ReferenceEquals(vLineVertex1, null))
                throw new global::System.ArgumentNullException("vLineVertex1", "Cannot be null because it is a C++ reference (&).");
            var __arg2 = vLineVertex1.__Instance;
            if (ReferenceEquals(vLineVertex2, null))
                throw new global::System.ArgumentNullException("vLineVertex2", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = vLineVertex2.__Instance;
            if (ReferenceEquals(vIntersect1, null))
                throw new global::System.ArgumentNullException("vIntersect1", "Cannot be null because it is a C++ reference (&).");
            var __arg4 = vIntersect1.__Instance;
            if (ReferenceEquals(vIntersect2, null))
                throw new global::System.ArgumentNullException("vIntersect2", "Cannot be null because it is a C++ reference (&).");
            var __arg5 = vIntersect2.__Instance;
            var __ret = __Internal.IntersectCircle2d(__Instance, __arg0, fRadius, __arg2, __arg3, __arg4, __arg5, bFindIntersections);
            return __ret;
        }

        public global::NWN.LowLevel.Vector LocalToWorld(global::NWN.LowLevel.Vector vSource)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg0 = vSource.__Instance;
            var __ret = __Internal.LocalToWorld(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.Vector NormalWorldToLocal(global::NWN.LowLevel.Vector vSource)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg0 = vSource.__Instance;
            var __ret = __Internal.NormalWorldToLocal(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public global::NWN.LowLevel.Vector NormalLocalToWorld(global::NWN.LowLevel.Vector vSource)
        {
            if (ReferenceEquals(vSource, null))
                throw new global::System.ArgumentNullException("vSource", "Cannot be null because it is passed by value.");
            var __arg0 = vSource.__Instance;
            var __ret = __Internal.NormalLocalToWorld(__Instance, *(global::NWN.LowLevel.Vector.__Internal*) __arg0);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public byte ConvertToTileOrientation(int nOrientation)
        {
            var __ret = __Internal.ConvertToTileOrientation(__Instance, nOrientation);
            return __ret;
        }

        public global::NWN.LowLevel.CResRef MCWalkMesh
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cWalkMesh));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cWalkMesh = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public byte MNPathNode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPathNode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPathNode = value;
            }
        }

        public int MNPathNodeOrientation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPathNodeOrientation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPathNodeOrientation = value;
            }
        }

        public byte MNVisibilityNode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVisibilityNode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVisibilityNode = value;
            }
        }

        public int MNVisibilityNodeOrientation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVisibilityNodeOrientation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVisibilityNodeOrientation = value;
            }
        }

        public byte MNDoorVisNode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDoorVisNode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDoorVisNode = value;
            }
        }

        public int MNDoorVisNodeOrientation
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDoorVisNodeOrientation;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDoorVisNodeOrientation = value;
            }
        }

        public int MNTileConnectivity
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTileConnectivity;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTileConnectivity = value;
            }
        }

        public int MNVertices
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVertices;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVertices = value;
            }
        }

        public int MNVerticesLayer1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVerticesLayer1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVerticesLayer1 = value;
            }
        }

        public int MNVerticesLayer2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVerticesLayer2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVerticesLayer2 = value;
            }
        }

        public int MNVerticesLayer3
        {
            get
            {
                return ((__Internal*)__Instance)->m_nVerticesLayer3;
            }

            set
            {
                ((__Internal*)__Instance)->m_nVerticesLayer3 = value;
            }
        }

        public int MNTriangles
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTriangles = value;
            }
        }

        public int MNTrianglesLayer1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrianglesLayer1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrianglesLayer1 = value;
            }
        }

        public int MNTrianglesLayer2
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrianglesLayer2;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrianglesLayer2 = value;
            }
        }

        public int MNTrianglesLayer3
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTrianglesLayer3;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTrianglesLayer3 = value;
            }
        }

        public int* MPnTriangles
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTriangles = (__IntPtr) value;
            }
        }

        public int* MPnTrianglesLayer1
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTrianglesLayer1;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTrianglesLayer1 = (__IntPtr) value;
            }
        }

        public int* MPnTrianglesLayer2
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTrianglesLayer2;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTrianglesLayer2 = (__IntPtr) value;
            }
        }

        public int* MPnTrianglesLayer3
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTrianglesLayer3;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTrianglesLayer3 = (__IntPtr) value;
            }
        }

        public int* MPnTriangleMaterial
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTriangleMaterial;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTriangleMaterial = (__IntPtr) value;
            }
        }

        public float* MPfTriangleDistances
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfTriangleDistances;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfTriangleDistances = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.Vector MPvTriangleNormals
        {
            get
            {
                var __result0 = global::NWN.LowLevel.Vector.__GetOrCreateInstance(((__Internal*)__Instance)->m_pvTriangleNormals, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pvTriangleNormals = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int* MPnTAdjacency
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTAdjacency;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTAdjacency = (__IntPtr) value;
            }
        }

        public int* MPnTAdjacencyLayer1
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTAdjacencyLayer1;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTAdjacencyLayer1 = (__IntPtr) value;
            }
        }

        public int* MPnTAdjacencyLayer2
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTAdjacencyLayer2;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTAdjacencyLayer2 = (__IntPtr) value;
            }
        }

        public int* MPnTAdjacencyLayer3
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnTAdjacencyLayer3;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnTAdjacencyLayer3 = (__IntPtr) value;
            }
        }

        public float* MPfVertices
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfVertices;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfVertices = (__IntPtr) value;
            }
        }

        public float* MPfVerticesLayer1
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfVerticesLayer1;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfVerticesLayer1 = (__IntPtr) value;
            }
        }

        public float* MPfVerticesLayer2
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfVerticesLayer2;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfVerticesLayer2 = (__IntPtr) value;
            }
        }

        public float* MPfVerticesLayer3
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfVerticesLayer3;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfVerticesLayer3 = (__IntPtr) value;
            }
        }

        public int MNDeniedVertices
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDeniedVertices;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDeniedVertices = value;
            }
        }

        public float* MPfDeniedVertices
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfDeniedVertices;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfDeniedVertices = (__IntPtr) value;
            }
        }

        public int MNDeniedTriangles
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDeniedTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDeniedTriangles = value;
            }
        }

        public int* MPnDeniedTriangles
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnDeniedTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnDeniedTriangles = (__IntPtr) value;
            }
        }

        public int* MPnDeniedTriangleMaterial
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnDeniedTriangleMaterial;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnDeniedTriangleMaterial = (__IntPtr) value;
            }
        }

        public float* MPfDeniedTriangleDistances
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfDeniedTriangleDistances;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfDeniedTriangleDistances = (__IntPtr) value;
            }
        }

        public global::NWN.LowLevel.Vector MPvDeniedTriangleNormals
        {
            get
            {
                var __result0 = global::NWN.LowLevel.Vector.__GetOrCreateInstance(((__Internal*)__Instance)->m_pvDeniedTriangleNormals, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pvDeniedTriangleNormals = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWTileSurfaceMeshAABBNode MPAABBTree
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSurfaceMeshAABBNode.__GetOrCreateInstance(((__Internal*)__Instance)->m_pAABBTree, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pAABBTree = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public float MFGoalTargetX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalTargetX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalTargetX = value;
            }
        }

        public float MFGoalMinX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalMinX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalMinX = value;
            }
        }

        public float MFGoalMaxX
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalMaxX;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalMaxX = value;
            }
        }

        public float MFGoalTargetY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalTargetY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalTargetY = value;
            }
        }

        public float MFGoalMinY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalMinY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalMinY = value;
            }
        }

        public float MFGoalMaxY
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalMaxY;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalMaxY = value;
            }
        }

        public int MNGoalTargetTriangle
        {
            get
            {
                return ((__Internal*)__Instance)->m_nGoalTargetTriangle;
            }

            set
            {
                ((__Internal*)__Instance)->m_nGoalTargetTriangle = value;
            }
        }

        public float MFGoalMaximumDistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_fGoalMaximumDistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_fGoalMaximumDistance = value;
            }
        }

        public int MNIntraTileWPLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIntraTileWPLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIntraTileWPLength = value;
            }
        }

        public float* MPfIntraTileWayPoints
        {
            get
            {
                return (float*) ((__Internal*)__Instance)->m_pfIntraTileWayPoints;
            }

            set
            {
                ((__Internal*)__Instance)->m_pfIntraTileWayPoints = (__IntPtr) value;
            }
        }

        public int MNIntraTileTriangles
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIntraTileTriangles;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIntraTileTriangles = value;
            }
        }

        public int* MPnIntraTileTriangle
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_pnIntraTileTriangle;
            }

            set
            {
                ((__Internal*)__Instance)->m_pnIntraTileTriangle = (__IntPtr) value;
            }
        }

        public int MNIntraTileUnits
        {
            get
            {
                return ((__Internal*)__Instance)->m_nIntraTileUnits;
            }

            set
            {
                ((__Internal*)__Instance)->m_nIntraTileUnits = value;
            }
        }

        public int MNMaxIntraTileUnits
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMaxIntraTileUnits;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMaxIntraTileUnits = value;
            }
        }

        public float MFMinEstimateToGoal
        {
            get
            {
                return ((__Internal*)__Instance)->m_fMinEstimateToGoal;
            }

            set
            {
                ((__Internal*)__Instance)->m_fMinEstimateToGoal = value;
            }
        }

        public global::NWN.LowLevel.CNWTileSurfaceMeshHashTableEntry MPcIntraTileHashTable
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWTileSurfaceMeshHashTableEntry.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcIntraTileHashTable, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcIntraTileHashTable = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CNWTileSurfaceMeshLocalInfo MPcIntraTileGenSuccessorsLocalInfo
        {
            get
            {
                return global::NWN.LowLevel.CNWTileSurfaceMeshLocalInfo.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pcIntraTileGenSuccessorsLocalInfo));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pcIntraTileGenSuccessorsLocalInfo = *(global::NWN.LowLevel.CNWTileSurfaceMeshLocalInfo.__Internal*) value.__Instance;
            }
        }

        public byte PathNode
        {
            get
            {
                var __ret = __Internal.GetPathNode(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetPathNode(__Instance, value);
            }
        }

        public int PathNodeOrientation
        {
            get
            {
                var __ret = __Internal.GetPathNodeOrientation(__Instance);
                return __ret;
            }
        }

        public int TotalExits
        {
            get
            {
                var __ret = __Internal.GetTotalExits(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CResRef WalkMesh
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CResRef.__Internal();
                __Internal.GetWalkMesh(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CResRef.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                var __arg0 = value.__Instance;
                __Internal.SetWalkMesh(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0);
            }
        }

        #region Virtual table interop

        // ~CNWTileSurfaceMesh()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CNWTileSurfaceMesh.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
