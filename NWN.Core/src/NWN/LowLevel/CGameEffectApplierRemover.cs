// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CGameEffectApplierRemover : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CGameEffectApplierRemover;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN25CGameEffectApplierRemoverC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN25CGameEffectApplierRemoverC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameEffectApplierRemover> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameEffectApplierRemover>();

        protected bool __ownsNativeInstance;

        internal static CGameEffectApplierRemover __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CGameEffectApplierRemover(native.ToPointer(), skipVTables);
        }

        internal static CGameEffectApplierRemover __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CGameEffectApplierRemover)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CGameEffectApplierRemover __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CGameEffectApplierRemover)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CGameEffectApplierRemover __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CGameEffectApplierRemover(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CGameEffectApplierRemover.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CGameEffectApplierRemover(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGameEffectApplierRemover(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CGameEffectApplierRemover()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameEffectApplierRemover.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CGameEffectApplierRemover");
        }

        public CGameEffectApplierRemover(global::NWN.LowLevel.CGameEffectApplierRemover _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameEffectApplierRemover.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CGameEffectApplierRemover");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CGameEffectApplierRemover __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CGameEffectApplierRemover.__Internal*) __Instance)->vptr_CGameEffectApplierRemover = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void InitializeEffects()
        {
            var ___InitializeEffectsDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 2);
            ___InitializeEffectsDelegate(__Instance);
        }

        public virtual int OnEffectApplied(global::NWN.LowLevel.CNWSObject @object, global::NWN.LowLevel.CGameEffect effect, int bLoadingGame)
        {
            var ___OnEffectAppliedDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr___IntPtr_int>(0, 3);
            var __arg0 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg1 = effect is null ? __IntPtr.Zero : effect.__Instance;
            var __ret = ___OnEffectAppliedDelegate(__Instance, __arg0, __arg1, bLoadingGame);
            return __ret;
        }

        public virtual int OnEffectRemoved(global::NWN.LowLevel.CNWSObject @object, global::NWN.LowLevel.CGameEffect effect)
        {
            var ___OnEffectRemovedDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr___IntPtr>(0, 4);
            var __arg0 = @object is null ? __IntPtr.Zero : @object.__Instance;
            var __arg1 = effect is null ? __IntPtr.Zero : effect.__Instance;
            var __ret = ___OnEffectRemovedDelegate(__Instance, __arg0, __arg1);
            return __ret;
        }

        #region Virtual table interop

        // virtual ~CGameEffectApplierRemover()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameEffectApplierRemover.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void InitializeEffects()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _InitializeEffectsDelegateInstance;

        private static void _InitializeEffectsDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameEffectApplierRemover.__GetInstance(__instance);
            __target.InitializeEffects();
        }

        // int32_t OnEffectApplied(CNWSObject * object, CGameEffect * effect, BOOL bLoadingGame = false)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr___IntPtr_int _OnEffectAppliedDelegateInstance;

        private static int _OnEffectAppliedDelegateHook(__IntPtr __instance, __IntPtr @object, __IntPtr effect, int bLoadingGame)
        {
            var __target = global::NWN.LowLevel.CGameEffectApplierRemover.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSObject.__GetOrCreateInstance(@object, false);
            var __result1 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(effect, false);
            return __target.OnEffectApplied(__result0, __result1, bLoadingGame);
        }

        // int32_t OnEffectRemoved(CNWSObject * object, CGameEffect * effect)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr___IntPtr___IntPtr _OnEffectRemovedDelegateInstance;

        private static int _OnEffectRemovedDelegateHook(__IntPtr __instance, __IntPtr @object, __IntPtr effect)
        {
            var __target = global::NWN.LowLevel.CGameEffectApplierRemover.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CNWSObject.__GetOrCreateInstance(@object, false);
            var __result1 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(effect, false);
            return __target.OnEffectRemoved(__result0, __result1);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[4];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _InitializeEffectsDelegateInstance += _InitializeEffectsDelegateHook;
                _OnEffectAppliedDelegateInstance += _OnEffectAppliedDelegateHook;
                _OnEffectRemovedDelegateInstance += _OnEffectRemovedDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_InitializeEffectsDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_OnEffectAppliedDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_OnEffectRemovedDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 7);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            VTables.Methods[0] = new Delegate[7];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
