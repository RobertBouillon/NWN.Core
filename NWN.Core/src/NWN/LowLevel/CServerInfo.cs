// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CServerInfo : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 1320)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal int m_nDataChangedFlags;

            [FieldOffset(4)]
            internal short m_nServerMode;

            [FieldOffset(8)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sModuleName;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sServerSettings;

            [FieldOffset(40)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sModulesList;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sPlayerList;

            [FieldOffset(72)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sBannedList;

            [FieldOffset(88)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sPortalList;

            [FieldOffset(104)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sSavegameList;

            [FieldOffset(120)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCharactervaultList;

            [FieldOffset(136)]
            internal global::NWN.LowLevel.CJoiningRestrictions.__Internal m_JoiningRestrictions;

            [FieldOffset(252)]
            internal global::NWN.LowLevel.CPlayOptions.__Internal m_PlayOptions;

            [FieldOffset(360)]
            internal global::NWN.LowLevel.CResetOption.__Internal m_ResetOption;

            [FieldOffset(380)]
            internal global::NWN.LowLevel.CAutoSave.__Internal m_AutoSave;

            [FieldOffset(396)]
            internal global::NWN.LowLevel.CPersistantWorldOptions.__Internal m_PersistantWorldOptions;

            [FieldOffset(416)]
            internal global::NWN.LowLevel.CServerNetOptions.__Internal m_NetOptions;

            [FieldOffset(448)]
            internal global::NWN.LowLevel.NWSyncAdvertisement.__Internal m_nwsyncData;

            [FieldOffset(504)]
            internal int m_bNWSyncPublishHaks;

            [FieldOffset(508)]
            internal int m_bConversationMultiPlayer;

            [FieldOffset(512)]
            internal int m_bConversationMultiPlayerViewOnly;

            [FieldOffset(516)]
            internal int m_nDifficulty;

            [FieldOffset(520)]
            internal fixed byte m_pOptionsTable[800];

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CServerInfoC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CServerInfoC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CServerInfoD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CServerInfo18SetDifficultyLevelEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDifficultyLevel(__IntPtr __instance, int nDifficulty, int bChangePVP);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CServerInfo15FindOptionIndexE10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int FindOptionIndex(__IntPtr __instance, __IntPtr sOptionCategory, __IntPtr sOptionName);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CServerInfo>();

        protected bool __ownsNativeInstance;

        internal static CServerInfo __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CServerInfo(native.ToPointer(), skipVTables);
        }

        internal static CServerInfo __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CServerInfo)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CServerInfo __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CServerInfo(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CServerInfo.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CServerInfo(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CServerInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CServerInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CServerInfo(global::NWN.LowLevel.CServerInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CServerInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CServerInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetDifficultyLevel(int nDifficulty, int bChangePVP)
        {
            __Internal.SetDifficultyLevel(__Instance, nDifficulty, bChangePVP);
        }

        public int FindOptionIndex(global::NWN.LowLevel.CExoString sOptionCategory, global::NWN.LowLevel.CExoString sOptionName)
        {
            if (ReferenceEquals(sOptionCategory, null))
                throw new global::System.ArgumentNullException("sOptionCategory", "Cannot be null because it is passed by value.");
            var __arg0 = sOptionCategory.__Instance;
            if (ReferenceEquals(sOptionName, null))
                throw new global::System.ArgumentNullException("sOptionName", "Cannot be null because it is passed by value.");
            var __arg1 = sOptionName.__Instance;
            var __ret = __Internal.FindOptionIndex(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int MNDataChangedFlags
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDataChangedFlags;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDataChangedFlags = value;
            }
        }

        public short MNServerMode
        {
            get
            {
                return ((__Internal*)__Instance)->m_nServerMode;
            }

            set
            {
                ((__Internal*)__Instance)->m_nServerMode = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSModuleName
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sModuleName));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sModuleName = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSServerSettings
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sServerSettings));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sServerSettings = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSModulesList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sModulesList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sModulesList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSPlayerList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sPlayerList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sPlayerList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSBannedList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sBannedList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sBannedList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSPortalList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sPortalList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sPortalList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSSavegameList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sSavegameList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sSavegameList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCharactervaultList
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCharactervaultList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCharactervaultList = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CJoiningRestrictions MJoiningRestrictions
        {
            get
            {
                return global::NWN.LowLevel.CJoiningRestrictions.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_JoiningRestrictions));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_JoiningRestrictions = *(global::NWN.LowLevel.CJoiningRestrictions.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CPlayOptions MPlayOptions
        {
            get
            {
                return global::NWN.LowLevel.CPlayOptions.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_PlayOptions));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_PlayOptions = *(global::NWN.LowLevel.CPlayOptions.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CResetOption MResetOption
        {
            get
            {
                return global::NWN.LowLevel.CResetOption.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_ResetOption));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_ResetOption = *(global::NWN.LowLevel.CResetOption.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CAutoSave MAutoSave
        {
            get
            {
                return global::NWN.LowLevel.CAutoSave.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_AutoSave));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_AutoSave = *(global::NWN.LowLevel.CAutoSave.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CPersistantWorldOptions MPersistantWorldOptions
        {
            get
            {
                return global::NWN.LowLevel.CPersistantWorldOptions.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_PersistantWorldOptions));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_PersistantWorldOptions = *(global::NWN.LowLevel.CPersistantWorldOptions.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CServerNetOptions MNetOptions
        {
            get
            {
                return global::NWN.LowLevel.CServerNetOptions.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_NetOptions));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_NetOptions = *(global::NWN.LowLevel.CServerNetOptions.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.NWSyncAdvertisement MNwsyncData
        {
            get
            {
                return global::NWN.LowLevel.NWSyncAdvertisement.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nwsyncData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nwsyncData = *(global::NWN.LowLevel.NWSyncAdvertisement.__Internal*) value.__Instance;
            }
        }

        public int MBNWSyncPublishHaks
        {
            get
            {
                return ((__Internal*)__Instance)->m_bNWSyncPublishHaks;
            }

            set
            {
                ((__Internal*)__Instance)->m_bNWSyncPublishHaks = value;
            }
        }

        public int MBConversationMultiPlayer
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConversationMultiPlayer;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConversationMultiPlayer = value;
            }
        }

        public int MBConversationMultiPlayerViewOnly
        {
            get
            {
                return ((__Internal*)__Instance)->m_bConversationMultiPlayerViewOnly;
            }

            set
            {
                ((__Internal*)__Instance)->m_bConversationMultiPlayerViewOnly = value;
            }
        }

        public int MNDifficulty
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDifficulty;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDifficulty = value;
            }
        }

        public global::NWN.LowLevel.CServerOptionLookup[] MPOptionsTable
        {
            get
            {
                global::NWN.LowLevel.CServerOptionLookup[] __value = null;
                if (((__Internal*)__Instance)->m_pOptionsTable != null)
                {
                    __value = new global::NWN.LowLevel.CServerOptionLookup[50];
                    for (int i = 0; i < 50; i++)
                        __value[i] = global::NWN.LowLevel.CServerOptionLookup.__CreateInstance(*((global::NWN.LowLevel.CServerOptionLookup.__Internal*)&(((__Internal*)__Instance)->m_pOptionsTable[i * sizeof(global::NWN.LowLevel.CServerOptionLookup.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 50)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 50; i++)
                        *(global::NWN.LowLevel.CServerOptionLookup.__Internal*) &((__Internal*)__Instance)->m_pOptionsTable[i * sizeof(global::NWN.LowLevel.CServerOptionLookup.__Internal)] = *(global::NWN.LowLevel.CServerOptionLookup.__Internal*)value[i].__Instance;
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
