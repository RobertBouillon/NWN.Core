// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSCombatRound : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 10160)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed byte m_pcLastAttack[10000];

            [FieldOffset(10000)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_nSpecialAttacks;

            [FieldOffset(10016)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_nSpecialAttackIDs;

            [FieldOffset(10032)]
            internal ushort m_nAttackID;

            [FieldOffset(10036)]
            internal int m_bRoundStarted;

            [FieldOffset(10040)]
            internal int m_bSpellCastRound;

            [FieldOffset(10044)]
            internal int m_nTimer;

            [FieldOffset(10048)]
            internal int m_nRoundLength;

            [FieldOffset(10052)]
            internal int m_nOverlapAmount;

            [FieldOffset(10056)]
            internal int m_nBleedAmount;

            [FieldOffset(10060)]
            internal int m_bRoundPaused;

            [FieldOffset(10064)]
            internal uint m_oidRoundPausedBy;

            [FieldOffset(10068)]
            internal int m_nPauseTimer;

            [FieldOffset(10072)]
            internal int m_bInfinitePause;

            [FieldOffset(10076)]
            internal byte m_nCurrentAttack;

            [FieldOffset(10077)]
            internal byte m_nAttackGroup;

            [FieldOffset(10080)]
            internal int m_bDeflectArrow;

            [FieldOffset(10084)]
            internal int m_bWeaponSucks;

            [FieldOffset(10088)]
            internal int m_bEpicDodgeUsed;

            [FieldOffset(10092)]
            internal int m_nParryIndex;

            [FieldOffset(10096)]
            internal int m_nAttacksOfOpportunity;

            [FieldOffset(10100)]
            internal int m_nCleaveAttacks;

            [FieldOffset(10104)]
            internal int m_nCircleKickAttacks;

            [FieldOffset(10108)]
            internal uint m_oidNewAttackTarget;

            [FieldOffset(10112)]
            internal int m_nOnHandAttacks;

            [FieldOffset(10116)]
            internal int m_nOffHandAttacks;

            [FieldOffset(10120)]
            internal int m_nOffHandAttacksTaken;

            [FieldOffset(10124)]
            internal int m_nExtraAttacksTaken;

            [FieldOffset(10128)]
            internal int m_nAdditionalAttacks;

            [FieldOffset(10132)]
            internal int m_nBonusEffectAttacks;

            [FieldOffset(10136)]
            internal byte m_nParryActions;

            [FieldOffset(10140)]
            internal uint m_oidDodgeTarget;

            [FieldOffset(10144)]
            internal __IntPtr m_pScheduledActions;

            [FieldOffset(10152)]
            internal __IntPtr m_pBaseCreature;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRoundC2EP12CNWSCreature", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, __IntPtr pCreature);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRoundC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor_1(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRoundD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16StartCombatRoundEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartCombatRound(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound20StartCombatRoundCastEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartCombatRoundCast(__IntPtr __instance, uint nRoundLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14EndCombatRoundEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EndCombatRound(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14RecomputeRoundEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RecomputeRound(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14IncrementTimerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void IncrementTimer(__IntPtr __instance, int nTimeDelta);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19DecrementPauseTimerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DecrementPauseTimer(__IntPtr __instance, int nTimeDelta);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14SetRoundPausedEij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetRoundPaused(__IntPtr __instance, int bValue, uint oidPausedBy);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound13SetPauseTimerEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetPauseTimer(__IntPtr __instance, int nValue, int bInfinite);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound20DecrementRoundLengthEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void DecrementRoundLength(__IntPtr __instance, int nValue, int bBleed);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound9GetAttackEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAttack(__IntPtr __instance, int nAttack);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15ClearAllAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAllAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound24SignalCombatRoundStartedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SignalCombatRoundStarted(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound17CheckActionLengthEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckActionLength(__IntPtr __instance, uint oidPauser, int nActionLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound23CheckActionLengthAtTimeEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CheckActionLengthAtTime(__IntPtr __instance, uint oidPauser, int nActionLength, int nTimeIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound9AddActionEP21CNWSCombatRoundAction", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddAction(__IntPtr __instance, __IntPtr pAction);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16RemoveAllActionsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveAllActions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound11AddReactionEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddReaction(__IntPtr __instance, int nTimeIndex, int nTimeAnimation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14AddSpellActionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSpellAction(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound17RemoveSpellActionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveSpellAction(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14AddParryAttackEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddParryAttack(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound13AddParryIndexEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddParryIndex(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15AddCleaveAttackEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCleaveAttack(__IntPtr __instance, uint oidTarget, int bGreatCleave);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19AddCircleKickAttackEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCircleKickAttack(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound22AddAttackOfOpportunityEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddAttackOfOpportunity(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound18AddWhirlwindAttackEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddWhirlwindAttack(__IntPtr __instance, uint oidTarget, int bImproved);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14AddEquipActionEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddEquipAction(__IntPtr __instance, uint oidItem, uint nInventorySlot);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16AddUnequipActionEjjhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddUnequipAction(__IntPtr __instance, uint oidItem, uint oidTargetRepository, byte x, byte y);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19AddCombatStepActionEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddCombatStepAction(__IntPtr __instance, uint nTimeIndex, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound23InitializeAttackActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeAttackActions(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound25InitializeNumberOfAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeNumberOfAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound21InitializeCombatModesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeCombatModes(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound23CalculateOffHandAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CalculateOffHandAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound21GetCombatStepRequiredEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCombatStepRequired(__IntPtr __instance, uint oidTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15SetDeflectArrowEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDeflectArrow(__IntPtr __instance, int bValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16SetCurrentAttackEh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCurrentAttack(__IntPtr __instance, byte nCurrentAttack);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound22GetCurrentAttackWeaponEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetCurrentAttackWeapon(__IntPtr __instance, int nWeaponAttackType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound31UpdateAttackTargetForAllActionsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateAttackTargetForAllActions(__IntPtr __instance, uint oidNewTarget);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19InsertSpecialAttackEti", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InsertSpecialAttack(__IntPtr __instance, ushort nSpecialAttack, int nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16AddSpecialAttackEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void AddSpecialAttack(__IntPtr __instance, ushort nSpecialAttack);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19RemoveSpecialAttackEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RemoveSpecialAttack(__IntPtr __instance, int nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16GetSpecialAttackEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetSpecialAttack(__IntPtr __instance, int nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound18GetSpecialAttackIDEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetSpecialAttackID(__IntPtr __instance, int nIndex);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound22ClearAllSpecialAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearAllSpecialAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15SaveCombatRoundEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveCombatRound(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15LoadCombatRoundEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadCombatRound(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16GetActionPendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetActionPending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound22GetAttackActionPendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAttackActionPending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound21GetSpellActionPendingEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSpellActionPending(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound9GetActionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetAction(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound15GetTotalAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern byte GetTotalAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound16GetOffHandAttackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetOffHandAttack(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14GetExtraAttackEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetExtraAttack(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound18HasCreatureWeaponsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int HasCreatureWeapons(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound19GetWeaponAttackTypeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetWeaponAttackType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound20GetNumSpecialAttacksEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumSpecialAttacks(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN15CNWSCombatRound14GetNewAttackIDEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetNewAttackID(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCombatRound> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSCombatRound>();

        protected bool __ownsNativeInstance;

        internal static CNWSCombatRound __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSCombatRound(native.ToPointer(), skipVTables);
        }

        internal static CNWSCombatRound __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSCombatRound)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSCombatRound __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSCombatRound(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSCombatRound.__Internal.cctor_1(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSCombatRound(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSCombatRound(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSCombatRound(global::NWN.LowLevel.CNWSCreature pCreature)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCombatRound.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = pCreature is null ? __IntPtr.Zero : pCreature.__Instance;
            __Internal.ctor(__Instance, __arg0);
        }

        public CNWSCombatRound(global::NWN.LowLevel.CNWSCombatRound _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSCombatRound.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor_1(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSCombatRound __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void StartCombatRound(uint oidTarget)
        {
            __Internal.StartCombatRound(__Instance, oidTarget);
        }

        public void StartCombatRoundCast(uint nRoundLength)
        {
            __Internal.StartCombatRoundCast(__Instance, nRoundLength);
        }

        public void EndCombatRound()
        {
            __Internal.EndCombatRound(__Instance);
        }

        public void RecomputeRound()
        {
            __Internal.RecomputeRound(__Instance);
        }

        public void IncrementTimer(int nTimeDelta)
        {
            __Internal.IncrementTimer(__Instance, nTimeDelta);
        }

        public void DecrementPauseTimer(int nTimeDelta)
        {
            __Internal.DecrementPauseTimer(__Instance, nTimeDelta);
        }

        public void SetRoundPaused(int bValue, uint oidPausedBy)
        {
            __Internal.SetRoundPaused(__Instance, bValue, oidPausedBy);
        }

        public void SetPauseTimer(int nValue, int bInfinite)
        {
            __Internal.SetPauseTimer(__Instance, nValue, bInfinite);
        }

        public void DecrementRoundLength(int nValue, int bBleed)
        {
            __Internal.DecrementRoundLength(__Instance, nValue, bBleed);
        }

        public global::NWN.LowLevel.CNWSCombatAttackData GetAttack(int nAttack)
        {
            var __ret = __Internal.GetAttack(__Instance, nAttack);
            var __result0 = global::NWN.LowLevel.CNWSCombatAttackData.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void ClearAllAttacks()
        {
            __Internal.ClearAllAttacks(__Instance);
        }

        public void SignalCombatRoundStarted()
        {
            __Internal.SignalCombatRoundStarted(__Instance);
        }

        public int CheckActionLength(uint oidPauser, int nActionLength)
        {
            var __ret = __Internal.CheckActionLength(__Instance, oidPauser, nActionLength);
            return __ret;
        }

        public int CheckActionLengthAtTime(uint oidPauser, int nActionLength, int nTimeIndex)
        {
            var __ret = __Internal.CheckActionLengthAtTime(__Instance, oidPauser, nActionLength, nTimeIndex);
            return __ret;
        }

        public void AddAction(global::NWN.LowLevel.CNWSCombatRoundAction pAction)
        {
            var __arg0 = pAction is null ? __IntPtr.Zero : pAction.__Instance;
            __Internal.AddAction(__Instance, __arg0);
        }

        public void RemoveAllActions()
        {
            __Internal.RemoveAllActions(__Instance);
        }

        public void AddReaction(int nTimeIndex, int nTimeAnimation)
        {
            __Internal.AddReaction(__Instance, nTimeIndex, nTimeAnimation);
        }

        public void AddSpellAction()
        {
            __Internal.AddSpellAction(__Instance);
        }

        public void RemoveSpellAction()
        {
            __Internal.RemoveSpellAction(__Instance);
        }

        public void AddParryAttack(uint oidTarget)
        {
            __Internal.AddParryAttack(__Instance, oidTarget);
        }

        public void AddParryIndex()
        {
            __Internal.AddParryIndex(__Instance);
        }

        public void AddCleaveAttack(uint oidTarget, int bGreatCleave)
        {
            __Internal.AddCleaveAttack(__Instance, oidTarget, bGreatCleave);
        }

        public void AddCircleKickAttack(uint oidTarget)
        {
            __Internal.AddCircleKickAttack(__Instance, oidTarget);
        }

        public void AddAttackOfOpportunity(uint oidTarget)
        {
            __Internal.AddAttackOfOpportunity(__Instance, oidTarget);
        }

        public void AddWhirlwindAttack(uint oidTarget, int bImproved)
        {
            __Internal.AddWhirlwindAttack(__Instance, oidTarget, bImproved);
        }

        public void AddEquipAction(uint oidItem, uint nInventorySlot)
        {
            __Internal.AddEquipAction(__Instance, oidItem, nInventorySlot);
        }

        public void AddUnequipAction(uint oidItem, uint oidTargetRepository, byte x, byte y)
        {
            __Internal.AddUnequipAction(__Instance, oidItem, oidTargetRepository, x, y);
        }

        public void AddCombatStepAction(uint nTimeIndex, uint oidTarget)
        {
            __Internal.AddCombatStepAction(__Instance, nTimeIndex, oidTarget);
        }

        public void InitializeAttackActions(uint oidTarget)
        {
            __Internal.InitializeAttackActions(__Instance, oidTarget);
        }

        public void InitializeNumberOfAttacks()
        {
            __Internal.InitializeNumberOfAttacks(__Instance);
        }

        public void InitializeCombatModes()
        {
            __Internal.InitializeCombatModes(__Instance);
        }

        public int CalculateOffHandAttacks()
        {
            var __ret = __Internal.CalculateOffHandAttacks(__Instance);
            return __ret;
        }

        public int GetCombatStepRequired(uint oidTarget)
        {
            var __ret = __Internal.GetCombatStepRequired(__Instance, oidTarget);
            return __ret;
        }

        public void SetDeflectArrow(int bValue)
        {
            __Internal.SetDeflectArrow(__Instance, bValue);
        }

        public void SetCurrentAttack(byte nCurrentAttack)
        {
            __Internal.SetCurrentAttack(__Instance, nCurrentAttack);
        }

        public global::NWN.LowLevel.CNWSItem GetCurrentAttackWeapon(int nWeaponAttackType)
        {
            var __ret = __Internal.GetCurrentAttackWeapon(__Instance, nWeaponAttackType);
            var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void UpdateAttackTargetForAllActions(uint oidNewTarget)
        {
            __Internal.UpdateAttackTargetForAllActions(__Instance, oidNewTarget);
        }

        public void InsertSpecialAttack(ushort nSpecialAttack, int nIndex)
        {
            __Internal.InsertSpecialAttack(__Instance, nSpecialAttack, nIndex);
        }

        public void AddSpecialAttack(ushort nSpecialAttack)
        {
            __Internal.AddSpecialAttack(__Instance, nSpecialAttack);
        }

        public void RemoveSpecialAttack(int nIndex)
        {
            __Internal.RemoveSpecialAttack(__Instance, nIndex);
        }

        public ushort GetSpecialAttack(int nIndex)
        {
            var __ret = __Internal.GetSpecialAttack(__Instance, nIndex);
            return __ret;
        }

        public ushort GetSpecialAttackID(int nIndex)
        {
            var __ret = __Internal.GetSpecialAttackID(__Instance, nIndex);
            return __ret;
        }

        public void ClearAllSpecialAttacks()
        {
            __Internal.ClearAllSpecialAttacks(__Instance);
        }

        public int SaveCombatRound(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveCombatRound(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadCombatRound(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadCombatRound(__Instance, __arg0, __arg1);
            return __ret;
        }

        public static implicit operator global::NWN.LowLevel.CNWSCombatRound(global::NWN.LowLevel.CNWSCreature pCreature)
        {
            return new global::NWN.LowLevel.CNWSCombatRound(pCreature);
        }

        public global::NWN.LowLevel.CNWSCombatAttackData[] MPcLastAttack
        {
            get
            {
                global::NWN.LowLevel.CNWSCombatAttackData[] __value = null;
                if (((__Internal*)__Instance)->m_pcLastAttack != null)
                {
                    __value = new global::NWN.LowLevel.CNWSCombatAttackData[50];
                    for (int i = 0; i < 50; i++)
                        __value[i] = global::NWN.LowLevel.CNWSCombatAttackData.__CreateInstance(*((global::NWN.LowLevel.CNWSCombatAttackData.__Internal*)&(((__Internal*)__Instance)->m_pcLastAttack[i * sizeof(global::NWN.LowLevel.CNWSCombatAttackData.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 50)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 50; i++)
                        *(global::NWN.LowLevel.CNWSCombatAttackData.__Internal*) &((__Internal*)__Instance)->m_pcLastAttack[i * sizeof(global::NWN.LowLevel.CNWSCombatAttackData.__Internal)] = *(global::NWN.LowLevel.CNWSCombatAttackData.__Internal*)value[i].__Instance;
                }
            }
        }

        public global::NWN.LowLevel.CExoArrayList<ushort> MNSpecialAttacks
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<ushort>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nSpecialAttacks));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nSpecialAttacks = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<ushort> MNSpecialAttackIDs
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<ushort>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_nSpecialAttackIDs));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_nSpecialAttackIDs = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public ushort MNAttackID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackID = value;
            }
        }

        public int MBRoundStarted
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRoundStarted;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRoundStarted = value;
            }
        }

        public int MBSpellCastRound
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSpellCastRound;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSpellCastRound = value;
            }
        }

        public int MNTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nTimer = value;
            }
        }

        public int MNRoundLength
        {
            get
            {
                return ((__Internal*)__Instance)->m_nRoundLength;
            }

            set
            {
                ((__Internal*)__Instance)->m_nRoundLength = value;
            }
        }

        public int MNOverlapAmount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOverlapAmount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOverlapAmount = value;
            }
        }

        public int MNBleedAmount
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBleedAmount;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBleedAmount = value;
            }
        }

        public int MBRoundPaused
        {
            get
            {
                return ((__Internal*)__Instance)->m_bRoundPaused;
            }

            set
            {
                ((__Internal*)__Instance)->m_bRoundPaused = value;
            }
        }

        public uint MOidRoundPausedBy
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidRoundPausedBy;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidRoundPausedBy = value;
            }
        }

        public int MNPauseTimer
        {
            get
            {
                return ((__Internal*)__Instance)->m_nPauseTimer;
            }

            set
            {
                ((__Internal*)__Instance)->m_nPauseTimer = value;
            }
        }

        public int MBInfinitePause
        {
            get
            {
                return ((__Internal*)__Instance)->m_bInfinitePause;
            }

            set
            {
                ((__Internal*)__Instance)->m_bInfinitePause = value;
            }
        }

        public byte MNCurrentAttack
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurrentAttack;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurrentAttack = value;
            }
        }

        public byte MNAttackGroup
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttackGroup;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttackGroup = value;
            }
        }

        public int MBDeflectArrow
        {
            get
            {
                return ((__Internal*)__Instance)->m_bDeflectArrow;
            }

            set
            {
                ((__Internal*)__Instance)->m_bDeflectArrow = value;
            }
        }

        public int MBWeaponSucks
        {
            get
            {
                return ((__Internal*)__Instance)->m_bWeaponSucks;
            }

            set
            {
                ((__Internal*)__Instance)->m_bWeaponSucks = value;
            }
        }

        public int MBEpicDodgeUsed
        {
            get
            {
                return ((__Internal*)__Instance)->m_bEpicDodgeUsed;
            }

            set
            {
                ((__Internal*)__Instance)->m_bEpicDodgeUsed = value;
            }
        }

        public int MNParryIndex
        {
            get
            {
                return ((__Internal*)__Instance)->m_nParryIndex;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParryIndex = value;
            }
        }

        public int MNAttacksOfOpportunity
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAttacksOfOpportunity;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAttacksOfOpportunity = value;
            }
        }

        public int MNCleaveAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCleaveAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCleaveAttacks = value;
            }
        }

        public int MNCircleKickAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCircleKickAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCircleKickAttacks = value;
            }
        }

        public uint MOidNewAttackTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidNewAttackTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidNewAttackTarget = value;
            }
        }

        public int MNOnHandAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOnHandAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOnHandAttacks = value;
            }
        }

        public int MNOffHandAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandAttacks = value;
            }
        }

        public int MNOffHandAttacksTaken
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandAttacksTaken;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandAttacksTaken = value;
            }
        }

        public int MNExtraAttacksTaken
        {
            get
            {
                return ((__Internal*)__Instance)->m_nExtraAttacksTaken;
            }

            set
            {
                ((__Internal*)__Instance)->m_nExtraAttacksTaken = value;
            }
        }

        public int MNAdditionalAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAdditionalAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAdditionalAttacks = value;
            }
        }

        public int MNBonusEffectAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nBonusEffectAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nBonusEffectAttacks = value;
            }
        }

        public byte MNParryActions
        {
            get
            {
                return ((__Internal*)__Instance)->m_nParryActions;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParryActions = value;
            }
        }

        public uint MOidDodgeTarget
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidDodgeTarget;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidDodgeTarget = value;
            }
        }

        public global::NWN.LowLevel.CNWSCreature MPBaseCreature
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(((__Internal*)__Instance)->m_pBaseCreature, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pBaseCreature = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int ActionPending
        {
            get
            {
                var __ret = __Internal.GetActionPending(__Instance);
                return __ret;
            }
        }

        public int AttackActionPending
        {
            get
            {
                var __ret = __Internal.GetAttackActionPending(__Instance);
                return __ret;
            }
        }

        public int SpellActionPending
        {
            get
            {
                var __ret = __Internal.GetSpellActionPending(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CNWSCombatRoundAction Action
        {
            get
            {
                var __ret = __Internal.GetAction(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSCombatRoundAction.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public byte TotalAttacks
        {
            get
            {
                var __ret = __Internal.GetTotalAttacks(__Instance);
                return __ret;
            }
        }

        public int OffHandAttack
        {
            get
            {
                var __ret = __Internal.GetOffHandAttack(__Instance);
                return __ret;
            }
        }

        public int ExtraAttack
        {
            get
            {
                var __ret = __Internal.GetExtraAttack(__Instance);
                return __ret;
            }
        }

        public int HasCreatureWeapons
        {
            get
            {
                var __ret = __Internal.HasCreatureWeapons(__Instance);
                return __ret;
            }
        }

        public int WeaponAttackType
        {
            get
            {
                var __ret = __Internal.GetWeaponAttackType(__Instance);
                return __ret;
            }
        }

        public int NumSpecialAttacks
        {
            get
            {
                var __ret = __Internal.GetNumSpecialAttacks(__Instance);
                return __ret;
            }
        }

        public ushort NewAttackID
        {
            get
            {
                var __ret = __Internal.GetNewAttackID(__Instance);
                return __ret;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
