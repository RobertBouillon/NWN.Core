// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWTileSetManager : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 2800)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal fixed long m_apTileSets[100];

            [FieldOffset(800)]
            internal fixed int m_anTileSetRegistered[100];

            [FieldOffset(1200)]
            internal fixed long m_apTileNodes[200];

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManagerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManagerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManagerD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager15RegisterTileSetE7CResRef", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr RegisterTileSet(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal resrefTileSet);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager17UnregisterTileSetEP10CNWTileSet", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UnregisterTileSet(__IntPtr __instance, __IntPtr pTileSet);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager23InitializeTilePathNodesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void InitializeTilePathNodes(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager18ClearTilePathNodesEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearTilePathNodes(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager15GetTilePathNodeEhh", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetTilePathNode(__IntPtr __instance, byte nNodeType, byte nRotation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager26ComputePathNodeInformationEhiRiS0_PPfS2_PPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputePathNodeInformation(__IntPtr __instance, byte nPathNode, int nPathNodeOrientation, int* nRegionNodes, int* nTileExits, float** pfRegionNodes, float** pfTileExits, int** pnTileExitRegion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN17CNWTileSetManager23ComputePathNodeRotationEiPfS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ComputePathNodeRotation(__IntPtr __instance, int nOrientation, float* fX, float* fY);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileSetManager> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWTileSetManager>();

        protected bool __ownsNativeInstance;

        internal static CNWTileSetManager __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWTileSetManager(native.ToPointer(), skipVTables);
        }

        internal static CNWTileSetManager __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWTileSetManager)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWTileSetManager __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWTileSetManager(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWTileSetManager(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWTileSetManager(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWTileSetManager()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileSetManager.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNWTileSetManager(global::NWN.LowLevel.CNWTileSetManager _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWTileSetManager.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CNWTileSetManager.__Internal*) __Instance) = *((global::NWN.LowLevel.CNWTileSetManager.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWTileSetManager __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::NWN.LowLevel.CNWTileSet RegisterTileSet(global::NWN.LowLevel.CResRef resrefTileSet)
        {
            if (ReferenceEquals(resrefTileSet, null))
                throw new global::System.ArgumentNullException("resrefTileSet", "Cannot be null because it is passed by value.");
            var __arg0 = resrefTileSet.__Instance;
            var __ret = __Internal.RegisterTileSet(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0);
            var __result0 = global::NWN.LowLevel.CNWTileSet.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void UnregisterTileSet(global::NWN.LowLevel.CNWTileSet pTileSet)
        {
            var __arg0 = pTileSet is null ? __IntPtr.Zero : pTileSet.__Instance;
            __Internal.UnregisterTileSet(__Instance, __arg0);
        }

        public void InitializeTilePathNodes()
        {
            __Internal.InitializeTilePathNodes(__Instance);
        }

        public void ClearTilePathNodes()
        {
            __Internal.ClearTilePathNodes(__Instance);
        }

        public global::NWN.LowLevel.CNWTilePathNode GetTilePathNode(byte nNodeType, byte nRotation)
        {
            var __ret = __Internal.GetTilePathNode(__Instance, nNodeType, nRotation);
            var __result0 = global::NWN.LowLevel.CNWTilePathNode.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public void ComputePathNodeInformation(byte nPathNode, int nPathNodeOrientation, ref int nRegionNodes, ref int nTileExits, float** pfRegionNodes, float** pfTileExits, int** pnTileExitRegion)
        {
            fixed (int* __nRegionNodes2 = &nRegionNodes)
            {
                var __arg2 = __nRegionNodes2;
                fixed (int* __nTileExits3 = &nTileExits)
                {
                    var __arg3 = __nTileExits3;
                    __Internal.ComputePathNodeInformation(__Instance, nPathNode, nPathNodeOrientation, __arg2, __arg3, pfRegionNodes, pfTileExits, pnTileExitRegion);
                }
            }
        }

        public void ComputePathNodeRotation(int nOrientation, ref float fX, ref float fY)
        {
            fixed (float* __fX1 = &fX)
            {
                var __arg1 = __fX1;
                fixed (float* __fY2 = &fY)
                {
                    var __arg2 = __fY2;
                    __Internal.ComputePathNodeRotation(__Instance, nOrientation, __arg1, __arg2);
                }
            }
        }

        public global::NWN.LowLevel.CNWTileSet[] MApTileSets
        {
            get
            {
                global::NWN.LowLevel.CNWTileSet[] __value = null;
                if (((__Internal*)__Instance)->m_apTileSets != null)
                {
                    __value = new global::NWN.LowLevel.CNWTileSet[100];
                    for (int i = 0; i < 100; i++)
                        __value[i] = global::NWN.LowLevel.CNWTileSet.__CreateInstance((__IntPtr) ((__Internal*)__Instance)->m_apTileSets[i]);
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 100)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 100; i++)
                        ((__Internal*)__Instance)->m_apTileSets[i] = (long) value[i].__Instance;
                }
            }
        }

        public int[] MAnTileSetRegistered
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<int>(((__Internal*)__Instance)->m_anTileSetRegistered, 100);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 100; i++)
                        ((__Internal*)__Instance)->m_anTileSetRegistered[i] = value[i];
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
