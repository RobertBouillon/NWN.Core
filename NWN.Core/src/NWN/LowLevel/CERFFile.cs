// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CERFFile : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 216)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.NWERFHEADER.__Internal m_stHeader;

            [FieldOffset(160)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstStringList;

            [FieldOffset(168)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstKeyList;

            [FieldOffset(176)]
            internal global::NWN.LowLevel.CExoLinkedList.__Internal m_lstResList;

            [FieldOffset(184)]
            internal __IntPtr m_pOutFile;

            [FieldOffset(192)]
            internal uint m_nStringOffset;

            [FieldOffset(196)]
            internal uint m_nKeyOffset;

            [FieldOffset(200)]
            internal uint m_nResOffset;

            [FieldOffset(204)]
            internal uint m_nEntries;

            [FieldOffset(208)]
            internal uint m_nCurEntries;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFileC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFileC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFileD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile10SetVersionEPc", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetVersion(__IntPtr __instance, sbyte* sVersion);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile11AddResourceER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddResource(__IntPtr __instance, __IntPtr sResourceName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile11AddResourceEPctP4CRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddResource(__IntPtr __instance, sbyte* szResName, ushort rtResType, __IntPtr pRes);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile14RemoveResourceER10CExoStringt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveResource(__IntPtr __instance, __IntPtr sResourceName, ushort a_wResourceType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile14RemoveResourceEP7CERFRes", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RemoveResource(__IntPtr __instance, __IntPtr pData);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile9AddStringEP10CERFString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int AddString(__IntPtr __instance, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile4ReadEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Read(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile5ResetEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Reset(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile5WriteER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Write(__IntPtr __instance, __IntPtr sFilename);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile18RecalculateOffsetsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void RecalculateOffsets(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile6CreateER10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Create(__IntPtr __instance, __IntPtr sOutFile);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile11WriteHeaderEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteHeader(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile16WriteStringTableEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteStringTable(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile13SetNumEntriesEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetNumEntries(__IntPtr __instance, uint nEntries);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile13WriteResourceEPctP4CResi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int WriteResource(__IntPtr __instance, sbyte* szResName, ushort rtResType, __IntPtr pRes, int bIsGFF);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN8CERFFile6FinishEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Finish(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CERFFile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CERFFile>();

        protected bool __ownsNativeInstance;

        internal static CERFFile __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CERFFile(native.ToPointer(), skipVTables);
        }

        internal static CERFFile __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CERFFile)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CERFFile __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CERFFile(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CERFFile(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CERFFile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CERFFile()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CERFFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CERFFile(global::NWN.LowLevel.CERFFile _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CERFFile.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CERFFile.__Internal*) __Instance) = *((global::NWN.LowLevel.CERFFile.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CERFFile __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetVersion(sbyte* sVersion)
        {
            __Internal.SetVersion(__Instance, sVersion);
        }

        public int AddResource(global::NWN.LowLevel.CExoString sResourceName)
        {
            if (ReferenceEquals(sResourceName, null))
                throw new global::System.ArgumentNullException("sResourceName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sResourceName.__Instance;
            var __ret = __Internal.AddResource(__Instance, __arg0);
            return __ret;
        }

        public int AddResource(sbyte* szResName, ushort rtResType, global::NWN.LowLevel.CRes pRes)
        {
            var __arg2 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.AddResource(__Instance, szResName, rtResType, __arg2);
            return __ret;
        }

        public int RemoveResource(global::NWN.LowLevel.CExoString sResourceName, ushort a_wResourceType)
        {
            if (ReferenceEquals(sResourceName, null))
                throw new global::System.ArgumentNullException("sResourceName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sResourceName.__Instance;
            var __ret = __Internal.RemoveResource(__Instance, __arg0, a_wResourceType);
            return __ret;
        }

        public int RemoveResource(global::NWN.LowLevel.CERFRes pData)
        {
            var __arg0 = pData is null ? __IntPtr.Zero : pData.__Instance;
            var __ret = __Internal.RemoveResource(__Instance, __arg0);
            return __ret;
        }

        public int AddString(global::NWN.LowLevel.CERFString pString)
        {
            var __arg0 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.AddString(__Instance, __arg0);
            return __ret;
        }

        public int Read()
        {
            var __ret = __Internal.Read(__Instance);
            return __ret;
        }

        public int Reset()
        {
            var __ret = __Internal.Reset(__Instance);
            return __ret;
        }

        public int Write(global::NWN.LowLevel.CExoString sFilename)
        {
            if (ReferenceEquals(sFilename, null))
                throw new global::System.ArgumentNullException("sFilename", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFilename.__Instance;
            var __ret = __Internal.Write(__Instance, __arg0);
            return __ret;
        }

        public void RecalculateOffsets()
        {
            __Internal.RecalculateOffsets(__Instance);
        }

        public int Create(global::NWN.LowLevel.CExoString sOutFile)
        {
            if (ReferenceEquals(sOutFile, null))
                throw new global::System.ArgumentNullException("sOutFile", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sOutFile.__Instance;
            var __ret = __Internal.Create(__Instance, __arg0);
            return __ret;
        }

        public int WriteHeader()
        {
            var __ret = __Internal.WriteHeader(__Instance);
            return __ret;
        }

        public int WriteStringTable()
        {
            var __ret = __Internal.WriteStringTable(__Instance);
            return __ret;
        }

        public int SetNumEntries(uint nEntries)
        {
            var __ret = __Internal.SetNumEntries(__Instance, nEntries);
            return __ret;
        }

        public int WriteResource(sbyte* szResName, ushort rtResType, global::NWN.LowLevel.CRes pRes, int bIsGFF)
        {
            var __arg2 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __ret = __Internal.WriteResource(__Instance, szResName, rtResType, __arg2, bIsGFF);
            return __ret;
        }

        public int Finish()
        {
            var __ret = __Internal.Finish(__Instance);
            return __ret;
        }

        public global::NWN.LowLevel.NWERFHEADER MStHeader
        {
            get
            {
                return global::NWN.LowLevel.NWERFHEADER.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_stHeader));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_stHeader = *(global::NWN.LowLevel.NWERFHEADER.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFString> MLstStringList
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFString>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstStringList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstStringList = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFKey> MLstKeyList
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFKey>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstKeyList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstKeyList = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFRes> MLstResList
        {
            get
            {
                return global::NWN.LowLevel.CExoLinkedList<global::NWN.LowLevel.CERFRes>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_lstResList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_lstResList = *(global::NWN.LowLevel.CExoLinkedList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoFile MPOutFile
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoFile.__GetOrCreateInstance(((__Internal*)__Instance)->m_pOutFile, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pOutFile = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public uint MNStringOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nStringOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nStringOffset = value;
            }
        }

        public uint MNKeyOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nKeyOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nKeyOffset = value;
            }
        }

        public uint MNResOffset
        {
            get
            {
                return ((__Internal*)__Instance)->m_nResOffset;
            }

            set
            {
                ((__Internal*)__Instance)->m_nResOffset = value;
            }
        }

        public uint MNEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nEntries = value;
            }
        }

        public uint MNCurEntries
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCurEntries;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCurEntries = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
