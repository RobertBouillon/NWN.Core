// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    namespace NWNXLib
    {
        namespace API
        {
            namespace Constants
            {
                namespace InventorySlot
                {
                    public enum TYPE : uint
                    {
                        Head = 0,
                        Chest = 1,
                        Boots = 2,
                        Arms = 3,
                        RightHand = 4,
                        LeftHand = 5,
                        Cloak = 6,
                        LeftRing = 7,
                        RightRing = 8,
                        Neck = 9,
                        Belt = 10,
                        Arrows = 11,
                        Bullets = 12,
                        Bolts = 13,
                        CreatureWeaponLeft = 14,
                        CreatureWeaponRight = 15,
                        CreatureWeaponBite = 16,
                        CreatureArmour = 17
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants13InventorySlot8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 17;
                    }
                }

                namespace EquipmentSlot
                {
                    [Flags]
                    public enum TYPE : uint
                    {
                        None = 0,
                        Head = 1,
                        Chest = 2,
                        Boots = 4,
                        Arms = 8,
                        RightHand = 16,
                        LeftHand = 32,
                        Cloak = 64,
                        LeftRing = 128,
                        RightRing = 256,
                        Neck = 512,
                        Belt = 1024,
                        Arrows = 2048,
                        Bullets = 4096,
                        Bolts = 8192,
                        CreatureWeaponLeft = 16384,
                        CreatureWeaponRight = 32768,
                        CreatureWeaponBite = 65536,
                        CreatureArmour = 131072
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants13EquipmentSlot8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 262143;
                    }
                }

                namespace BaseItem
                {
                    public enum TYPE : uint
                    {
                        Shortsword = 0,
                        Longsword = 1,
                        Battleaxe = 2,
                        BastardSword = 3,
                        LightFlail = 4,
                        Warhammer = 5,
                        HeavyCrossbow = 6,
                        LightCrossbow = 7,
                        Longbow = 8,
                        LightMace = 9,
                        Halberd = 10,
                        Shortbow = 11,
                        TwobladedSword = 12,
                        Greatsword = 13,
                        SmallShield = 14,
                        Torch = 15,
                        Armor = 16,
                        Helmet = 17,
                        Greataxe = 18,
                        Amulet = 19,
                        Arrow = 20,
                        Belt = 21,
                        Dagger = 22,
                        MiscSmall = 24,
                        Bolt = 25,
                        Boots = 26,
                        Bullet = 27,
                        Club = 28,
                        MiscMedium = 29,
                        Dart = 31,
                        DireMace = 32,
                        DoubleAxe = 33,
                        MiscLarge = 34,
                        HeavyFlail = 35,
                        Gloves = 36,
                        LightHammer = 37,
                        Handaxe = 38,
                        HealersKit = 39,
                        Kama = 40,
                        Katana = 41,
                        Kukri = 42,
                        MiscTall = 43,
                        MagicRod = 44,
                        MagicStaff = 45,
                        MagicWand = 46,
                        MorningStar = 47,
                        Potions = 49,
                        QuarterStaff = 50,
                        Rapier = 51,
                        Ring = 52,
                        Scimitar = 53,
                        Scroll = 54,
                        Scythe = 55,
                        LargeShield = 56,
                        TowerShield = 57,
                        ShortSpear = 58,
                        Shuriken = 59,
                        Sickle = 60,
                        Sling = 61,
                        ThievesTools = 62,
                        ThrowingAxe = 63,
                        TrapKit = 64,
                        Key = 65,
                        LargeBox = 66,
                        MiscWide = 68,
                        CreatureSlashWeapon = 69,
                        CreaturePierceWeapon = 70,
                        CreatureBludgeWeapon = 71,
                        CreatureSlashPierceWeapon = 72,
                        CreatureItem = 73,
                        Book = 74,
                        SpellScroll = 75,
                        Gold = 76,
                        Gem = 77,
                        Bracer = 78,
                        MiscThin = 79,
                        Cloak = 80,
                        Grenade = 81,
                        Encampment = 82,
                        Lance = 92,
                        Trumpet = 93,
                        MoonOnAStick = 94,
                        Trident = 95,
                        BlankPotion = 101,
                        BlankScroll = 102,
                        BlankWand = 103,
                        EnchantedPotion = 104,
                        EnchantedScroll = 105,
                        EnchantedWand = 106,
                        DwarvenWaraxe = 108,
                        CraftMaterialMedium = 109,
                        CraftMaterialSmall = 110,
                        Whip = 111,
                        CraftBase = 112,
                        Invalid = 256,
                        CEP_Trident = 300,
                        CEP_HeavyPick = 301,
                        CEP_LightPick = 302,
                        CEP_Sai = 303,
                        CEP_Nunchaku = 304,
                        CEP_Falchion = 305,
                        CEP_SmallBox = 306,
                        CEP_MiscMedium2 = 307,
                        CEP_Sap = 308,
                        CEP_AssassinDagger = 309,
                        CEP_Katar = 310,
                        CEP_MiscSmall2 = 311,
                        CEP_HeavyMace = 317,
                        CEP_Maul = 318,
                        CEP_MercurialLongSword = 319,
                        CEP_MercurialGreatSword = 320,
                        CEP_DoubleScimitar = 321,
                        CEP_Goad = 322,
                        CEP_WindfireWheel = 323,
                        CEP_DoublePick = 324,
                        CEP_Flowers = 325,
                        CEP_Cloak = 349
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants8BaseItem8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 65535;
                    }
                }

                namespace ItemAppearance
                {
                    public enum TYPE
                    {
                        ColorLeather1 = -9,
                        ColorLeather2 = -8,
                        ColorCloth1 = -7,
                        ColorCloth2 = -6,
                        ColorMetal1 = -5,
                        ColorMetal2 = -4,
                        ModelPart1 = -3,
                        ModelPart2 = -2,
                        ModelPart3 = -1,
                        ArmorModelRightFoot = 0,
                        ArmorModelLeftFoot = 1,
                        ArmorModelRightShin = 2,
                        ArmorModelLeftShin = 3,
                        ArmorModelLeftThigh = 4,
                        ArmorModelRightThigh = 5,
                        ArmorModelPelvis = 6,
                        ArmorModelTorso = 7,
                        ArmorModelBelt = 8,
                        ArmorModelNeck = 9,
                        ArmorModelRightForearm = 10,
                        ArmorModelLeftForearm = 11,
                        ArmorModelRightBicep = 12,
                        ArmorModelLeftBicep = 13,
                        ArmorModelRightShoulder = 14,
                        ArmorModelLeftShoulder = 15,
                        ArmorModelRightHand = 16,
                        ArmorModelLeftHand = 17,
                        ArmorModelRobe = 18
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants14ItemAppearance8ToStringEi", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(int value);
                        }

                        public static string ToString(int value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = -9;

                        public static int MAX { get; } = 18;
                    }
                }

                namespace ItemAppearanceType
                {
                    public enum TYPE : uint
                    {
                        SimpleModel = 0,
                        WeaponColor = 1,
                        WeaponModel = 2,
                        ArmorModel = 3,
                        ArmorColor = 4
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants18ItemAppearanceType8ToStringEj", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(uint value);
                        }

                        public static string ToString(uint value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 4;
                    }
                }

                namespace ItemProperty
                {
                    public enum TYPE : uint
                    {
                        AbilityBonus = 0,
                        ACBonus = 1,
                        ACBonusVSAlignmentGroup = 2,
                        ACBonusVSDamageType = 3,
                        ACBonusVSRacialGroup = 4,
                        ACBonusVSSpecificAlignment = 5,
                        EnhancementBonus = 6,
                        EnhancementBonusVSAlignmentGroup = 7,
                        EnhancementBonusVSRacialGroup = 8,
                        EnhancementBonusVSSpecificAlignment = 9,
                        DecreasedEnhancementModifier = 10,
                        BaseItemWeightReduction = 11,
                        BonusFeat = 12,
                        BonusSpellSlot = 13,
                        CastSpell = 15,
                        DamageBonus = 16,
                        DamageBonusVSAlignmentGroup = 17,
                        DamageBonusVSRacialGroup = 18,
                        DamageBonusVSSpecificAlignment = 19,
                        ImmunityDamageType = 20,
                        DecreasedDamage = 21,
                        DamageReduction = 22,
                        DamageResistance = 23,
                        DamageVulnerability = 24,
                        Invalid25 = 25,
                        Darkvision = 26,
                        DecreasedAbilityScore = 27,
                        DecreasedAC = 28,
                        DecreasedSkillModifier = 29,
                        Invalid30 = 30,
                        Invalid31 = 31,
                        EnhancedContainerReducedWeight = 32,
                        ExtraMeleeDamageType = 33,
                        ExtraRangedDamageType = 34,
                        Haste = 35,
                        HolyAvenger = 36,
                        ImmunityMiscellaneous = 37,
                        ImprovedEvasion = 38,
                        SpellResistance = 39,
                        SavingThrowBonus = 40,
                        SavingThrowBonusSpecific = 41,
                        Invalid42 = 42,
                        Keen = 43,
                        Light = 44,
                        Mighty = 45,
                        MindBlank = 46,
                        NoDamage = 47,
                        OnHitProperties = 48,
                        DecreasedSavingThrows = 49,
                        DecreasedSavingThrowsSpecific = 50,
                        Regeneration = 51,
                        SkillBonus = 52,
                        ImmunitySpecificSpell = 53,
                        ImmunitySpellSchool = 54,
                        ThievesTools = 55,
                        AttackBonus = 56,
                        AttackBonusVSAlignmentGroup = 57,
                        AttackBonusVSRacialGroup = 58,
                        AttackBonusVSSpecificAlignment = 59,
                        DecreasedAttackModifier = 60,
                        UnlimitedAmmunition = 61,
                        UseLimitationAlignmentGroup = 62,
                        UseLimitationClass = 63,
                        UseLimitationRacialType = 64,
                        UseLimitationSpecificAlignment = 65,
                        UseLimitationTileset = 66,
                        VampiricRegeneration = 67,
                        Invalid68 = 68,
                        Invalid69 = 69,
                        Trap = 70,
                        TrueSeeing = 71,
                        OnMonsterHit = 72,
                        TurnResistance = 73,
                        MassiveCriticals = 74,
                        FreedomOfMovement = 75,
                        Poison = 76,
                        MonsterDamage = 77,
                        ImmunitySpellsByLevel = 78,
                        SpecialWalk = 79,
                        HealersKit = 80,
                        WeightIncrease = 81,
                        OnHitCastSpell = 82,
                        VisualEffect = 83,
                        ArcaneSpellFailure = 84,
                        Material = 85,
                        Quality = 86,
                        Additional = 87
                    }

                    public unsafe partial class Item
                    {
                        public partial struct __Internal
                        {
                            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN7NWNXLib3API9Constants12ItemProperty8ToStringEi", CallingConvention = __CallingConvention.Cdecl)]
                            internal static extern __IntPtr ToString(int value);
                        }

                        public static string ToString(int value)
                        {
                            var __ret = __Internal.ToString(value);
                            return CppSharp.Runtime.MarshalUtil.GetString(global::System.Text.Encoding.UTF8, __ret);
                        }

                        public static int MIN { get; } = 0;

                        public static int MAX { get; } = 87;
                    }
                }
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
