// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWSQuickbarButton : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal uint m_oidItem;

            [FieldOffset(4)]
            internal uint m_oidSecondaryItem;

            [FieldOffset(8)]
            internal byte m_nObjectType;

            [FieldOffset(9)]
            internal byte m_nMultiClass;

            [FieldOffset(10)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cResRef;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCommandLabel;

            [FieldOffset(64)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCommandLine;

            [FieldOffset(80)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sToolTip;

            [FieldOffset(96)]
            internal int m_nINTParam1;

            [FieldOffset(100)]
            internal byte m_nMetaType;

            [FieldOffset(101)]
            internal byte m_nDomainLevel;

            [FieldOffset(102)]
            internal ushort m_nAssociateType;

            [FieldOffset(104)]
            internal uint m_oidAssociate;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSQuickbarButtonC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSQuickbarButtonC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CNWSQuickbarButtonD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSQuickbarButton> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWSQuickbarButton>();

        protected bool __ownsNativeInstance;

        internal static CNWSQuickbarButton __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWSQuickbarButton(native.ToPointer(), skipVTables);
        }

        internal static CNWSQuickbarButton __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWSQuickbarButton)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWSQuickbarButton __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWSQuickbarButton(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CNWSQuickbarButton.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CNWSQuickbarButton(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWSQuickbarButton(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNWSQuickbarButton(global::NWN.LowLevel.CNWSQuickbarButton _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSQuickbarButton.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public CNWSQuickbarButton()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNWSQuickbarButton.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNWSQuickbarButton __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint MOidItem
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidItem;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidItem = value;
            }
        }

        public uint MOidSecondaryItem
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidSecondaryItem;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidSecondaryItem = value;
            }
        }

        public byte MNObjectType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nObjectType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nObjectType = value;
            }
        }

        public byte MNMultiClass
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMultiClass;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMultiClass = value;
            }
        }

        public global::NWN.LowLevel.CResRef MCResRef
        {
            get
            {
                return global::NWN.LowLevel.CResRef.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_cResRef));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_cResRef = *(global::NWN.LowLevel.CResRef.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCommandLabel
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCommandLabel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCommandLabel = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSCommandLine
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCommandLine));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCommandLine = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSToolTip
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sToolTip));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sToolTip = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int MNINTParam1
        {
            get
            {
                return ((__Internal*)__Instance)->m_nINTParam1;
            }

            set
            {
                ((__Internal*)__Instance)->m_nINTParam1 = value;
            }
        }

        public byte MNMetaType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nMetaType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nMetaType = value;
            }
        }

        public byte MNDomainLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDomainLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDomainLevel = value;
            }
        }

        public ushort MNAssociateType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nAssociateType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nAssociateType = value;
            }
        }

        public uint MOidAssociate
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidAssociate;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidAssociate = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
