// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CCombatInformation : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal byte m_nNumAttacks;

            [FieldOffset(1)]
            internal sbyte m_nOnHandAttackModifier;

            [FieldOffset(2)]
            internal sbyte m_nOnHandDamageModifier;

            [FieldOffset(3)]
            internal sbyte m_nOffHandAttackModifier;

            [FieldOffset(4)]
            internal sbyte m_nOffHandDamageModifier;

            [FieldOffset(5)]
            internal byte m_nSpellResistance;

            [FieldOffset(6)]
            internal byte m_nArcaneSpellFailure;

            [FieldOffset(7)]
            internal byte m_nArmorCheckPenalty;

            [FieldOffset(8)]
            internal byte m_nUnarmedDamageDice;

            [FieldOffset(9)]
            internal byte m_nUnarmedDamageDie;

            [FieldOffset(10)]
            internal fixed byte m_nCreatureDamageDice[3];

            [FieldOffset(13)]
            internal fixed byte m_nCreatureDamageDie[3];

            [FieldOffset(16)]
            internal fixed sbyte m_nCreatureDamageModifier[3];

            [FieldOffset(19)]
            internal byte m_nOnHandCriticalHitRange;

            [FieldOffset(20)]
            internal byte m_nOnHandCriticalHitMultiplier;

            [FieldOffset(24)]
            internal int m_bOffHandWeaponEquipped;

            [FieldOffset(28)]
            internal byte m_nOffHandCriticalHitRange;

            [FieldOffset(29)]
            internal byte m_nOffHandCriticalHitMultiplier;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pAttackList;

            [FieldOffset(48)]
            internal global::NWN.LowLevel.CExoArrayList.__Internal m_pDamageList;

            [FieldOffset(64)]
            internal uint m_oidRightEquipped;

            [FieldOffset(68)]
            internal uint m_oidLeftEquipped;

            [FieldOffset(72)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sRightEquipped;

            [FieldOffset(88)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sLeftEquipped;

            [FieldOffset(104)]
            internal byte m_nDamageDice;

            [FieldOffset(105)]
            internal byte m_nDamageDie;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CCombatInformationC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CCombatInformationC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CCombatInformationD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CCombatInformation8SaveDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SaveData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN18CCombatInformation8LoadDataEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int LoadData(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCombatInformation> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CCombatInformation>();

        protected bool __ownsNativeInstance;

        internal static CCombatInformation __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CCombatInformation(native.ToPointer(), skipVTables);
        }

        internal static CCombatInformation __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CCombatInformation)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CCombatInformation __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CCombatInformation(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CCombatInformation.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CCombatInformation(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CCombatInformation(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CCombatInformation()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CCombatInformation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CCombatInformation(global::NWN.LowLevel.CCombatInformation _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CCombatInformation.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CCombatInformation __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int SaveData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.SaveData(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int LoadData(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = __Internal.LoadData(__Instance, __arg0, __arg1);
            return __ret;
        }

        public byte MNNumAttacks
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumAttacks;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumAttacks = value;
            }
        }

        public sbyte MNOnHandAttackModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOnHandAttackModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOnHandAttackModifier = value;
            }
        }

        public sbyte MNOnHandDamageModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOnHandDamageModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOnHandDamageModifier = value;
            }
        }

        public sbyte MNOffHandAttackModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandAttackModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandAttackModifier = value;
            }
        }

        public sbyte MNOffHandDamageModifier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandDamageModifier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandDamageModifier = value;
            }
        }

        public byte MNSpellResistance
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpellResistance;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpellResistance = value;
            }
        }

        public byte MNArcaneSpellFailure
        {
            get
            {
                return ((__Internal*)__Instance)->m_nArcaneSpellFailure;
            }

            set
            {
                ((__Internal*)__Instance)->m_nArcaneSpellFailure = value;
            }
        }

        public byte MNArmorCheckPenalty
        {
            get
            {
                return ((__Internal*)__Instance)->m_nArmorCheckPenalty;
            }

            set
            {
                ((__Internal*)__Instance)->m_nArmorCheckPenalty = value;
            }
        }

        public byte MNUnarmedDamageDice
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUnarmedDamageDice;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUnarmedDamageDice = value;
            }
        }

        public byte MNUnarmedDamageDie
        {
            get
            {
                return ((__Internal*)__Instance)->m_nUnarmedDamageDie;
            }

            set
            {
                ((__Internal*)__Instance)->m_nUnarmedDamageDie = value;
            }
        }

        public byte[] MNCreatureDamageDice
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nCreatureDamageDice, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_nCreatureDamageDice[i] = value[i];
                }
            }
        }

        public byte[] MNCreatureDamageDie
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<byte>(((__Internal*)__Instance)->m_nCreatureDamageDie, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_nCreatureDamageDie[i] = value[i];
                }
            }
        }

        public sbyte[] MNCreatureDamageModifier
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<sbyte>(((__Internal*)__Instance)->m_nCreatureDamageModifier, 3);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((__Internal*)__Instance)->m_nCreatureDamageModifier[i] = value[i];
                }
            }
        }

        public byte MNOnHandCriticalHitRange
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOnHandCriticalHitRange;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOnHandCriticalHitRange = value;
            }
        }

        public byte MNOnHandCriticalHitMultiplier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOnHandCriticalHitMultiplier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOnHandCriticalHitMultiplier = value;
            }
        }

        public int MBOffHandWeaponEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_bOffHandWeaponEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_bOffHandWeaponEquipped = value;
            }
        }

        public byte MNOffHandCriticalHitRange
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandCriticalHitRange;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandCriticalHitRange = value;
            }
        }

        public byte MNOffHandCriticalHitMultiplier
        {
            get
            {
                return ((__Internal*)__Instance)->m_nOffHandCriticalHitMultiplier;
            }

            set
            {
                ((__Internal*)__Instance)->m_nOffHandCriticalHitMultiplier = value;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CCombatInformationNode> MPAttackList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CCombatInformationNode>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pAttackList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pAttackList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CCombatInformationNode> MPDamageList
        {
            get
            {
                return global::NWN.LowLevel.CExoArrayList<global::NWN.LowLevel.CCombatInformationNode>.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_pDamageList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_pDamageList = *(global::NWN.LowLevel.CExoArrayList.__Internal*) value.__Instance;
            }
        }

        public uint MOidRightEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidRightEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidRightEquipped = value;
            }
        }

        public uint MOidLeftEquipped
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidLeftEquipped;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidLeftEquipped = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSRightEquipped
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sRightEquipped));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sRightEquipped = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MSLeftEquipped
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sLeftEquipped));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sLeftEquipped = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public byte MNDamageDice
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDamageDice;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDamageDice = value;
            }
        }

        public byte MNDamageDie
        {
            get
            {
                return ((__Internal*)__Instance)->m_nDamageDie;
            }

            set
            {
                ((__Internal*)__Instance)->m_nDamageDie = value;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
