// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CVirtualMachineCmdImplementer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 16)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CVirtualMachineCmdImplementer;

            [FieldOffset(8)]
            internal int m_bValidObjectRunScript;

            [FieldOffset(12)]
            internal uint m_oidObjectRunScript;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN29CVirtualMachineCmdImplementerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN29CVirtualMachineCmdImplementerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineCmdImplementer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CVirtualMachineCmdImplementer>();

        protected bool __ownsNativeInstance;

        internal static CVirtualMachineCmdImplementer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CVirtualMachineCmdImplementer(native.ToPointer(), skipVTables);
        }

        internal static CVirtualMachineCmdImplementer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CVirtualMachineCmdImplementer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CVirtualMachineCmdImplementer __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CVirtualMachineCmdImplementer)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CVirtualMachineCmdImplementer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CVirtualMachineCmdImplementer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CVirtualMachineCmdImplementer.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CVirtualMachineCmdImplementer(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CVirtualMachineCmdImplementer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public CVirtualMachineCmdImplementer(global::NWN.LowLevel.CVirtualMachineCmdImplementer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineCmdImplementer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CVirtualMachineCmdImplementer");
        }

        public CVirtualMachineCmdImplementer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CVirtualMachineCmdImplementer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CVirtualMachineCmdImplementer");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CVirtualMachineCmdImplementer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CVirtualMachineCmdImplementer.__Internal*) __Instance)->vptr_CVirtualMachineCmdImplementer = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void InitializeCommands()
        {
            var ___InitializeCommandsDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 2);
            ___InitializeCommandsDelegate(__Instance);
        }

        public virtual int ExecuteCommand(int nCommandId, int nParameters)
        {
            var ___ExecuteCommandDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_int>(0, 3);
            var __ret = ___ExecuteCommandDelegate(__Instance, nCommandId, nParameters);
            return __ret;
        }

        public virtual void RunScriptCallback(global::NWN.LowLevel.CExoString sFileName)
        {
            var ___RunScriptCallbackDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr>(0, 4);
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            ___RunScriptCallbackDelegate(__Instance, __arg0);
        }

        public virtual void ReportError(global::NWN.LowLevel.CExoString sFileName, int nError)
        {
            var ___ReportErrorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int>(0, 5);
            if (ReferenceEquals(sFileName, null))
                throw new global::System.ArgumentNullException("sFileName", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sFileName.__Instance;
            ___ReportErrorDelegate(__Instance, __arg0, nError);
        }

        public virtual __IntPtr CreateGameDefinedStructure(int nUserDefinedType)
        {
            var ___CreateGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr_int>(0, 6);
            var __ret = ___CreateGameDefinedStructureDelegate(__Instance, nUserDefinedType);
            return __ret;
        }

        public virtual void DestroyGameDefinedStructure(int nUserDefinedType, __IntPtr pStructureToDelete)
        {
            var ___DestroyGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_int___IntPtr>(0, 7);
            ___DestroyGameDefinedStructureDelegate(__Instance, nUserDefinedType, pStructureToDelete);
        }

        public virtual int GetEqualGameDefinedStructure(int nUserDefinedType, __IntPtr pStructure1, __IntPtr pStructure2)
        {
            var ___GetEqualGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int___IntPtr___IntPtr>(0, 8);
            var __ret = ___GetEqualGameDefinedStructureDelegate(__Instance, nUserDefinedType, pStructure1, pStructure2);
            return __ret;
        }

        public virtual __IntPtr CopyGameDefinedStructure(int nUserDefinedType, __IntPtr pStructureSrc)
        {
            var ___CopyGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr_int___IntPtr>(0, 9);
            var __ret = ___CopyGameDefinedStructureDelegate(__Instance, nUserDefinedType, pStructureSrc);
            return __ret;
        }

        public virtual int SaveGameDefinedStructure(int nEngineStructure, __IntPtr pStructure, global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var ___SaveGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int___IntPtr___IntPtr___IntPtr>(0, 10);
            var __arg2 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg3 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = ___SaveGameDefinedStructureDelegate(__Instance, nEngineStructure, pStructure, __arg2, __arg3);
            return __ret;
        }

        public virtual int LoadGameDefinedStructure(int nEngineStructure, void** pStructure, global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var ___LoadGameDefinedStructureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_voidPtrPtr___IntPtr___IntPtr>(0, 11);
            var __arg2 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg3 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            var __ret = ___LoadGameDefinedStructureDelegate(__Instance, nEngineStructure, pStructure, __arg2, __arg3);
            return __ret;
        }

        public virtual global::NWN.LowLevel.CExoString GetGameDefinedStructureName(int nEngineStructure)
        {
            var ___GetGameDefinedStructureNameDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int>(0, 12);
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            ___GetGameDefinedStructureNameDelegate(new IntPtr(&__ret), __Instance, nEngineStructure);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public virtual global::NWN.LowLevel.CExoString GetDebuggerLabelName(int nDebuggerLabel)
        {
            var ___GetDebuggerLabelNameDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int>(0, 13);
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            ___GetDebuggerLabelNameDelegate(new IntPtr(&__ret), __Instance, nDebuggerLabel);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public virtual void GetEngineStructureWatchView(int nEngineStructure, __IntPtr pEngineStructure, ref int nEntries, global::NWN.LowLevel.CExoString m_ppNames, global::NWN.LowLevel.CExoString m_ppValues)
        {
            var ___GetEngineStructureWatchViewDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_int___IntPtr_intPtr___IntPtr___IntPtr>(0, 14);
            fixed (int* __nEntries2 = &nEntries)
            {
                var __arg2 = __nEntries2;
                var ____arg3 = m_ppNames is null ? __IntPtr.Zero : m_ppNames.__Instance;
                var __arg3 = new __IntPtr(&____arg3);
                var ____arg4 = m_ppValues is null ? __IntPtr.Zero : m_ppValues.__Instance;
                var __arg4 = new __IntPtr(&____arg4);
                ___GetEngineStructureWatchViewDelegate(__Instance, nEngineStructure, pEngineStructure, __arg2, __arg3, __arg4);
            }
        }

        public virtual void GetObjectWatchView(uint oidObject, ref int nEntries, global::NWN.LowLevel.CExoString m_ppNames, global::NWN.LowLevel.CExoString m_ppValues)
        {
            var ___GetObjectWatchViewDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_uint_intPtr___IntPtr___IntPtr>(0, 15);
            fixed (int* __nEntries1 = &nEntries)
            {
                var __arg1 = __nEntries1;
                var ____arg2 = m_ppNames is null ? __IntPtr.Zero : m_ppNames.__Instance;
                var __arg2 = new __IntPtr(&____arg2);
                var ____arg3 = m_ppValues is null ? __IntPtr.Zero : m_ppValues.__Instance;
                var __arg3 = new __IntPtr(&____arg3);
                ___GetObjectWatchViewDelegate(__Instance, oidObject, __arg1, __arg2, __arg3);
            }
        }

        public virtual void DebugGUIStop()
        {
            var ___DebugGUIStopDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 17);
            ___DebugGUIStopDelegate(__Instance);
        }

        public virtual void DebugGUISendMessageTo(sbyte* pMsg, int nSize)
        {
            var ___DebugGUISendMessageToDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_sbytePtr_int>(0, 18);
            ___DebugGUISendMessageToDelegate(__Instance, pMsg, nSize);
        }

        public virtual int DebugGUIGetMessageFrom(sbyte** pMsg, ref int nSize)
        {
            var ___DebugGUIGetMessageFromDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr_sbytePtrPtr_intPtr>(0, 19);
            fixed (int* __nSize1 = &nSize)
            {
                var __arg1 = __nSize1;
                var __ret = ___DebugGUIGetMessageFromDelegate(__Instance, pMsg, __arg1);
                return __ret;
            }
        }

        public virtual void DebugGUIUpdate()
        {
            var ___DebugGUIUpdateDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 20);
            ___DebugGUIUpdateDelegate(__Instance);
        }

        public int MBValidObjectRunScript
        {
            get
            {
                return ((__Internal*)__Instance)->m_bValidObjectRunScript;
            }

            set
            {
                ((__Internal*)__Instance)->m_bValidObjectRunScript = value;
            }
        }

        public uint MOidObjectRunScript
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidObjectRunScript;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidObjectRunScript = value;
            }
        }

        public virtual int DebugGUIStart
        {
            get
            {
                var ___DebugGUIStartDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func_int___IntPtr>(0, 16);
                var __ret = ___DebugGUIStartDelegate(__Instance);
                return __ret;
            }
        }

        #region Virtual table interop

        // virtual ~CVirtualMachineCmdImplementer()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void InitializeCommands()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _InitializeCommandsDelegateInstance;

        private static void _InitializeCommandsDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.InitializeCommands();
        }

        // int32_t ExecuteCommand(int32_t nCommandId, int32_t nParameters)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_int _ExecuteCommandDelegateInstance;

        private static int _ExecuteCommandDelegateHook(__IntPtr __instance, int nCommandId, int nParameters)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            return __target.ExecuteCommand(nCommandId, nParameters);
        }

        // void RunScriptCallback(CExoString & sFileName)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr _RunScriptCallbackDelegateInstance;

        private static void _RunScriptCallbackDelegateHook(__IntPtr __instance, __IntPtr sFileName)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sFileName, false);
            __target.RunScriptCallback(__result0);
        }

        // void ReportError(CExoString & sFileName, int32_t nError)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int _ReportErrorDelegateInstance;

        private static void _ReportErrorDelegateHook(__IntPtr __instance, __IntPtr sFileName, int nError)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(sFileName, false);
            __target.ReportError(__result0, nError);
        }

        // void * CreateGameDefinedStructure(int32_t nUserDefinedType)
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr_int _CreateGameDefinedStructureDelegateInstance;

        private static __IntPtr _CreateGameDefinedStructureDelegateHook(__IntPtr __instance, int nUserDefinedType)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __ret = __target.CreateGameDefinedStructure(nUserDefinedType);
            return __ret;
        }

        // void DestroyGameDefinedStructure(int32_t nUserDefinedType, void * pStructureToDelete)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int___IntPtr _DestroyGameDefinedStructureDelegateInstance;

        private static void _DestroyGameDefinedStructureDelegateHook(__IntPtr __instance, int nUserDefinedType, __IntPtr pStructureToDelete)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.DestroyGameDefinedStructure(nUserDefinedType, pStructureToDelete);
        }

        // BOOL GetEqualGameDefinedStructure(int32_t nUserDefinedType, void * pStructure1, void * pStructure2)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int___IntPtr___IntPtr _GetEqualGameDefinedStructureDelegateInstance;

        private static int _GetEqualGameDefinedStructureDelegateHook(__IntPtr __instance, int nUserDefinedType, __IntPtr pStructure1, __IntPtr pStructure2)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            return __target.GetEqualGameDefinedStructure(nUserDefinedType, pStructure1, pStructure2);
        }

        // void * CopyGameDefinedStructure(int32_t nUserDefinedType, void * pStructureSrc)
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr_int___IntPtr _CopyGameDefinedStructureDelegateInstance;

        private static __IntPtr _CopyGameDefinedStructureDelegateHook(__IntPtr __instance, int nUserDefinedType, __IntPtr pStructureSrc)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __ret = __target.CopyGameDefinedStructure(nUserDefinedType, pStructureSrc);
            return __ret;
        }

        // BOOL SaveGameDefinedStructure(int32_t nEngineStructure, void * pStructure, CResGFF * pRes, CResStruct * pStruct)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int___IntPtr___IntPtr___IntPtr _SaveGameDefinedStructureDelegateInstance;

        private static int _SaveGameDefinedStructureDelegateHook(__IntPtr __instance, int nEngineStructure, __IntPtr pStructure, __IntPtr pRes, __IntPtr pStruct)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __result2 = global::NWN.LowLevel.CResGFF.__GetOrCreateInstance(pRes, false);
            var __result3 = global::NWN.LowLevel.CResStruct.__GetOrCreateInstance(pStruct, false);
            return __target.SaveGameDefinedStructure(nEngineStructure, pStructure, __result2, __result3);
        }

        // BOOL LoadGameDefinedStructure(int32_t nEngineStructure, void * * pStructure, CResGFF * pRes, CResStruct * pStruct)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_int_voidPtrPtr___IntPtr___IntPtr _LoadGameDefinedStructureDelegateInstance;

        private static int _LoadGameDefinedStructureDelegateHook(__IntPtr __instance, int nEngineStructure, void** pStructure, __IntPtr pRes, __IntPtr pStruct)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __result2 = global::NWN.LowLevel.CResGFF.__GetOrCreateInstance(pRes, false);
            var __result3 = global::NWN.LowLevel.CResStruct.__GetOrCreateInstance(pStruct, false);
            return __target.LoadGameDefinedStructure(nEngineStructure, pStructure, __result2, __result3);
        }

        // CExoString GetGameDefinedStructureName(int32_t nEngineStructure)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int _GetGameDefinedStructureNameDelegateInstance;

        private static void _GetGameDefinedStructureNameDelegateHook(__IntPtr @return, __IntPtr __instance, int nEngineStructure)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __ret = __target.GetGameDefinedStructureName(nEngineStructure);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CExoString.__Internal*) @return = *(global::NWN.LowLevel.CExoString.__Internal*) __ret.__Instance;
        }

        // CExoString GetDebuggerLabelName(int32_t nDebuggerLabel)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr___IntPtr_int _GetDebuggerLabelNameDelegateInstance;

        private static void _GetDebuggerLabelNameDelegateHook(__IntPtr @return, __IntPtr __instance, int nDebuggerLabel)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            var __ret = __target.GetDebuggerLabelName(nDebuggerLabel);
            if (ReferenceEquals(__ret, null))
                throw new global::System.ArgumentNullException("__ret", "Cannot be null because it is passed by value.");
            *(global::NWN.LowLevel.CExoString.__Internal*) @return = *(global::NWN.LowLevel.CExoString.__Internal*) __ret.__Instance;
        }

        // void GetEngineStructureWatchView(int32_t nEngineStructure, void * pEngineStructure, int32_t * nEntries, CExoString * * m_ppNames, CExoString * * m_ppValues)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_int___IntPtr_intPtr___IntPtr___IntPtr _GetEngineStructureWatchViewDelegateInstance;

        private static void _GetEngineStructureWatchViewDelegateHook(__IntPtr __instance, int nEngineStructure, __IntPtr pEngineStructure, int* nEntries, __IntPtr m_ppNames, __IntPtr m_ppValues)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __IntPtr __m_ppNames = m_ppNames == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) m_ppNames);
            var __result3 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__m_ppNames, false);
            __IntPtr __m_ppValues = m_ppValues == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) m_ppValues);
            var __result4 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__m_ppValues, false);
            __target.GetEngineStructureWatchView(nEngineStructure, pEngineStructure, ref *nEntries, __result3, __result4);
        }

        // void GetObjectWatchView(OBJECT_ID oidObject, int32_t * nEntries, CExoString * * m_ppNames, CExoString * * m_ppValues)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_intPtr___IntPtr___IntPtr _GetObjectWatchViewDelegateInstance;

        private static void _GetObjectWatchViewDelegateHook(__IntPtr __instance, uint oidObject, int* nEntries, __IntPtr m_ppNames, __IntPtr m_ppValues)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __IntPtr __m_ppNames = m_ppNames == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) m_ppNames);
            var __result2 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__m_ppNames, false);
            __IntPtr __m_ppValues = m_ppValues == __IntPtr.Zero ? __IntPtr.Zero : new __IntPtr(*(void**) m_ppValues);
            var __result3 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(__m_ppValues, false);
            __target.GetObjectWatchView(oidObject, ref *nEntries, __result2, __result3);
        }

        // int32_t DebugGUIStart()
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr _DebugGUIStartDelegateInstance;

        private static int _DebugGUIStartDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            return __target.DebugGUIStart;
        }

        // void DebugGUIStop()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _DebugGUIStopDelegateInstance;

        private static void _DebugGUIStopDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.DebugGUIStop();
        }

        // void DebugGUISendMessageTo(char * pMsg, int32_t nSize)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_sbytePtr_int _DebugGUISendMessageToDelegateInstance;

        private static void _DebugGUISendMessageToDelegateHook(__IntPtr __instance, sbyte* pMsg, int nSize)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.DebugGUISendMessageTo(pMsg, nSize);
        }

        // int32_t DebugGUIGetMessageFrom(char * * pMsg, int32_t * nSize)
        private static global::NWN.LowLevel.Delegates.Func_int___IntPtr_sbytePtrPtr_intPtr _DebugGUIGetMessageFromDelegateInstance;

        private static int _DebugGUIGetMessageFromDelegateHook(__IntPtr __instance, sbyte** pMsg, int* nSize)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            return __target.DebugGUIGetMessageFrom(pMsg, ref *nSize);
        }

        // void DebugGUIUpdate()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _DebugGUIUpdateDelegateInstance;

        private static void _DebugGUIUpdateDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CVirtualMachineCmdImplementer.__GetInstance(__instance);
            __target.DebugGUIUpdate();
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[20];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _InitializeCommandsDelegateInstance += _InitializeCommandsDelegateHook;
                _ExecuteCommandDelegateInstance += _ExecuteCommandDelegateHook;
                _RunScriptCallbackDelegateInstance += _RunScriptCallbackDelegateHook;
                _ReportErrorDelegateInstance += _ReportErrorDelegateHook;
                _CreateGameDefinedStructureDelegateInstance += _CreateGameDefinedStructureDelegateHook;
                _DestroyGameDefinedStructureDelegateInstance += _DestroyGameDefinedStructureDelegateHook;
                _GetEqualGameDefinedStructureDelegateInstance += _GetEqualGameDefinedStructureDelegateHook;
                _CopyGameDefinedStructureDelegateInstance += _CopyGameDefinedStructureDelegateHook;
                _SaveGameDefinedStructureDelegateInstance += _SaveGameDefinedStructureDelegateHook;
                _LoadGameDefinedStructureDelegateInstance += _LoadGameDefinedStructureDelegateHook;
                _GetGameDefinedStructureNameDelegateInstance += _GetGameDefinedStructureNameDelegateHook;
                _GetDebuggerLabelNameDelegateInstance += _GetDebuggerLabelNameDelegateHook;
                _GetEngineStructureWatchViewDelegateInstance += _GetEngineStructureWatchViewDelegateHook;
                _GetObjectWatchViewDelegateInstance += _GetObjectWatchViewDelegateHook;
                _DebugGUIStartDelegateInstance += _DebugGUIStartDelegateHook;
                _DebugGUIStopDelegateInstance += _DebugGUIStopDelegateHook;
                _DebugGUISendMessageToDelegateInstance += _DebugGUISendMessageToDelegateHook;
                _DebugGUIGetMessageFromDelegateInstance += _DebugGUIGetMessageFromDelegateHook;
                _DebugGUIUpdateDelegateInstance += _DebugGUIUpdateDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_InitializeCommandsDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ExecuteCommandDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_RunScriptCallbackDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_ReportErrorDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_CreateGameDefinedStructureDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_DestroyGameDefinedStructureDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_GetEqualGameDefinedStructureDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_CopyGameDefinedStructureDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_SaveGameDefinedStructureDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_LoadGameDefinedStructureDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_GetGameDefinedStructureNameDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_GetDebuggerLabelNameDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_GetEngineStructureWatchViewDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_GetObjectWatchViewDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_DebugGUIStartDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_DebugGUIStopDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_DebugGUISendMessageToDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_DebugGUIGetMessageFromDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_DebugGUIUpdateDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 23);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 23);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            ManagedVTables[0][9] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            ManagedVTables[0][11] = Thunks[10];
                            ManagedVTables[0][12] = Thunks[11];
                            ManagedVTables[0][13] = Thunks[12];
                            ManagedVTables[0][14] = Thunks[13];
                            ManagedVTables[0][15] = Thunks[14];
                            ManagedVTables[0][16] = Thunks[15];
                            ManagedVTables[0][17] = Thunks[16];
                            ManagedVTables[0][18] = Thunks[17];
                            ManagedVTables[0][19] = Thunks[18];
                            ManagedVTables[0][20] = Thunks[19];
                            VTables.Methods[0] = new Delegate[23];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
