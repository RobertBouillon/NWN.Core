// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CGameEffect : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 264)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal ulong m_nID;

            [FieldOffset(8)]
            internal ushort m_nType;

            [FieldOffset(10)]
            internal ushort m_nSubType;

            [FieldOffset(12)]
            internal float m_fDuration;

            [FieldOffset(16)]
            internal uint m_nExpiryCalendarDay;

            [FieldOffset(20)]
            internal uint m_nExpiryTimeOfDay;

            [FieldOffset(24)]
            internal uint m_oidCreator;

            [FieldOffset(28)]
            internal uint m_nSpellId;

            [FieldOffset(32)]
            internal int m_bExpose;

            [FieldOffset(36)]
            internal int m_bShowIcon;

            [FieldOffset(40)]
            internal int m_nCasterLevel;

            [FieldOffset(48)]
            internal __IntPtr m_pLinkLeft;

            [FieldOffset(56)]
            internal __IntPtr m_pLinkRight;

            [FieldOffset(64)]
            internal int m_nNumIntegers;

            [FieldOffset(72)]
            internal __IntPtr m_nParamInteger;

            [FieldOffset(80)]
            internal fixed float m_nParamFloat[4];

            [FieldOffset(96)]
            internal fixed byte m_sParamString[96];

            [FieldOffset(192)]
            internal fixed uint m_oidParamObjectID[4];

            [FieldOffset(208)]
            internal fixed byte m_vParamVector[24];

            [FieldOffset(232)]
            internal int m_bSkipOnLoad;

            [FieldOffset(240)]
            internal ulong m_nItemPropertySourceId;

            [FieldOffset(248)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sCustomTag;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffectC2Ei", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, int bCreateNewID);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffectC2EPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, __IntPtr pParent, int bCopyIconVisibility);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffectD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect10SetCreatorEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCreator(__IntPtr __instance, uint oidCreator);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect10GetIntegerEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetInteger(__IntPtr __instance, int nStorageLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect10SetIntegerEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetInteger(__IntPtr __instance, int nStorageLocation, int nValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect14SetNumIntegersEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNumIntegers(__IntPtr __instance, int nNumIntegers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect37SetNumIntegersInitializeToNegativeOneEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNumIntegersInitializeToNegativeOne(__IntPtr __instance, int nNumIntegers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect8GetFloatEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern float GetFloat(__IntPtr __instance, int nStorageLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect8SetFloatEif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetFloat(__IntPtr __instance, int nStorageLocation, float fValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect11GetObjectIDEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetObjectID(__IntPtr __instance, int nStorageLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect11SetObjectIDEij", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetObjectID(__IntPtr __instance, int nStorageLocation, uint oidValue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect9GetStringEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetString(__IntPtr @return, __IntPtr __instance, int nStorageLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect9SetStringEi10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetString(__IntPtr __instance, int nStorageLocation, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect9GetVectorEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern global::NWN.LowLevel.Vector.__Internal GetVector(__IntPtr __instance, int nStorageLocation);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect9SetVectorEi6Vector", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetVector(__IntPtr __instance, int nStorageLocation, global::NWN.LowLevel.Vector.__Internal vVector);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect10CopyEffectEPS_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CopyEffect(__IntPtr __instance, __IntPtr pEffect, int bIgnoreArrayLists);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect13SetExpiryTimeEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetExpiryTime(__IntPtr __instance, uint nCalendarDayExpiry, uint nTimeOfDayExpiry);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect13GetExpiryTimeEPjS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetExpiryTime(__IntPtr __instance, uint* nCurrentCalendarDay, uint* nCurrentTimeOfDay);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect9SetLinkedEPS_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetLinked(__IntPtr __instance, __IntPtr pLeft, __IntPtr pRight);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect12UpdateLinkedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void UpdateLinked(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect14SaveGameEffectEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SaveGameEffect(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect14LoadGameEffectEP7CResGFFP10CResStruct", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void LoadGameEffect(__IntPtr __instance, __IntPtr pRes, __IntPtr pStruct);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect19GetScriptEffectTypeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetScriptEffectType(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK11CGameEffect12GetCustomTagEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetCustomTag(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect12SetCustomTagERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCustomTag(__IntPtr __instance, __IntPtr sTag);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameEffect10CopyLinkedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr CopyLinked(__IntPtr __instance);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameEffect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CGameEffect>();

        protected bool __ownsNativeInstance;

        internal static CGameEffect __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CGameEffect(native.ToPointer(), skipVTables);
        }

        internal static CGameEffect __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CGameEffect)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CGameEffect __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CGameEffect(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CGameEffect(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGameEffect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CGameEffect(int bCreateNewID)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameEffect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, bCreateNewID);
        }

        public CGameEffect(global::NWN.LowLevel.CGameEffect pParent, int bCopyIconVisibility)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameEffect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            var __arg0 = pParent is null ? __IntPtr.Zero : pParent.__Instance;
            __Internal.ctor(__Instance, __arg0, bCopyIconVisibility);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CGameEffect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void SetCreator(uint oidCreator)
        {
            __Internal.SetCreator(__Instance, oidCreator);
        }

        public int GetInteger(int nStorageLocation)
        {
            var __ret = __Internal.GetInteger(__Instance, nStorageLocation);
            return __ret;
        }

        public void SetInteger(int nStorageLocation, int nValue)
        {
            __Internal.SetInteger(__Instance, nStorageLocation, nValue);
        }

        public void SetNumIntegers(int nNumIntegers)
        {
            __Internal.SetNumIntegers(__Instance, nNumIntegers);
        }

        public void SetNumIntegersInitializeToNegativeOne(int nNumIntegers)
        {
            __Internal.SetNumIntegersInitializeToNegativeOne(__Instance, nNumIntegers);
        }

        public float GetFloat(int nStorageLocation)
        {
            var __ret = __Internal.GetFloat(__Instance, nStorageLocation);
            return __ret;
        }

        public void SetFloat(int nStorageLocation, float fValue)
        {
            __Internal.SetFloat(__Instance, nStorageLocation, fValue);
        }

        public uint GetObjectID(int nStorageLocation)
        {
            var __ret = __Internal.GetObjectID(__Instance, nStorageLocation);
            return __ret;
        }

        public void SetObjectID(int nStorageLocation, uint oidValue)
        {
            __Internal.SetObjectID(__Instance, nStorageLocation, oidValue);
        }

        public global::NWN.LowLevel.CExoString GetString(int nStorageLocation)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetString(new IntPtr(&__ret), __Instance, nStorageLocation);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void SetString(int nStorageLocation, global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg1 = sString.__Instance;
            __Internal.SetString(__Instance, nStorageLocation, __arg1);
        }

        public global::NWN.LowLevel.Vector GetVector(int nStorageLocation)
        {
            var __ret = __Internal.GetVector(__Instance, nStorageLocation);
            return global::NWN.LowLevel.Vector.__CreateInstance(__ret);
        }

        public void SetVector(int nStorageLocation, global::NWN.LowLevel.Vector vVector)
        {
            if (ReferenceEquals(vVector, null))
                throw new global::System.ArgumentNullException("vVector", "Cannot be null because it is passed by value.");
            var __arg1 = vVector.__Instance;
            __Internal.SetVector(__Instance, nStorageLocation, *(global::NWN.LowLevel.Vector.__Internal*) __arg1);
        }

        public void CopyEffect(global::NWN.LowLevel.CGameEffect pEffect, int bIgnoreArrayLists)
        {
            var __arg0 = pEffect is null ? __IntPtr.Zero : pEffect.__Instance;
            __Internal.CopyEffect(__Instance, __arg0, bIgnoreArrayLists);
        }

        public void SetExpiryTime(uint nCalendarDayExpiry, uint nTimeOfDayExpiry)
        {
            __Internal.SetExpiryTime(__Instance, nCalendarDayExpiry, nTimeOfDayExpiry);
        }

        public void GetExpiryTime(ref uint nCurrentCalendarDay, ref uint nCurrentTimeOfDay)
        {
            fixed (uint* __nCurrentCalendarDay0 = &nCurrentCalendarDay)
            {
                var __arg0 = __nCurrentCalendarDay0;
                fixed (uint* __nCurrentTimeOfDay1 = &nCurrentTimeOfDay)
                {
                    var __arg1 = __nCurrentTimeOfDay1;
                    __Internal.GetExpiryTime(__Instance, __arg0, __arg1);
                }
            }
        }

        public void SetLinked(global::NWN.LowLevel.CGameEffect pLeft, global::NWN.LowLevel.CGameEffect pRight)
        {
            var __arg0 = pLeft is null ? __IntPtr.Zero : pLeft.__Instance;
            var __arg1 = pRight is null ? __IntPtr.Zero : pRight.__Instance;
            __Internal.SetLinked(__Instance, __arg0, __arg1);
        }

        public void UpdateLinked()
        {
            __Internal.UpdateLinked(__Instance);
        }

        public void SaveGameEffect(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.SaveGameEffect(__Instance, __arg0, __arg1);
        }

        public void LoadGameEffect(global::NWN.LowLevel.CResGFF pRes, global::NWN.LowLevel.CResStruct pStruct)
        {
            var __arg0 = pRes is null ? __IntPtr.Zero : pRes.__Instance;
            var __arg1 = pStruct is null ? __IntPtr.Zero : pStruct.__Instance;
            __Internal.LoadGameEffect(__Instance, __arg0, __arg1);
        }

        public static implicit operator global::NWN.LowLevel.CGameEffect(int bCreateNewID)
        {
            return new global::NWN.LowLevel.CGameEffect(bCreateNewID);
        }

        public ulong MNID
        {
            get
            {
                return ((__Internal*)__Instance)->m_nID;
            }

            set
            {
                ((__Internal*)__Instance)->m_nID = value;
            }
        }

        public ushort MNType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nType = value;
            }
        }

        public ushort MNSubType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSubType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSubType = value;
            }
        }

        public float MFDuration
        {
            get
            {
                return ((__Internal*)__Instance)->m_fDuration;
            }

            set
            {
                ((__Internal*)__Instance)->m_fDuration = value;
            }
        }

        public uint MNExpiryCalendarDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nExpiryCalendarDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nExpiryCalendarDay = value;
            }
        }

        public uint MNExpiryTimeOfDay
        {
            get
            {
                return ((__Internal*)__Instance)->m_nExpiryTimeOfDay;
            }

            set
            {
                ((__Internal*)__Instance)->m_nExpiryTimeOfDay = value;
            }
        }

        public uint MOidCreator
        {
            get
            {
                return ((__Internal*)__Instance)->m_oidCreator;
            }

            set
            {
                ((__Internal*)__Instance)->m_oidCreator = value;
            }
        }

        public uint MNSpellId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nSpellId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nSpellId = value;
            }
        }

        public int MBExpose
        {
            get
            {
                return ((__Internal*)__Instance)->m_bExpose;
            }

            set
            {
                ((__Internal*)__Instance)->m_bExpose = value;
            }
        }

        public int MBShowIcon
        {
            get
            {
                return ((__Internal*)__Instance)->m_bShowIcon;
            }

            set
            {
                ((__Internal*)__Instance)->m_bShowIcon = value;
            }
        }

        public int MNCasterLevel
        {
            get
            {
                return ((__Internal*)__Instance)->m_nCasterLevel;
            }

            set
            {
                ((__Internal*)__Instance)->m_nCasterLevel = value;
            }
        }

        public global::NWN.LowLevel.CGameEffect MPLinkLeft
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLinkLeft, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLinkLeft = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CGameEffect MPLinkRight
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(((__Internal*)__Instance)->m_pLinkRight, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pLinkRight = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public int MNNumIntegers
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumIntegers;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumIntegers = value;
            }
        }

        public int* MNParamInteger
        {
            get
            {
                return (int*) ((__Internal*)__Instance)->m_nParamInteger;
            }

            set
            {
                ((__Internal*)__Instance)->m_nParamInteger = (__IntPtr) value;
            }
        }

        public float[] MNParamFloat
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<float>(((__Internal*)__Instance)->m_nParamFloat, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_nParamFloat[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.CExoString[] MSParamString
        {
            get
            {
                global::NWN.LowLevel.CExoString[] __value = null;
                if (((__Internal*)__Instance)->m_sParamString != null)
                {
                    __value = new global::NWN.LowLevel.CExoString[6];
                    for (int i = 0; i < 6; i++)
                        __value[i] = global::NWN.LowLevel.CExoString.__CreateInstance(*((global::NWN.LowLevel.CExoString.__Internal*)&(((__Internal*)__Instance)->m_sParamString[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 6)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 6; i++)
                        *(global::NWN.LowLevel.CExoString.__Internal*) &((__Internal*)__Instance)->m_sParamString[i * sizeof(global::NWN.LowLevel.CExoString.__Internal)] = *(global::NWN.LowLevel.CExoString.__Internal*)value[i].__Instance;
                }
            }
        }

        public uint[] MOidParamObjectID
        {
            get
            {
                return CppSharp.Runtime.MarshalUtil.GetArray<uint>(((__Internal*)__Instance)->m_oidParamObjectID, 4);
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 4; i++)
                        ((__Internal*)__Instance)->m_oidParamObjectID[i] = value[i];
                }
            }
        }

        public global::NWN.LowLevel.Vector[] MVParamVector
        {
            get
            {
                global::NWN.LowLevel.Vector[] __value = null;
                if (((__Internal*)__Instance)->m_vParamVector != null)
                {
                    __value = new global::NWN.LowLevel.Vector[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::NWN.LowLevel.Vector.__CreateInstance(*((global::NWN.LowLevel.Vector.__Internal*)&(((__Internal*)__Instance)->m_vParamVector[i * sizeof(global::NWN.LowLevel.Vector.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        *(global::NWN.LowLevel.Vector.__Internal*) &((__Internal*)__Instance)->m_vParamVector[i * sizeof(global::NWN.LowLevel.Vector.__Internal)] = *(global::NWN.LowLevel.Vector.__Internal*)value[i].__Instance;
                }
            }
        }

        public int MBSkipOnLoad
        {
            get
            {
                return ((__Internal*)__Instance)->m_bSkipOnLoad;
            }

            set
            {
                ((__Internal*)__Instance)->m_bSkipOnLoad = value;
            }
        }

        public ulong MNItemPropertySourceId
        {
            get
            {
                return ((__Internal*)__Instance)->m_nItemPropertySourceId;
            }

            set
            {
                ((__Internal*)__Instance)->m_nItemPropertySourceId = value;
            }
        }

        public global::NWN.LowLevel.CExoString MSCustomTag
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sCustomTag));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sCustomTag = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public int ScriptEffectType
        {
            get
            {
                var __ret = __Internal.GetScriptEffectType(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString CustomTag
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetCustomTag(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetCustomTag(__Instance, __arg0);
            }
        }

        public global::NWN.LowLevel.CGameEffect CopyLinked
        {
            get
            {
                var __ret = __Internal.CopyLinked(__Instance);
                var __result0 = global::NWN.LowLevel.CGameEffect.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
