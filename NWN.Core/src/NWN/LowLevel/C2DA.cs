// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class C2DA : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 112)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CResHelper;

            [FieldOffset(8)]
            internal int m_bAutoRequest;

            [FieldOffset(16)]
            internal __IntPtr m_pRes;

            [FieldOffset(24)]
            internal global::NWN.LowLevel.CResRef.__Internal m_cResRef;

            [FieldOffset(56)]
            internal global::NWN.LowLevel.CExoString.__Internal m_sDefaultValue;

            [FieldOffset(72)]
            internal __IntPtr m_pRowLabel;

            [FieldOffset(80)]
            internal __IntPtr m_pColumnLabel;

            [FieldOffset(88)]
            internal __IntPtr m_pArrayData;

            [FieldOffset(96)]
            internal int m_nNumRows;

            [FieldOffset(100)]
            internal int m_nNumColumns;

            [FieldOffset(104)]
            internal int m_bLoaded;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DAC2E7CResRefi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, global::NWN.LowLevel.CResRef.__Internal cResRef, int bSetAutoRequest);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DAC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DAC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18GetCExoStringEntryEiiP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCExoStringEntry(__IntPtr __instance, int nRow, int nColumn, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18GetCExoStringEntryERK10CExoStringS2_PS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCExoStringEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18GetCExoStringEntryEiRK10CExoStringPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCExoStringEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18GetCExoStringEntryERK10CExoStringiPS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetCExoStringEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, __IntPtr pString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18SetCExoStringEntryEii10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetCExoStringEntry(__IntPtr __instance, int nRow, int nColumn, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18SetCExoStringEntryE10CExoStringS0_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetCExoStringEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18SetCExoStringEntryEi10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetCExoStringEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA18SetCExoStringEntryE10CExoStringiS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetCExoStringEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, __IntPtr sString);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13GetFLOATEntryEiiPf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFLOATEntry(__IntPtr __instance, int nRow, int nColumn, float* pFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13GetFLOATEntryERK10CExoStringS2_Pf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFLOATEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, float* pFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13GetFLOATEntryEiRK10CExoStringPf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFLOATEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, float* pFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13GetFLOATEntryERK10CExoStringiPf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetFLOATEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, float* pFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetFLOATEntryEiif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetFLOATEntry(__IntPtr __instance, int nRow, int nColumn, float fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetFLOATEntryE10CExoStringS0_f", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetFLOATEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, float fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetFLOATEntryEi10CExoStringf", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetFLOATEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, float fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetFLOATEntryE10CExoStringif", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetFLOATEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, float fFloat);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11GetINTEntryEiiPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetINTEntry(__IntPtr __instance, int nRow, int nColumn, int* pInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11GetINTEntryERK10CExoStringS2_Pi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetINTEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, int* pInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11GetINTEntryEiRK10CExoStringPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetINTEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, int* pInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11GetINTEntryERK10CExoStringiPi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetINTEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, int* pInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11SetINTEntryEiii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetINTEntry(__IntPtr __instance, int nRow, int nColumn, int nInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11SetINTEntryE10CExoStringS0_i", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetINTEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel, int nInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11SetINTEntryEi10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetINTEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel, int nInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11SetINTEntryE10CExoStringii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetINTEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn, int nInt);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetBlankEntryEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetBlankEntry(__IntPtr __instance, int nRow, int nColumn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetBlankEntryE10CExoStringS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetBlankEntry(__IntPtr __instance, __IntPtr sRowLabel, __IntPtr sColumnLabel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetBlankEntryEi10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetBlankEntry(__IntPtr __instance, int nRow, __IntPtr sColumnLabel);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13SetBlankEntryE10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetBlankEntry(__IntPtr __instance, __IntPtr sRowLabel, int nColumn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11Load2DArrayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Load2DArray(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA13Unload2DArrayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void Unload2DArray(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA14GetColumnIndexERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetColumnIndex(__IntPtr __instance, __IntPtr sColumn);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA17GetNextLineLengthEPcj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetNextLineLength(__IntPtr __instance, sbyte* pBuffer, uint nBufferSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA12GetNextTokenEPPcPjS0_jS2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNextToken(__IntPtr __instance, sbyte** pBuffer, uint* pBufferSize, sbyte* pToken, uint nMaxTokenSize, uint* pLeadingWhiteSpaceSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA11GetRowIndexERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetRowIndex(__IntPtr __instance, __IntPtr sRow);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN4C2DA12SkipNewLinesEPPcPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SkipNewLines(__IntPtr __instance, sbyte** pBuffer, uint* pBufferSize);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.C2DA> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.C2DA>();

        protected bool __ownsNativeInstance;

        internal static C2DA __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new C2DA(native.ToPointer(), skipVTables);
        }

        internal static C2DA __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (C2DA)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static C2DA __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (C2DA)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static C2DA __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new C2DA(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.C2DA.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private C2DA(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected C2DA(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
            if (!skipVTables)
                SetupVTables(true);
        }

        public C2DA(global::NWN.LowLevel.CResRef cResRef, int bSetAutoRequest)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.C2DA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(cResRef, null))
                throw new global::System.ArgumentNullException("cResRef", "Cannot be null because it is passed by value.");
            var __arg0 = cResRef.__Instance;
            __Internal.ctor(__Instance, *(global::NWN.LowLevel.CResRef.__Internal*) __arg0, bSetAutoRequest);
            SetupVTables(GetType().FullName == "NWN.LowLevel.C2DA");
        }

        public C2DA()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.C2DA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
            SetupVTables(GetType().FullName == "NWN.LowLevel.C2DA");
        }

        public C2DA(global::NWN.LowLevel.C2DA _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.C2DA.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__Instance;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.C2DA");
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.C2DA __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.C2DA.__Internal*) __Instance)->vptr_CResHelper = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int GetCExoStringEntry(int nRow, int nColumn, global::NWN.LowLevel.CExoString pString)
        {
            var __arg2 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetCExoStringEntry(__Instance, nRow, nColumn, __arg2);
            return __ret;
        }

        public int GetCExoStringEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, global::NWN.LowLevel.CExoString pString)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            var __arg2 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetCExoStringEntry(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int GetCExoStringEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, global::NWN.LowLevel.CExoString pString)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            var __arg2 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetCExoStringEntry(__Instance, nRow, __arg1, __arg2);
            return __ret;
        }

        public int GetCExoStringEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, global::NWN.LowLevel.CExoString pString)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            var __arg2 = pString is null ? __IntPtr.Zero : pString.__Instance;
            var __ret = __Internal.GetCExoStringEntry(__Instance, __arg0, nColumn, __arg2);
            return __ret;
        }

        public int SetCExoStringEntry(int nRow, int nColumn, global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg2 = sString.__Instance;
            var __ret = __Internal.SetCExoStringEntry(__Instance, nRow, nColumn, __arg2);
            return __ret;
        }

        public int SetCExoStringEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg2 = sString.__Instance;
            var __ret = __Internal.SetCExoStringEntry(__Instance, __arg0, __arg1, __arg2);
            return __ret;
        }

        public int SetCExoStringEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg2 = sString.__Instance;
            var __ret = __Internal.SetCExoStringEntry(__Instance, nRow, __arg1, __arg2);
            return __ret;
        }

        public int SetCExoStringEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, global::NWN.LowLevel.CExoString sString)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sString, null))
                throw new global::System.ArgumentNullException("sString", "Cannot be null because it is passed by value.");
            var __arg2 = sString.__Instance;
            var __ret = __Internal.SetCExoStringEntry(__Instance, __arg0, nColumn, __arg2);
            return __ret;
        }

        public int GetFLOATEntry(int nRow, int nColumn, ref float pFloat)
        {
            fixed (float* __pFloat2 = &pFloat)
            {
                var __arg2 = __pFloat2;
                var __ret = __Internal.GetFLOATEntry(__Instance, nRow, nColumn, __arg2);
                return __ret;
            }
        }

        public int GetFLOATEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, ref float pFloat)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            fixed (float* __pFloat2 = &pFloat)
            {
                var __arg2 = __pFloat2;
                var __ret = __Internal.GetFLOATEntry(__Instance, __arg0, __arg1, __arg2);
                return __ret;
            }
        }

        public int GetFLOATEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, ref float pFloat)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            fixed (float* __pFloat2 = &pFloat)
            {
                var __arg2 = __pFloat2;
                var __ret = __Internal.GetFLOATEntry(__Instance, nRow, __arg1, __arg2);
                return __ret;
            }
        }

        public int GetFLOATEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, ref float pFloat)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            fixed (float* __pFloat2 = &pFloat)
            {
                var __arg2 = __pFloat2;
                var __ret = __Internal.GetFLOATEntry(__Instance, __arg0, nColumn, __arg2);
                return __ret;
            }
        }

        public int SetFLOATEntry(int nRow, int nColumn, float fFloat)
        {
            var __ret = __Internal.SetFLOATEntry(__Instance, nRow, nColumn, fFloat);
            return __ret;
        }

        public int SetFLOATEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, float fFloat)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetFLOATEntry(__Instance, __arg0, __arg1, fFloat);
            return __ret;
        }

        public int SetFLOATEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, float fFloat)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetFLOATEntry(__Instance, nRow, __arg1, fFloat);
            return __ret;
        }

        public int SetFLOATEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, float fFloat)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            var __ret = __Internal.SetFLOATEntry(__Instance, __arg0, nColumn, fFloat);
            return __ret;
        }

        public int GetINTEntry(int nRow, int nColumn, ref int pInt)
        {
            fixed (int* __pInt2 = &pInt)
            {
                var __arg2 = __pInt2;
                var __ret = __Internal.GetINTEntry(__Instance, nRow, nColumn, __arg2);
                return __ret;
            }
        }

        public int GetINTEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, ref int pInt)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            fixed (int* __pInt2 = &pInt)
            {
                var __arg2 = __pInt2;
                var __ret = __Internal.GetINTEntry(__Instance, __arg0, __arg1, __arg2);
                return __ret;
            }
        }

        public int GetINTEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, ref int pInt)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sColumnLabel.__Instance;
            fixed (int* __pInt2 = &pInt)
            {
                var __arg2 = __pInt2;
                var __ret = __Internal.GetINTEntry(__Instance, nRow, __arg1, __arg2);
                return __ret;
            }
        }

        public int GetINTEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, ref int pInt)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRowLabel.__Instance;
            fixed (int* __pInt2 = &pInt)
            {
                var __arg2 = __pInt2;
                var __ret = __Internal.GetINTEntry(__Instance, __arg0, nColumn, __arg2);
                return __ret;
            }
        }

        public int SetINTEntry(int nRow, int nColumn, int nInt)
        {
            var __ret = __Internal.SetINTEntry(__Instance, nRow, nColumn, nInt);
            return __ret;
        }

        public int SetINTEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel, int nInt)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetINTEntry(__Instance, __arg0, __arg1, nInt);
            return __ret;
        }

        public int SetINTEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel, int nInt)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetINTEntry(__Instance, nRow, __arg1, nInt);
            return __ret;
        }

        public int SetINTEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn, int nInt)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            var __ret = __Internal.SetINTEntry(__Instance, __arg0, nColumn, nInt);
            return __ret;
        }

        public int SetBlankEntry(int nRow, int nColumn)
        {
            var __ret = __Internal.SetBlankEntry(__Instance, nRow, nColumn);
            return __ret;
        }

        public int SetBlankEntry(global::NWN.LowLevel.CExoString sRowLabel, global::NWN.LowLevel.CExoString sColumnLabel)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetBlankEntry(__Instance, __arg0, __arg1);
            return __ret;
        }

        public int SetBlankEntry(int nRow, global::NWN.LowLevel.CExoString sColumnLabel)
        {
            if (ReferenceEquals(sColumnLabel, null))
                throw new global::System.ArgumentNullException("sColumnLabel", "Cannot be null because it is passed by value.");
            var __arg1 = sColumnLabel.__Instance;
            var __ret = __Internal.SetBlankEntry(__Instance, nRow, __arg1);
            return __ret;
        }

        public int SetBlankEntry(global::NWN.LowLevel.CExoString sRowLabel, int nColumn)
        {
            if (ReferenceEquals(sRowLabel, null))
                throw new global::System.ArgumentNullException("sRowLabel", "Cannot be null because it is passed by value.");
            var __arg0 = sRowLabel.__Instance;
            var __ret = __Internal.SetBlankEntry(__Instance, __arg0, nColumn);
            return __ret;
        }

        public int Load2DArray()
        {
            var __ret = __Internal.Load2DArray(__Instance);
            return __ret;
        }

        public void Unload2DArray()
        {
            __Internal.Unload2DArray(__Instance);
        }

        public int GetColumnIndex(global::NWN.LowLevel.CExoString sColumn)
        {
            if (ReferenceEquals(sColumn, null))
                throw new global::System.ArgumentNullException("sColumn", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sColumn.__Instance;
            var __ret = __Internal.GetColumnIndex(__Instance, __arg0);
            return __ret;
        }

        public uint GetNextLineLength(sbyte* pBuffer, uint nBufferSize)
        {
            var __ret = __Internal.GetNextLineLength(__Instance, pBuffer, nBufferSize);
            return __ret;
        }

        public int GetNextToken(sbyte** pBuffer, ref uint pBufferSize, sbyte* pToken, uint nMaxTokenSize, ref uint pLeadingWhiteSpaceSize)
        {
            fixed (uint* __pBufferSize1 = &pBufferSize)
            {
                var __arg1 = __pBufferSize1;
                fixed (uint* __pLeadingWhiteSpaceSize4 = &pLeadingWhiteSpaceSize)
                {
                    var __arg4 = __pLeadingWhiteSpaceSize4;
                    var __ret = __Internal.GetNextToken(__Instance, pBuffer, __arg1, pToken, nMaxTokenSize, __arg4);
                    return __ret;
                }
            }
        }

        public int GetRowIndex(global::NWN.LowLevel.CExoString sRow)
        {
            if (ReferenceEquals(sRow, null))
                throw new global::System.ArgumentNullException("sRow", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sRow.__Instance;
            var __ret = __Internal.GetRowIndex(__Instance, __arg0);
            return __ret;
        }

        public int SkipNewLines(sbyte** pBuffer, ref uint pBufferSize)
        {
            fixed (uint* __pBufferSize1 = &pBufferSize)
            {
                var __arg1 = __pBufferSize1;
                var __ret = __Internal.SkipNewLines(__Instance, pBuffer, __arg1);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString MSDefaultValue
        {
            get
            {
                return global::NWN.LowLevel.CExoString.__CreateInstance(new __IntPtr(&((__Internal*)__Instance)->m_sDefaultValue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((__Internal*)__Instance)->m_sDefaultValue = *(global::NWN.LowLevel.CExoString.__Internal*) value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPRowLabel
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pRowLabel, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pRowLabel = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPColumnLabel
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pColumnLabel, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pColumnLabel = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CExoString MPArrayData
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CExoString.__GetOrCreateInstance(((__Internal*)__Instance)->m_pArrayData, false);
                return __result0;
            }

            set
            {
                var __value = value is null ? __IntPtr.Zero : value.__Instance;
                ((__Internal*)__Instance)->m_pArrayData = new __IntPtr(&__value);
            }
        }

        public int MNNumRows
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumRows;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumRows = value;
            }
        }

        public int MNNumColumns
        {
            get
            {
                return ((__Internal*)__Instance)->m_nNumColumns;
            }

            set
            {
                ((__Internal*)__Instance)->m_nNumColumns = value;
            }
        }

        public int MBLoaded
        {
            get
            {
                return ((__Internal*)__Instance)->m_bLoaded;
            }

            set
            {
                ((__Internal*)__Instance)->m_bLoaded = value;
            }
        }

        #region Virtual table interop

        // ~C2DA()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.C2DA.__GetInstance(__instance);
            __target.Dispose(true);
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[1];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 4);
                            ManagedVTables[0][1] = Thunks[0];
                            VTables.Methods[0] = new Delegate[4];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
