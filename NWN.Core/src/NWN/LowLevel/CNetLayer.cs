// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNetLayerInternal
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerInternal> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayerInternal>();

        protected bool __ownsNativeInstance;

        internal static CNetLayerInternal __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNetLayerInternal(native.ToPointer(), skipVTables);
        }

        internal static CNetLayerInternal __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNetLayerInternal)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNetLayerInternal __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNetLayerInternal(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNetLayerInternal(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNetLayerInternal(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CExoNet
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoNet> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CExoNet>();

        protected bool __ownsNativeInstance;

        internal static CExoNet __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CExoNet(native.ToPointer(), skipVTables);
        }

        internal static CExoNet __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CExoNet)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CExoNet __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CExoNet(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CExoNet(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CExoNet(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNetLayer : IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 8)]
        public partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr m_pcNetLayerInternal;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayerC2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayerC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayerD2Ev", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void dtor(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer10InitializeEP11CBaseExoApp", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int Initialize(__IntPtr __instance, __IntPtr pcExoApp);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer13StartProtocolEjjjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartProtocol(__IntPtr __instance, uint nProtocol, uint nSendingAddress, uint nReceivingAddress, uint nInstance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer11EndProtocolEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndProtocol(__IntPtr __instance, uint nProtocol);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer17SetServerLanguageEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetServerLanguage(__IntPtr __instance, int nLanguage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer15StartServerModeE10CExoStringj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartServerMode(__IntPtr __instance, __IntPtr sSessionName, uint nMaxPlayers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer17SetPlayerPasswordE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetPlayerPassword(__IntPtr __instance, __IntPtr sPlayerPassword);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21SetGameMasterPasswordE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetGameMasterPassword(__IntPtr __instance, __IntPtr sGameMasterPassowrd);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22SetServerAdminPasswordE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SetServerAdminPassword(__IntPtr __instance, __IntPtr sServerAdminPassword);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer13EndServerModeEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndServerMode(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer13GetPlayerInfoEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetPlayerInfo(__IntPtr __instance, uint nPlayerId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer16GetPlayerAddressEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPlayerAddress(__IntPtr @return, __IntPtr __instance, uint nPlayerId, int bIncludePort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23GetPlayerAddressRelayedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerAddressRelayed(__IntPtr __instance, uint nPlayerId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer16DisconnectPlayerEjjiRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DisconnectPlayer(__IntPtr __instance, uint nPlayerId, uint nStrRef, int bCDAuthFail, __IntPtr reason);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23SetUpPlayBackConnectionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetUpPlayBackConnection(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23StartAddressTranslationERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StartAddressTranslation(__IntPtr __instance, __IntPtr sInternetAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer27GetAddressTranslationResultERK10CExoStringR13CExoArrayListIjE", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAddressTranslationResult(__IntPtr __instance, __IntPtr sInternetAddress, __IntPtr nIPv4);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21EndAddressTranslationERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void EndAddressTranslation(__IntPtr __instance, __IntPtr sInternetAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer29StartEnumerateSessionsSectionEjjP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartEnumerateSessionsSection(__IntPtr __instance, uint nEnumerateSection, uint nSize, __IntPtr sServerListToEnumerate);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21EnumerateSessionsLoopEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EnumerateSessionsLoop(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer27EndEnumerateSessionsSectionEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndEnumerateSessionsSection(__IntPtr __instance, uint nEnumerateSection);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20EndEnumerateSessionsEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndEnumerateSessions(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer24CleanUpEnumerateSpecificEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void CleanUpEnumerateSpecific(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22GetSessionSectionStartEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSessionSectionStart(__IntPtr __instance, uint sectionSectionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21StartConnectToSessionEjRK10CExoStringiS2_jjS2_S2_S2_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartConnectToSession(__IntPtr __instance, uint nSessionId, __IntPtr sPlayerName, int nPlayerLanguage, __IntPtr sPassword, uint nTimeOut, uint nConnectionType, __IntPtr sCDKey, __IntPtr sLegacyCDKey, __IntPtr expectCryptoPublicKeyBase64);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer25RequestExtendedServerInfoEjii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RequestExtendedServerInfo(__IntPtr __instance, uint nSessionId, int bGetInfo, int bGetPing);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20RequestServerDetailsEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int RequestServerDetails(__IntPtr __instance, uint nConnectionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer9StartPingEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int StartPing(__IntPtr __instance, uint nSessionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer7EndPingEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndPing(__IntPtr __instance, uint nSessionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22GetNumberLocalAdaptersEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetNumberLocalAdapters(__IntPtr __instance, uint nProtocol);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21GetLocalAdapterStringEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetLocalAdapterString(__IntPtr @return, __IntPtr __instance, uint nProtocol, uint nAdapterNumber);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21SetSessionInfoChangedEji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSessionInfoChanged(__IntPtr __instance, uint nSessionId, int bHasChanged);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21GetSessionInfoChangedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetSessionInfoChanged(__IntPtr __instance, uint nSessionSection);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23ClearSessionInfoChangedEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ClearSessionInfoChanged(__IntPtr __instance, uint nSessionSection);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetPortBySessionIdEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetPortBySessionId(__IntPtr __instance, uint nSessionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer14GetSessionInfoEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetSessionInfo(__IntPtr __instance, uint nSession);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19EndConnectToSessionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int EndConnectToSession(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetLocalPrivilegesEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetLocalPrivileges(__IntPtr __instance, uint nConnectType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21DisconnectFromSessionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DisconnectFromSession(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer14MessageArrivedEjjji", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int MessageArrived(__IntPtr __instance, uint nProtocol, uint nSocketId, uint nErrorCode, int bRemoveFromQueue);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21ProcessReceivedFramesEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ProcessReceivedFrames(__IntPtr __instance, int bProcessReceivedMessage);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19SendMessageToPlayerEjPhjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendMessageToPlayer(__IntPtr __instance, uint nPlayerId, byte* pData, uint nSize, uint nFlags);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20SendMessageToAddressEjPhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendMessageToAddress(__IntPtr __instance, uint nConnectionId, byte* pData, uint nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer16UpdateStatusLoopEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int UpdateStatusLoop(__IntPtr __instance, uint nApplicationType);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20GetPlayerAddressDataEjPjPPhS2_S0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPlayerAddressData(__IntPtr __instance, uint nConnectionId, uint* nProtocol, byte** pNetAddress1, byte** pNetAddress2, uint* nPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer12StoreMessageEPhj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void StoreMessage(__IntPtr __instance, byte* pData, uint nMsgLength);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23SetGameMasterPermissionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetGameMasterPermission(__IntPtr __instance, int state);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer26TranslateAddressFromStringEPcPjPhS2_S1_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int TranslateAddressFromString(__IntPtr __instance, sbyte* szAddress, uint* nProtocol, byte* pNetAddress1, byte* pNetAddress2, uint* nWPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer37SetCurrentMasterServerInternetAddressEjj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetCurrentMasterServerInternetAddress(__IntPtr __instance, uint nAddress, uint nPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer33ShutDownClientInterfaceWithReasonEjRK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ShutDownClientInterfaceWithReason(__IntPtr __instance, uint nReason, __IntPtr sReason);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20SetMstServerPasswordE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetMstServerPassword(__IntPtr __instance, __IntPtr szTemp);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22PlayerIdToConnectionIdEjPj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int PlayerIdToConnectionId(__IntPtr __instance, uint nPlayerId, uint* nConnectionId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22OpenStandardConnectionEi10CExoStringi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int OpenStandardConnection(__IntPtr __instance, int nConnectionToUse, __IntPtr sHostName, int nPort);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer32GetMessageFromStandardConnectionEPiPPcS0_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetMessageFromStandardConnection(__IntPtr __instance, int* nConnectionFrom, sbyte** pMessage, int* nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer31SendMessageToStandardConnectionEiPci", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int SendMessageToStandardConnection(__IntPtr __instance, int nConnectionTo, sbyte* pmessage, int nSize);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23CloseStandardConnectionEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int CloseStandardConnection(__IntPtr __instance, int nConnectonToClose);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer16GetIPBySessionIdEjP10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetIPBySessionId(__IntPtr __instance, uint nSessionId, __IntPtr sIPAddress);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer24SetConnectionsDisallowedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetConnectionsDisallowed(__IntPtr __instance, int bDisallowLoginWhileMasterServerIsDown);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer29SetEnumerateSpecificOverRelayEic", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetEnumerateSpecificOverRelay(__IntPtr __instance, int state, sbyte relayToken);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20ServerSatisfiesBuildEii", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ServerSatisfiesBuild(__IntPtr __instance, int nBuild, int nRevision);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer9GetExoAppEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetExoApp(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer8ShutDownEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int ShutDown(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19GetPasswordRequiredEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetPasswordRequired(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer17GetPlayerPasswordEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetPlayerPassword(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer21GetGameMasterPasswordEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetGameMasterPassword(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer11minPasswordEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void MinPassword(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22GetServerAdminPasswordEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetServerAdminPassword(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetServerConnectedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetServerConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19GetDisconnectStrrefEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetDisconnectStrref(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19SetDisconnectStrrefEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDisconnectStrref(__IntPtr __instance, uint nStrref);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19GetDisconnectReasonEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetDisconnectReason(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer19SetDisconnectReasonERK10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetDisconnectReason(__IntPtr __instance, __IntPtr sReason);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer24GetAnySessionsEnumeratedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAnySessionsEnumerated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20GetSessionMaxPlayersEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSessionMaxPlayers(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20SetSessionMaxPlayersEj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSessionMaxPlayers(__IntPtr __instance, uint nMaxPlayers);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer14GetSessionNameEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetSessionName(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer14SetSessionNameE10CExoString", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetSessionName(__IntPtr __instance, __IntPtr sSessionName);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer17GetUDPRecievePortEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetUDPRecievePort(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetConnectionErrorEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetConnectionError(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetClientConnectedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetClientConnected(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22DropConnectionToServerEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int DropConnectionToServer(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer22IsConnectedToLocalhostEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int IsConnectedToLocalhost(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK9CNetLayer22GetGameMasterPermisionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetGameMasterPermision(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer9GetExoNetEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetExoNet(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer23GetServerNetworkAddressEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetServerNetworkAddress(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer16GetSendUDPSocketEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern uint GetSendUDPSocket(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20GetExpansionPackReqdEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern ushort GetExpansionPackReqd(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer20SetExpansionPackReqdEt", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetExpansionPackReqd(__IntPtr __instance, ushort nExpansionPack);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer18GetAnyWindowBehindEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetAnyWindowBehind(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer29GetConnectionsMustBeValidatedEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetConnectionsMustBeValidated(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer29SetConnectionsMustBeValidatedEi", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetConnectionsMustBeValidated(__IntPtr __instance, int bValidateLoginWhileMasterServerIsNotResponding);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer29GetEnumerateSpecificOverRelayEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern int GetEnumerateSpecificOverRelay(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer27GetRouterPortMapDescriptionEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void GetRouterPortMapDescription(__IntPtr @return, __IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZNK9CNetLayer13GetNWSyncDataEv", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr GetNWSyncData(__IntPtr __instance);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN9CNetLayer13SetNWSyncDataERK19NWSyncAdvertisement", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void SetNWSyncData(__IntPtr __instance, __IntPtr datra);
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNetLayer>();

        protected bool __ownsNativeInstance;

        internal static CNetLayer __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNetLayer(native.ToPointer(), skipVTables);
        }

        internal static CNetLayer __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNetLayer)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNetLayer __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNetLayer(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNetLayer(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNetLayer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }

        public CNetLayer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance);
        }

        public CNetLayer(global::NWN.LowLevel.CNetLayer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CNetLayer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::NWN.LowLevel.CNetLayer.__Internal*) __Instance) = *((global::NWN.LowLevel.CNetLayer.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.CNetLayer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (disposing)
                __Internal.dtor(__Instance);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Initialize(global::NWN.LowLevel.CBaseExoApp pcExoApp)
        {
            var __arg0 = pcExoApp is null ? __IntPtr.Zero : pcExoApp.__Instance;
            var __ret = __Internal.Initialize(__Instance, __arg0);
            return __ret;
        }

        public int StartProtocol(uint nProtocol, uint nSendingAddress, uint nReceivingAddress, uint nInstance)
        {
            var __ret = __Internal.StartProtocol(__Instance, nProtocol, nSendingAddress, nReceivingAddress, nInstance);
            return __ret;
        }

        public int EndProtocol(uint nProtocol)
        {
            var __ret = __Internal.EndProtocol(__Instance, nProtocol);
            return __ret;
        }

        public void SetServerLanguage(int nLanguage)
        {
            __Internal.SetServerLanguage(__Instance, nLanguage);
        }

        public int StartServerMode(global::NWN.LowLevel.CExoString sSessionName, uint nMaxPlayers)
        {
            if (ReferenceEquals(sSessionName, null))
                throw new global::System.ArgumentNullException("sSessionName", "Cannot be null because it is passed by value.");
            var __arg0 = sSessionName.__Instance;
            var __ret = __Internal.StartServerMode(__Instance, __arg0, nMaxPlayers);
            return __ret;
        }

        public int SetPlayerPassword(global::NWN.LowLevel.CExoString sPlayerPassword)
        {
            if (ReferenceEquals(sPlayerPassword, null))
                throw new global::System.ArgumentNullException("sPlayerPassword", "Cannot be null because it is passed by value.");
            var __arg0 = sPlayerPassword.__Instance;
            var __ret = __Internal.SetPlayerPassword(__Instance, __arg0);
            return __ret;
        }

        public int SetGameMasterPassword(global::NWN.LowLevel.CExoString sGameMasterPassowrd)
        {
            if (ReferenceEquals(sGameMasterPassowrd, null))
                throw new global::System.ArgumentNullException("sGameMasterPassowrd", "Cannot be null because it is passed by value.");
            var __arg0 = sGameMasterPassowrd.__Instance;
            var __ret = __Internal.SetGameMasterPassword(__Instance, __arg0);
            return __ret;
        }

        public int SetServerAdminPassword(global::NWN.LowLevel.CExoString sServerAdminPassword)
        {
            if (ReferenceEquals(sServerAdminPassword, null))
                throw new global::System.ArgumentNullException("sServerAdminPassword", "Cannot be null because it is passed by value.");
            var __arg0 = sServerAdminPassword.__Instance;
            var __ret = __Internal.SetServerAdminPassword(__Instance, __arg0);
            return __ret;
        }

        public int EndServerMode()
        {
            var __ret = __Internal.EndServerMode(__Instance);
            return __ret;
        }

        public global::NWN.LowLevel.CNetLayerPlayerInfo GetPlayerInfo(uint nPlayerId)
        {
            var __ret = __Internal.GetPlayerInfo(__Instance, nPlayerId);
            var __result0 = global::NWN.LowLevel.CNetLayerPlayerInfo.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public global::NWN.LowLevel.CExoString GetPlayerAddress(uint nPlayerId, int bIncludePort)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetPlayerAddress(new IntPtr(&__ret), __Instance, nPlayerId, bIncludePort);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public int GetPlayerAddressRelayed(uint nPlayerId)
        {
            var __ret = __Internal.GetPlayerAddressRelayed(__Instance, nPlayerId);
            return __ret;
        }

        public int DisconnectPlayer(uint nPlayerId, uint nStrRef, int bCDAuthFail, global::NWN.LowLevel.CExoString reason)
        {
            if (ReferenceEquals(reason, null))
                throw new global::System.ArgumentNullException("reason", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = reason.__Instance;
            var __ret = __Internal.DisconnectPlayer(__Instance, nPlayerId, nStrRef, bCDAuthFail, __arg3);
            return __ret;
        }

        public void SetUpPlayBackConnection()
        {
            __Internal.SetUpPlayBackConnection(__Instance);
        }

        public void StartAddressTranslation(global::NWN.LowLevel.CExoString sInternetAddress)
        {
            if (ReferenceEquals(sInternetAddress, null))
                throw new global::System.ArgumentNullException("sInternetAddress", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sInternetAddress.__Instance;
            __Internal.StartAddressTranslation(__Instance, __arg0);
        }

        public int GetAddressTranslationResult(global::NWN.LowLevel.CExoString sInternetAddress, global::NWN.LowLevel.CExoArrayList<uint> nIPv4)
        {
            if (ReferenceEquals(sInternetAddress, null))
                throw new global::System.ArgumentNullException("sInternetAddress", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sInternetAddress.__Instance;
            if (ReferenceEquals(nIPv4, null))
                throw new global::System.ArgumentNullException("nIPv4", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = nIPv4.__Instance;
            var __ret = __Internal.GetAddressTranslationResult(__Instance, __arg0, __arg1);
            return __ret;
        }

        public void EndAddressTranslation(global::NWN.LowLevel.CExoString sInternetAddress)
        {
            if (ReferenceEquals(sInternetAddress, null))
                throw new global::System.ArgumentNullException("sInternetAddress", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = sInternetAddress.__Instance;
            __Internal.EndAddressTranslation(__Instance, __arg0);
        }

        public int StartEnumerateSessionsSection(uint nEnumerateSection, uint nSize, global::NWN.LowLevel.CExoString sServerListToEnumerate)
        {
            var __arg2 = sServerListToEnumerate is null ? __IntPtr.Zero : sServerListToEnumerate.__Instance;
            var __ret = __Internal.StartEnumerateSessionsSection(__Instance, nEnumerateSection, nSize, __arg2);
            return __ret;
        }

        public int EnumerateSessionsLoop()
        {
            var __ret = __Internal.EnumerateSessionsLoop(__Instance);
            return __ret;
        }

        public int EndEnumerateSessionsSection(uint nEnumerateSection)
        {
            var __ret = __Internal.EndEnumerateSessionsSection(__Instance, nEnumerateSection);
            return __ret;
        }

        public int EndEnumerateSessions()
        {
            var __ret = __Internal.EndEnumerateSessions(__Instance);
            return __ret;
        }

        public void CleanUpEnumerateSpecific()
        {
            __Internal.CleanUpEnumerateSpecific(__Instance);
        }

        public uint GetSessionSectionStart(uint sectionSectionId)
        {
            var __ret = __Internal.GetSessionSectionStart(__Instance, sectionSectionId);
            return __ret;
        }

        public int StartConnectToSession(uint nSessionId, global::NWN.LowLevel.CExoString sPlayerName, int nPlayerLanguage, global::NWN.LowLevel.CExoString sPassword, uint nTimeOut, uint nConnectionType, global::NWN.LowLevel.CExoString sCDKey, global::NWN.LowLevel.CExoString sLegacyCDKey, global::NWN.LowLevel.CExoString expectCryptoPublicKeyBase64)
        {
            if (ReferenceEquals(sPlayerName, null))
                throw new global::System.ArgumentNullException("sPlayerName", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sPlayerName.__Instance;
            if (ReferenceEquals(sPassword, null))
                throw new global::System.ArgumentNullException("sPassword", "Cannot be null because it is a C++ reference (&).");
            var __arg3 = sPassword.__Instance;
            if (ReferenceEquals(sCDKey, null))
                throw new global::System.ArgumentNullException("sCDKey", "Cannot be null because it is a C++ reference (&).");
            var __arg6 = sCDKey.__Instance;
            if (ReferenceEquals(sLegacyCDKey, null))
                throw new global::System.ArgumentNullException("sLegacyCDKey", "Cannot be null because it is a C++ reference (&).");
            var __arg7 = sLegacyCDKey.__Instance;
            if (ReferenceEquals(expectCryptoPublicKeyBase64, null))
                throw new global::System.ArgumentNullException("expectCryptoPublicKeyBase64", "Cannot be null because it is a C++ reference (&).");
            var __arg8 = expectCryptoPublicKeyBase64.__Instance;
            var __ret = __Internal.StartConnectToSession(__Instance, nSessionId, __arg1, nPlayerLanguage, __arg3, nTimeOut, nConnectionType, __arg6, __arg7, __arg8);
            return __ret;
        }

        public int RequestExtendedServerInfo(uint nSessionId, int bGetInfo, int bGetPing)
        {
            var __ret = __Internal.RequestExtendedServerInfo(__Instance, nSessionId, bGetInfo, bGetPing);
            return __ret;
        }

        public int RequestServerDetails(uint nConnectionId)
        {
            var __ret = __Internal.RequestServerDetails(__Instance, nConnectionId);
            return __ret;
        }

        public int StartPing(uint nSessionId)
        {
            var __ret = __Internal.StartPing(__Instance, nSessionId);
            return __ret;
        }

        public int EndPing(uint nSessionId)
        {
            var __ret = __Internal.EndPing(__Instance, nSessionId);
            return __ret;
        }

        public int GetNumberLocalAdapters(uint nProtocol)
        {
            var __ret = __Internal.GetNumberLocalAdapters(__Instance, nProtocol);
            return __ret;
        }

        public global::NWN.LowLevel.CExoString GetLocalAdapterString(uint nProtocol, uint nAdapterNumber)
        {
            var __ret = new global::NWN.LowLevel.CExoString.__Internal();
            __Internal.GetLocalAdapterString(new IntPtr(&__ret), __Instance, nProtocol, nAdapterNumber);
            return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
        }

        public void SetSessionInfoChanged(uint nSessionId, int bHasChanged)
        {
            __Internal.SetSessionInfoChanged(__Instance, nSessionId, bHasChanged);
        }

        public int GetSessionInfoChanged(uint nSessionSection)
        {
            var __ret = __Internal.GetSessionInfoChanged(__Instance, nSessionSection);
            return __ret;
        }

        public void ClearSessionInfoChanged(uint nSessionSection)
        {
            __Internal.ClearSessionInfoChanged(__Instance, nSessionSection);
        }

        public uint GetPortBySessionId(uint nSessionId)
        {
            var __ret = __Internal.GetPortBySessionId(__Instance, nSessionId);
            return __ret;
        }

        public global::NWN.LowLevel.CNetLayerSessionInfo GetSessionInfo(uint nSession)
        {
            var __ret = __Internal.GetSessionInfo(__Instance, nSession);
            var __result0 = global::NWN.LowLevel.CNetLayerSessionInfo.__GetOrCreateInstance(__ret, false);
            return __result0;
        }

        public int EndConnectToSession()
        {
            var __ret = __Internal.EndConnectToSession(__Instance);
            return __ret;
        }

        public uint GetLocalPrivileges(uint nConnectType)
        {
            var __ret = __Internal.GetLocalPrivileges(__Instance, nConnectType);
            return __ret;
        }

        public int DisconnectFromSession()
        {
            var __ret = __Internal.DisconnectFromSession(__Instance);
            return __ret;
        }

        public int MessageArrived(uint nProtocol, uint nSocketId, uint nErrorCode, int bRemoveFromQueue)
        {
            var __ret = __Internal.MessageArrived(__Instance, nProtocol, nSocketId, nErrorCode, bRemoveFromQueue);
            return __ret;
        }

        public void ProcessReceivedFrames(int bProcessReceivedMessage)
        {
            __Internal.ProcessReceivedFrames(__Instance, bProcessReceivedMessage);
        }

        public int SendMessageToPlayer(uint nPlayerId, byte* pData, uint nSize, uint nFlags)
        {
            var __ret = __Internal.SendMessageToPlayer(__Instance, nPlayerId, pData, nSize, nFlags);
            return __ret;
        }

        public int SendMessageToAddress(uint nConnectionId, byte* pData, uint nSize)
        {
            var __ret = __Internal.SendMessageToAddress(__Instance, nConnectionId, pData, nSize);
            return __ret;
        }

        public int UpdateStatusLoop(uint nApplicationType)
        {
            var __ret = __Internal.UpdateStatusLoop(__Instance, nApplicationType);
            return __ret;
        }

        public int GetPlayerAddressData(uint nConnectionId, ref uint nProtocol, byte** pNetAddress1, byte** pNetAddress2, ref uint nPort)
        {
            fixed (uint* __nProtocol1 = &nProtocol)
            {
                var __arg1 = __nProtocol1;
                fixed (uint* __nPort4 = &nPort)
                {
                    var __arg4 = __nPort4;
                    var __ret = __Internal.GetPlayerAddressData(__Instance, nConnectionId, __arg1, pNetAddress1, pNetAddress2, __arg4);
                    return __ret;
                }
            }
        }

        public void StoreMessage(byte* pData, uint nMsgLength)
        {
            __Internal.StoreMessage(__Instance, pData, nMsgLength);
        }

        public void SetGameMasterPermission(int state)
        {
            __Internal.SetGameMasterPermission(__Instance, state);
        }

        public int TranslateAddressFromString(sbyte* szAddress, ref uint nProtocol, byte* pNetAddress1, byte* pNetAddress2, ref uint nWPort)
        {
            fixed (uint* __nProtocol1 = &nProtocol)
            {
                var __arg1 = __nProtocol1;
                fixed (uint* __nWPort4 = &nWPort)
                {
                    var __arg4 = __nWPort4;
                    var __ret = __Internal.TranslateAddressFromString(__Instance, szAddress, __arg1, pNetAddress1, pNetAddress2, __arg4);
                    return __ret;
                }
            }
        }

        public void SetCurrentMasterServerInternetAddress(uint nAddress, uint nPort)
        {
            __Internal.SetCurrentMasterServerInternetAddress(__Instance, nAddress, nPort);
        }

        public void ShutDownClientInterfaceWithReason(uint nReason, global::NWN.LowLevel.CExoString sReason)
        {
            if (ReferenceEquals(sReason, null))
                throw new global::System.ArgumentNullException("sReason", "Cannot be null because it is a C++ reference (&).");
            var __arg1 = sReason.__Instance;
            __Internal.ShutDownClientInterfaceWithReason(__Instance, nReason, __arg1);
        }

        public void SetMstServerPassword(global::NWN.LowLevel.CExoString szTemp)
        {
            if (ReferenceEquals(szTemp, null))
                throw new global::System.ArgumentNullException("szTemp", "Cannot be null because it is passed by value.");
            var __arg0 = szTemp.__Instance;
            __Internal.SetMstServerPassword(__Instance, __arg0);
        }

        public int PlayerIdToConnectionId(uint nPlayerId, ref uint nConnectionId)
        {
            fixed (uint* __nConnectionId1 = &nConnectionId)
            {
                var __arg1 = __nConnectionId1;
                var __ret = __Internal.PlayerIdToConnectionId(__Instance, nPlayerId, __arg1);
                return __ret;
            }
        }

        public int OpenStandardConnection(int nConnectionToUse, global::NWN.LowLevel.CExoString sHostName, int nPort)
        {
            if (ReferenceEquals(sHostName, null))
                throw new global::System.ArgumentNullException("sHostName", "Cannot be null because it is passed by value.");
            var __arg1 = sHostName.__Instance;
            var __ret = __Internal.OpenStandardConnection(__Instance, nConnectionToUse, __arg1, nPort);
            return __ret;
        }

        public int GetMessageFromStandardConnection(ref int nConnectionFrom, sbyte** pMessage, ref int nSize)
        {
            fixed (int* __nConnectionFrom0 = &nConnectionFrom)
            {
                var __arg0 = __nConnectionFrom0;
                fixed (int* __nSize2 = &nSize)
                {
                    var __arg2 = __nSize2;
                    var __ret = __Internal.GetMessageFromStandardConnection(__Instance, __arg0, pMessage, __arg2);
                    return __ret;
                }
            }
        }

        public int SendMessageToStandardConnection(int nConnectionTo, sbyte* pmessage, int nSize)
        {
            var __ret = __Internal.SendMessageToStandardConnection(__Instance, nConnectionTo, pmessage, nSize);
            return __ret;
        }

        public int CloseStandardConnection(int nConnectonToClose)
        {
            var __ret = __Internal.CloseStandardConnection(__Instance, nConnectonToClose);
            return __ret;
        }

        public int GetIPBySessionId(uint nSessionId, global::NWN.LowLevel.CExoString sIPAddress)
        {
            var __arg1 = sIPAddress is null ? __IntPtr.Zero : sIPAddress.__Instance;
            var __ret = __Internal.GetIPBySessionId(__Instance, nSessionId, __arg1);
            return __ret;
        }

        public void SetConnectionsDisallowed(int bDisallowLoginWhileMasterServerIsDown)
        {
            __Internal.SetConnectionsDisallowed(__Instance, bDisallowLoginWhileMasterServerIsDown);
        }

        public void SetEnumerateSpecificOverRelay(int state, sbyte relayToken)
        {
            __Internal.SetEnumerateSpecificOverRelay(__Instance, state, relayToken);
        }

        public int ServerSatisfiesBuild(int nBuild, int nRevision)
        {
            var __ret = __Internal.ServerSatisfiesBuild(__Instance, nBuild, nRevision);
            return __ret;
        }

        public global::NWN.LowLevel.CNetLayerInternal MPcNetLayerInternal
        {
            get
            {
                var __result0 = global::NWN.LowLevel.CNetLayerInternal.__GetOrCreateInstance(((__Internal*)__Instance)->m_pcNetLayerInternal, false);
                return __result0;
            }

            set
            {
                ((__Internal*)__Instance)->m_pcNetLayerInternal = value is null ? __IntPtr.Zero : value.__Instance;
            }
        }

        public global::NWN.LowLevel.CBaseExoApp ExoApp
        {
            get
            {
                var __ret = __Internal.GetExoApp(__Instance);
                var __result0 = global::NWN.LowLevel.CBaseExoApp.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public int ShutDown
        {
            get
            {
                var __ret = __Internal.ShutDown(__Instance);
                return __ret;
            }
        }

        public int PasswordRequired
        {
            get
            {
                var __ret = __Internal.GetPasswordRequired(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString PlayerPassword
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetPlayerPassword(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString GameMasterPassword
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetGameMasterPassword(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString MinPassword
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.MinPassword(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.CExoString ServerAdminPassword
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetServerAdminPassword(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public int ServerConnected
        {
            get
            {
                var __ret = __Internal.GetServerConnected(__Instance);
                return __ret;
            }
        }

        public uint DisconnectStrref
        {
            get
            {
                var __ret = __Internal.GetDisconnectStrref(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetDisconnectStrref(__Instance, value);
            }
        }

        public global::NWN.LowLevel.CExoString DisconnectReason
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetDisconnectReason(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetDisconnectReason(__Instance, __arg0);
            }
        }

        public int AnySessionsEnumerated
        {
            get
            {
                var __ret = __Internal.GetAnySessionsEnumerated(__Instance);
                return __ret;
            }
        }

        public uint SessionMaxPlayers
        {
            get
            {
                var __ret = __Internal.GetSessionMaxPlayers(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetSessionMaxPlayers(__Instance, value);
            }
        }

        public global::NWN.LowLevel.CExoString SessionName
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetSessionName(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                var __arg0 = value.__Instance;
                __Internal.SetSessionName(__Instance, __arg0);
            }
        }

        public uint UDPRecievePort
        {
            get
            {
                var __ret = __Internal.GetUDPRecievePort(__Instance);
                return __ret;
            }
        }

        public uint ConnectionError
        {
            get
            {
                var __ret = __Internal.GetConnectionError(__Instance);
                return __ret;
            }
        }

        public int ClientConnected
        {
            get
            {
                var __ret = __Internal.GetClientConnected(__Instance);
                return __ret;
            }
        }

        public int DropConnectionToServer
        {
            get
            {
                var __ret = __Internal.DropConnectionToServer(__Instance);
                return __ret;
            }
        }

        public int IsConnectedToLocalhost
        {
            get
            {
                var __ret = __Internal.IsConnectedToLocalhost(__Instance);
                return __ret;
            }
        }

        public int GameMasterPermision
        {
            get
            {
                var __ret = __Internal.GetGameMasterPermision(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoNet ExoNet
        {
            get
            {
                var __ret = __Internal.GetExoNet(__Instance);
                var __result0 = global::NWN.LowLevel.CExoNet.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public global::NWN.LowLevel.CExoString ServerNetworkAddress
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetServerNetworkAddress(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public uint SendUDPSocket
        {
            get
            {
                var __ret = __Internal.GetSendUDPSocket(__Instance);
                return __ret;
            }
        }

        public ushort ExpansionPackReqd
        {
            get
            {
                var __ret = __Internal.GetExpansionPackReqd(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetExpansionPackReqd(__Instance, value);
            }
        }

        public int AnyWindowBehind
        {
            get
            {
                var __ret = __Internal.GetAnyWindowBehind(__Instance);
                return __ret;
            }
        }

        public int ConnectionsMustBeValidated
        {
            get
            {
                var __ret = __Internal.GetConnectionsMustBeValidated(__Instance);
                return __ret;
            }

            set
            {
                __Internal.SetConnectionsMustBeValidated(__Instance, value);
            }
        }

        public int EnumerateSpecificOverRelay
        {
            get
            {
                var __ret = __Internal.GetEnumerateSpecificOverRelay(__Instance);
                return __ret;
            }
        }

        public global::NWN.LowLevel.CExoString RouterPortMapDescription
        {
            get
            {
                var __ret = new global::NWN.LowLevel.CExoString.__Internal();
                __Internal.GetRouterPortMapDescription(new IntPtr(&__ret), __Instance);
                return global::NWN.LowLevel.CExoString.__CreateInstance(__ret);
            }
        }

        public global::NWN.LowLevel.NWSyncAdvertisement NWSyncData
        {
            get
            {
                var __ret = __Internal.GetNWSyncData(__Instance);
                var __result0 = global::NWN.LowLevel.NWSyncAdvertisement.__GetOrCreateInstance(__ret, false);
                return __result0;
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is a C++ reference (&).");
                var __arg0 = value.__Instance;
                __Internal.SetNWSyncData(__Instance, __arg0);
            }
        }
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
