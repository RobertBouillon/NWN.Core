// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

namespace NWN.LowLevel
{
    public unsafe partial class CNWCArea
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCArea> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCArea>();

        protected bool __ownsNativeInstance;

        internal static CNWCArea __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCArea(native.ToPointer(), skipVTables);
        }

        internal static CNWCArea __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCArea)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCArea __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCArea(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCArea(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCArea(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCAreaOfEffectObject
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCAreaOfEffectObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCAreaOfEffectObject>();

        protected bool __ownsNativeInstance;

        internal static CNWCAreaOfEffectObject __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCAreaOfEffectObject(native.ToPointer(), skipVTables);
        }

        internal static CNWCAreaOfEffectObject __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCAreaOfEffectObject)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCAreaOfEffectObject __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCAreaOfEffectObject(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCAreaOfEffectObject(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCAreaOfEffectObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCCreature
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCCreature> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCCreature>();

        protected bool __ownsNativeInstance;

        internal static CNWCCreature __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCCreature(native.ToPointer(), skipVTables);
        }

        internal static CNWCCreature __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCCreature)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCCreature __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCCreature(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCCreature(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCCreature(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCDoor
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCDoor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCDoor>();

        protected bool __ownsNativeInstance;

        internal static CNWCDoor __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCDoor(native.ToPointer(), skipVTables);
        }

        internal static CNWCDoor __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCDoor)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCDoor __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCDoor(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCDoor(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCDoor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCItem
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCItem>();

        protected bool __ownsNativeInstance;

        internal static CNWCItem __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCItem(native.ToPointer(), skipVTables);
        }

        internal static CNWCItem __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCItem)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCItem __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCItem(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCItem(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCModule
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCModule> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCModule>();

        protected bool __ownsNativeInstance;

        internal static CNWCModule __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCModule(native.ToPointer(), skipVTables);
        }

        internal static CNWCModule __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCModule)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCModule __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCModule(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCModule(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCModule(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCObject
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCObject>();

        protected bool __ownsNativeInstance;

        internal static CNWCObject __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCObject(native.ToPointer(), skipVTables);
        }

        internal static CNWCObject __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCObject)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCObject __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCObject(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCObject(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCPlaceable
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCPlaceable> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCPlaceable>();

        protected bool __ownsNativeInstance;

        internal static CNWCPlaceable __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCPlaceable(native.ToPointer(), skipVTables);
        }

        internal static CNWCPlaceable __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCPlaceable)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCPlaceable __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCPlaceable(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCPlaceable(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCPlaceable(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCProjectile
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCProjectile> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCProjectile>();

        protected bool __ownsNativeInstance;

        internal static CNWCProjectile __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCProjectile(native.ToPointer(), skipVTables);
        }

        internal static CNWCProjectile __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCProjectile)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCProjectile __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCProjectile(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCProjectile(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCProjectile(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCSoundObject
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCSoundObject> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCSoundObject>();

        protected bool __ownsNativeInstance;

        internal static CNWCSoundObject __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCSoundObject(native.ToPointer(), skipVTables);
        }

        internal static CNWCSoundObject __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCSoundObject)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCSoundObject __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCSoundObject(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCSoundObject(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCSoundObject(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCStore
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCStore> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCStore>();

        protected bool __ownsNativeInstance;

        internal static CNWCStore __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCStore(native.ToPointer(), skipVTables);
        }

        internal static CNWCStore __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCStore)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCStore __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCStore(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCStore(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCStore(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial class CNWCTrigger
    {
        public partial struct __Internal
        {
        }

        public __IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCTrigger> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::NWN.LowLevel.CNWCTrigger>();

        protected bool __ownsNativeInstance;

        internal static CNWCTrigger __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CNWCTrigger(native.ToPointer(), skipVTables);
        }

        internal static CNWCTrigger __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CNWCTrigger)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CNWCTrigger __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CNWCTrigger(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            *(__Internal*) ret = native;
            return ret.ToPointer();
        }

        private CNWCTrigger(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CNWCTrigger(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new __IntPtr(native);
        }
    }

    public unsafe partial interface ICGameObject : global::NWN.LowLevel.ICCallbackHandlerBase
    {
        void SetId(uint oidNew);

        void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay);

        uint MIdSelf { get; set; }

        byte MNObjectType { get; set; }

        __IntPtr MPNwnxData { get; set; }

        __IntPtr __PointerToCGameObject { get; }

        global::NWN.LowLevel.CNWCObject AsNWCObject { get; }

        global::NWN.LowLevel.CNWSObject AsNWSObject { get; }

        global::NWN.LowLevel.CNWCDoor AsNWCDoor { get; }

        global::NWN.LowLevel.CNWSDoor AsNWSDoor { get; }

        global::NWN.LowLevel.CNWCModule AsNWCModule { get; }

        global::NWN.LowLevel.CNWSModule AsNWSModule { get; }

        global::NWN.LowLevel.CNWCArea AsNWCArea { get; }

        global::NWN.LowLevel.CNWSArea AsNWSArea { get; }

        global::NWN.LowLevel.CNWCCreature AsNWCCreature { get; }

        global::NWN.LowLevel.CNWSCreature AsNWSCreature { get; }

        global::NWN.LowLevel.CNWCItem AsNWCItem { get; }

        global::NWN.LowLevel.CNWSItem AsNWSItem { get; }

        global::NWN.LowLevel.CNWCTrigger AsNWCTrigger { get; }

        global::NWN.LowLevel.CNWSTrigger AsNWSTrigger { get; }

        global::NWN.LowLevel.CNWCProjectile AsNWCProjectile { get; }

        global::NWN.LowLevel.CNWSPlayerTURD AsNWSPlayerTURD { get; }

        global::NWN.LowLevel.CNWSPlaceable AsNWSPlaceable { get; }

        global::NWN.LowLevel.CNWCPlaceable AsNWCPlaceable { get; }

        global::NWN.LowLevel.CNWSAreaOfEffectObject AsNWSAreaOfEffectObject { get; }

        global::NWN.LowLevel.CNWCAreaOfEffectObject AsNWCAreaOfEffectObject { get; }

        global::NWN.LowLevel.CNWSWaypoint AsNWSWaypoint { get; }

        global::NWN.LowLevel.CNWSEncounter AsNWSEncounter { get; }

        global::NWN.LowLevel.CNWCStore AsNWCStore { get; }

        global::NWN.LowLevel.CNWSStore AsNWSStore { get; }

        global::NWN.LowLevel.CNWSSoundObject AsNWSSoundObject { get; }

        global::NWN.LowLevel.CNWCSoundObject AsNWCSoundObject { get; }
    }

    public unsafe partial class CGameObject : global::NWN.LowLevel.CCallbackHandlerBase, global::NWN.LowLevel.ICGameObject, IDisposable
    {
        [StructLayout(LayoutKind.Explicit, Size = 24)]
        public new partial struct __Internal
        {
            [FieldOffset(0)]
            internal __IntPtr vptr_CGameObject;

            [FieldOffset(8)]
            internal uint m_idSelf;

            [FieldOffset(12)]
            internal byte m_nObjectType;

            [FieldOffset(16)]
            internal __IntPtr m_pNwnxData;

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameObjectC2Ehj", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void ctor(__IntPtr __instance, byte nObjectType, uint oidId);

            [SuppressUnmanagedCodeSecurity, DllImport("NWNXLib", EntryPoint = "_ZN11CGameObjectC2ERKS_", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern void cctor(__IntPtr __instance, __IntPtr _0);
        }

        internal static new CGameObject __CreateInstance(__IntPtr native, bool skipVTables = false)
        {
            return new CGameObject(native.ToPointer(), skipVTables);
        }

        internal static new CGameObject __GetOrCreateInstance(__IntPtr native, bool saveInstance = false, bool skipVTables = false)
        {
            if (native == __IntPtr.Zero)
                return null;
            if (NativeToManagedMap.TryGetValue(native, out var managed))
                return (CGameObject)managed;
            var result = __CreateInstance(native, skipVTables);
            if (saveInstance)
                NativeToManagedMap[native] = result;
            return result;
        }

        internal static CGameObject __GetInstance(__IntPtr native)
        {
            if (!NativeToManagedMap.TryGetValue(native, out var managed))
                throw new System.Exception("No managed instance was found");
            var result = (CGameObject)managed;
            if (result.__ownsNativeInstance)
                result.SetupVTables();
            return result;
        }

        internal static CGameObject __CreateInstance(__Internal native, bool skipVTables = false)
        {
            return new CGameObject(native, skipVTables);
        }

        private static void* __CopyValue(__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(__Internal));
            global::NWN.LowLevel.CGameObject.__Internal.cctor(ret, new __IntPtr(&native));
            return ret.ToPointer();
        }

        private CGameObject(__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected CGameObject(void* native, bool skipVTables = false)
            : base((void*) native)
        {
            if (native == null)
                return;
            if (!skipVTables)
                SetupVTables(true);
        }

        public CGameObject(byte nObjectType, uint oidId)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor(__Instance, nObjectType, oidId);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CGameObject");
        }

        public CGameObject(global::NWN.LowLevel.ICGameObject _0)
            : this((void*) null)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::NWN.LowLevel.CGameObject.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            if (ReferenceEquals(_0, null))
                throw new global::System.ArgumentNullException("_0", "Cannot be null because it is a C++ reference (&).");
            var __arg0 = _0.__PointerToCGameObject;
            __Internal.cctor(__Instance, __arg0);
            SetupVTables(GetType().FullName == "NWN.LowLevel.CGameObject");
        }

        public override void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::NWN.LowLevel.ICCallbackHandlerBase __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            ((global::NWN.LowLevel.CGameObject.__Internal*) __Instance)->vptr_CGameObject = __VTables.Tables[0];
            if (disposing)
            {
                var ___dtorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr>(0, 0);
                ___dtorDelegate(__Instance);
            }
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public virtual void SetId(uint oidNew)
        {
            var ___SetIdDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_uint>(0, 2);
            ___SetIdDelegate(__Instance, oidNew);
        }

        public virtual void ResetUpdateTimes(uint nCalendarDay, uint nTimeOfDay)
        {
            var ___ResetUpdateTimesDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint>(0, 3);
            ___ResetUpdateTimesDelegate(__Instance, nCalendarDay, nTimeOfDay);
        }

        public uint MIdSelf
        {
            get
            {
                return ((__Internal*)__Instance)->m_idSelf;
            }

            set
            {
                ((__Internal*)__Instance)->m_idSelf = value;
            }
        }

        public byte MNObjectType
        {
            get
            {
                return ((__Internal*)__Instance)->m_nObjectType;
            }

            set
            {
                ((__Internal*)__Instance)->m_nObjectType = value;
            }
        }

        public __IntPtr MPNwnxData
        {
            get
            {
                return ((__Internal*)__Instance)->m_pNwnxData;
            }

            set
            {
                ((__Internal*)__Instance)->m_pNwnxData = (__IntPtr) value;
            }
        }

        public __IntPtr __PointerToCGameObject
        {
            get
            {
                return __Instance + 0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCObject AsNWCObject
        {
            get
            {
                var ___AsNWCObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 4);
                var __ret = ___AsNWCObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSObject AsNWSObject
        {
            get
            {
                var ___AsNWSObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 5);
                var __ret = ___AsNWSObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCDoor AsNWCDoor
        {
            get
            {
                var ___AsNWCDoorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 6);
                var __ret = ___AsNWCDoorDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCDoor.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSDoor AsNWSDoor
        {
            get
            {
                var ___AsNWSDoorDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 7);
                var __ret = ___AsNWSDoorDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSDoor.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCModule AsNWCModule
        {
            get
            {
                var ___AsNWCModuleDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 8);
                var __ret = ___AsNWCModuleDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSModule AsNWSModule
        {
            get
            {
                var ___AsNWSModuleDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 9);
                var __ret = ___AsNWSModuleDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSModule.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCArea AsNWCArea
        {
            get
            {
                var ___AsNWCAreaDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 10);
                var __ret = ___AsNWCAreaDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCArea.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSArea AsNWSArea
        {
            get
            {
                var ___AsNWSAreaDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 11);
                var __ret = ___AsNWSAreaDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSArea.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCCreature AsNWCCreature
        {
            get
            {
                var ___AsNWCCreatureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 12);
                var __ret = ___AsNWCCreatureDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCCreature.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSCreature AsNWSCreature
        {
            get
            {
                var ___AsNWSCreatureDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 13);
                var __ret = ___AsNWSCreatureDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSCreature.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCItem AsNWCItem
        {
            get
            {
                var ___AsNWCItemDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 14);
                var __ret = ___AsNWCItemDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCItem.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSItem AsNWSItem
        {
            get
            {
                var ___AsNWSItemDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 15);
                var __ret = ___AsNWSItemDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSItem.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCTrigger AsNWCTrigger
        {
            get
            {
                var ___AsNWCTriggerDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 16);
                var __ret = ___AsNWCTriggerDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCTrigger.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSTrigger AsNWSTrigger
        {
            get
            {
                var ___AsNWSTriggerDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 17);
                var __ret = ___AsNWSTriggerDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSTrigger.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCProjectile AsNWCProjectile
        {
            get
            {
                var ___AsNWCProjectileDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 18);
                var __ret = ___AsNWCProjectileDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCProjectile.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSPlayerTURD AsNWSPlayerTURD
        {
            get
            {
                var ___AsNWSPlayerTURDDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 19);
                var __ret = ___AsNWSPlayerTURDDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSPlayerTURD.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSPlaceable AsNWSPlaceable
        {
            get
            {
                var ___AsNWSPlaceableDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 20);
                var __ret = ___AsNWSPlaceableDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSPlaceable.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCPlaceable AsNWCPlaceable
        {
            get
            {
                var ___AsNWCPlaceableDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 21);
                var __ret = ___AsNWCPlaceableDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCPlaceable.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSAreaOfEffectObject AsNWSAreaOfEffectObject
        {
            get
            {
                var ___AsNWSAreaOfEffectObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 22);
                var __ret = ___AsNWSAreaOfEffectObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCAreaOfEffectObject AsNWCAreaOfEffectObject
        {
            get
            {
                var ___AsNWCAreaOfEffectObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 23);
                var __ret = ___AsNWCAreaOfEffectObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCAreaOfEffectObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSWaypoint AsNWSWaypoint
        {
            get
            {
                var ___AsNWSWaypointDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 24);
                var __ret = ___AsNWSWaypointDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSWaypoint.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSEncounter AsNWSEncounter
        {
            get
            {
                var ___AsNWSEncounterDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 25);
                var __ret = ___AsNWSEncounterDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSEncounter.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCStore AsNWCStore
        {
            get
            {
                var ___AsNWCStoreDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 26);
                var __ret = ___AsNWCStoreDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCStore.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSStore AsNWSStore
        {
            get
            {
                var ___AsNWSStoreDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 27);
                var __ret = ___AsNWSStoreDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSStore.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWSSoundObject AsNWSSoundObject
        {
            get
            {
                var ___AsNWSSoundObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 28);
                var __ret = ___AsNWSSoundObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWSSoundObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        public virtual global::NWN.LowLevel.CNWCSoundObject AsNWCSoundObject
        {
            get
            {
                var ___AsNWCSoundObjectDelegate = __VTables.GetMethodDelegate<global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr>(0, 29);
                var __ret = ___AsNWCSoundObjectDelegate(__Instance);
                var __result0 = global::NWN.LowLevel.CNWCSoundObject.__GetOrCreateInstance(__ret, false);
                return __result0;
            }
        }

        #region Virtual table interop

        // virtual ~CGameObject()
        private static global::NWN.LowLevel.Delegates.Action___IntPtr _dtorDelegateInstance;

        private static void _dtorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            __target.Dispose(true);
        }

        // void SetId(OBJECT_ID oidNew)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint _SetIdDelegateInstance;

        private static void _SetIdDelegateHook(__IntPtr __instance, uint oidNew)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            __target.SetId(oidNew);
        }

        // void ResetUpdateTimes(uint32_t nCalendarDay, uint32_t nTimeOfDay)
        private static global::NWN.LowLevel.Delegates.Action___IntPtr_uint_uint _ResetUpdateTimesDelegateInstance;

        private static void _ResetUpdateTimesDelegateHook(__IntPtr __instance, uint nCalendarDay, uint nTimeOfDay)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            __target.ResetUpdateTimes(nCalendarDay, nTimeOfDay);
        }

        // CNWCObject * AsNWCObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCObjectDelegateInstance;

        private static __IntPtr _AsNWCObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSObject * AsNWSObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSObjectDelegateInstance;

        private static __IntPtr _AsNWSObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCDoor * AsNWCDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCDoorDelegateInstance;

        private static __IntPtr _AsNWCDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSDoor * AsNWSDoor()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSDoorDelegateInstance;

        private static __IntPtr _AsNWSDoorDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSDoor;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCModule * AsNWCModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCModuleDelegateInstance;

        private static __IntPtr _AsNWCModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSModule * AsNWSModule()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSModuleDelegateInstance;

        private static __IntPtr _AsNWSModuleDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSModule;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCArea * AsNWCArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaDelegateInstance;

        private static __IntPtr _AsNWCAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSArea * AsNWSArea()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaDelegateInstance;

        private static __IntPtr _AsNWSAreaDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSArea;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCCreature * AsNWCCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCCreatureDelegateInstance;

        private static __IntPtr _AsNWCCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSCreature * AsNWSCreature()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSCreatureDelegateInstance;

        private static __IntPtr _AsNWSCreatureDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSCreature;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCItem * AsNWCItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCItemDelegateInstance;

        private static __IntPtr _AsNWCItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSItem * AsNWSItem()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSItemDelegateInstance;

        private static __IntPtr _AsNWSItemDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSItem;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCTrigger * AsNWCTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCTriggerDelegateInstance;

        private static __IntPtr _AsNWCTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSTrigger * AsNWSTrigger()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSTriggerDelegateInstance;

        private static __IntPtr _AsNWSTriggerDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSTrigger;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCProjectile * AsNWCProjectile()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCProjectileDelegateInstance;

        private static __IntPtr _AsNWCProjectileDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCProjectile;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlayerTURD * AsNWSPlayerTURD()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlayerTURDDelegateInstance;

        private static __IntPtr _AsNWSPlayerTURDDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSPlayerTURD;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSPlaceable * AsNWSPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSPlaceableDelegateInstance;

        private static __IntPtr _AsNWSPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCPlaceable * AsNWCPlaceable()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCPlaceableDelegateInstance;

        private static __IntPtr _AsNWCPlaceableDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCPlaceable;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSAreaOfEffectObject * AsNWSAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWSAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCAreaOfEffectObject * AsNWCAreaOfEffectObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCAreaOfEffectObjectDelegateInstance;

        private static __IntPtr _AsNWCAreaOfEffectObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCAreaOfEffectObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSWaypoint * AsNWSWaypoint()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSWaypointDelegateInstance;

        private static __IntPtr _AsNWSWaypointDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSWaypoint;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSEncounter * AsNWSEncounter()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSEncounterDelegateInstance;

        private static __IntPtr _AsNWSEncounterDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSEncounter;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCStore * AsNWCStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCStoreDelegateInstance;

        private static __IntPtr _AsNWCStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSStore * AsNWSStore()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSStoreDelegateInstance;

        private static __IntPtr _AsNWSStoreDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSStore;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWSSoundObject * AsNWSSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWSSoundObjectDelegateInstance;

        private static __IntPtr _AsNWSSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWSSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        // CNWCSoundObject * AsNWCSoundObject()
        private static global::NWN.LowLevel.Delegates.Func___IntPtr___IntPtr _AsNWCSoundObjectDelegateInstance;

        private static __IntPtr _AsNWCSoundObjectDelegateHook(__IntPtr __instance)
        {
            var __target = global::NWN.LowLevel.CGameObject.__GetInstance(__instance);
            var __ret = __target.AsNWCSoundObject;
            return __ret is null ? __IntPtr.Zero : __ret.__Instance;
        }

        internal static class VTableLoader
        {
            private static volatile bool initialized;
            private static readonly IntPtr*[] ManagedVTables = new IntPtr*[1];
            private static readonly IntPtr*[] ManagedVTablesDtorOnly = new IntPtr*[1];
            private static readonly IntPtr[] Thunks = new IntPtr[29];
            private static CppSharp.Runtime.VTables VTables;
            private static readonly global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>
                SafeHandles = new global::System.Collections.Generic.List<CppSharp.Runtime.SafeUnmanagedMemoryHandle>();

            static VTableLoader()
            {
                _dtorDelegateInstance += _dtorDelegateHook;
                _SetIdDelegateInstance += _SetIdDelegateHook;
                _ResetUpdateTimesDelegateInstance += _ResetUpdateTimesDelegateHook;
                _AsNWCObjectDelegateInstance += _AsNWCObjectDelegateHook;
                _AsNWSObjectDelegateInstance += _AsNWSObjectDelegateHook;
                _AsNWCDoorDelegateInstance += _AsNWCDoorDelegateHook;
                _AsNWSDoorDelegateInstance += _AsNWSDoorDelegateHook;
                _AsNWCModuleDelegateInstance += _AsNWCModuleDelegateHook;
                _AsNWSModuleDelegateInstance += _AsNWSModuleDelegateHook;
                _AsNWCAreaDelegateInstance += _AsNWCAreaDelegateHook;
                _AsNWSAreaDelegateInstance += _AsNWSAreaDelegateHook;
                _AsNWCCreatureDelegateInstance += _AsNWCCreatureDelegateHook;
                _AsNWSCreatureDelegateInstance += _AsNWSCreatureDelegateHook;
                _AsNWCItemDelegateInstance += _AsNWCItemDelegateHook;
                _AsNWSItemDelegateInstance += _AsNWSItemDelegateHook;
                _AsNWCTriggerDelegateInstance += _AsNWCTriggerDelegateHook;
                _AsNWSTriggerDelegateInstance += _AsNWSTriggerDelegateHook;
                _AsNWCProjectileDelegateInstance += _AsNWCProjectileDelegateHook;
                _AsNWSPlayerTURDDelegateInstance += _AsNWSPlayerTURDDelegateHook;
                _AsNWSPlaceableDelegateInstance += _AsNWSPlaceableDelegateHook;
                _AsNWCPlaceableDelegateInstance += _AsNWCPlaceableDelegateHook;
                _AsNWSAreaOfEffectObjectDelegateInstance += _AsNWSAreaOfEffectObjectDelegateHook;
                _AsNWCAreaOfEffectObjectDelegateInstance += _AsNWCAreaOfEffectObjectDelegateHook;
                _AsNWSWaypointDelegateInstance += _AsNWSWaypointDelegateHook;
                _AsNWSEncounterDelegateInstance += _AsNWSEncounterDelegateHook;
                _AsNWCStoreDelegateInstance += _AsNWCStoreDelegateHook;
                _AsNWSStoreDelegateInstance += _AsNWSStoreDelegateHook;
                _AsNWSSoundObjectDelegateInstance += _AsNWSSoundObjectDelegateHook;
                _AsNWCSoundObjectDelegateInstance += _AsNWCSoundObjectDelegateHook;
                Thunks[0] = Marshal.GetFunctionPointerForDelegate(_dtorDelegateInstance);
                Thunks[1] = Marshal.GetFunctionPointerForDelegate(_SetIdDelegateInstance);
                Thunks[2] = Marshal.GetFunctionPointerForDelegate(_ResetUpdateTimesDelegateInstance);
                Thunks[3] = Marshal.GetFunctionPointerForDelegate(_AsNWCObjectDelegateInstance);
                Thunks[4] = Marshal.GetFunctionPointerForDelegate(_AsNWSObjectDelegateInstance);
                Thunks[5] = Marshal.GetFunctionPointerForDelegate(_AsNWCDoorDelegateInstance);
                Thunks[6] = Marshal.GetFunctionPointerForDelegate(_AsNWSDoorDelegateInstance);
                Thunks[7] = Marshal.GetFunctionPointerForDelegate(_AsNWCModuleDelegateInstance);
                Thunks[8] = Marshal.GetFunctionPointerForDelegate(_AsNWSModuleDelegateInstance);
                Thunks[9] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaDelegateInstance);
                Thunks[10] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaDelegateInstance);
                Thunks[11] = Marshal.GetFunctionPointerForDelegate(_AsNWCCreatureDelegateInstance);
                Thunks[12] = Marshal.GetFunctionPointerForDelegate(_AsNWSCreatureDelegateInstance);
                Thunks[13] = Marshal.GetFunctionPointerForDelegate(_AsNWCItemDelegateInstance);
                Thunks[14] = Marshal.GetFunctionPointerForDelegate(_AsNWSItemDelegateInstance);
                Thunks[15] = Marshal.GetFunctionPointerForDelegate(_AsNWCTriggerDelegateInstance);
                Thunks[16] = Marshal.GetFunctionPointerForDelegate(_AsNWSTriggerDelegateInstance);
                Thunks[17] = Marshal.GetFunctionPointerForDelegate(_AsNWCProjectileDelegateInstance);
                Thunks[18] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlayerTURDDelegateInstance);
                Thunks[19] = Marshal.GetFunctionPointerForDelegate(_AsNWSPlaceableDelegateInstance);
                Thunks[20] = Marshal.GetFunctionPointerForDelegate(_AsNWCPlaceableDelegateInstance);
                Thunks[21] = Marshal.GetFunctionPointerForDelegate(_AsNWSAreaOfEffectObjectDelegateInstance);
                Thunks[22] = Marshal.GetFunctionPointerForDelegate(_AsNWCAreaOfEffectObjectDelegateInstance);
                Thunks[23] = Marshal.GetFunctionPointerForDelegate(_AsNWSWaypointDelegateInstance);
                Thunks[24] = Marshal.GetFunctionPointerForDelegate(_AsNWSEncounterDelegateInstance);
                Thunks[25] = Marshal.GetFunctionPointerForDelegate(_AsNWCStoreDelegateInstance);
                Thunks[26] = Marshal.GetFunctionPointerForDelegate(_AsNWSStoreDelegateInstance);
                Thunks[27] = Marshal.GetFunctionPointerForDelegate(_AsNWSSoundObjectDelegateInstance);
                Thunks[28] = Marshal.GetFunctionPointerForDelegate(_AsNWCSoundObjectDelegateInstance);
            }

            public static CppSharp.Runtime.VTables SetupVTables(IntPtr instance, bool destructorOnly = false)
            {
                if (!initialized)
                {
                    lock (ManagedVTables)
                    {
                        if (!initialized)
                        {
                            initialized = true;
                            VTables.Tables = new IntPtr[] { *(IntPtr*)(instance + 0) };
                            VTables.Methods = new Delegate[1][];
                            ManagedVTablesDtorOnly[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 32);
                            ManagedVTablesDtorOnly[0][1] = Thunks[0];
                            ManagedVTables[0] = CppSharp.Runtime.VTables.CloneTable(SafeHandles, instance, 0, 32);
                            ManagedVTables[0][1] = Thunks[0];
                            ManagedVTables[0][2] = Thunks[1];
                            ManagedVTables[0][3] = Thunks[2];
                            ManagedVTables[0][4] = Thunks[3];
                            ManagedVTables[0][5] = Thunks[4];
                            ManagedVTables[0][6] = Thunks[5];
                            ManagedVTables[0][7] = Thunks[6];
                            ManagedVTables[0][8] = Thunks[7];
                            ManagedVTables[0][9] = Thunks[8];
                            ManagedVTables[0][10] = Thunks[9];
                            ManagedVTables[0][11] = Thunks[10];
                            ManagedVTables[0][12] = Thunks[11];
                            ManagedVTables[0][13] = Thunks[12];
                            ManagedVTables[0][14] = Thunks[13];
                            ManagedVTables[0][15] = Thunks[14];
                            ManagedVTables[0][16] = Thunks[15];
                            ManagedVTables[0][17] = Thunks[16];
                            ManagedVTables[0][18] = Thunks[17];
                            ManagedVTables[0][19] = Thunks[18];
                            ManagedVTables[0][20] = Thunks[19];
                            ManagedVTables[0][21] = Thunks[20];
                            ManagedVTables[0][22] = Thunks[21];
                            ManagedVTables[0][23] = Thunks[22];
                            ManagedVTables[0][24] = Thunks[23];
                            ManagedVTables[0][25] = Thunks[24];
                            ManagedVTables[0][26] = Thunks[25];
                            ManagedVTables[0][27] = Thunks[26];
                            ManagedVTables[0][28] = Thunks[27];
                            ManagedVTables[0][29] = Thunks[28];
                            VTables.Methods[0] = new Delegate[32];
                        }
                    }
                }

                if (destructorOnly)
                {
                    *(IntPtr**)(instance + 0) = ManagedVTablesDtorOnly[0];
                }
                else
                {
                    *(IntPtr**)(instance + 0) = ManagedVTables[0];
                }
                return VTables;
            }
        }

        protected CppSharp.Runtime.VTables __vtables;
        internal virtual CppSharp.Runtime.VTables __VTables
        { 
            get {
                if (__vtables.IsEmpty)
                    __vtables.Tables = new IntPtr[] { *(IntPtr*)(__Instance + 0) };
                return __vtables;
            }

            set {        
                __vtables = value;
            }
        }

        internal virtual void SetupVTables(bool destructorOnly = false)
        {
            if (__VTables.IsTransient)
                __VTables = VTableLoader.SetupVTables(__Instance, destructorOnly);
        }
        #endregion
    }
}

namespace Std
{
    namespace Pair
    {
        [StructLayout(LayoutKind.Explicit, Size = 80)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__S_CExoString___S_CNWSScriptVar
        {
            [FieldOffset(0)]
            internal global::NWN.LowLevel.CExoString.__Internal first;

            [FieldOffset(16)]
            internal global::NWN.LowLevel.CNWSScriptVar.__Internal second;
        }

        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S_pair__1__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C___S_CachedRulesetEntry
        {
            [FieldOffset(0)]
            internal global::Std.BasicString.__Internalc__N_std_N___cxx11_S_basic_string__C___N_std_S_char_traits__C___N_std_S_allocator__C first;

            [FieldOffset(32)]
            internal global::NWN.LowLevel.CachedRulesetEntry.__Internal second;
        }
    }

}
namespace Std
{
    namespace Hashtable
    {
        [StructLayout(LayoutKind.Explicit, Size = 56)]
        public unsafe partial struct __Internalc__N_std_S__Hashtable____S_CExoString___N_std_S_pair__1S0____S_CNWSScriptVar___N_std_S_allocator__S1____N_std_N___detail_S__Select1st___N_std_S_equal_to__S0____N_std_S_hash__S0____N_std_N___detail_S__Mod_range_hashing___N_std_N___detail_S__Default_ranged_hash___N_std_N___detail_S__Prime_rehash_policy___N_std_N___detail_S__Hashtable_traits__Vb1_Vb0_Vb1
        {
            [FieldOffset(0)]
            internal __IntPtr _M_buckets;

            [FieldOffset(8)]
            internal ulong _M_bucket_count;

            [FieldOffset(16)]
            internal global::Std.Detail.HashNodeBase.__Internal _M_before_begin;

            [FieldOffset(24)]
            internal ulong _M_element_count;

            [FieldOffset(32)]
            internal global::Std.Detail.PrimeRehashPolicy.__Internal _M_rehash_policy;

            [FieldOffset(48)]
            internal __IntPtr _M_single_bucket;
        }
    }
}
